--- Start of openapi-codegen/LICENCE.md ---
# Content omitted for convenience

--- End of openapi-codegen/LICENCE.md ---

--- Start of openapi-codegen/openapi-codegen-logo.svg ---
# Content omitted for convenience

--- End of openapi-codegen/openapi-codegen-logo.svg ---

--- Start of openapi-codegen/README.md ---
<br>
<br>
<br>
<div align="center" style="margin-bottom: 16px">
  <img src="openapi-codegen-logo.svg" width="400px" />
</div>
<br>
<br>

  <div align="center">
    <a href="https://www.npmjs.com/package/@openapi-codegen/cli">
      <img alt="npm" src="https://img.shields.io/npm/v/@openapi-codegen/cli.svg?style=for-the-badge">
    </a>
    <a href="https://github.com/fabien0102/openapi-codegen/blob/main/LICENCE.md">
      <img alt="Read the documentation" src="https://img.shields.io/npm/l/@openapi-codegen/cli.svg?style=for-the-badge">
    </a>
<br>
<br>
    Tooling to give you full type-safety around OpenAPI specs.
  
  </div>

<br>

### You can generate

- TypeScript types
- Type-safe Generic Fetchers
- Type-safe React Query hooks (https://github.com/tanstack/query)

## Getting started

1. **Initialize the generator**

   ```bash
   $ npx @openapi-codegen/cli init
   ```
   
   <img style="max-width: 400px" src="https://user-images.githubusercontent.com/271912/194000679-5a4501b8-5fc0-430c-9217-028bf91a5dcd.gif">

   If you wish to change any of the selections made, you can do so in the generated `openapi-codegen.config.ts` file later..

2. **Start Generation**

   ```bash
   $ npx openapi-codegen gen {namespace}
   ```
   After the code generation is done, you will notice the following files:

   - `{namespace}Fetcher.ts` - defines a function that will make requests to your API.
   - `{namespace}Context.tsx` - the context that provides `{namespace}Fetcher` to other components.
   - `{namespace}Components.tsx` - generated React Query components (if you selected React Query as part of initialization).
   - `{namespace}Schemas.ts` - the generated Typescript types from the provided Open API schemas.

   &nbsp;

   > **Warning**
   > 
   > If `{namespace}Fetcher.ts` or `{namespace}Context.tsx` already exist in the output folder, they will not be replaced. However, `{namespace}Components.tsx` and `{namespace}Schemas.ts` will be re-generated each time based on the Open API spec file provided.

3. **Configure the Fetcher** (optional)

   After the first step you should see a file called `{namespace}Fetcher.ts` in your ouput directory. This file

   By default it uses the built-in Fetch API, you are free to change this to your fetching library of choice (Axios, Got etc.)

   If your Open API spec contains a configured server, then the base URL for all requests will default to that server's URL. If no such configuration exists, you'll need to specify the base URL value.

4. **Install and Configure React Query** (optional)

   If during generator setup you picked `> React Query components`, then you will need to install and configure React Query in order for the generated React hooks to work properly:

   - Install the library
     ```bash
     npm i @tanstack/react-query
     ```
   - Wire up the `QueryClient` as described [here](https://tanstack.com/query/v4/docs/adapters/react-query).

## Philosophy

In software development, communication between components and documentation around it is often no fun.

GraphQL did resolve this by making documentation a part of the tooling (introspection), sadly this is often harder with REST APIs. OpenAPI can be an amazing tool, if, and only if the documentation (spec) and the actual implementation are aligned!

### Backend side

There are two different approaches:

1. The OpenAPI spec is generated from the code (**code first**)
2. The code is generated from the OpenAPI spec (**spec first**)

In either case, there needs to be an integration with the type system of the language, so everything is connected, and as we remove or update something that impacts the final response, this is **automatically** reflected!

This library has chosen the second approach, **spec first**. By doing so, your documentation is not your final (boring) task on the list, but the first and exciting one when adding new functionality! Indeed, you can’t start coding without generating your types (models & controllers) from the specs.

This has multiple benefits:

- You can take your time to think about your API before writing any code!
- You can discuss the API with your team (and discover API design problems earlier)
- You can generate all your validation rules

For example, if you add this object to your schema:

```yaml
SignUpInput:
  type: object
  properties:
    email:
      type: string
      format: email
      maxLength: 255
    password:
      type: string
      maxLength: 255
    firstName:
      type: string
      pattern: ^[0-9a-zA-Z]*$
      maxLength: 255
    lastName:
      type: string
      pattern: ^[0-9a-zA-Z]*$
      maxLength: 255
  required:
    - email
    - password
    - firstName
    - lastName
```

OpenAPI Codegen will be able to generate all the relevant validation (or at least give you the choice to do it).

> **Note**
> You can also attach any custom logic by using the `x-*` tag, the possibilities are endless!

### Frontend side

Having to reverse engineer a backend response is the least productive/fun task ever! However, given a nice OpenAPI specs, we can actually generate nicely typed code for you that lets you interact with your API in a safe manner.

Taking React as example, calling an API can be as simple as this: _(this hooks are using **Tanstack Query** under the hood)_

```tsx
import { useListPets } from "./petStore/petStoreComponents"; // <- output from openapi-codegen

const Example = () => {
  const { data, loading, error } = useListPets();

  // `data` is fully typed and have all documentation from OpenAPI
};
```

> **Note**
> You can also check this blog post about using generated hooks in React https://xata.io/blog/openapi-typesafe-react-query-hooks

And since this generated from the specs, everything is safe at build time!

> **Note**
> If you can’t trust your backend, some runtime validation can be useful to avoid surprises in production 😅

## Configuration

The only thing you need to manage is the configuration.
Everything is typed and self-documented, but just in case, you can find here example configuration below:


### Example Config
```ts
// openapi-codegen.config.ts
import { defineConfig } from "@openapi-codegen/cli";
import {
  generateSchemaTypes,
  generateReactQueryComponents,
  /* generateExpressControllers, */
  /* generateRestfulReactComponents, */
  /* ... */
} from "@openapi-codegen/typescript";

export default defineConfig({
  example: {
    // can be overridden from cli
    from: {
      source: "github",
      owner: "fabien0102",
      repository: "openapi-codegen",
      ref: "main",
      specPath: "examples/spec.yaml",
    },

    // can be overridden from cli
    outputDir: "src/queries",

    to: async (context) => {
      // You can transform the `context.openAPIDocument` here, can be useful to remove internal routes or fixing some known issues in the specs ;)

      // Generate all the schemas types (components & responses)
      const { schemasFiles } = await generateSchemaTypes(context, {
        /* config */
      });

      // Generate all react-query components
      await generateReactQueryComponents(context, {
        /* config*/
        schemasFiles,
      });
    },
  },
});
```

### Plugins
the `@openapi-codegen/cli` supports these generator plugins:
#### **generateSchemaTypes** (frontend/backend)
  generate all schema types for your specification:
  ```ts
   const { schemasFiles } = await generateSchemaTypes(context, {
        /* config */
      });
  ```
output: `{namespace}Schemas.ts`

#### **generateFetchers** (frontend)
  generate all fetchers with types for your specification *needs schemafiles*
  ```ts
     await generateFetchers(context, {
        /* config */
        schemasFiles,
      });
  ```
output: `{namespace}Fetchers.ts`

#### **generateReactQueryComponents** (frontend)
  generate all React Query Components for useQuery() and useMutation()
  ```ts
      await generateReactQueryComponents(context, {
        /* config*/
        schemasFiles,
      });
  ```
  output: `{namespace}Components.ts`
#### **generateReactQueryFunctions** (frontend)
  generate all React Query Functions used for e.g. React-Router 6.6.0+ loader functions
  ```ts
     await generateReactQueryFunctions(context, {
        filenamePrefix,
        schemasFiles,
      });
  ```
  output: `{namespace}Functions.ts`

  example usage in react-route-loader:
  ```ts
  export const routeLoader = (queryClient: QueryClient) =>
    async ({ params }: MyParams) => 
      await queryClient.fetchQuery(...getYourQueryNameQuery({}), {
        /*options*/
      })
  ```
  *more infos: https://reactrouter.com/en/main/guides/data-libs*


You can import any generator into the `to` section, those can be the ones provided by this project or your own custom ones. You have full control of what you are generating!

Have fun!

## Contributors ✨

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align="center"><a href="https://fabien0102.com/"><img src="https://avatars.githubusercontent.com/u/1761469?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Fabien BERNARD</b></sub></a><br /><a href="https://github.com/fabien0102/openapi-codegen/commits?author=fabien0102" title="Code">💻</a> <a href="#design-fabien0102" title="Design">🎨</a> <a href="https://github.com/fabien0102/openapi-codegen/commits?author=fabien0102" title="Documentation">📖</a> <a href="#ideas-fabien0102" title="Ideas, Planning, & Feedback">🤔</a> <a href="#projectManagement-fabien0102" title="Project Management">📆</a> <a href="https://github.com/fabien0102/openapi-codegen/pulls?q=is%3Apr+reviewed-by%3Afabien0102" title="Reviewed Pull Requests">👀</a></td>
    <td align="center"><a href="https://github.com/mpotomin"><img src="https://avatars.githubusercontent.com/u/639406?v=4?s=100" width="100px;" alt=""/><br /><sub><b>mpotomin</b></sub></a><br /><a href="https://github.com/fabien0102/openapi-codegen/commits?author=mpotomin" title="Code">💻</a> <a href="#ideas-mpotomin" title="Ideas, Planning, & Feedback">🤔</a> <a href="https://github.com/fabien0102/openapi-codegen/pulls?q=is%3Apr+reviewed-by%3Ampotomin" title="Reviewed Pull Requests">👀</a></td>
    <td align="center"><a href="https://github.com/micha-f"><img src="https://avatars.githubusercontent.com/u/200647?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Michael Franzkowiak</b></sub></a><br /><a href="https://github.com/fabien0102/openapi-codegen/commits?author=micha-f" title="Documentation">📖</a></td>
    <td align="center"><a href="https://github.com/SferaDev"><img src="https://avatars.githubusercontent.com/u/2181866?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Alexis Rico</b></sub></a><br /><a href="https://github.com/fabien0102/openapi-codegen/commits?author=SferaDev" title="Code">💻</a> <a href="#ideas-SferaDev" title="Ideas, Planning, & Feedback">🤔</a></td>
    <td align="center"><a href="https://ned.im/"><img src="https://avatars.githubusercontent.com/u/271912?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Nedim Arabacı</b></sub></a><br /><a href="#question-needim" title="Answering Questions">💬</a> <a href="https://github.com/fabien0102/openapi-codegen/commits?author=needim" title="Code">💻</a> <a href="#ideas-needim" title="Ideas, Planning, & Feedback">🤔</a></td>
    <td align="center"><a href="https://github.com/antoniel"><img src="https://avatars.githubusercontent.com/u/17225358?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Antoniel Magalhães</b></sub></a><br /><a href="#example-antoniel" title="Examples">💡</a> <a href="https://github.com/fabien0102/openapi-codegen/issues?q=author%3Aantoniel" title="Bug reports">🐛</a></td>
    <td align="center"><a href="https://github.com/DreierF"><img src="https://avatars.githubusercontent.com/u/5631865?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Florian Dreier</b></sub></a><br /><a href="https://github.com/fabien0102/openapi-codegen/commits?author=DreierF" title="Code">💻</a></td>
  </tr>
  <tr>
    <td align="center"><a href="http://fabianalthaus.de"><img src="https://avatars.githubusercontent.com/u/2795534?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Fabian Althaus</b></sub></a><br /><a href="https://github.com/fabien0102/openapi-codegen/commits?author=el-j" title="Code">💻</a></td>
    <td align="center"><a href="https://github.com/ci-vamp"><img src="https://avatars.githubusercontent.com/u/116516277?v=4?s=100" width="100px;" alt=""/><br /><sub><b>ci-vamp</b></sub></a><br /><a href="https://github.com/fabien0102/openapi-codegen/issues?q=author%3Aci-vamp" title="Bug reports">🐛</a> <a href="https://github.com/fabien0102/openapi-codegen/commits?author=ci-vamp" title="Code">💻</a></td>
    <td align="center"><a href="https://twitter.com/oalanoliv"><img src="https://avatars.githubusercontent.com/u/4368481?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Alan Oliveira</b></sub></a><br /><a href="https://github.com/fabien0102/openapi-codegen/commits?author=alan-oliv" title="Code">💻</a></td>
  </tr>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!

--- End of openapi-codegen/README.md ---

--- Start of openapi-codegen/.gitignore ---

# Created by https://www.toptal.com/developers/gitignore/api/windows,macos,node
# Edit at https://www.toptal.com/developers/gitignore?templates=windows,macos,node

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist
lib

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

### Windows ###
# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# End of https://www.toptal.com/developers/gitignore/api/windows,macos,node

.history
--- End of openapi-codegen/.gitignore ---

--- Start of openapi-codegen/package-lock.json ---
# Content omitted for convenience

--- End of openapi-codegen/package-lock.json ---

--- Start of openapi-codegen/package.json ---
# Content omitted for convenience

--- End of openapi-codegen/package.json ---

--- Start of openapi-codegen/.eslintrc.js ---
/**
 * @type {import("eslint").Linter.Config}
 */
module.exports = {
  parser: "@typescript-eslint/parser",

  parserOptions: {
    ecmaVersion: 2020,
    sourceType: "module",
  },
  extends: [
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "plugin:prettier/recommended",
  ],
  rules: {
    "@typescript-eslint/no-var-requires": 0,
    "@typescript-eslint/explicit-module-boundary-types": 0,
  },
};

--- End of openapi-codegen/.eslintrc.js ---

--- Start of openapi-codegen/tsconfig.json ---
# Content omitted for convenience

--- End of openapi-codegen/tsconfig.json ---

--- Start of openapi-codegen/.all-contributorsrc ---
# Content omitted for convenience

--- End of openapi-codegen/.all-contributorsrc ---

--- Start of openapi-codegen/lerna.json ---
# Content omitted for convenience

--- End of openapi-codegen/lerna.json ---

--- Start of openapi-codegen/release-please-config.json ---
# Content omitted for convenience

--- End of openapi-codegen/release-please-config.json ---

--- Start of openapi-codegen/.release-please-manifest.json ---
# Content omitted for convenience

--- End of openapi-codegen/.release-please-manifest.json ---

--- Start of openapi-codegen/.husky/pre-commit ---
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

npx --no-install pretty-quick --staged

--- End of openapi-codegen/.husky/pre-commit ---

--- Start of openapi-codegen/plugins/typescript/CHANGELOG.md ---
# Content omitted for convenience

--- End of openapi-codegen/plugins/typescript/CHANGELOG.md ---

--- Start of openapi-codegen/plugins/typescript/README.md ---
# OpenAPI Codegen typescript

Collection of typescript generators & utils

## Generators

### generateSchemaType

Generate all `#/components` types. This generator is the foundation of other generators.

This is returning `schemasFiles`, the list of generated files (needed as `config` for other generators).

### generateReactQueryComponents

Generate `useQuery` & `useMutation` wrapper from [react-query](https://react-query.tanstack.com/).

Example:

```ts
// openapi-codegen.config.ts

import { defineConfig } from "@openapi-codegen/cli";
import {
  generateReactQueryComponents,
  generateSchemaTypes,
} from "@openapi-codegen/typescript";

export default defineConfig({
  petstore: {
    from: {
      /* file, url or github */
    },
    outputDir: "./petStore",
    to: async (context) => {
      const filenamePrefix = "petStore";
      const { schemasFiles } = await generateSchemaTypes(context, {
        filenamePrefix,
      });
      await generateReactQueryComponents(context, {
        filenamePrefix,
        schemasFiles,
      });
    },
  },
});
```

This generator will generate 3 files:

- `{filenamePrefix}Components.ts`
- `{filenamePrefix}Context.ts`
- `{filenamePrefix}Fetcher.ts`

Only `{filenamePrefix}Components.ts` can’t be manually touch and will be regenerate at every openAPI changes.

The `{filenamePrefix}Context.ts` can be tweak to inject any props in the generated hooks, this is an example with some auth flow.

```ts
// `PetStoreContext.ts`
import type { QueryKey, UseQueryOptions } from "@tanstack/react-query";

export type PetStoreContext = {
  fetcherOptions: {
    /**
     * Headers to inject in the fetcher
     */
    headers?: {};
    /**
     * Query params to inject in the fetcher
     */
    queryParams?: {};
  };
  queryOptions: {
    /**
     * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.
     * Defaults to `true`.
     */
    enabled?: boolean;
  };
  /**
   * Query key middleware.
   */
  queryKeyFn: (queryKey: QueryKey) => QueryKey;
};

/**
 * Context injected into every react-query hook wrappers
 *
 * @param queryOptions options from the useQuery wrapper
 */
export function usePetStoreContext<
  TQueryFnData = unknown,
  TError = unknown,
  TData = TQueryFnData,
  TQueryKey extends QueryKey = QueryKey
>(
  queryOptions?: Omit<
    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,
    "queryKey" | "queryFn"
  >
): BadassContext {
  const token = window.localStorage.getItem("token");

  return {
    fetcherOptions: {
      headers: {
        authorization: token ? `Bearer ${token}` : undefined,
      },
    },
    queryOptions: {
      enabled: Boolean(token) && (queryOptions?.enabled ?? true),
    },
    queryKeyFn: (queryKey) => queryKey,
  };
}
```

You also need to tweak `{filenamePrefix}Fetcher.ts`, to inject your `baseUrl` and adjust the error management part to fullfil the `ErrorType` (you can search for the `TODO` keyword).

#### Usage

First of all, we need to have a working react-query context (more information [here](https://react-query.tanstack.com/quick-start)).

Now that we have all this generated code and properly configured `{filenamePrefix}Fetcher.ts` to talk to the correct server. This is time to try!

Assuming that you have a route with the verb `GET` and the `operationId` as `listPets`. You can simply use `useListPets` in a react component.

```tsx
import { useListPets } from "./petstoreComponents";

export const MyPage = () => {
  const { data, isLoading, error } = useListPets(["listPets"]); // <- You need to add the react-query cache key

  return <div>{JSON.stringify({ data, isLoading, error })}</div>;
};
```

And for any mutation.

```tsx
import { useUpdatePet } from "./pestoreComponents";

export const MyPage = () => {
  const { mutate: updatePet } = useUpdatePet();

  return (
    <button
      onClick={() =>
        updatePet({ pathParams: { id: "2" }, body: { name: "Biscuit" } })
      }
    >
      Give a cute name
    </button>
  );
};
```

### generateFetchers

Generate some generic fetchers, `{filenamePrefix}Fetcher.ts` can be customized to fit your needs.

`{filenamePrefix}Components.ts` will use this fetcher with the OpenAPI types passed as generic.

## Utils

### renameComponent

Rename a component name in openAPI document and all related $ref.

Example:

```ts
// openapi-codegen.config.ts

import { defineConfig } from "@openapi-codegen/cli";
import {
  generateReactQueryComponents,
  generateSchemaTypes,
  renameComponent,
} from "@openapi-codegen/typescript";

export default defineConfig({
  myAPI: {
    from: {
      /* file, url or github */
    },
    outputDir: "./myAPI",
    to: async (context) => {
      // Rename `Foo` to `Bar`
      context.openAPIDocument = renameComponent({
        openAPIDocument: context.openAPIDocument,
        from: "#/components/schemas/Foo",
        to: "#/components/schemas/Bar",
      });

      const filenamePrefix = "myAPI";
      const { schemasFiles } = await generateSchemaTypes(context, {
        filenamePrefix,
      });
      await generateReactQueryComponents(context, {
        filenamePrefix,
        schemasFiles,
      });
    },
  },
});
```

### forceReactQueryComponent

Force the generation of a specific react-query hook.

Example:

```ts
// openapi-codegen.config.ts

import { defineConfig } from "@openapi-codegen/cli";
import {
  generateReactQueryComponents,
  generateSchemaTypes,
  renameComponent,
} from "@openapi-codegen/typescript";

export default defineConfig({
  myAPI: {
    from: {
      /* file, url or github */
    },
    outputDir: "./myAPI",
    to: async (context) => {
      // Force the usage of `useQuery` for listPets
      context.openAPIDocument = forceReactQueryComponent({
        openAPIDocument: contextOpenAPIDocument
        component: "useQuery",
        operationId: "listPets"
      })

      const filenamePrefix = "myAPI";
      const { schemasFiles } = await generateSchemaTypes(context, {
        filenamePrefix,
      });
      await generateReactQueryComponents(context, {
        filenamePrefix,
        schemasFiles,
      });
    },
  },
});
```

## Custom OpenAPI extensions

| Property                    | Description                                         | Type                      |
| --------------------------- | --------------------------------------------------- | ------------------------- |
| x-openapi-codegen-component | Force the generation of a specific react-query hook | "useMutate" \| "useQuery" |

--- End of openapi-codegen/plugins/typescript/README.md ---

--- Start of openapi-codegen/plugins/typescript/tsconfig.package.json ---
# Content omitted for convenience

--- End of openapi-codegen/plugins/typescript/tsconfig.package.json ---

--- Start of openapi-codegen/plugins/typescript/package.json ---
# Content omitted for convenience

--- End of openapi-codegen/plugins/typescript/package.json ---

--- Start of openapi-codegen/plugins/typescript/tsconfig.json ---
# Content omitted for convenience

--- End of openapi-codegen/plugins/typescript/tsconfig.json ---

--- Start of openapi-codegen/plugins/typescript/src/testUtils.ts ---
import ts from "typescript";

const sourceFile = ts.createSourceFile("index.ts", "", ts.ScriptTarget.Latest);

const printer = ts.createPrinter({
  newLine: ts.NewLineKind.LineFeed,
  removeComments: false,
});

/**
 * Print a typescript node
 */
export const print = (node: ts.Node) =>
  printer.printNode(ts.EmitHint.Unspecified, node, sourceFile);

--- End of openapi-codegen/plugins/typescript/src/testUtils.ts ---

--- Start of openapi-codegen/plugins/typescript/src/index.ts ---
// Generators
export { generateSchemaTypes } from "./generators/generateSchemaTypes";
export { generateReactQueryComponents } from "./generators/generateReactQueryComponents";
export { generateReactQueryFunctions } from "./generators/generateReactQueryFunctions";
export { generateFetchers } from "./generators/generateFetchers";

// Utils
export { renameComponent } from "./utils/renameComponent";
export { forceReactQueryComponent } from "./utils/forceReactQueryComponent";
export { addPathParam } from "./utils/addPathParam";

--- End of openapi-codegen/plugins/typescript/src/index.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/schemaToEnumDeclaration.ts ---
import { pascal } from "case";
import { SchemaObject } from "openapi3-ts";
import ts, { factory as f } from "typescript";
import { convertNumberToWord } from "../utils/getEnumProperties";
import { Context, getJSDocComment } from "./schemaToTypeAliasDeclaration";

/**
 * Add Enum support when transforming an OpenAPI Schema Object to Typescript Nodes.
 *
 * @param name Name of the schema
 * @param schema OpenAPI Schema object
 * @param context Context
 */
export const schemaToEnumDeclaration = (
  name: string,
  schema: SchemaObject,
  context: Context
): ts.Node[] => {
  const jsDocNode = getJSDocComment(schema, context);
  const members = getEnumMembers(schema, context);
  const declarationNode = f.createEnumDeclaration(
    [f.createModifier(ts.SyntaxKind.ExportKeyword)],
    pascal(name),
    members
  );

  return jsDocNode ? [jsDocNode, declarationNode] : [declarationNode];
};

function getEnumMembers(
  schema: SchemaObject,
  context: Context
): ts.EnumMember[] {
  if (!schema.enum || !Array.isArray(schema.enum)) {
    throw new Error(
      "The provided schema does not have an 'enum' property or it is not an array."
    );
  }

  return schema.enum.map((enumValue, index) => {
    let enumName: string;
    let enumValueNode: ts.Expression | undefined = undefined;

    if (typeof enumValue === "string") {
      enumName = enumValue;
      enumValueNode = f.createStringLiteral(enumValue);
    } else if (typeof enumValue === "number") {
      enumName = convertNumberToWord(enumValue)
        .toUpperCase()
        .replace(/[-\s]/g, "_");
      enumValueNode = f.createNumericLiteral(enumValue);
    } else if (typeof enumValue === "boolean") {
      enumName = enumValue ? "True" : "False";
    } else {
      throw new Error(`Unsupported enum value type: ${typeof enumValue}`);
    }

    return f.createEnumMember(f.createIdentifier(enumName), enumValueNode);
  });
}

--- End of openapi-codegen/plugins/typescript/src/core/schemaToEnumDeclaration.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/camelizedPathParams.ts ---
import { camel } from "case";

/**
 * Transform url params case to camel.
 *
 * @example
 * `pet/{pet_id}` -> `pet/{petId}`
 */
export const camelizedPathParams = (url: string) =>
  url.replace(/\{[\w\d\-_.]*\}/g, (match) => `{${camel(match)}}`);

--- End of openapi-codegen/plugins/typescript/src/core/camelizedPathParams.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getErrorResponseType.test.ts ---
import { ResponseObject } from "openapi3-ts";
import { print } from "../testUtils";
import { getErrorResponseType } from "./getErrorResponseType";

describe("getErrorResponseType", () => {
  it("should generate a simple error", () => {
    expect(
      print(
        getErrorResponseType({
          responses: {
            "200": createResponse("Success"),
            "500": createResponse("SimpleError"),
          },

          printNodes: (nodes) => nodes.map(print).join("\n"),
        })
      )
    ).toMatchInlineSnapshot(`
      "Fetcher.ErrorWrapper<{
          status: 500;
          payload: Schemas.SimpleError;
      }>"
    `);
  });

  it("should combine multiple errors", () => {
    expect(
      print(
        getErrorResponseType({
          responses: {
            "404": createResponse("NotFoundError"),
            "500": createResponse("SimpleError"),
          },

          printNodes: (nodes) => nodes.map(print).join("\n"),
        })
      )
    ).toMatchInlineSnapshot(`
      "Fetcher.ErrorWrapper<{
          status: 404;
          payload: Schemas.NotFoundError;
      } | {
          status: 500;
          payload: Schemas.SimpleError;
      }>"
    `);
  });

  it("should generate undefined if no error provided", () => {
    expect(
      print(
        getErrorResponseType({
          responses: {},
          printNodes: (nodes) => nodes.map(print).join("\n"),
        })
      )
    ).toEqual("Fetcher.ErrorWrapper<undefined>");
  });

  it("should deal with default rule", () => {
    expect(
      print(
        getErrorResponseType({
          responses: {
            default: createResponse("SimpleError"),
          },

          printNodes: (nodes) => nodes.map(print).join("\n"),
        })
      )
    ).toMatchInlineSnapshot(`
      "Fetcher.ErrorWrapper<{
          status: ClientErrorStatus | ServerErrorStatus;
          payload: Schemas.SimpleError;
      }>"
    `);
  });

  it("should deal with default rule (with 4xx)", () => {
    expect(
      print(
        getErrorResponseType({
          responses: {
            "4xx": createResponse("ClientError"),
            default: createResponse("DefaultError"),
          },

          printNodes: (nodes) => nodes.map(print).join("\n"),
        })
      )
    ).toMatchInlineSnapshot(`
      "Fetcher.ErrorWrapper<{
          status: ClientErrorStatus;
          payload: Schemas.ClientError;
      } | {
          status: ServerErrorStatus;
          payload: Schemas.DefaultError;
      }>"
    `);
  });

  it("should deal with default rule (with 5xx)", () => {
    expect(
      print(
        getErrorResponseType({
          responses: {
            "5xx": createResponse("ServerError"),
            default: createResponse("DefaultError"),
          },

          printNodes: (nodes) => nodes.map(print).join("\n"),
        })
      )
    ).toMatchInlineSnapshot(`
      "Fetcher.ErrorWrapper<{
          status: ServerErrorStatus;
          payload: Schemas.ServerError;
      } | {
          status: ClientErrorStatus;
          payload: Schemas.DefaultError;
      }>"
    `);
  });

  it("should deal with 4xx rule", () => {
    expect(
      print(
        getErrorResponseType({
          responses: {
            422: createResponse("ValidationError"),
            "4xx": createResponse("ClientError"),
          },

          printNodes: (nodes) => nodes.map(print).join("\n"),
        })
      )
    ).toMatchInlineSnapshot(`
      "Fetcher.ErrorWrapper<{
          status: 422;
          payload: Schemas.ValidationError;
      } | {
          status: Exclude<ClientErrorStatus, 422>;
          payload: Schemas.ClientError;
      }>"
    `);
  });

  it("should deal with 5xx rule", () => {
    expect(
      print(
        getErrorResponseType({
          responses: {
            501: createResponse("NotImplementedError"),
            503: createResponse("NotAvailableError"),
            "5xx": createResponse("ServerError"),
          },

          printNodes: (nodes) => nodes.map(print).join("\n"),
        })
      )
    ).toMatchInlineSnapshot(`
      "Fetcher.ErrorWrapper<{
          status: 501;
          payload: Schemas.NotImplementedError;
      } | {
          status: 503;
          payload: Schemas.NotAvailableError;
      } | {
          status: Exclude<ServerErrorStatus, 501 | 503>;
          payload: Schemas.ServerError;
      }>"
    `);
  });

  it("should deal with a mix of all rules", () => {
    expect(
      print(
        getErrorResponseType({
          responses: {
            422: createResponse("ValidationError"),
            501: createResponse("NotImplementedError"),
            503: createResponse("NotAvailableError"),
            "5xx": createResponse("ServerError"),
            default: createResponse("DefaultError"),
          },

          printNodes: (nodes) => nodes.map(print).join("\n"),
        })
      )
    ).toMatchInlineSnapshot(`
      "Fetcher.ErrorWrapper<{
          status: 422;
          payload: Schemas.ValidationError;
      } | {
          status: 501;
          payload: Schemas.NotImplementedError;
      } | {
          status: 503;
          payload: Schemas.NotAvailableError;
      } | {
          status: Exclude<ServerErrorStatus, 501 | 503>;
          payload: Schemas.ServerError;
      } | {
          status: Exclude<ClientErrorStatus, 422>;
          payload: Schemas.DefaultError;
      }>"
    `);
  });
});

// Helpers
const createResponse = (refName: string): ResponseObject => ({
  description: "a response",
  content: {
    "application/json": {
      schema: {
        $ref: `#/components/schemas/${refName}`,
      },
    },
  },
});

--- End of openapi-codegen/plugins/typescript/src/core/getErrorResponseType.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getOperationTypes.ts ---
import { pascal } from "case";
import { OpenAPIObject, OperationObject, PathItemObject } from "openapi3-ts";
import ts, { factory as f } from "typescript";

import { getParamsGroupByType } from "./getParamsGroupByType";
import { getRequestBodyType } from "./getRequestBodyType";
import { getDataResponseType } from "./getDataResponseType";
import { getVariablesType } from "./getVariablesType";
import { isRequestBodyOptional } from "./isRequestBodyOptional";
import { paramsToSchema } from "./paramsToSchema";
import { schemaToTypeAliasDeclaration } from "./schemaToTypeAliasDeclaration";
import { getErrorResponseType } from "./getErrorResponseType";

export type GetOperationTypesOptions = {
  operationId: string;
  operation: OperationObject;
  openAPIDocument: OpenAPIObject;
  injectedHeaders?: string[];
  pathParameters?: PathItemObject["parameters"];
  printNodes: (nodes: ts.Node[]) => string;
  variablesExtraPropsType: ts.TypeNode;
};

export type GetOperationTypesOutput = {
  dataType: ts.TypeNode;
  errorType: ts.TypeNode;
  requestBodyType: ts.TypeNode;
  pathParamsType: ts.TypeNode;
  variablesType: ts.TypeNode;
  queryParamsType: ts.TypeNode;
  headersType: ts.TypeNode;
  declarationNodes: ts.Node[];
};

/**
 * Get operation types (data, error, params) and associated declaration nodes.
 */
export const getOperationTypes = ({
  operationId,
  operation,
  openAPIDocument,
  printNodes,
  pathParameters = [],
  injectedHeaders = [],
  variablesExtraPropsType,
}: GetOperationTypesOptions): GetOperationTypesOutput => {
  const declarationNodes: ts.Node[] = [];

  // Retrieve dataType
  let dataType = getDataResponseType({
    responses: operation.responses,
    components: openAPIDocument.components,
    printNodes,
  });

  // Retrieve errorType
  let errorType = getErrorResponseType({
    responses: operation.responses,
    components: openAPIDocument.components,
    printNodes,
  });

  // Retrieve requestBodyType
  let requestBodyType = getRequestBodyType({
    requestBody: operation.requestBody,
    components: openAPIDocument.components,
  });

  // Generate params types
  const { pathParams, queryParams, headerParams } = getParamsGroupByType(
    [...pathParameters, ...(operation.parameters || [])],
    openAPIDocument.components
  );

  // Check if types can be marked as optional (all properties are optional)
  const requestBodyOptional = isRequestBodyOptional({
    requestBody: operation.requestBody,
    components: openAPIDocument.components,
  });
  const headersOptional = headerParams.reduce((mem, p) => {
    if (injectedHeaders.includes(p.name)) return mem;
    return mem && !p.required;
  }, true);
  const pathParamsOptional = pathParams.reduce((mem, p) => {
    return mem && !p.required;
  }, true);
  const queryParamsOptional = queryParams.reduce((mem, p) => {
    return mem && !p.required;
  }, true);

  if (pathParams.length > 0) {
    declarationNodes.push(
      ...schemaToTypeAliasDeclaration(
        `${operationId}PathParams`,
        paramsToSchema(pathParams),
        {
          currentComponent: null,
          openAPIDocument,
        }
      )
    );
  }

  if (queryParams.length > 0) {
    declarationNodes.push(
      ...schemaToTypeAliasDeclaration(
        `${operationId}QueryParams`,
        paramsToSchema(queryParams),
        {
          currentComponent: null,
          openAPIDocument,
        }
      )
    );
  }

  if (headerParams.length > 0) {
    declarationNodes.push(
      ...schemaToTypeAliasDeclaration(
        `${operationId}Headers`,
        paramsToSchema(headerParams, injectedHeaders),
        {
          currentComponent: null,
          openAPIDocument,
        }
      )
    );
  }

  // Export error type
  const errorTypeIdentifier = pascal(`${operationId}Error`);
  declarationNodes.push(
    f.createTypeAliasDeclaration(
      [f.createModifier(ts.SyntaxKind.ExportKeyword)],
      f.createIdentifier(errorTypeIdentifier),
      undefined,
      errorType
    )
  );

  errorType = f.createTypeReferenceNode(errorTypeIdentifier);

  // Export data type if needed
  if (shouldExtractNode(dataType)) {
    const dataTypeIdentifier = pascal(`${operationId}Response`);
    declarationNodes.push(
      f.createTypeAliasDeclaration(
        [f.createModifier(ts.SyntaxKind.ExportKeyword)],
        f.createIdentifier(dataTypeIdentifier),
        undefined,
        dataType
      )
    );

    dataType = f.createTypeReferenceNode(dataTypeIdentifier);
  }

  // Export requestBody type if needed
  if (shouldExtractNode(requestBodyType)) {
    const requestBodyIdentifier = pascal(`${operationId}RequestBody`);
    declarationNodes.push(
      f.createTypeAliasDeclaration(
        [f.createModifier(ts.SyntaxKind.ExportKeyword)],
        f.createIdentifier(requestBodyIdentifier),
        undefined,
        requestBodyType
      )
    );

    requestBodyType = f.createTypeReferenceNode(requestBodyIdentifier);
  }

  const pathParamsType =
    pathParams.length > 0
      ? f.createTypeReferenceNode(`${pascal(operationId)}PathParams`)
      : f.createTypeLiteralNode([]);

  const queryParamsType =
    queryParams.length > 0
      ? f.createTypeReferenceNode(`${pascal(operationId)}QueryParams`)
      : f.createTypeLiteralNode([]);

  const headersType =
    headerParams.length > 0
      ? f.createTypeReferenceNode(`${pascal(operationId)}Headers`)
      : f.createTypeLiteralNode([]);

  // Generate fetcher variables type
  const variablesIdentifier = pascal(`${operationId}Variables`);

  let variablesType: ts.TypeNode = getVariablesType({
    requestBodyType,
    headersType,
    pathParamsType,
    queryParamsType,
    headersOptional,
    pathParamsOptional,
    queryParamsOptional,
    requestBodyOptional,
  });

  if (variablesExtraPropsType.kind !== ts.SyntaxKind.VoidKeyword) {
    variablesType =
      variablesType.kind === ts.SyntaxKind.VoidKeyword
        ? variablesExtraPropsType
        : f.createIntersectionTypeNode([
            variablesType,
            variablesExtraPropsType,
          ]);
  }

  if (variablesType.kind !== ts.SyntaxKind.VoidKeyword) {
    declarationNodes.push(
      f.createTypeAliasDeclaration(
        [f.createModifier(ts.SyntaxKind.ExportKeyword)],
        f.createIdentifier(variablesIdentifier),
        undefined,
        variablesType
      )
    );

    variablesType = f.createTypeReferenceNode(variablesIdentifier);
  }

  return {
    dataType,
    errorType,
    declarationNodes,
    headersType,
    pathParamsType,
    queryParamsType,
    requestBodyType,
    variablesType,
  };
};

/**
 * Define if the type should be extracted.
 */
const shouldExtractNode = (node: ts.Node) =>
  ts.isIntersectionTypeNode(node) ||
  (ts.isTypeLiteralNode(node) && node.members.length > 0) ||
  ts.isArrayTypeNode(node);

--- End of openapi-codegen/plugins/typescript/src/core/getOperationTypes.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/paramsToSchema.test.ts ---
import { ParameterObject } from "openapi3-ts";
import { paramsToSchema } from "./paramsToSchema";

describe("paramsToSchema", () => {
  const params: ParameterObject[] = [
    {
      name: "breed",
      required: true,
      schema: {
        $ref: "#/components/schemas/Breed",
      },
      in: "path",
    },
    {
      name: "color",
      description: "The color of the pet",
      schema: {
        type: "string",
      },
      required: true,
      in: "path",
    },
    {
      name: "age",
      schema: {
        type: "number",
      },
      required: true,
      in: "path",
    },
  ];

  it("should convert params to an openAPI schema", () => {
    expect(paramsToSchema(params)).toMatchInlineSnapshot(`
      Object {
        "properties": Object {
          "age": Object {
            "description": undefined,
            "type": "number",
          },
          "breed": Object {
            "$ref": "#/components/schemas/Breed",
            "description": undefined,
          },
          "color": Object {
            "description": "The color of the pet",
            "type": "string",
          },
        },
        "required": Array [
          "breed",
          "color",
          "age",
        ],
        "type": "object",
      }
    `);
  });

  it("should deal with optional parameters", () => {
    expect(paramsToSchema(params, ["age"])).toMatchInlineSnapshot(`
      Object {
        "properties": Object {
          "age": Object {
            "description": undefined,
            "type": "number",
          },
          "breed": Object {
            "$ref": "#/components/schemas/Breed",
            "description": undefined,
          },
          "color": Object {
            "description": "The color of the pet",
            "type": "string",
          },
        },
        "required": Array [
          "breed",
          "color",
        ],
        "type": "object",
      }
    `);
  });

  it("should camelized every properties (pathParam)", () => {
    const schema = paramsToSchema([
      {
        in: "path",
        name: "I am a monster",
        schema: {
          type: "string",
        },
      },
    ]);

    expect(schema).toMatchInlineSnapshot(`
      Object {
        "properties": Object {
          "iAmAMonster": Object {
            "description": undefined,
            "type": "string",
          },
        },
        "required": Array [],
        "type": "object",
      }
    `);
  });

  it("should not camelized every properties (queryParams)", () => {
    const schema = paramsToSchema([
      {
        in: "query",
        name: "I am a monster",
        schema: {
          type: "string",
        },
      },
    ]);

    expect(schema).toMatchInlineSnapshot(`
      Object {
        "properties": Object {
          "I am a monster": Object {
            "description": undefined,
            "type": "string",
          },
        },
        "required": Array [],
        "type": "object",
      }
    `);
  });
});

--- End of openapi-codegen/plugins/typescript/src/core/paramsToSchema.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getUsedImports.ts ---
import { camel } from "case";
import { get } from "lodash";
import ts, { factory as f } from "typescript";
import { createNamedImport } from "./createNamedImport";
import { createNamespaceImport } from "./createNamespaceImport";
import { clientErrorStatus, serverErrorStatus } from "./getErrorResponseType";

/**
 * Generate the needed imports regarding the generated nodes usage.
 *
 * @param nodes generated nodes
 * @param files files path for dependencies
 */
export const getUsedImports = (
  nodes: ts.Node[],
  files: {
    requestBodies: string;
    schemas: string;
    parameters: string;
    responses: string;
    utils: string;
  }
): { keys: string[]; nodes: ts.Node[] } => {
  const imports: Record<
    keyof typeof files,
    | { type: "namespace"; used: boolean; namespace: string; from: string }
    | { type: "named"; used: boolean; imports: Set<string>; from: string }
  > = {
    parameters: {
      type: "namespace",
      used: false,
      namespace: "Parameters",
      from: files.parameters,
    },
    schemas: {
      type: "namespace",
      used: false,
      namespace: "Schemas",
      from: files.schemas,
    },
    requestBodies: {
      type: "namespace",
      used: false,
      namespace: "RequestBodies",
      from: files.requestBodies,
    },
    responses: {
      type: "namespace",
      used: false,
      namespace: "Responses",
      from: files.responses,
    },
    utils: {
      type: "named",
      used: false,
      from: files.utils,
      imports: new Set(),
    },
  };

  const visitor: ts.Visitor = (node) => {
    if (ts.isQualifiedName(node)) {
      // We can’t use `node.left.getText()` because the node is not compiled (no internal `text` property)
      const text = camel(get(node.left, "escapedText", "") as string);
      if (text in imports) {
        imports[text as keyof typeof imports].used = true;
      }
    }
    if (imports.utils.type === "named" && ts.isTypeReferenceNode(node)) {
      if (get(node.typeName, "escapedText", "") === clientErrorStatus) {
        imports.utils.used = true;
        imports.utils.imports.add(clientErrorStatus);
      }
      if (get(node.typeName, "escapedText", "") === serverErrorStatus) {
        imports.utils.used = true;
        imports.utils.imports.add(serverErrorStatus);
      }
    }
    return node.forEachChild(visitor);
  };

  ts.visitNodes(f.createNodeArray(nodes), visitor);

  const usedImports = Object.entries(imports).filter(([_key, i]) => i.used);

  return {
    keys: usedImports.map(([key]) => key),
    nodes: usedImports.map(([_key, i]) => {
      if (i.type === "namespace") {
        return createNamespaceImport(i.namespace, `./${i.from}`);
      } else {
        return createNamedImport(Array.from(i.imports.values()), `./${i.from}`, true);
      }
    }),
  };
};

--- End of openapi-codegen/plugins/typescript/src/core/getUsedImports.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/schemaToTypeAliasDeclaration.test.ts ---
import { OpenAPIObject, ReferenceObject, SchemaObject } from "openapi3-ts";
import ts from "typescript";
import {
  OpenAPIComponentType,
  schemaToTypeAliasDeclaration,
} from "./schemaToTypeAliasDeclaration";

describe("schemaToTypeAliasDeclaration", () => {
  it("should generate null", () => {
    const schema: SchemaObject = {
      type: "null",
    };

    expect(printSchema(schema)).toBe("export type Test = null;");
  });

  it("should generate integer", () => {
    const schema: SchemaObject = {
      type: "integer",
    };

    expect(printSchema(schema)).toBe("export type Test = number;");
  });

  it("should generate string", () => {
    const schema: SchemaObject = {
      type: "string",
    };

    expect(printSchema(schema)).toBe("export type Test = string;");
  });

  it("should generate boolean", () => {
    const schema: SchemaObject = {
      type: "boolean",
    };

    expect(printSchema(schema)).toBe("export type Test = boolean;");
  });

  it("should generate a nullable value", () => {
    const schema: SchemaObject = {
      type: "integer",
      nullable: true,
    };

    expect(printSchema(schema)).toBe("export type Test = number | null;");
  });

  it("should generate an array of numbers", () => {
    const schema: SchemaObject = {
      type: "array",
      items: {
        type: "integer",
      },
    };

    expect(printSchema(schema)).toBe("export type Test = number[];");
  });

  it("should generate enums (strings)", () => {
    const schema: SchemaObject = {
      type: "string",
      enum: ["foo", "bar", "baz"],
    };

    expect(printSchema(schema)).toBe(
      `export type Test = "foo" | "bar" | "baz";`
    );
  });

  it("should reference to an previously created enum", () => {
    const schema: SchemaObject = {
      type: "object",
      properties: {
        status: {
          type: "string",
          enum: ["AVAILABLE", "PENDING", "SOLD"],
        },
      },
      xml: { name: "pet" },
    };

    const components: OpenAPIObject["components"] = {
      schemas: {
        Pet: schema,
      },
    };

    expect(printSchema(schema, "schemas", components, true))
      .toMatchInlineSnapshot(`
      "export type Test = {
          status?: TestStatus;
      };"
    `);
  });

  it("should generate nullable enums (strings)", () => {
    const schema: SchemaObject = {
      type: "string",
      enum: ["foo", "bar", "baz"],
      nullable: true,
    };

    expect(printSchema(schema)).toBe(
      `export type Test = "foo" | "bar" | "baz" | null;`
    );
  });

  it("should generate enums (numbers)", () => {
    const schema: SchemaObject = {
      type: "integer",
      enum: [1, 2, 3],
    };

    expect(printSchema(schema)).toBe(`export type Test = 1 | 2 | 3;`);
  });

  it("should skip example which contains `*/` to avoid confusion", () => {
    const schema: SchemaObject = {
      title: "CronTimingCreate",
      required: ["type", "cron_expression"],
      type: "object",
      properties: {
        cron_expression: {
          title: "Cron Expression",
          type: "string",
          description: "The string representing the timing's cron expression.",
          format: "cron-string",
          example: "*/5 * * * *", // `*/` is conflicting the multiline comment syntax
        },
      },
      additionalProperties: false,
      description: "Cron timing schema for create requests.",
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "/**
       * Cron timing schema for create requests.
       */
      export type Test = {
          /**
           * The string representing the timing's cron expression.
           *
           * @format cron-string
           * @example [see original specs]
           */
          cron_expression: string;
      };"
    `);
  });

  it("should generate top-level documentation", () => {
    const schema: SchemaObject = {
      type: "null",
      description: "I’m null",
      maximum: 43,
      minimum: 42,
      default: "42",
      format: "int32",
      deprecated: true,
      exclusiveMaximum: true,
      exclusiveMinimum: false,
      example: "I’m an example",
      "x-test": "plop",
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "/**
       * I’m null
       * 
       * @maximum 43
       * @minimum 42
       * @default 42
       * @format int32
       * @deprecated true
       * @exclusiveMaximum true
       * @exclusiveMinimum false
       * @example I’m an example
       * @x-test plop
       */
      export type Test = null;"
    `);
  });

  it("should generate multiple examples", () => {
    const schema: SchemaObject = {
      type: "null",
      examples: ["first example", "second example"],
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "/**
       * @example first example
       * @example second example
       */
      export type Test = null;"
    `);
  });

  it("should generate multiple examples (with singular)", () => {
    const schema: SchemaObject = {
      type: "null",
      example: ["first example", "second example"],
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "/**
       * @example first example
       * @example second example
       */
      export type Test = null;"
    `);
  });

  it("should generate an object", () => {
    const schema: SchemaObject = {
      type: "object",
      description: "An object",
      properties: {
        foo: {
          description: "I’m a foo",
          default: "boom",
          type: "string",
        },
        bar: {
          minimum: 0,
          maximum: 42,
          type: "number",
        },
        baz: {
          type: "boolean",
        },
      },
      required: ["foo"],
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "/**
       * An object
       */
      export type Test = {
          /**
           * I’m a foo
           *
           * @default boom
           */
          foo: string;
          /**
           * @minimum 0
           * @maximum 42
           */
          bar?: number;
          baz?: boolean;
      };"
    `);
  });

  it("should generate an object with escaped keys", () => {
    const schema: SchemaObject = {
      type: "object",
      properties: {
        ["foo.bar"]: {
          type: "string",
        },
      },
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export type Test = {
          [\\"foo.bar\\"]?: string;
      };"
    `);
  });

  it("should generate a nested object", () => {
    const schema: SchemaObject = {
      type: "object",
      description: "An object",
      properties: {
        foo: {
          description: "I’m a foo",
          default: "boom",
          type: "object",
          properties: {
            bar: {
              minimum: 0,
              maximum: 42,
              type: "number",
            },
            baz: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  oh: {
                    default: "yeah",
                    type: "string",
                  },
                },
              },
            },
          },
        },
      },
      required: ["foo"],
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "/**
       * An object
       */
      export type Test = {
          /**
           * I’m a foo
           *
           * @default boom
           */
          foo: {
              /**
               * @minimum 0
               * @maximum 42
               */
              bar?: number;
              baz?: {
                  /**
                   * @default yeah
                   */
                  oh?: string;
              }[];
          };
      };"
    `);
  });

  it("should resolve ref", () => {
    const schema: ReferenceObject = {
      $ref: "#/components/schemas/User",
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(
      `"export type Test = User;"`
    );
  });

  it("should resolve ref (with custom prefix)", () => {
    const schema: ReferenceObject = {
      $ref: "#/components/schemas/User",
    };

    expect(printSchema(schema, "parameters")).toMatchInlineSnapshot(
      `"export type Test = Schemas.User;"`
    );
  });

  it("should generate a free form object (1)", () => {
    const schema: SchemaObject = {
      type: "object",
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(
      `"export type Test = Record<string, any>;"`
    );
  });

  it("should generate a free form object (2)", () => {
    const schema: SchemaObject = {
      type: "object",
      additionalProperties: true,
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export type Test = {
          [key: string]: any;
      };"
    `);
  });

  it("should generate a free form object (3)", () => {
    const schema: SchemaObject = {
      type: "object",
      additionalProperties: {},
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export type Test = {
          [key: string]: any;
      };"
    `);
  });

  it("should generate an object with additional properties", () => {
    const schema: SchemaObject = {
      type: "object",
      properties: {
        foo: { type: "string" },
        bar: { type: "number" },
      },
      required: ["bar"],
      additionalProperties: {
        type: "array",
        items: {
          $ref: "#/components/schemas/Foo",
        },
      },
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export type Test = {
          foo?: string;
          bar: number;
      } & {
          [key: string]: Foo[];
      };"
    `);
  });

  it("should generate an object with additional properties as true", () => {
    const schema: SchemaObject = {
      type: "object",
      properties: {
        foo: { type: "string" },
        bar: { type: "number" },
      },
      required: ["bar"],
      additionalProperties: true,
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export type Test = {
          foo?: string;
          bar: number;
      } & {
          [key: string]: any;
      };"
    `);
  });

  it("should generate an object with additional properties as empty object", () => {
    const schema: SchemaObject = {
      type: "object",
      properties: {
        foo: { type: "string" },
        bar: { type: "number" },
      },
      required: ["bar"],
      additionalProperties: {},
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export type Test = {
          foo?: string;
          bar: number;
      } & {
          [key: string]: any;
      };"
    `);
  });

  it("should handle implicit object", () => {
    const schema: SchemaObject = {
      properties: {
        foo: { type: "string" },
        bar: { type: "number" },
      },
      required: ["bar"],
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export type Test = {
          foo?: string;
          bar: number;
      };"
    `);
  });

  it("should handle implicit array", () => {
    const schema: SchemaObject = {
      items: {
        $ref: "#/components/schemas/Foo",
      },
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(
      `"export type Test = Foo[];"`
    );
  });

  it("should generate void", () => {
    const schema: SchemaObject = {};

    expect(printSchema(schema)).toMatchInlineSnapshot(
      `"export type Test = void;"`
    );
  });

  it("should generate a oneOf", () => {
    const schema: SchemaObject = {
      oneOf: [{ type: "string" }, { type: "number" }],
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(
      `"export type Test = string | number;"`
    );
  });

  describe("discrimination", () => {
    const schema: SchemaObject = {
      oneOf: [
        { $ref: "#/components/schemas/Foo" },
        { $ref: "#/components/schemas/Bar" },
        { $ref: "#/components/schemas/Baz" },
      ],
      discriminator: {
        propertyName: "discriminatorPropertyName",
        mapping: {
          foo: "#/components/schemas/Foo",
          bar: "#/components/schemas/Bar",
          baz: "#/components/schemas/Baz",
        },
      },
    };

    it("should omit the base value if present", () => {
      expect(
        printSchema(schema, "schemas", {
          schemas: {
            Foo: {
              type: "object",
              properties: {
                foo: { type: "string" },
                discriminatorPropertyName: { type: "string" },
              },
            },

            Bar: {
              type: "object",
              properties: {
                bar: { type: "string" },
                discriminatorPropertyName: { type: "string" },
              },
            },

            Baz: {
              type: "object",
              properties: {
                baz: { type: "string" },
                discriminatorPropertyName: { type: "string" },
              },
            },
          },
        })
      ).toMatchInlineSnapshot(`
        "export type Test = (Omit<Foo, \\"discriminatorPropertyName\\"> & {
            discriminatorPropertyName: \\"foo\\";
        }) | (Omit<Bar, \\"discriminatorPropertyName\\"> & {
            discriminatorPropertyName: \\"bar\\";
        }) | (Omit<Baz, \\"discriminatorPropertyName\\"> & {
            discriminatorPropertyName: \\"baz\\";
        });"
      `);
    });

    it("should not add the `Omit` if not necessary", () => {
      expect(
        printSchema(schema, "schemas", {
          schemas: {
            Foo: { type: "object", properties: { foo: { type: "string" } } },
            Bar: { type: "object", properties: { bar: { type: "string" } } },
            Baz: { type: "object", properties: { baz: { type: "string" } } },
          },
        })
      ).toMatchInlineSnapshot(`
        "export type Test = (Foo & {
            discriminatorPropertyName: \\"foo\\";
        }) | (Bar & {
            discriminatorPropertyName: \\"bar\\";
        }) | (Baz & {
            discriminatorPropertyName: \\"baz\\";
        });"
      `);
    });

    it("should use the original type if compliant", () => {
      expect(
        printSchema(schema, "schemas", {
          schemas: {
            Foo: {
              type: "object",
              properties: {
                foo: { type: "string" },
                discriminatorPropertyName: { type: "string", enum: ["foo"] },
              },

              required: ["discriminatorPropertyName"],
            },

            Bar: {
              type: "object",
              properties: {
                bar: { type: "string" },
                discriminatorPropertyName: { type: "string", enum: ["bar"] },
              },

              required: ["discriminatorPropertyName"],
            },

            Baz: {
              type: "object",
              properties: {
                baz: { type: "string" },
                discriminatorPropertyName: { type: "string", enum: ["baz"] },
              },

              required: ["discriminatorPropertyName"],
            },
          },
        })
      ).toMatchInlineSnapshot(`"export type Test = Foo | Bar | Baz;"`);
    });
  });

  describe("allOf", () => {
    it("should combine properties and allOf", () => {
      const schema: SchemaObject = {
        allOf: [
          { type: "object", properties: { foo: { type: "string" } } },
          { type: "object", properties: { bar: { type: "number" } } },
        ],
        properties: {
          foobar: {type: "string"}
        },
        required: ['foo', 'foobar']
      };

      expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export type Test = {
          foo: string;
          bar?: number;
          foobar: string;
      };"
    `);
    });
    
    it("should combine additionalProperties and allOf", () => {
      const schema: SchemaObject = {
        allOf: [
          { type: "object", properties: { foo: { type: "string" } } },
          { type: "object", properties: { bar: { type: "number" } } },
        ],
        additionalProperties: {
          type: "string"
        }
      };

      expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export type Test = {
          foo?: string;
          bar?: number;
      } & {
          [key: string]: string;
      };"
    `);
    });
    
    it("should combine properties & additionalProperties & allOf", () => {
      const schema: SchemaObject = {
        allOf: [
          { type: "object", properties: { foo: { type: "string" } } },
          { type: "object", properties: { bar: { type: "number" } } },
        ],
        additionalProperties: {
          type: "string"
        },
        properties: {
          foobar: {type: "string"}
        },
        required: ['bar', 'foobar']
      };

      expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export type Test = {
          foo?: string;
          bar: number;
          foobar: string;
      } & {
          [key: string]: string;
      };"
    `);
    });

    it("should combine inline types", () => {
      const schema: SchemaObject = {
        allOf: [
          { type: "object", properties: { foo: { type: "string" } } },
          { type: "object", properties: { bar: { type: "number" } } },
        ],
      };

      expect(printSchema(schema)).toMatchInlineSnapshot(`
        "export type Test = {
            foo?: string;
            bar?: number;
        };"
      `);
    });

    it("should combine ref and inline type", () => {
      const schema: SchemaObject = {
        allOf: [
          { $ref: "#/components/schemas/Foo" },
          { type: "object", properties: { bar: { type: "number" } } },
        ],
      };

      const components: OpenAPIObject["components"] = {
        schemas: {
          Foo: {
            type: "object",
            properties: {
              foo: { type: "string" },
            },
          },
        },
      };

      expect(printSchema(schema, undefined, components)).toMatchInlineSnapshot(`
        "export type Test = Foo & {
            bar?: number;
        };"
      `);
    });

    it("should generate a new type when schemas intersect", () => {
      const schema: SchemaObject = {
        allOf: [{ $ref: "#/components/schemas/Foo" }, { required: ["bar"] }],
      };

      const components: OpenAPIObject["components"] = {
        schemas: {
          Foo: {
            type: "object",
            properties: {
              bar: { type: "string" },
            },
          },
        },
      };

      expect(printSchema(schema, undefined, components)).toMatchInlineSnapshot(`
        "export type Test = {
            bar: string;
        };"
      `);
    });

    it("should generate a `never` if the combined type is broken", () => {
      const schema: SchemaObject = {
        allOf: [{ type: "string" }, { type: "number" }],
      };

      expect(printSchema(schema)).toMatchInlineSnapshot(
        `"export type Test = never;"`
      );
    });

    it("should generate a `never` if the combined property type is broken", () => {
      const schema: SchemaObject = {
        allOf: [
          { type: "object", properties: { foo: { type: "string" } } },
          { type: "object", properties: { foo: { type: "number" } } },
        ],
      };

      expect(printSchema(schema)).toMatchInlineSnapshot(`
        "export type Test = {
            foo?: never;
        };"
      `);
    });

    it("should generate documentation (object properties)", () => {
      const schema: SchemaObject = {
        allOf: [
          { type: "object", properties: { foo: { type: "string" } } },
          {
            type: "object",
            properties: { foo: { description: "A nice description for foo" } },
          },
          { description: "A nice top-level description" },
        ],
      };

      expect(printSchema(schema)).toMatchInlineSnapshot(`
        "/**
         * A nice top-level description
         */
        export type Test = {
            /**
             * A nice description for foo
             */
            foo?: string;
        };"
      `);
    });

    it("should generate documentation (top level)", () => {
      const schema: SchemaObject = {
        allOf: [
          { type: "string" },
          {
            type: "string",
            maxLength: 255,
          },
          { description: "A nice top-level description" },
        ],
      };

      expect(printSchema(schema)).toMatchInlineSnapshot(`
        "/**
         * A nice top-level description
         * 
         * @maxLength 255
         */
        export type Test = string;"
      `);
    });
  }); // end of allOf

  describe("anyOf", () => {
    it("should generate a simple union", () => {
      const schema: SchemaObject = {
        anyOf: [{ type: "string" }, { type: "number" }],
      };

      expect(printSchema(schema)).toMatchInlineSnapshot(
        `"export type Test = string | number;"`
      );
    });

    it("should combine required & properties", () => {
      // from github api - operationId: gists/update
      const schema: SchemaObject = {
        anyOf: [
          {
            required: ["description"],
          },
          {
            required: ["files"],
          },
        ],
        nullable: true,
        properties: {
          description: {
            description: "Description of the gist",
            example: "Example Ruby script",
            type: "string",
          },
          files: {
            additionalProperties: {
              anyOf: [
                {
                  required: ["content"],
                },
                {
                  required: ["filename"],
                },
                {
                  maxProperties: 0,
                  type: "object",
                },
              ],
              nullable: true,
              properties: {
                content: {
                  description: "The new content of the file",
                  type: "string",
                },
                filename: {
                  description: "The new filename for the file",
                  nullable: true,
                  type: "string",
                },
              },
              type: "object",
            },
            description: "Names of files to be updated",
            example: {
              "hello.rb": {
                content: "blah",
                filename: "goodbye.rb",
              },
            },
            type: "object",
          },
        },
        type: "object",
      };

      expect(printSchema(schema)).toMatchInlineSnapshot(`
        "export type Test = {
            /**
             * Description of the gist
             *
             * @example Example Ruby script
             */
            description: string;
            /**
             * Names of files to be updated
             *
             * @example {\\"hello.rb\\":{\\"content\\":\\"blah\\",\\"filename\\":\\"goodbye.rb\\"}}
             */
            files?: {
                [key: string]: {
                    /**
                     * The new content of the file
                     */
                    content: string;
                    /**
                     * The new filename for the file
                     */
                    filename?: string | null;
                } | {
                    /**
                     * The new content of the file
                     */
                    content?: string;
                    /**
                     * The new filename for the file
                     */
                    filename: string | null;
                } | {} | null;
            };
        } | {
            /**
             * Description of the gist
             *
             * @example Example Ruby script
             */
            description?: string;
            /**
             * Names of files to be updated
             *
             * @example {\\"hello.rb\\":{\\"content\\":\\"blah\\",\\"filename\\":\\"goodbye.rb\\"}}
             */
            files: {
                [key: string]: {
                    /**
                     * The new content of the file
                     */
                    content: string;
                    /**
                     * The new filename for the file
                     */
                    filename?: string | null;
                } | {
                    /**
                     * The new content of the file
                     */
                    content?: string;
                    /**
                     * The new filename for the file
                     */
                    filename: string | null;
                } | {} | null;
            };
        } | null;"
      `);
    });
  });
});

const printSchema = (
  schema: SchemaObject,
  currentComponent: OpenAPIComponentType = "schemas",
  components?: OpenAPIObject["components"],
  useEnums?: boolean
) => {
  const nodes = schemaToTypeAliasDeclaration(
    "Test",
    schema,
    {
      currentComponent,
      openAPIDocument: { components },
    },
    useEnums
  );

  const sourceFile = ts.createSourceFile(
    "index.ts",
    "",
    ts.ScriptTarget.Latest
  );

  const printer = ts.createPrinter({
    newLine: ts.NewLineKind.LineFeed,
    removeComments: false,
  });

  return nodes
    .map((node: ts.Node) =>
      printer.printNode(ts.EmitHint.Unspecified, node, sourceFile)
    )
    .join("\n");
};

--- End of openapi-codegen/plugins/typescript/src/core/schemaToTypeAliasDeclaration.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getErrorResponseType.ts ---
import ts, { factory as f } from "typescript";
import {
  ComponentsObject,
  isReferenceObject,
  ReferenceObject,
  ResponseObject,
  ResponsesObject,
} from "openapi3-ts";

import { findCompatibleMediaType } from "./findCompatibleMediaType";
import { getType } from "./schemaToTypeAliasDeclaration";
import { pascal } from "case";

export const clientErrorStatus = "ClientErrorStatus";
export const serverErrorStatus = "ServerErrorStatus";

/**
 * Extract types from error responses (4xx + 5xx)
 */
export const getErrorResponseType = ({
  responses,
  components,
  printNodes,
}: {
  responses: ResponsesObject;
  components?: ComponentsObject;
  printNodes: (nodes: ts.Node[]) => string;
}) => {
  const status = Object.keys(responses);

  const responseTypes = Object.entries(responses).reduce(
    (
      mem,
      [statusCode, response]: [string, ResponseObject | ReferenceObject]
    ) => {
      if (statusCode.startsWith("2")) return mem;
      if (isReferenceObject(response)) {
        const [hash, topLevel, namespace, name] = response.$ref.split("/");
        if (hash !== "#" || topLevel !== "components") {
          throw new Error(
            "This library only resolve $ref that are include into `#/components/*` for now"
          );
        }
        if (namespace !== "responses") {
          throw new Error(
            "$ref for responses must be on `#/components/responses`"
          );
        }
        return [
          ...mem,
          createStatusDeclaration(
            statusCode,
            f.createTypeReferenceNode(
              f.createQualifiedName(
                f.createIdentifier("Responses"),
                f.createIdentifier(pascal(name))
              ),
              undefined
            ),
            status
          ),
        ];
      }

      const mediaType = findCompatibleMediaType(response);
      if (!mediaType || !mediaType.schema) return mem;

      return [
        ...mem,
        createStatusDeclaration(
          statusCode,
          getType(mediaType.schema, {
            currentComponent: null,
            openAPIDocument: { components },
          }),
          status
        ),
      ];
    },
    [] as ts.TypeNode[]
  );

  return f.createTypeReferenceNode("Fetcher.ErrorWrapper", [
    responseTypes.length === 0
      ? f.createKeywordTypeNode(ts.SyntaxKind.UndefinedKeyword)
      : responseTypes.length === 1
      ? responseTypes[0]
      : f.createUnionTypeNode(responseTypes),
  ]);
};

const createStatusDeclaration = (
  statusCode: string,
  type: ts.TypeNode,
  status: string[]
): ts.TypeNode => {
  let statusType: ts.TypeNode = f.createLiteralTypeNode(
    f.createNumericLiteral(statusCode)
  );

  if (
    statusCode === "4xx" ||
    (statusCode === "default" && status.includes("5xx"))
  ) {
    const usedClientCode = status.filter(
      (s) => s.startsWith("4") && s !== "4xx"
    );
    if (usedClientCode.length > 0) {
      statusType = f.createTypeReferenceNode("Exclude", [
        f.createTypeReferenceNode(clientErrorStatus),
        usedClientCode.length === 1
          ? f.createLiteralTypeNode(f.createNumericLiteral(usedClientCode[0]))
          : f.createUnionTypeNode(
              usedClientCode.map((code) =>
                f.createLiteralTypeNode(f.createNumericLiteral(code))
              )
            ),
      ]);
    } else {
      statusType = f.createTypeReferenceNode(clientErrorStatus);
    }
  }

  if (
    statusCode === "5xx" ||
    (statusCode === "default" && status.includes("4xx"))
  ) {
    const usedServerCode = status.filter(
      (s) => s.startsWith("5") && s !== "5xx"
    );
    if (usedServerCode.length > 0) {
      statusType = f.createTypeReferenceNode("Exclude", [
        f.createTypeReferenceNode(serverErrorStatus),
        usedServerCode.length === 1
          ? f.createLiteralTypeNode(f.createNumericLiteral(usedServerCode[0]))
          : f.createUnionTypeNode(
              usedServerCode.map((code) =>
                f.createLiteralTypeNode(f.createNumericLiteral(code))
              )
            ),
      ]);
    } else {
      statusType = f.createTypeReferenceNode(serverErrorStatus);
    }
  }

  if (
    statusCode === "default" &&
    !status.includes("4xx") &&
    !status.includes("5xx")
  ) {
    const otherCodes = status.filter((s) => s !== "default");
    if (otherCodes.length > 0) {
      statusType = f.createTypeReferenceNode("Exclude", [
        f.createUnionTypeNode([
          f.createTypeReferenceNode(clientErrorStatus),
          f.createTypeReferenceNode(serverErrorStatus),
        ]),
        otherCodes.length === 1
          ? f.createLiteralTypeNode(f.createNumericLiteral(otherCodes[0]))
          : f.createUnionTypeNode(
              otherCodes.map((code) =>
                f.createLiteralTypeNode(f.createNumericLiteral(code))
              )
            ),
      ]);
    } else {
      statusType = f.createUnionTypeNode([
        f.createTypeReferenceNode(clientErrorStatus),
        f.createTypeReferenceNode(serverErrorStatus),
      ]);
    }
  }

  if (
    statusCode === "default" &&
    status.includes("4xx") &&
    status.includes("5xx")
  ) {
    statusType = f.createKeywordTypeNode(ts.SyntaxKind.NeverKeyword);
  }

  return f.createTypeLiteralNode([
    f.createPropertySignature(undefined, "status", undefined, statusType),
    f.createPropertySignature(undefined, "payload", undefined, type),
  ]);
};

--- End of openapi-codegen/plugins/typescript/src/core/getErrorResponseType.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getDataResponseType.test.ts ---
import { ResponsesObject } from "openapi3-ts";
import { print } from "../testUtils";
import { getDataResponseType } from "./getDataResponseType";

describe("getDataResponseType", () => {
  it("should extract the response type with 200 status", () => {
    const responses: ResponsesObject = {
      "200": {
        description: "pet response",
        content: {
          "application/json": {
            schema: {
              type: "array",
              items: {
                $ref: "#/components/schemas/Pet",
              },
            },
          },
        },
      },
      default: {
        description: "unexpected error",
        content: {
          "application/json": {
            schema: {
              $ref: "#/components/schemas/Error",
            },
          },
        },
      },
    };

    const responseType = getDataResponseType({
      responses,
      printNodes: (nodes) => nodes.map(print).join("\n"),
    });

    expect(print(responseType)).toMatchInlineSnapshot(`"Schemas.Pet[]"`);
  });

  it("should remove duplicate responses", () => {
    const responses: ResponsesObject = {
      "200": {
        description: "pet response",
        content: {
          "application/json": {
            schema: {
              type: "array",
              items: {
                $ref: "#/components/schemas/Pet",
              },
            },
          },
        },
      },
      "203": {
        description: "pet response",
        content: {
          "application/json": {
            schema: {
              type: "array",
              items: {
                $ref: "#/components/schemas/Pet",
              },
            },
          },
        },
      },
    };

    const responseType = getDataResponseType({
      responses,
      printNodes: (nodes) => nodes.map(print).join("\n"),
    });

    expect(print(responseType)).toMatchInlineSnapshot(`"Schemas.Pet[]"`);
  });

  it("should create a union", () => {
    const responses: ResponsesObject = {
      "200": {
        description: "pet response",
        content: {
          "application/json": {
            schema: {
              type: "array",
              items: {
                $ref: "#/components/schemas/Pet",
              },
            },
          },
        },
      },
      "203": {
        description: "pet response",
        content: {
          "application/json": {
            schema: {
              type: "array",
              items: {
                $ref: "#/components/schemas/Cat",
              },
            },
          },
        },
      },
    };

    const responseType = getDataResponseType({
      responses,
      printNodes: (nodes) => nodes.map(print).join("\n"),
    });

    expect(print(responseType)).toMatchInlineSnapshot(
      `"Schemas.Pet[] | Schemas.Cat[]"`
    );
  });

  it("should returns undefined when no response", () => {
    const responses: ResponsesObject = {};

    const responseType = getDataResponseType({
      responses,
      printNodes: (nodes) => nodes.map(print).join("\n"),
    });

    expect(print(responseType)).toMatchInlineSnapshot(`"undefined"`);
  });
});

--- End of openapi-codegen/plugins/typescript/src/core/getDataResponseType.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/schemaToTypeAliasDeclaration.ts ---
import { pascal } from "case";
import { findKey, get, intersection, merge, omit } from "lodash";
import {
  ComponentsObject,
  DiscriminatorObject,
  OpenAPIObject,
  ReferenceObject,
  SchemaObject,
  isReferenceObject,
  isSchemaObject,
} from "openapi3-ts";
import { singular } from "pluralize";
import { isValidIdentifier } from "tsutils";
import ts, { factory as f } from "typescript";
import { getReferenceSchema } from "./getReferenceSchema";

type RemoveIndex<T> = {
  [P in keyof T as string extends P
    ? never
    : number extends P
    ? never
    : P]: T[P];
};

export type OpenAPIComponentType = Extract<
  keyof RemoveIndex<ComponentsObject>,
  "parameters" | "responses" | "schemas" | "requestBodies"
>;

export type Context = {
  openAPIDocument: Pick<OpenAPIObject, "components">;
  /**
   * Current OpenAPI component
   *
   * This is required to correctly resolve types dependencies
   */
  currentComponent: OpenAPIComponentType | null;
};

let useEnumsConfigBase: boolean | undefined;

/**
 * Transform an OpenAPI Schema Object to Typescript Nodes (comment & declaration).
 *
 * @param name Name of the schema
 * @param schema OpenAPI Schema object
 * @param context Context
 */
export const schemaToTypeAliasDeclaration = (
  name: string,
  schema: SchemaObject,
  context: Context,
  useEnums?: boolean
): ts.Node[] => {
  useEnumsConfigBase = useEnums;
  const jsDocNode = getJSDocComment(schema, context);
  const declarationNode = f.createTypeAliasDeclaration(
    [f.createModifier(ts.SyntaxKind.ExportKeyword)],
    pascal(name),
    undefined,
    getType(schema, context, name)
  );

  return jsDocNode ? [jsDocNode, declarationNode] : [declarationNode];
};

/**
 * Get the type.
 *
 * @param schema OpenAPI Schema
 * @returns ts.TypeNode
 */
export const getType = (
  schema: SchemaObject | ReferenceObject,
  context: Context,
  name?: string,
  isNodeEnum?: boolean
): ts.TypeNode => {
  if (isReferenceObject(schema)) {
    const [hash, topLevel, namespace, name] = schema.$ref.split("/");
    if (hash !== "#" || topLevel !== "components") {
      throw new Error(
        "This library only resolve $ref that are include into `#/components/*` for now"
      );
    }
    if (namespace === context.currentComponent) {
      return f.createTypeReferenceNode(f.createIdentifier(pascal(name)));
    }

    return f.createTypeReferenceNode(
      f.createQualifiedName(
        f.createIdentifier(pascal(namespace)),
        f.createIdentifier(pascal(name))
      )
    );
  }

  if (schema["x-openapi-codegen"]?.type === "never") {
    return f.createKeywordTypeNode(ts.SyntaxKind.NeverKeyword);
  }

  if (schema.oneOf) {
    return f.createUnionTypeNode([
      ...schema.oneOf.map((i) =>
        withDiscriminator(
          getType({ ...omit(schema, ["oneOf", "nullable"]), ...i }, context),
          i,
          schema.discriminator,
          context
        )
      ),
      ...(schema.nullable ? [f.createLiteralTypeNode(f.createNull())] : []),
    ]);
  }

  if (schema.anyOf) {
    return f.createUnionTypeNode([
      ...schema.anyOf.map((i) =>
        withDiscriminator(
          getType({ ...omit(schema, ["anyOf", "nullable"]), ...i }, context),
          i,
          schema.discriminator,
          context
        )
      ),
      ...(schema.nullable ? [f.createLiteralTypeNode(f.createNull())] : []),
    ]);
  }

  if (schema.allOf) {
    const adHocSchemas: Array<SchemaObject> = [];
    if (schema.properties) {
      adHocSchemas.push({
        type: 'object',
        properties: schema.properties,
        required: schema.required
      });
    }
    if (schema.additionalProperties) {
      adHocSchemas.push({
        type: 'object',
        additionalProperties: schema.additionalProperties
      });
    }
    return getAllOf([
      ...schema.allOf,
      ...adHocSchemas
     ], context);
  }

  if (schema.enum) {
    if (isNodeEnum) {
      return f.createTypeReferenceNode(f.createIdentifier(name || ""));
    }

    const unionTypes = f.createUnionTypeNode([
      ...schema.enum.map((value) => {
        if (typeof value === "string") {
          return f.createLiteralTypeNode(f.createStringLiteral(value));
        }
        if (typeof value === "number") {
          return f.createLiteralTypeNode(f.createNumericLiteral(value));
        }
        if (typeof value === "boolean") {
          return f.createLiteralTypeNode(
            value ? f.createTrue() : f.createFalse()
          );
        }
        return f.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword);
      }),
      ...(schema.nullable ? [f.createLiteralTypeNode(f.createNull())] : []),
    ]);

    return unionTypes;
  }

  // Handle implicit object
  if (schema.properties && !schema.type) {
    schema.type = "object";
  }

  // Handle implicit array
  if (schema.items && !schema.type) {
    schema.type = "array";
  }

  switch (schema.type) {
    case "null":
      return f.createLiteralTypeNode(f.createNull());
    case "integer":
    case "number":
      return withNullable(
        f.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword),
        schema.nullable
      );
    case "string":
      if (schema.format === "binary") {
        return f.createTypeReferenceNode("Blob");
      }
      return withNullable(
        f.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
        schema.nullable
      );
    case "boolean":
      return withNullable(
        f.createKeywordTypeNode(ts.SyntaxKind.BooleanKeyword),
        schema.nullable
      );
    case "object":
      if (schema.maxProperties === 0) {
        return withNullable(f.createTypeLiteralNode([]), schema.nullable);
      }

      if (
        !schema.properties /* free form object */ &&
        !schema.additionalProperties
      ) {
        return withNullable(
          f.createTypeReferenceNode(f.createIdentifier("Record"), [
            f.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
            f.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword),
          ]),
          schema.nullable
        );
      }

      const members: ts.TypeElement[] = Object.entries(
        schema.properties || {}
      ).map(([key, property]) => {
        const isEnum = typeof property === "object" && "enum" in property && useEnumsConfigBase;

        const propertyNode = f.createPropertySignature(
          undefined,
          isValidIdentifier(key)
            ? f.createIdentifier(key)
            : f.createComputedPropertyName(f.createStringLiteral(key)),
          schema.required?.includes(key)
            ? undefined
            : f.createToken(ts.SyntaxKind.QuestionToken),
          getType(
            property,
            context,
            `${name}${pascal(key)}`.replace(/[^a-zA-Z0-9 ]/g, ""),
            isEnum
          )
        );
        const jsDocNode = getJSDocComment(property, context);
        if (jsDocNode) addJSDocToNode(propertyNode, jsDocNode);

        return propertyNode;
      });

      const additionalPropertiesNode = getAdditionalProperties(schema, context);

      if (additionalPropertiesNode) {
        return withNullable(
          members.length > 0
            ? f.createIntersectionTypeNode([
                f.createTypeLiteralNode(members),
                f.createTypeLiteralNode([additionalPropertiesNode]),
              ])
            : f.createTypeLiteralNode([additionalPropertiesNode]),
          schema.nullable
        );
      }

      return withNullable(f.createTypeLiteralNode(members), schema.nullable);
    case "array":
      return withNullable(
        f.createArrayTypeNode(
          !schema.items || Object.keys(schema.items).length === 0
            ? f.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
            : getType(schema.items, context)
        ),
        schema.nullable
      );
    default:
      return withNullable(
        f.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword),
        schema.nullable
      );
  }
};

/**
 * Add nullable option if needed.
 *
 * @param node Any node
 * @param nullable Add nullable option if true
 * @returns Type with or without nullable option
 */
const withNullable = (
  node: ts.TypeNode,
  nullable: boolean | undefined
): ts.TypeNode => {
  return nullable
    ? f.createUnionTypeNode([node, f.createLiteralTypeNode(f.createNull())])
    : node;
};

/**
 * Combine the original type with the discriminator mapping value.
 *
 * @param node
 * @param discriminator
 * @returns
 */
const withDiscriminator = (
  node: ts.TypeNode,
  schema: SchemaObject | ReferenceObject,
  discriminator: DiscriminatorObject | undefined,
  context: Context
): ts.TypeNode => {
  if (!discriminator || !discriminator.propertyName || !discriminator.mapping) {
    return node;
  }

  const discriminatedValue = findKey(
    discriminator.mapping,
    (i) => i === schema.$ref
  );
  if (discriminatedValue) {
    const propertyNameAsLiteral = f.createTypeLiteralNode([
      f.createPropertySignature(
        undefined,
        f.createIdentifier(discriminator.propertyName),
        undefined,
        f.createLiteralTypeNode(f.createStringLiteral(discriminatedValue))
      ),
    ]);

    const spec = get<SchemaObject | ReferenceObject>(
      context.openAPIDocument,
      schema.$ref.slice(2).replace(/\//g, ".")
    );
    if (spec && isSchemaObject(spec) && spec.properties) {
      const property = spec.properties[discriminator.propertyName];
      if (
        property &&
        isSchemaObject(property) &&
        property.enum?.length === 1 &&
        property.enum[0] === discriminatedValue &&
        spec.required?.includes(discriminator.propertyName)
      ) {
        return node;
      }
      if (!property) {
        return f.createIntersectionTypeNode([node, propertyNameAsLiteral]);
      }
    }

    const baseTypeWithoutPropertyName = f.createTypeReferenceNode(
      f.createIdentifier("Omit"),
      [
        node,
        f.createLiteralTypeNode(
          f.createStringLiteral(discriminator.propertyName)
        ),
      ]
    );

    return f.createIntersectionTypeNode([
      baseTypeWithoutPropertyName,
      propertyNameAsLiteral,
    ]);
  }

  return node;
};

/**
 * Get `allOf` type.
 */
const getAllOf = (
  members: Required<SchemaObject>["allOf"],
  context: Context
): ts.TypeNode => {
  const initialValue = {
    isSchemaObjectOnly: true,
    isWritableWithIntersection: true,
    mergedSchema: {} as SchemaObject,
    intersectionMembers: [] as ts.TypeNode[],
  };

  const {
    mergedSchema,
    isSchemaObjectOnly,
    isWritableWithIntersection,
    intersectionMembers,
  } = members.reduce((acc, member, i) => {
    if (i === 0 && isSchemaObject(member)) {
      return {
        ...acc,
        mergedSchema: member,
        intersectionMembers: [getType(member, context)],
      };
    }

    if (isSchemaObject(member)) {
      const { mergedSchema, isColliding } = mergeSchemas(
        acc.mergedSchema,
        member
      );

      return {
        ...acc,
        mergedSchema,
        isWritableWithIntersection:
          acc.isWritableWithIntersection && !isColliding,
        intersectionMembers: [
          ...acc.intersectionMembers,
          getType(member, context),
        ],
      };
    }

    if (isReferenceObject(member)) {
      const referenceSchema = getReferenceSchema(
        member.$ref,
        context.openAPIDocument
      );
      const { mergedSchema, isColliding } = mergeSchemas(
        acc.mergedSchema,
        referenceSchema
      );

      return {
        ...acc,
        isWritableWithIntersection:
          acc.isWritableWithIntersection && !isColliding,
        isSchemaObjectOnly: false,
        mergedSchema,
        intersectionMembers: [
          ...acc.intersectionMembers,
          getType(member, context),
        ],
      };
    }

    return acc;
  }, initialValue);

  if (isSchemaObjectOnly) {
    return getType(mergedSchema, context);
  }

  if (isWritableWithIntersection) {
    return f.createIntersectionTypeNode(intersectionMembers);
  }

  return getType(mergedSchema, context);
};

/**
 * Merge two schema objects
 *
 * @param a
 * @param b
 * @returns the merged schema and a flag to know if the schema was colliding
 */
const mergeSchemas = (
  a: SchemaObject,
  b: SchemaObject
): { mergedSchema: SchemaObject; isColliding: boolean } => {
  if (Boolean(a.type) && Boolean(b.type) && a.type !== b.type) {
    return {
      mergedSchema: {
        ...merge(a, b),
        ["x-openapi-codegen"]: {
          type: "never",
        },
      },
      isColliding: true,
    };
  }

  if (a.properties && b.properties) {
    let isColliding = false;
    const properties = Object.entries(a.properties).reduce(
      (mergedProperties, [key, propertyA]) => {
        const propertyB = b.properties?.[key];
        if (propertyB) {
          isColliding = true;
        }
        if (
          propertyB &&
          isSchemaObject(propertyB) &&
          isSchemaObject(propertyA) &&
          Boolean(propertyB.type) &&
          Boolean(propertyA.type) &&
          propertyA.type !== propertyB.type
        ) {
          return {
            ...mergedProperties,
            [key]: {
              ...propertyA,
              ...propertyB,
              ["x-openapi-codegen"]: {
                type: "never",
              },
            },
          };
        }

        return { ...mergedProperties, [key]: propertyA };
      },
      {} as typeof a.properties
    );

    return {
      mergedSchema: {
        ...merge({}, a, b),
        properties: merge({}, properties, b.properties),
      },
      isColliding,
    };
  }

  let isColliding = false;
  if (
    a.required &&
    b.properties &&
    intersection(a.required, Object.keys(b.properties)).length > 0
  ) {
    isColliding = true;
  }
  if (
    a.properties &&
    b.required &&
    intersection(b.required, Object.keys(a.properties)).length > 0
  ) {
    isColliding = true;
  }

  return { mergedSchema: merge({}, a, b), isColliding };
};

const keysToExpressAsJsDocProperty: Array<keyof RemoveIndex<SchemaObject>> = [
  "minimum",
  "maximum",
  "default",
  "minLength",
  "maxLength",
  "format",
  "pattern",
  "example",
  "examples",
  "multipleOf",
  "exclusiveMaximum",
  "exclusiveMinimum",
  "maxLength",
  "maxItems",
  "minItems",
  "uniqueItems",
  "maxProperties",
  "minProperties",
  "deprecated",
];

/**
 * Get JSDocComment from an OpenAPI Schema.
 *
 * @param schema
 * @param context
 * @returns JSDoc node
 */
export const getJSDocComment = (
  schema: SchemaObject,
  context: Context
): ts.JSDoc | undefined => {
  // `allOf` can add some documentation to the schema, let’s merge all items as first step
  const schemaWithAllOfResolved = schema.allOf
    ? schema.allOf.reduce<SchemaObject>((mem, allOfItem) => {
        if (isReferenceObject(allOfItem)) {
          const referenceSchema = getReferenceSchema(
            allOfItem.$ref,
            context.openAPIDocument
          );
          return mergeSchemas(mem, referenceSchema).mergedSchema;
        } else {
          return mergeSchemas(mem, allOfItem).mergedSchema;
        }
      }, schema)
    : schema;

  const getJsDocIdentifier = (value: unknown) => {
    const multilineEndChar = "*/";

    if (typeof value === "string" && !value.includes(multilineEndChar)) {
      return f.createIdentifier(value);
    }

    if (
      typeof value === "object" &&
      !JSON.stringify(value).includes(multilineEndChar)
    ) {
      return f.createIdentifier(JSON.stringify(value));
    }

    if (typeof value === "boolean" || typeof value === "number") {
      return f.createIdentifier(value.toString());
    }

    // Value is not stringifiable
    // See https://github.com/fabien0102/openapi-codegen/issues/36, https://github.com/fabien0102/openapi-codegen/issues/57
    return f.createIdentifier("[see original specs]");
  };

  const propertyTags: ts.JSDocPropertyTag[] = [];
  Object.entries(schemaWithAllOfResolved)
    .filter(
      ([key, value]) =>
        keysToExpressAsJsDocProperty.includes(key as any) ||
        (/^x-/.exec(key) && typeof value !== "object")
    )
    .forEach(([key, value]) => {
      if (Array.isArray(value)) {
        value.forEach((v) =>
          propertyTags.push(
            f.createJSDocPropertyTag(
              f.createIdentifier(singular(key)),
              getJsDocIdentifier(v),
              false
            )
          )
        );
      } else if (typeof value !== "undefined") {
        propertyTags.push(
          f.createJSDocPropertyTag(
            f.createIdentifier(key),
            getJsDocIdentifier(value),
            false
          )
        );
      }
    });

  if (schemaWithAllOfResolved.description || propertyTags.length > 0) {
    return f.createJSDocComment(
      schemaWithAllOfResolved.description
        ? schemaWithAllOfResolved.description.trim() +
            (propertyTags.length ? "\n" : "")
        : undefined,
      propertyTags
    );
  }
  return undefined;
};

/**
 * Add js comment to a node (mutate the original node).
 *
 * We need to do this because JSDoc are not part of Typescript AST.
 *
 * @param node
 * @param jsDocComment
 */
const addJSDocToNode = (node: ts.Node, jsDocComment: ts.JSDoc) => {
  const sourceFile = ts.createSourceFile(
    "index.ts",
    "",
    ts.ScriptTarget.Latest
  );

  const printer = ts.createPrinter({
    newLine: ts.NewLineKind.LineFeed,
    removeComments: false,
  });

  const jsDocString = printer
    .printNode(ts.EmitHint.Unspecified, jsDocComment, sourceFile)
    .replace(/^( )*(\/\*)?\*?( *)/g, "") // Remove opening comment notations
    .replace("*/", ""); // Remove closing comment notation

  ts.addSyntheticLeadingComment(
    node,
    ts.SyntaxKind.MultiLineCommentTrivia,
    "*" + jsDocString, // https://github.com/microsoft/TypeScript/issues/17146
    true
  );
};

/**
 * Get IndexSignatureDeclaration from `schema.additionalProperties`.
 *
 * @param schema
 * @param context
 * @returns Index signature node
 */
const getAdditionalProperties = (
  schema: SchemaObject,
  context: Context
): ts.IndexSignatureDeclaration | undefined => {
  if (!schema.additionalProperties) return undefined;

  return f.createIndexSignature(
    undefined,
    [
      f.createParameterDeclaration(
        undefined,
        undefined,
        f.createIdentifier("key"),
        undefined,
        f.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
        undefined
      ),
    ],
    schema.additionalProperties === true ||
      Object.keys(schema.additionalProperties).length === 0
      ? f.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
      : getType(schema.additionalProperties, context)
  );
};

--- End of openapi-codegen/plugins/typescript/src/core/schemaToTypeAliasDeclaration.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/isRequestBodyOptional.ts ---
import { get } from "lodash";
import {
  ComponentsObject,
  isReferenceObject,
  MediaTypeObject,
  OperationObject,
  ReferenceObject,
  RequestBodyObject,
} from "openapi3-ts";
import { findCompatibleMediaType } from "./findCompatibleMediaType";
import { getReferenceSchema } from "./getReferenceSchema";

/**
 * Check if all the properties are optionals
 */
export const isRequestBodyOptional = ({
  requestBody,
  components,
}: {
  requestBody?: OperationObject["requestBody"];
  components?: ComponentsObject;
}): boolean => {
  if (!requestBody) {
    return true;
  }

  let mediaType: MediaTypeObject | undefined = undefined;

  if (isReferenceObject(requestBody)) {
    const [hash, topLevel, namespace, _name] = requestBody.$ref.split("/");
    if (hash !== "#" || topLevel !== "components") {
      throw new Error(
        "This library only resolve $ref that are include into `#/components/*` for now"
      );
    }
    if (namespace !== "requestBodies") {
      throw new Error(
        "$ref for requestBody must be on `#/components/requestBodies`"
      );
    }

    const schema: RequestBodyObject | ReferenceObject = get(
      components,
      requestBody.$ref.replace("#/components/", "").split("/")
    );

    if (!schema) {
      throw new Error(`${requestBody.$ref} not found!`);
    }

    if (isReferenceObject(schema)) {
      return isRequestBodyOptional({ requestBody: schema, components });
    }

    mediaType = findCompatibleMediaType(schema);
  } else {
    mediaType = findCompatibleMediaType(requestBody);
  }

  if (!mediaType || !mediaType.schema) {
    return true;
  }

  if (isReferenceObject(mediaType.schema)) {
    const schema = getReferenceSchema(mediaType.schema.$ref, { components });

    return !schema.required;
  }

  return !mediaType.schema.required;
};

--- End of openapi-codegen/plugins/typescript/src/core/isRequestBodyOptional.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/isRequestBodyOptional.test.ts ---
import { isRequestBodyOptional } from "./isRequestBodyOptional";

describe("isRequestBodyOptional", () => {
  it("should return true if no requestBody", () => {
    expect(isRequestBodyOptional({})).toBe(true);
  });

  it("should return true if requestBody don’t have any required properties", () => {
    expect(
      isRequestBodyOptional({
        requestBody: {
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  foo: {
                    type: "string",
                  },
                },
              },
            },
          },
        },
      })
    ).toBe(true);
  });

  it("should return false if requestBody have any required properties", () => {
    expect(
      isRequestBodyOptional({
        requestBody: {
          content: {
            "application/json": {
              schema: {
                type: "object",
                properties: {
                  foo: {
                    type: "string",
                  },
                },
                required: ["foo"],
              },
            },
          },
        },
      })
    ).toBe(false);
  });

  it("should resolve requestBody ref", () => {
    expect(
      isRequestBodyOptional({
        requestBody: {
          $ref: "#/components/requestBodies/FooRequest",
        },
        components: {
          requestBodies: {
            FooRequest: {
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      foo: {
                        type: "string",
                      },
                    },
                    required: ["foo"],
                  },
                },
              },
            },
          },
        },
      })
    ).toBe(false);
  });

  it("should resolve schema ref", () => {
    expect(
      isRequestBodyOptional({
        requestBody: {
          $ref: "#/components/requestBodies/FooRequest",
        },
        components: {
          schemas: {
            Foo: {
              type: "object",
              properties: {
                foo: {
                  type: "string",
                },
              },
              required: ["foo"],
            },
          },
          requestBodies: {
            FooRequest: {
              content: {
                "application/json": {
                  schema: {
                    $ref: "#/components/schemas/Foo",
                  },
                },
              },
            },
          },
        },
      })
    ).toBe(false);
  });

  it("should resolve with dots in names", () => {
    expect(
      isRequestBodyOptional({
        requestBody: {
          $ref: "#/components/requestBodies/Foo.Request",
        },
        components: {
          requestBodies: {
            "Foo.Request": {
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      foo: {
                        type: "string",
                      },
                    },
                    required: ["foo"],
                  },
                },
              },
            },
          },
        },
      })
    ).toBe(false);
  });
});

--- End of openapi-codegen/plugins/typescript/src/core/isRequestBodyOptional.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getOperationTypes.test.ts ---
import { omit } from "lodash";
import ts, { factory } from "typescript";
import { OperationObject } from "openapi3-ts";

import { petstore } from "../fixtures/petstore";
import { getOperationTypes } from "./getOperationTypes";
import { print } from "../testUtils";

describe("getOperationTypes", () => {
  it("should generate a variable type (with extra props)", () => {
    const output = getOperationTypes({
      operationId: "listPet",
      operation: petstore.paths["/pets"].get as OperationObject,
      openAPIDocument: petstore,
      printNodes: () => "",
      variablesExtraPropsType: factory.createTypeReferenceNode("ExtraProps"),
    });

    expect(print(output.declarationNodes[3])).toMatchInlineSnapshot(`
      "export type ListPetVariables = {
          queryParams?: ListPetQueryParams;
      } & ExtraProps;"
    `);
  });

  it("should generate a variable type (without extra props)", () => {
    const output = getOperationTypes({
      operationId: "listPet",
      operation: petstore.paths["/pets"].get as OperationObject,
      openAPIDocument: petstore,
      printNodes: () => "",
      variablesExtraPropsType: factory.createKeywordTypeNode(
        ts.SyntaxKind.VoidKeyword
      ),
    });

    expect(print(output.declarationNodes[3])).toMatchInlineSnapshot(`
      "export type ListPetVariables = {
          queryParams?: ListPetQueryParams;
      };"
    `);
  });

  it("should generate a variable type (with extra props only)", () => {
    const output = getOperationTypes({
      operationId: "listPet",
      operation: omit(
        petstore.paths["/pets"].get,
        "parameters"
      ) as OperationObject,
      openAPIDocument: petstore,
      printNodes: () => "",
      variablesExtraPropsType: factory.createTypeReferenceNode("ExtraProps"),
    });

    expect(print(output.declarationNodes[2])).toMatchInlineSnapshot(
      `"export type ListPetVariables = ExtraProps;"`
    );
  });

  it("should generate a variable type (void)", () => {
    const output = getOperationTypes({
      operationId: "listPet",
      operation: omit(
        petstore.paths["/pets"].get,
        "parameters"
      ) as OperationObject,
      openAPIDocument: petstore,
      printNodes: () => "",
      variablesExtraPropsType: factory.createKeywordTypeNode(
        ts.SyntaxKind.VoidKeyword
      ),
    });

    expect(output.declarationNodes.length).toBe(2);
  });
});

--- End of openapi-codegen/plugins/typescript/src/core/getOperationTypes.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getReferenceSchema.test.ts ---
import { getReferenceSchema } from "./getReferenceSchema";

import type { OpenAPIObject, SchemasObject } from "openapi3-ts";

type OpenAPIDocWithComponents = Pick<OpenAPIObject, "components">;

const schemas: SchemasObject =  {
  "Pet": {
    "type": "object",
    "description": "Pet",
    "required": [
      "id",
      "name"
    ],
    "properties": {
      "id": {
        "type": "integer",
        "format": "int64"
      },
      "name": {
        "type": "string"
      },
      "tag": {
        "type": "string"
      }
    }
  },
  "Pet.With.Dot": {
    "type": "object",
    "description": "Pet.With.Dot",
    "required": [
      "id",
      "name"
    ],
    "properties": {
      "id": {
        "type": "integer",
        "format": "int64"
      },
      "name": {
        "type": "string"
      },
      "tag": {
        "type": "string"
      }
    }
  },
  "PetRef": {
    $ref: "#/components/schemas/Pet"
  },
};

const document: OpenAPIDocWithComponents = {
  components: {
    schemas
  }
};

const base$Ref = "#/components/schemas";

describe('getReferenceSchema', () => {
  it('should return the SchemaObject from $ref with a nested leaf path', () => {
    const $ref = `${base$Ref}/Pet`;
    const schema = getReferenceSchema($ref, document);
    expect(schema).toBeDefined();
    expect(schema.description).toBe(schemas.Pet.description);
  });

  it('should return the SchemaObject from $ref with a dot-separated leaf path', () => {
    const $ref = `${base$Ref}/Pet.With.Dot`;
    const schema = getReferenceSchema($ref, document);
    expect(schema).toBeDefined();
    expect(schema.description).toBe(schemas['Pet.With.Dot'].description);
  });

  it('should throw an Error if the $ref cannot be found', () => {
    const $ref = `${base$Ref}/does/not/exist`;
    expect(() => getReferenceSchema($ref, document)).toThrowError(new RegExp($ref, 'g'));
  });

  it("should resolve the schema if the $ref has a nested $ref", () => {
    const $ref = `${base$Ref}/PetRef`;
    const schema = getReferenceSchema($ref, document);
    expect(schema).toBeDefined();
    expect(schema.description).toBe(schemas.Pet.description);
  });

  it("should throw an error if he resulting schema is not a valid SchemaObject", () => {
    // TODO: not sure how to produce this scenario
  });
});
--- End of openapi-codegen/plugins/typescript/src/core/getReferenceSchema.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getVariablesType.ts ---
import ts, { factory as f } from "typescript";

/**
 * Get fetcher variables types from the operation types
 */
export const getVariablesType = ({
  requestBodyType,
  requestBodyOptional,
  headersType,
  headersOptional,
  pathParamsType,
  pathParamsOptional,
  queryParamsType,
  queryParamsOptional,
}: {
  requestBodyType: ts.TypeNode;
  requestBodyOptional: boolean;
  headersType: ts.TypeNode;
  headersOptional: boolean;
  pathParamsType: ts.TypeNode;
  pathParamsOptional: boolean;
  queryParamsType: ts.TypeNode;
  queryParamsOptional: boolean;
}) => {
  const variablesItems: ts.TypeElement[] = [];

  const hasProperties = (node: ts.Node) => {
    return (
      (!ts.isTypeLiteralNode(node) || node.members.length > 0) &&
      node.kind !== ts.SyntaxKind.UndefinedKeyword
    );
  };

  if (hasProperties(requestBodyType)) {
    variablesItems.push(
      f.createPropertySignature(
        undefined,
        f.createIdentifier("body"),
        requestBodyOptional
          ? f.createToken(ts.SyntaxKind.QuestionToken)
          : undefined,
        requestBodyType
      )
    );
  }
  if (hasProperties(headersType)) {
    variablesItems.push(
      f.createPropertySignature(
        undefined,
        f.createIdentifier("headers"),
        headersOptional
          ? f.createToken(ts.SyntaxKind.QuestionToken)
          : undefined,
        headersType
      )
    );
  }
  if (hasProperties(pathParamsType)) {
    variablesItems.push(
      f.createPropertySignature(
        undefined,
        f.createIdentifier("pathParams"),
        pathParamsOptional
          ? f.createToken(ts.SyntaxKind.QuestionToken)
          : undefined,
        pathParamsType
      )
    );
  }
  if (hasProperties(queryParamsType)) {
    variablesItems.push(
      f.createPropertySignature(
        undefined,
        f.createIdentifier("queryParams"),
        queryParamsOptional
          ? f.createToken(ts.SyntaxKind.QuestionToken)
          : undefined,
        queryParamsType
      )
    );
  }

  return variablesItems.length === 0
    ? f.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
    : f.createTypeLiteralNode(variablesItems);
};

--- End of openapi-codegen/plugins/typescript/src/core/getVariablesType.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/isVerb.ts ---
export const isVerb = (
  verb: string
): verb is "get" | "post" | "patch" | "put" | "delete" =>
  ["get", "post", "patch", "put", "delete"].includes(verb);

--- End of openapi-codegen/plugins/typescript/src/core/isVerb.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/paramsToSchema.ts ---
import { camel } from "case";
import { ParameterObject, SchemaObject } from "openapi3-ts";

/**
 * Convert a list of params in an object schema.
 *
 * @param params Parameters list
 * @param optionalKeys Override the key to be optional
 * @returns An openAPI object schemas with the parameters as properties
 */
export const paramsToSchema = (
  params: ParameterObject[],
  optionalKeys: string[] = []
): SchemaObject => {
  const formatKey = params[0].in === "path" ? camel : (key: string) => key;
  return {
    type: "object",
    properties: params.reduce((mem, param) => {
      return {
        ...mem,
        [formatKey(param.name)]: {
          ...param.schema,
          description: param.description,
        },
      };
    }, {}),
    required: params
      .filter((p) => p.required && !optionalKeys.includes(formatKey(p.name)))
      .map((p) => formatKey(p.name)),
  };
};

--- End of openapi-codegen/plugins/typescript/src/core/paramsToSchema.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/createOperationFetcherFnNodes.ts ---
import { OperationObject } from "openapi3-ts";
import ts, { factory as f } from "typescript";
import { camelizedPathParams } from "./camelizedPathParams";

/**
 * Create the declaration of the fetcher function.
 *
 * @returns Array of nodes
 */
export const createOperationFetcherFnNodes = ({
  dataType,
  errorType,
  requestBodyType,
  queryParamsType,
  pathParamsType,
  headersType,
  variablesType,
  fetcherFn,
  operation,
  url,
  verb,
  name,
}: {
  dataType: ts.TypeNode;
  errorType: ts.TypeNode;
  requestBodyType: ts.TypeNode;
  headersType: ts.TypeNode;
  pathParamsType: ts.TypeNode;
  queryParamsType: ts.TypeNode;
  variablesType: ts.TypeNode;
  operation: OperationObject;
  fetcherFn: string;
  url: string;
  verb: string;
  name: string;
}) => {
  const nodes: ts.Node[] = [];
  if (operation.description) {
    nodes.push(f.createJSDocComment(operation.description.trim(), []));
  }

  nodes.push(
    f.createVariableStatement(
      [f.createModifier(ts.SyntaxKind.ExportKeyword)],
      f.createVariableDeclarationList(
        [
          f.createVariableDeclaration(
            f.createIdentifier(name),
            undefined,
            undefined,
            f.createArrowFunction(
              undefined,
              undefined,
              variablesType.kind !== ts.SyntaxKind.VoidKeyword
                ? [
                    f.createParameterDeclaration(
                      undefined,
                      undefined,
                      f.createIdentifier("variables"),
                      undefined,
                      variablesType,
                      undefined
                    ),
                    f.createParameterDeclaration(
                      undefined,
                      undefined,
                      f.createIdentifier("signal"),
                      f.createToken(ts.SyntaxKind.QuestionToken),
                      f.createTypeReferenceNode(
                        f.createIdentifier("AbortSignal")
                      )
                    ),
                  ]
                : [
                    f.createParameterDeclaration(
                      undefined,
                      undefined,
                      f.createIdentifier("signal"),
                      f.createToken(ts.SyntaxKind.QuestionToken),
                      f.createTypeReferenceNode(
                        f.createIdentifier("AbortSignal")
                      )
                    ),
                  ],
              undefined,
              f.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
              f.createCallExpression(
                f.createIdentifier(fetcherFn),
                [
                  dataType,
                  errorType,
                  requestBodyType,
                  headersType,
                  queryParamsType,
                  pathParamsType,
                ],
                [
                  f.createObjectLiteralExpression(
                    [
                      f.createPropertyAssignment(
                        f.createIdentifier("url"),
                        f.createStringLiteral(camelizedPathParams(url))
                      ),
                      f.createPropertyAssignment(
                        f.createIdentifier("method"),
                        f.createStringLiteral(verb)
                      ),
                      ...(variablesType.kind !== ts.SyntaxKind.VoidKeyword
                        ? [
                            f.createSpreadAssignment(
                              f.createIdentifier("variables")
                            ),
                            f.createShorthandPropertyAssignment(
                              f.createIdentifier("signal")
                            ),
                          ]
                        : [
                            f.createShorthandPropertyAssignment(
                              f.createIdentifier("signal")
                            ),
                          ]),
                    ],
                    false
                  ),
                ]
              )
            )
          ),
        ],
        ts.NodeFlags.Const
      )
    )
  );
  return nodes;
};

--- End of openapi-codegen/plugins/typescript/src/core/createOperationFetcherFnNodes.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/createWatermark.ts ---
import { InfoObject } from "openapi3-ts";
import { factory as f } from "typescript";

/**
 * Generate a JSDoc comment with the generated watermark and `info.version`
 *
 * @param info OpenAPI info object
 * @returns ts.node with the watermark
 */
export const createWatermark = (info: InfoObject) =>
  f.createJSDocComment("Generated by @openapi-codegen\n", [
    f.createJSDocPropertyTag(
      f.createIdentifier("version"),
      f.createIdentifier(info.version),
      false
    ),
  ]);

--- End of openapi-codegen/plugins/typescript/src/core/createWatermark.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getRequestBodyType.ts ---
import ts, { factory as f } from "typescript";
import {
  ComponentsObject,
  isReferenceObject,
  ReferenceObject,
  RequestBodyObject,
} from "openapi3-ts";
import { pascal } from "case";

import { findCompatibleMediaType } from "./findCompatibleMediaType";
import { getType } from "./schemaToTypeAliasDeclaration";

/**
 * Extract types from request body
 */
export const getRequestBodyType = ({
  requestBody,
  components,
}: {
  requestBody?: RequestBodyObject | ReferenceObject;
  components?: ComponentsObject;
}) => {
  if (!requestBody) {
    return f.createKeywordTypeNode(ts.SyntaxKind.UndefinedKeyword);
  }

  if (isReferenceObject(requestBody)) {
    const [hash, topLevel, namespace, name] = requestBody.$ref.split("/");
    if (hash !== "#" || topLevel !== "components") {
      throw new Error(
        "This library only resolve $ref that are include into `#/components/*` for now"
      );
    }
    if (namespace !== "requestBodies") {
      throw new Error(
        "$ref for requestBody must be on `#/components/requestBodies`"
      );
    }
    return f.createTypeReferenceNode(
      f.createQualifiedName(
        f.createIdentifier("RequestBodies"),
        f.createIdentifier(pascal(name))
      ),
      undefined
    );
  }

  const mediaType = findCompatibleMediaType(requestBody);
  if (!mediaType) {
    return f.createKeywordTypeNode(ts.SyntaxKind.UndefinedKeyword);
  }

  if (isReferenceObject(mediaType)) {
    const [hash, topLevel, namespace, name] = mediaType.$ref.split("/");
    if (hash !== "#" || topLevel !== "components") {
      throw new Error(
        "This library only resolve $ref that are include into `#/components/*` for now"
      );
    }
    if (namespace !== "schemas") {
      throw new Error("$ref for schemas must be on `#/components/schemas`");
    }

    return f.createTypeReferenceNode(
      f.createQualifiedName(
        f.createIdentifier("Schemas"),
        f.createIdentifier(pascal(name))
      ),
      undefined
    );
  }

  if (!mediaType.schema) {
    return f.createKeywordTypeNode(ts.SyntaxKind.UndefinedKeyword);
  }

  return getType(mediaType.schema, {
    currentComponent: null,
    openAPIDocument: { components },
  });
};

--- End of openapi-codegen/plugins/typescript/src/core/getRequestBodyType.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getUsedImports.test.ts ---
import ts, { factory as f } from "typescript";
import { print } from "../testUtils";
import { getUsedImports } from "./getUsedImports";

describe("getUsedImports", () => {
  it("should generate requestBodies import", () => {
    const nodes: ts.Node[] = [
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(
          f.createQualifiedName(
            f.createIdentifier("RequestBodies"), // this should be detected
            f.createIdentifier("B")
          ),
          undefined
        )
      ),
    ];

    expect(
      getUsedImports(nodes, {
        parameters: "./parameters",
        requestBodies: "./requestBodies",
        responses: "./responses",
        schemas: "./schemas",
        utils: "./utils",
      })
        .nodes.map(print)
        .join("\n")
    ).toMatchInlineSnapshot(
      `"import type * as RequestBodies from \\"././requestBodies\\";"`
    );
  });

  it("should generate schemas import", () => {
    const nodes: ts.Node[] = [
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(
          f.createQualifiedName(
            f.createIdentifier("Schemas"), // this should be detected
            f.createIdentifier("B")
          ),
          undefined
        )
      ),
    ];

    expect(
      getUsedImports(nodes, {
        parameters: "./parameters",
        requestBodies: "./requestBodies",
        responses: "./responses",
        schemas: "./schemas",
        utils: "./utils",
      })
        .nodes.map(print)
        .join("\n")
    ).toMatchInlineSnapshot(
      `"import type * as Schemas from \\"././schemas\\";"`
    );
  });

  it("should generate parameters import", () => {
    const nodes: ts.Node[] = [
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(
          f.createQualifiedName(
            f.createIdentifier("Parameters"), // this should be detected
            f.createIdentifier("B")
          ),
          undefined
        )
      ),
    ];

    expect(
      getUsedImports(nodes, {
        parameters: "./parameters",
        requestBodies: "./requestBodies",
        responses: "./responses",
        schemas: "./schemas",
        utils: "./utils",
      })
        .nodes.map(print)
        .join("\n")
    ).toMatchInlineSnapshot(
      `"import type * as Parameters from \\"././parameters\\";"`
    );
  });

  it("should generate responses import", () => {
    const nodes: ts.Node[] = [
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(
          f.createQualifiedName(
            f.createIdentifier("Responses"), // this should be detected
            f.createIdentifier("B")
          ),
          undefined
        )
      ),
    ];

    expect(
      getUsedImports(nodes, {
        parameters: "./parameters",
        requestBodies: "./requestBodies",
        responses: "./responses",
        schemas: "./schemas",
        utils: "./utils",
      })
        .nodes.map(print)
        .join("\n")
    ).toMatchInlineSnapshot(
      `"import type * as Responses from \\"././responses\\";"`
    );
  });

  it("should generate all imports", () => {
    const nodes: ts.Node[] = [
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(
          f.createQualifiedName(
            f.createIdentifier("RequestBodies"), // this should be detected
            f.createIdentifier("B")
          ),
          undefined
        )
      ),
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(
          f.createQualifiedName(
            f.createIdentifier("Schemas"), // this should be detected
            f.createIdentifier("B")
          ),
          undefined
        )
      ),
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(
          f.createQualifiedName(
            f.createIdentifier("Parameters"), // this should be detected
            f.createIdentifier("B")
          ),
          undefined
        )
      ),
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(
          f.createQualifiedName(
            f.createIdentifier("Responses"), // this should be detected
            f.createIdentifier("B")
          ),
          undefined
        )
      ),
    ];

    expect(
      getUsedImports(nodes, {
        parameters: "./parameters",
        requestBodies: "./requestBodies",
        responses: "./responses",
        schemas: "./schemas",
        utils: "./utils",
      })
        .nodes.map(print)
        .join("\n")
    ).toMatchInlineSnapshot(`
      "import type * as Parameters from \\"././parameters\\";
      import type * as Schemas from \\"././schemas\\";
      import type * as RequestBodies from \\"././requestBodies\\";
      import type * as Responses from \\"././responses\\";"
    `);
  });

  it("should generate utils import (ClientErrorStatus)", () => {
    const nodes = [
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(f.createIdentifier("ErrorWrapper"), [
          f.createTypeReferenceNode(
            f.createIdentifier("ClientErrorStatus"), // should be detected
            undefined
          ),
        ])
      ),
    ];

    expect(
      getUsedImports(nodes, {
        parameters: "./parameters",
        requestBodies: "./requestBodies",
        responses: "./responses",
        schemas: "./schemas",
        utils: "./utils",
      })
        .nodes.map(print)
        .join("\n")
    ).toMatchInlineSnapshot(
      `"import type { ClientErrorStatus } from \\"././utils\\";"`
    );
  });

  it("should generate utils import (ServerErrorStatus)", () => {
    const nodes = [
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(f.createIdentifier("ErrorWrapper"), [
          f.createTypeReferenceNode(
            f.createIdentifier("ServerErrorStatus"), // should be detected
            undefined
          ),
        ])
      ),
    ];

    expect(
      getUsedImports(nodes, {
        parameters: "./parameters",
        requestBodies: "./requestBodies",
        responses: "./responses",
        schemas: "./schemas",
        utils: "./utils",
      })
        .nodes.map(print)
        .join("\n")
    ).toMatchInlineSnapshot(
      `"import type { ServerErrorStatus } from \\"././utils\\";"`
    );
  });

  it("should generate utils import (ServerErrorStatus & ClientErrorStatus)", () => {
    const nodes = [
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(f.createIdentifier("ErrorWrapper"), [
          f.createTypeReferenceNode(
            f.createIdentifier("ServerErrorStatus"), // should be detected
            undefined
          ),
        ])
      ),
      f.createTypeAliasDeclaration(
        undefined,
        f.createIdentifier("A"),
        undefined,
        f.createTypeReferenceNode(f.createIdentifier("ErrorWrapper"), [
          f.createTypeReferenceNode(
            f.createIdentifier("ClientErrorStatus"), // should be detected
            undefined
          ),
        ])
      ),
    ];

    expect(
      getUsedImports(nodes, {
        parameters: "./parameters",
        requestBodies: "./requestBodies",
        responses: "./responses",
        schemas: "./schemas",
        utils: "./utils",
      })
        .nodes.map(print)
        .join("\n")
    ).toMatchInlineSnapshot(
      `"import type { ServerErrorStatus, ClientErrorStatus } from \\"././utils\\";"`
    );
  });
});

--- End of openapi-codegen/plugins/typescript/src/core/getUsedImports.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/createOperationQueryFnNodes.ts ---
import { camelCase } from "lodash";
import { OperationObject } from "openapi3-ts";
import ts, { factory as f } from "typescript";
import { camelizedPathParams } from "./camelizedPathParams";

/**
 * Create the declaration of the react-router queries.
 *
 * @returns Array of nodes
 */
export const createOperationQueryFnNodes = ({
  operationFetcherFnName,
  dataType,
  errorType,
  requestBodyType,
  queryParamsType,
  pathParamsType,
  headersType,
  variablesType,
  fetcherFn,
  operation,
  url,
  verb,
  name,
}: {
  operationFetcherFnName: string;
  dataType: ts.TypeNode;
  errorType: ts.TypeNode;
  requestBodyType: ts.TypeNode;
  headersType: ts.TypeNode;
  pathParamsType: ts.TypeNode;
  queryParamsType: ts.TypeNode;
  variablesType: ts.TypeNode;
  operation: OperationObject;
  fetcherFn: string;
  url: string;
  verb: string;
  name: string;
}) => {
  const nodes: ts.Node[] = [];
  if (operation.description) {
    nodes.push(f.createJSDocComment(operation.description.trim(), []));
  }

  nodes.push(
    f.createVariableStatement(
      [f.createModifier(ts.SyntaxKind.ExportKeyword)],
      f.createVariableDeclarationList(
        [
          f.createVariableDeclaration(
            f.createIdentifier(camelCase(name)),
            undefined,
            undefined,
            f.createArrowFunction(
              undefined,
              undefined,
              [
                f.createParameterDeclaration(
                  undefined,
                  undefined,
                  f.createIdentifier("variables"),
                  undefined,
                  variablesType,
                  undefined
                ),
              ],
              f.createTupleTypeNode([
                f.createTypeReferenceNode(
                  f.createQualifiedName(
                    f.createIdentifier("reactQuery"),
                    f.createIdentifier("QueryKey")
                  ),
                  undefined
                ),
                f.createFunctionTypeNode(
                  undefined,
                  verb === "get"
                    ? [
                        f.createParameterDeclaration(
                          undefined,
                          undefined,
                          f.createObjectBindingPattern([
                            f.createBindingElement(
                              undefined,
                              undefined,
                              f.createIdentifier("signal"),
                              undefined
                            ),
                          ]),
                          undefined,
                          f.createTypeLiteralNode([
                            f.createPropertySignature(
                              undefined,
                              f.createIdentifier("signal"),
                              f.createToken(ts.SyntaxKind.QuestionToken),
                              f.createTypeReferenceNode(
                                f.createIdentifier("AbortSignal"),
                                undefined
                              )
                            ),
                          ]),
                          undefined
                        ),
                      ]
                    : [
                        f.createParameterDeclaration(
                          undefined,
                          undefined,
                          f.createObjectBindingPattern([
                            f.createBindingElement(
                              undefined,
                              undefined,
                              f.createIdentifier("variables"),
                              undefined
                            ),
                            f.createBindingElement(
                              undefined,
                              undefined,
                              f.createIdentifier("signal"),
                              undefined
                            ),
                          ]),
                          undefined,
                          f.createTypeLiteralNode([
                            f.createPropertySignature(
                              undefined,
                              f.createIdentifier("variables"),
                              undefined,
                              variablesType
                            ),
                            f.createPropertySignature(
                              undefined,
                              f.createIdentifier("signal"),
                              f.createToken(ts.SyntaxKind.QuestionToken),
                              f.createTypeReferenceNode(
                                f.createIdentifier("AbortSignal"),
                                undefined
                              )
                            ),
                          ]),
                          undefined
                        ),
                      ],
                  f.createTypeReferenceNode(f.createIdentifier("Promise"), [
                    dataType,
                  ])
                ),
              ]),
              f.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
              f.createArrayLiteralExpression(
                [
                  f.createCallExpression(
                    f.createIdentifier("queryKeyFn"),
                    undefined,
                    [
                      f.createObjectLiteralExpression(
                        [
                          f.createPropertyAssignment(
                            f.createIdentifier("path"),
                            f.createStringLiteral(camelizedPathParams(url))
                          ),
                          f.createPropertyAssignment(
                            f.createIdentifier("operationId"),
                            f.createStringLiteral(
                              operation.operationId as string
                            )
                          ),
                          f.createShorthandPropertyAssignment(
                            f.createIdentifier("variables"),
                            undefined
                          ),
                        ],
                        true
                      ),
                    ]
                  ),
                  f.createArrowFunction(
                    [f.createModifier(ts.SyntaxKind.AsyncKeyword)],
                    undefined,
                    verb === "get"
                      ? [
                          f.createParameterDeclaration(
                            undefined,
                            undefined,
                            f.createObjectBindingPattern([
                              f.createBindingElement(
                                undefined,
                                undefined,
                                f.createIdentifier("signal"),
                                undefined
                              ),
                            ]),
                            undefined,
                            f.createTypeLiteralNode([
                              f.createPropertySignature(
                                undefined,
                                f.createIdentifier("signal"),
                                f.createToken(ts.SyntaxKind.QuestionToken),
                                f.createTypeReferenceNode(
                                  f.createIdentifier("AbortSignal"),
                                  undefined
                                )
                              ),
                            ]),
                            undefined
                          ),
                        ]
                      : [
                          f.createParameterDeclaration(
                            undefined,
                            undefined,
                            f.createObjectBindingPattern([
                              f.createBindingElement(
                                undefined,
                                undefined,
                                f.createIdentifier("variables"),
                                undefined
                              ),
                              f.createBindingElement(
                                undefined,
                                undefined,
                                f.createIdentifier("signal"),
                                undefined
                              ),
                            ]),
                            undefined,
                            f.createTypeLiteralNode([
                              f.createPropertySignature(
                                undefined,
                                f.createIdentifier("variables"),
                                undefined,
                                variablesType
                              ),
                              f.createPropertySignature(
                                undefined,
                                f.createIdentifier("signal"),
                                f.createToken(ts.SyntaxKind.QuestionToken),
                                f.createTypeReferenceNode(
                                  f.createIdentifier("AbortSignal"),
                                  undefined
                                )
                              ),
                            ]),
                            undefined
                          ),
                        ],
                    undefined,
                    f.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                    f.createCallExpression(
                      f.createIdentifier(operationFetcherFnName),
                      undefined,
                      [
                        f.createObjectLiteralExpression(
                          [
                            f.createSpreadAssignment(
                              f.createIdentifier("variables")
                            ),
                          ],
                          false
                        ),
                        f.createIdentifier("signal"),
                      ]
                    )
                  ),
                ],
                true
              )
            )
          ),
        ],
        ts.NodeFlags.Const
      )
    )
  );
  return nodes;
};

--- End of openapi-codegen/plugins/typescript/src/core/createOperationQueryFnNodes.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/schemaToEnumDeclaration.test.ts ---
import { OpenAPIObject, SchemaObject } from "openapi3-ts";
import ts from "typescript";
import { schemaToEnumDeclaration } from "./schemaToEnumDeclaration";
import { OpenAPIComponentType } from "./schemaToTypeAliasDeclaration";

describe("schemaToTypeAliasDeclaration", () => {
  it("should generate a string enums", () => {
    const schema: SchemaObject = {
      type: "string",
      enum: ["AVAILABLE", "PENDING", "SOLD"],
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export enum Test {
          AVAILABLE = \\"AVAILABLE\\",
          PENDING = \\"PENDING\\",
          SOLD = \\"SOLD\\"
      }"
    `);
  });

  it("should generate a int enum", () => {
    const schema: SchemaObject = {
      type: "string",
      enum: [1, 2, 3],
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export enum Test {
          ONE = 1,
          TWO = 2,
          THREE = 3
      }"
    `);
  });

  it("should generate a int enum (using big numbers)", () => {
    const schema: SchemaObject = {
      type: "string",
      enum: [0, 7, 15, 100, 1000, 1456, 3217],
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export enum Test {
          ZERO = 0,
          SEVEN = 7,
          FIFTEEN = 15,
          ONE_HUNDRED = 100,
          ONE_THOUSAND = 1000,
          ONE_THOUSAND_FOUR_HUNDRED_FIFTY_SIX = 1456,
          THREE_THOUSAND_TWO_HUNDRED_SEVENTEEN = 3217
      }"
    `);
  });

  it("should generate a boolean enum", () => {
    const schema: SchemaObject = {
      type: "string",
      enum: [true, false],
    };

    expect(printSchema(schema)).toMatchInlineSnapshot(`
      "export enum Test {
          True,
          False
      }"
    `);
  });
});

const printSchema = (
  schema: SchemaObject,
  currentComponent: OpenAPIComponentType = "schemas",
  components?: OpenAPIObject["components"]
) => {
  const nodes = schemaToEnumDeclaration("Test", schema, {
    currentComponent,
    openAPIDocument: { components },
  });

  const sourceFile = ts.createSourceFile(
    "index.ts",
    "",
    ts.ScriptTarget.Latest
  );

  const printer = ts.createPrinter({
    newLine: ts.NewLineKind.LineFeed,
    removeComments: false,
  });

  return nodes
    .map((node: ts.Node) =>
      printer.printNode(ts.EmitHint.Unspecified, node, sourceFile)
    )
    .join("\n");
};

--- End of openapi-codegen/plugins/typescript/src/core/schemaToEnumDeclaration.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/createNamedImport.ts ---
import { factory as f } from "typescript";

/**
 * Helper to create named imports.
 *
 * @param fnName functions to imports
 * @param filename path of the module
 * @param isTypeOnly whether fnName are used as types only
 * @returns ts.Node of the import declaration
 */
export const createNamedImport = (
  fnName: string | string[],
  filename: string,
  isTypeOnly = false
) => {
  const fnNames = Array.isArray(fnName) ? fnName : [fnName];
  return f.createImportDeclaration(
    undefined,
    f.createImportClause(
      isTypeOnly,
      undefined,
      f.createNamedImports(
        fnNames.map((name) =>
          f.createImportSpecifier(false, undefined, f.createIdentifier(name))
        )
      )
    ),
    f.createStringLiteral(filename),
    undefined
  );
};

--- End of openapi-codegen/plugins/typescript/src/core/createNamedImport.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/findCompatibleMediaType.ts ---
import {
  MediaTypeObject,
  RequestBodyObject,
  ResponseObject,
} from "openapi3-ts";

/**
 * Returns the first compatible media type.
 *
 * @param requestBodyOrResponseObject
 * @returns
 */
export const findCompatibleMediaType = (
  requestBodyOrResponseObject: RequestBodyObject | ResponseObject
): MediaTypeObject | undefined => {
  if (!requestBodyOrResponseObject.content) return;
  for (let contentType of Object.keys(requestBodyOrResponseObject.content)) {
    if (
      contentType.startsWith("*/*") ||
      contentType.startsWith("application/json") ||
      contentType.startsWith("application/octet-stream") ||
      contentType.startsWith("multipart/form-data")
    ) {
      return requestBodyOrResponseObject.content[contentType];
    }
  }
};

--- End of openapi-codegen/plugins/typescript/src/core/findCompatibleMediaType.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/isOperationObject.ts ---
import { OperationObject } from "openapi3-ts";

/**
 * Type guard for `OperationObject`
 *
 * @param obj
 */
export const isOperationObject = (
  obj: any
): obj is OperationObject & { operationId: string } =>
  typeof obj === "object" && typeof (obj as any).operationId === "string";

--- End of openapi-codegen/plugins/typescript/src/core/isOperationObject.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getParamsGroupByType.ts ---
import { get, groupBy } from "lodash";
import {
  ComponentsObject,
  isReferenceObject,
  OperationObject,
  ParameterObject,
} from "openapi3-ts";

/**
 * Resolve $ref and group parameters by `type`.
 *
 * @param parameters Operation parameters
 * @param components #/components
 */
export const getParamsGroupByType = (
  parameters: OperationObject["parameters"] = [],
  components: ComponentsObject = {}
) => {
  const {
    query: queryParams = [] as ParameterObject[],
    path: pathParams = [] as ParameterObject[],
    header: headerParams = [] as ParameterObject[],
  } = groupBy(
    [...parameters].map<ParameterObject>((p) => {
      if (isReferenceObject(p)) {
        const schema = get(
          components,
          p.$ref.replace("#/components/", "").split("/")
        );
        if (!schema) {
          throw new Error(`${p.$ref} not found!`);
        }
        return schema;
      } else {
        return p;
      }
    }),
    "in"
  );

  return { queryParams, pathParams, headerParams };
};

--- End of openapi-codegen/plugins/typescript/src/core/getParamsGroupByType.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/isVerb.test.ts ---
import { isVerb } from "./isVerb";

describe("isVerb", () => {
  [
    { verb: "get", expected: true },
    { verb: "post", expected: true },
    { verb: "patch", expected: true },
    { verb: "put", expected: true },
    { verb: "delete", expected: true },
    { verb: "header", expected: false },
  ].forEach(({ verb, expected }) =>
    it(`should return ${expected} for the verb "${verb}"`, () =>
      expect(isVerb(verb)).toBe(expected))
  );
});

--- End of openapi-codegen/plugins/typescript/src/core/isVerb.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getDataResponseType.ts ---
import ts, { factory as f } from "typescript";
import {
  ComponentsObject,
  isReferenceObject,
  ReferenceObject,
  ResponseObject,
  ResponsesObject,
} from "openapi3-ts";
import { uniqBy } from "lodash";
import { pascal } from "case";

import { findCompatibleMediaType } from "./findCompatibleMediaType";
import { getType } from "./schemaToTypeAliasDeclaration";

/**
 * Extract types from success responses (2xx)
 */
export const getDataResponseType = ({
  responses,
  components,
  printNodes,
}: {
  responses: ResponsesObject;
  components?: ComponentsObject;
  printNodes: (nodes: ts.Node[]) => string;
}) => {
  const responseTypes = uniqBy(
    Object.entries(responses).reduce(
      (
        mem,
        [statusCode, response]: [string, ResponseObject | ReferenceObject]
      ) => {
        if (!statusCode.startsWith("2")) return mem;
        if (isReferenceObject(response)) {
          const [hash, topLevel, namespace, name] = response.$ref.split("/");
          if (hash !== "#" || topLevel !== "components") {
            throw new Error(
              "This library only resolve $ref that are include into `#/components/*` for now"
            );
          }
          if (namespace !== "responses") {
            throw new Error(
              "$ref for responses must be on `#/components/responses`"
            );
          }
          return [
            ...mem,
            f.createTypeReferenceNode(
              f.createQualifiedName(
                f.createIdentifier("Responses"),
                f.createIdentifier(pascal(name))
              ),
              undefined
            ),
          ];
        }

        const mediaType = findCompatibleMediaType(response);
        if (!mediaType || !mediaType.schema) return mem;

        return [
          ...mem,
          getType(mediaType.schema, {
            currentComponent: null,
            openAPIDocument: { components },
          }),
        ];
      },
      [] as ts.TypeNode[]
    ),
    (node) => printNodes([node])
  );

  return responseTypes.length === 0
    ? f.createKeywordTypeNode(ts.SyntaxKind.UndefinedKeyword)
    : responseTypes.length === 1
    ? responseTypes[0]
    : f.createUnionTypeNode(responseTypes);
};

--- End of openapi-codegen/plugins/typescript/src/core/getDataResponseType.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/createNamespaceImport.ts ---
import { factory as f } from "typescript";

/**
 * Helper to create namespace import.
 *
 * @param namespace namespace import identifier
 * @param filename path of the module
 * @returns ts.Node of the import declaration
 */
export const createNamespaceImport = (namespace: string, filename: string) =>
  f.createImportDeclaration(
    undefined,
    f.createImportClause(
      true,
      undefined,
      f.createNamespaceImport(f.createIdentifier(namespace))
    ),
    f.createStringLiteral(filename),
    undefined
  );

--- End of openapi-codegen/plugins/typescript/src/core/createNamespaceImport.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getVariablesType.test.ts ---
import { print } from "../testUtils";
import ts, { factory as f } from "typescript";
import { getVariablesType } from "./getVariablesType";

describe("getVariableType", () => {
  it("should return void if no types are provided", () => {
    const variablesType = getVariablesType({
      requestBodyType: undefinedType,
      headersType: undefinedType,
      pathParamsType: undefinedType,
      queryParamsType: undefinedType,
      headersOptional: false,
      pathParamsOptional: false,
      queryParamsOptional: false,
      requestBodyOptional: false,
    });

    expect(print(variablesType)).toMatchInlineSnapshot(`"void"`);
  });

  it("should have requestBody type declared", () => {
    const variablesType = getVariablesType({
      requestBodyType: f.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
      headersType: undefinedType,
      pathParamsType: undefinedType,
      queryParamsType: undefinedType,
      headersOptional: false,
      pathParamsOptional: false,
      queryParamsOptional: false,
      requestBodyOptional: false,
    });

    expect(print(variablesType)).toMatchInlineSnapshot(`
      "{
          body: string;
      }"
    `);
  });

  it("should have headers type declared", () => {
    const variablesType = getVariablesType({
      requestBodyType: undefinedType,
      headersType: createType("Headers", "Foo"),
      pathParamsType: undefinedType,
      queryParamsType: undefinedType,
      headersOptional: false,
      pathParamsOptional: false,
      queryParamsOptional: false,
      requestBodyOptional: false,
    });

    expect(print(variablesType)).toMatchInlineSnapshot(`
      "{
          headers: Headers.Foo;
      }"
    `);
  });

  it("should have pathParams type declared", () => {
    const variablesType = getVariablesType({
      requestBodyType: undefinedType,
      headersType: undefinedType,
      pathParamsType: f.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword),
      queryParamsType: undefinedType,
      headersOptional: false,
      pathParamsOptional: false,
      queryParamsOptional: false,
      requestBodyOptional: false,
    });

    expect(print(variablesType)).toMatchInlineSnapshot(`
      "{
          pathParams: number;
      }"
    `);
  });

  it("should have queryParams type declared", () => {
    const variablesType = getVariablesType({
      requestBodyType: undefinedType,
      headersType: undefinedType,
      pathParamsType: undefinedType,
      queryParamsType: createType("QueryParams", "Foo"),
      headersOptional: false,
      pathParamsOptional: false,
      queryParamsOptional: false,
      requestBodyOptional: false,
    });

    expect(print(variablesType)).toMatchInlineSnapshot(`
      "{
          queryParams: QueryParams.Foo;
      }"
    `);
  });

  it("should ignore empty type", () => {
    const variablesType = getVariablesType({
      requestBodyType: undefinedType,
      headersType: undefinedType,
      pathParamsType: undefinedType,
      queryParamsType: f.createTypeLiteralNode([]), // = {}
      headersOptional: false,
      pathParamsOptional: false,
      queryParamsOptional: false,
      requestBodyOptional: false,
    });

    expect(print(variablesType)).toMatchInlineSnapshot(`"void"`);
  });

  it("should combine types", () => {
    const variablesType = getVariablesType({
      requestBodyType: createType("RequestBody", "Pet"),
      headersType: createType("Headers", "Pet"),
      pathParamsType: createType("PathParams", "Pet"),
      queryParamsType: createType("QueryParams", "Pet"),
      headersOptional: false,
      pathParamsOptional: false,
      queryParamsOptional: false,
      requestBodyOptional: false,
    });

    expect(print(variablesType)).toMatchInlineSnapshot(`
      "{
          body: RequestBody.Pet;
          headers: Headers.Pet;
          pathParams: PathParams.Pet;
          queryParams: QueryParams.Pet;
      }"
    `);
  });

  it("should mark types as optional", () => {
    const variablesType = getVariablesType({
      requestBodyType: createType("RequestBody", "Pet"),
      headersType: createType("Headers", "Pet"),
      pathParamsType: createType("PathParams", "Pet"),
      queryParamsType: createType("QueryParams", "Pet"),
      headersOptional: true,
      pathParamsOptional: true,
      queryParamsOptional: true,
      requestBodyOptional: true,
    });

    expect(print(variablesType)).toMatchInlineSnapshot(`
      "{
          body?: RequestBody.Pet;
          headers?: Headers.Pet;
          pathParams?: PathParams.Pet;
          queryParams?: QueryParams.Pet;
      }"
    `);
  });
});

// Helpers
const createType = (namespace: string, name: string) =>
  f.createTypeReferenceNode(
    f.createQualifiedName(
      f.createIdentifier(namespace),
      f.createIdentifier(name)
    )
  );

const undefinedType = f.createKeywordTypeNode(ts.SyntaxKind.UndefinedKeyword);

--- End of openapi-codegen/plugins/typescript/src/core/getVariablesType.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/core/getReferenceSchema.ts ---
import { get } from "lodash";
import {
  isReferenceObject,
  isSchemaObject,
  OpenAPIObject,
  SchemaObject,
} from "openapi3-ts";

/**
 * Get the SchemaObject from a $ref.
 *
 * @param $ref Path of the reference
 * @param context Context
 * @returns The resolved SchemaObject
 */
export const getReferenceSchema = (
  $ref: string,
  openAPIDocument: Pick<OpenAPIObject, "components">
): SchemaObject => {
  const [hash, ...refPath] = $ref.split("/");
  if (hash !== "#") {
    throw new Error("This library only resolve local $ref");
  }

  // NOTE: this is a fix for schema names that have '.' characters in them
  // if passed directly to lodash.get they are treated as path traversals instead of a literal schema name

  // get the last element of the refPath, [0] = 'components', [1] = 'schemas'
  const directSchemaName = refPath.at(-1);
  // try a direct access of the name from the schemas object
  const defaultDirectSearch = openAPIDocument.components?.schemas && openAPIDocument.components.schemas[directSchemaName!];

  // try to perform the typical ref path search but use the direct search as a fallback
  const referenceSchema = get(openAPIDocument, refPath.join("."), defaultDirectSearch);

  // if neither ref path nor direct search find the schema then throw that the ref cant be found
  if (!referenceSchema) {
    throw new Error(`${$ref} not found!`);
  }

  if (isReferenceObject(referenceSchema)) {
    return getReferenceSchema(referenceSchema.$ref, openAPIDocument);
  }

  if (!isSchemaObject(referenceSchema)) {
    throw new Error(`${$ref} can’t be resolved`);
  }

  return referenceSchema;
};

--- End of openapi-codegen/plugins/typescript/src/core/getReferenceSchema.ts ---

--- Start of openapi-codegen/plugins/typescript/src/utils/addPathParam.ts ---
import { mapValues } from "lodash";
import { OpenAPIObject, PathItemObject } from "openapi3-ts";

/**
 * Util to add a path param to an openAPI operation
 */
export const addPathParam = ({
  openAPIDocument,
  pathParam,
  required,
  condition: filter = () => true,
}: {
  /**
   * The openAPI document to transform
   */
  openAPIDocument: OpenAPIObject;
  /**
   * Path param to inject in all requests
   */
  pathParam: string;
  /**
   * If the path param is required
   */
  required: boolean;
  /**
   * Condition to include/exclude the path param
   */
  condition?: (key: string, pathParam: PathItemObject) => boolean;
}): OpenAPIObject => {
  return {
    ...openAPIDocument,
    paths: mapValues(
      openAPIDocument.paths,
      (value: PathItemObject, key: string) =>
        filter(key, value)
          ? {
              ...value,
              parameters: [
                ...(value.parameters ?? []),
                {
                  name: pathParam,
                  in: "path",
                  required,
                  schema: { type: "string" },
                },
              ],
            }
          : value
    ),
  };
};

--- End of openapi-codegen/plugins/typescript/src/utils/addPathParam.ts ---

--- Start of openapi-codegen/plugins/typescript/src/utils/getEnumProperties.ts ---
import { pascal } from "case";
import { SchemaObject } from "openapi3-ts";

/**
 * Extracts all the properties with enum values from an array of schema objects.
 * @param schemaArray An array of OpenAPI schema objects
 * @returns A tuple array containing the property names with enum values and their corresponding schema objects
 */
export const getEnumProperties = (
  schemaArray: SchemaObject[]
): [string, SchemaObject][] => {
  const enumProperties: [string, SchemaObject][] = [];

  schemaArray.forEach((schemaObj) => {
    const name = schemaObj[0];
    const schema = schemaObj[1];

    if (schema.enum) {
      enumProperties.push([name, schema]);
    } else if (schema.type === "object" && schema.properties) {
      Object.entries(schema.properties).forEach(
        ([propertyName, propertySchema]) => {
          processProperty(
            enumProperties,
            `${name}${pascal(propertyName)}`,
            propertySchema
          );
        }
      );
    }
  });

  return enumProperties;
};

const processProperty = (
  enumProperties: [string, SchemaObject][],
  propertyName: string,
  propertySchema: any
) => {
  if (propertySchema.enum) {
    enumProperties.push([`${pascal(propertyName)}`, propertySchema]);
  } else if (propertySchema.type === "object" && propertySchema.properties) {
    Object.entries(propertySchema.properties).forEach(
      ([nestedPropertyName, nestedPropertySchema]) => {
        processProperty(
          enumProperties,
          `${propertyName}${pascal(nestedPropertyName)}`,
          nestedPropertySchema
        );
      }
    );
  }
};

const ones: string[] = [
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "ten",
  "eleven",
  "twelve",
  "thirteen",
  "fourteen",
  "fifteen",
  "sixteen",
  "seventeen",
  "eighteen",
  "nineteen",
];

const tens: string[] = [
  "",
  "",
  "twenty",
  "thirty",
  "forty",
  "fifty",
  "sixty",
  "seventy",
  "eighty",
  "ninety",
];

export const convertNumberToWord = (n: number): string => {
  if (n < 20) {
    return ones[n];
  }

  const digit = n % 10;

  if (n < 100) {
    return tens[Math.floor(n / 10)] + (digit ? "-" + ones[digit] : "");
  }

  if (n < 1000) {
    const hundred = Math.floor(n / 100);
    const remainder = n % 100;

    return (
      ones[hundred] +
      " hundred" +
      (remainder ? " " + convertNumberToWord(remainder) : "")
    );
  }

  const thousand = Math.floor(n / 1000);
  const remainder = n % 1000;

  return (
    convertNumberToWord(thousand) +
    " thousand" +
    (remainder ? " " + convertNumberToWord(remainder) : "")
  );
};

--- End of openapi-codegen/plugins/typescript/src/utils/getEnumProperties.ts ---

--- Start of openapi-codegen/plugins/typescript/src/utils/renameComponent.test.ts ---
import { OpenAPIObject } from "openapi3-ts";
import { petstore } from "../fixtures/petstore";
import { renameComponent } from "./renameComponent";

describe("renameComponent", () => {
  it("should rename all $ref", () => {
    const updatedSpecs = renameComponent({
      openAPIDocument: petstore,
      from: "#/components/schemas/Pet",
      to: "#/components/schemas/APet",
    });
    const updatedSpecsAsString = JSON.stringify(updatedSpecs);

    expect(updatedSpecsAsString.includes("#/components/schemas/Pet")).toBe(
      false
    );
    expect(updatedSpecsAsString.includes("#/components/schemas/APet")).toBe(
      true
    );
  });

  it("should rename the schema object", () => {
    const updatedSpecs = renameComponent({
      openAPIDocument: petstore,
      from: "#/components/schemas/Pet",
      to: "#/components/schemas/APet",
    });

    expect(updatedSpecs.components?.schemas?.Pet).toEqual(undefined);
    expect(updatedSpecs.components?.schemas?.APet).toEqual(
      petstore.components?.schemas?.Pet
    );
  });

  it("should not rename non-related $ref", () => {
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "Test",
        version: "1.0.0",
      },
      paths: {},
      components: {
        schemas: {
          Foo: {
            description: "Should be rename in Baz",
            type: "string",
          },
          FooFoo: {
            type: "number",
          },
          Bar: {
            type: "object",
            properties: {
              foo: {
                description: "Should be rename in Baz",
                $ref: "#/components/schemas/Foo",
              },
              fooFoo: {
                $ref: "#/components/schemas/FooFoo",
              },
            },
          },
        },
      },
    };

    expect(
      renameComponent({
        openAPIDocument,
        from: "#/components/schemas/Foo",
        to: "#/components/schemas/Baz",
      })
    ).toMatchInlineSnapshot(`
      Object {
        "components": Object {
          "schemas": Object {
            "Bar": Object {
              "properties": Object {
                "foo": Object {
                  "$ref": "#/components/schemas/Baz",
                  "description": "Should be rename in Baz",
                },
                "fooFoo": Object {
                  "$ref": "#/components/schemas/FooFoo",
                },
              },
              "type": "object",
            },
            "Baz": Object {
              "description": "Should be rename in Baz",
              "type": "string",
            },
            "FooFoo": Object {
              "type": "number",
            },
          },
        },
        "info": Object {
          "title": "Test",
          "version": "1.0.0",
        },
        "openapi": "3.0.0",
        "paths": Object {},
      }
    `);
  });
});

--- End of openapi-codegen/plugins/typescript/src/utils/renameComponent.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/utils/renameComponent.ts ---
import { get, set, unset } from "lodash";
import { OpenAPIObject } from "openapi3-ts";

/**
 * Util to rename an openAPI component name
 */
export const renameComponent = ({
  openAPIDocument,
  from,
  to,
}: {
  /**
   * The openAPI document to transform
   */
  openAPIDocument: OpenAPIObject;
  /**
   * Original component path (eg: `#/components/schemas/Foo`)
   */
  from: string;
  /**
   * Renamed component path (eg: `#/components/schemas/Bar`)
   */
  to: string;
}): OpenAPIObject => {
  const renamedOpenAPIDocument: OpenAPIObject = JSON.parse(
    JSON.stringify(openAPIDocument).replace(
      new RegExp(`"${from}"`, "g"),
      `"${to}"`
    )
  );

  const fromPath = from.slice("#/".length).replace(/\//g, ".");
  const toPath = to.slice("#/".length).replace(/\//g, ".");

  const schema = get(openAPIDocument, fromPath);
  set(renamedOpenAPIDocument, toPath, schema);
  unset(renamedOpenAPIDocument, fromPath);

  return renamedOpenAPIDocument;
};

--- End of openapi-codegen/plugins/typescript/src/utils/renameComponent.ts ---

--- Start of openapi-codegen/plugins/typescript/src/utils/forceReactQueryComponent.test.ts ---
import { petstore } from "../fixtures/petstore";
import { forceReactQueryComponent } from "./forceReactQueryComponent";

describe("forceReactQueryComponent", () => {
  it("should add the extension to the targeted operationId", () => {
    const updatedOpenAPIDocument = forceReactQueryComponent({
      openAPIDocument: petstore,
      component: "useMutate",
      operationId: "findPets",
    });

    expect(
      updatedOpenAPIDocument.paths["/pets"].get["x-openapi-codegen-component"]
    ).toBe("useMutate");
  });
  it("should throw if the operationId is not found", () => {
    expect(() =>
      forceReactQueryComponent({
        openAPIDocument: petstore,
        component: "useMutate",
        operationId: "notFound",
      })
    ).toThrowError(
      `[forceReactQueryComponent] Operation with the operationId "notFound" not found`
    );
  });

  it("should not mutate the original openAPIDocument", () => {
    const originalDocument = petstore;
    forceReactQueryComponent({
      openAPIDocument: originalDocument,
      component: "useMutate",
      operationId: "findPets",
    });

    expect(
      originalDocument.paths["/pets"].get["x-openapi-codegen-component"]
    ).toBeUndefined();
  });
});

--- End of openapi-codegen/plugins/typescript/src/utils/forceReactQueryComponent.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/utils/addPathParam.test.ts ---
import { OpenAPIObject } from "openapi3-ts";
import { addPathParam } from "./addPathParam";

describe("addPathParam", () => {
  const openAPIDocument: OpenAPIObject = {
    openapi: "3.0.0",
    info: {
      title: "petshop",
      version: "1.0.0",
    },
    paths: {
      "/pets": {
        get: {
          operationId: "listPets",
          description: "Get all the pets",
          responses: {
            "200": {
              description: "pet response",
              content: {
                "application/json": {
                  schema: {
                    type: "array",
                    items: {
                      $ref: "#/components/schemas/Pet",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  };

  it("should add a new path param not required", async () => {
    const openAPIDocumentWithPathParam = addPathParam({
      openAPIDocument,
      pathParam: "breed",
      required: false,
    });

    expect(openAPIDocumentWithPathParam).toMatchInlineSnapshot(`
      Object {
        "info": Object {
          "title": "petshop",
          "version": "1.0.0",
        },
        "openapi": "3.0.0",
        "paths": Object {
          "/pets": Object {
            "get": Object {
              "description": "Get all the pets",
              "operationId": "listPets",
              "responses": Object {
                "200": Object {
                  "content": Object {
                    "application/json": Object {
                      "schema": Object {
                        "items": Object {
                          "$ref": "#/components/schemas/Pet",
                        },
                        "type": "array",
                      },
                    },
                  },
                  "description": "pet response",
                },
              },
            },
            "parameters": Array [
              Object {
                "in": "path",
                "name": "breed",
                "required": false,
                "schema": Object {
                  "type": "string",
                },
              },
            ],
          },
        },
      }
    `);
  });

  it("should add a new path param required", async () => {
    const openAPIDocumentWithPathParam = addPathParam({
      openAPIDocument,
      pathParam: "breed",
      required: true,
    });

    expect(openAPIDocumentWithPathParam).toMatchInlineSnapshot(`
      Object {
        "info": Object {
          "title": "petshop",
          "version": "1.0.0",
        },
        "openapi": "3.0.0",
        "paths": Object {
          "/pets": Object {
            "get": Object {
              "description": "Get all the pets",
              "operationId": "listPets",
              "responses": Object {
                "200": Object {
                  "content": Object {
                    "application/json": Object {
                      "schema": Object {
                        "items": Object {
                          "$ref": "#/components/schemas/Pet",
                        },
                        "type": "array",
                      },
                    },
                  },
                  "description": "pet response",
                },
              },
            },
            "parameters": Array [
              Object {
                "in": "path",
                "name": "breed",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
            ],
          },
        },
      }
    `);
  });

  it("should add a new path param conditionally", async () => {
    const openAPIDocumentWithPathParam = addPathParam({
      openAPIDocument,
      pathParam: "breed",
      required: false,
      condition: (key) => key !== "/pets",
    });

    expect(openAPIDocumentWithPathParam).toMatchInlineSnapshot(`
      Object {
        "info": Object {
          "title": "petshop",
          "version": "1.0.0",
        },
        "openapi": "3.0.0",
        "paths": Object {
          "/pets": Object {
            "get": Object {
              "description": "Get all the pets",
              "operationId": "listPets",
              "responses": Object {
                "200": Object {
                  "content": Object {
                    "application/json": Object {
                      "schema": Object {
                        "items": Object {
                          "$ref": "#/components/schemas/Pet",
                        },
                        "type": "array",
                      },
                    },
                  },
                  "description": "pet response",
                },
              },
            },
          },
        },
      }
    `);
  });
});

--- End of openapi-codegen/plugins/typescript/src/utils/addPathParam.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/utils/forceReactQueryComponent.ts ---
import { cloneDeep, set } from "lodash";
import { OpenAPIObject, PathItemObject } from "openapi3-ts";

import { isOperationObject } from "../core/isOperationObject";
import { isVerb } from "../core/isVerb";

export const forceReactQueryComponent = <OperationId extends string>({
  openAPIDocument,
  operationId,
  component,
}: {
  /**
   * The openAPI document to transform
   */
  openAPIDocument: OpenAPIObject;
  /**
   * OperationId to force
   */
  operationId: OperationId;
  /**
   * Component to use
   */
  component: "useMutate" | "useQuery";
}) => {
  let extensionPath: string | undefined;

  // Find the component
  Object.entries(openAPIDocument.paths).forEach(
    ([route, verbs]: [string, PathItemObject]) => {
      Object.entries(verbs).forEach(([verb, operation]) => {
        if (!isVerb(verb) || !isOperationObject(operation)) return;
        if (operation.operationId === operationId) {
          extensionPath = `paths.${route}.${verb}.x-openapi-codegen-component`;
        }
      });
    }
  );

  if (!extensionPath) {
    throw new Error(
      `[forceReactQueryComponent] Operation with the operationId "${operationId}" not found`
    );
  }

  return set(cloneDeep(openAPIDocument), extensionPath, component);
};

--- End of openapi-codegen/plugins/typescript/src/utils/forceReactQueryComponent.ts ---

--- Start of openapi-codegen/plugins/typescript/src/utils/getEnumProperties.test.ts ---
import { SchemaObject } from "openapi3-ts";
import { convertNumberToWord, getEnumProperties } from "./getEnumProperties";

describe("getEnumProperties", () => {
  it("should return an empty array when input schema array is empty", () => {
    const result = getEnumProperties([]);
    expect(result).toMatchInlineSnapshot(`Array []`);
  });

  it("should correctly extract root enum properties", () => {
    const mockRootEnumSchema: [string, SchemaObject][] = [
      [
        "MyUserStatus",
        {
          type: "string",
          enum: ["ENABLED", "DISABLED"],
        },
      ],
    ];

    const result = getEnumProperties(mockRootEnumSchema);
    expect(result).toMatchInlineSnapshot(`
      Array [
        Array [
          "MyUserStatus",
          Object {
            "enum": Array [
              "ENABLED",
              "DISABLED",
            ],
            "type": "string",
          },
        ],
      ]
    `);
  });

  it("should correctly extract nested enum properties", () => {
    const mockSchemaWithNestedEnums: [string, SchemaObject][] = [
      [
        "Pet",
        {
          required: ["name", "photoUrls"],
          type: "object",
          properties: {
            id: {
              type: "integer",
              format: "int64",
              example: 10,
            },
            name: {
              type: "string",
              example: "doggie",
            },
            category: {
              $ref: "#/components/schemas/Category",
            },
            photoUrls: {
              type: "array",
              xml: {
                wrapped: true,
              },
              items: {
                type: "string",
                xml: {
                  name: "photoUrl",
                },
              },
            },
            tags: {
              type: "array",
              xml: {
                wrapped: true,
              },
              items: {
                $ref: "#/components/schemas/Tag",
              },
            },
            status: {
              type: "string",
              description: "pet status in the store",
              enum: ["AVAILABLE", "PENDING", "SOLD"],
            },
          },
          xml: {
            name: "pet",
          },
        },
      ],
    ];

    const result = getEnumProperties(mockSchemaWithNestedEnums);
    expect(result).toMatchInlineSnapshot(`
      Array [
        Array [
          "PetStatus",
          Object {
            "description": "pet status in the store",
            "enum": Array [
              "AVAILABLE",
              "PENDING",
              "SOLD",
            ],
            "type": "string",
          },
        ],
      ]
    `);
  });
});

describe("convertNumberToWord", () => {
  const testCases: Array<[number, string]> = [
    [0, "zero"],
    [7, "seven"],
    [15, "fifteen"],
    [27, "twenty-seven"],
    [42, "forty-two"],
    [99, "ninety-nine"],
    [100, "one hundred"],
    [110, "one hundred ten"],
    [134, "one hundred thirty-four"],
    [201, "two hundred one"],
    [999, "nine hundred ninety-nine"],
    [1000, "one thousand"],
    [1234, "one thousand two hundred thirty-four"],
    [3456, "three thousand four hundred fifty-six"],
    [9999, "nine thousand nine hundred ninety-nine"],
  ];

  testCases.forEach(([input, expected]) => {
    it(`should convert ${input} to '${expected}'`, () => {
      expect(convertNumberToWord(input)).toBe(expected);
    });
  });
});

--- End of openapi-codegen/plugins/typescript/src/utils/getEnumProperties.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/templates/fetcher.ts ---
import { camel, pascal } from "case";

/**
 * Get fetcher template
 *
 * @param contextPath import the context from another file
 */
export const getFetcher = ({
  prefix,
  contextPath,
  baseUrl,
}: {
  prefix: string;
  contextPath?: string;
  baseUrl?: string;
}) =>
  `${
    contextPath
      ? `import { ${pascal(prefix)}Context } from "./${contextPath}";`
      : `export type ${pascal(prefix)}FetcherExtraProps = {
      /**
       * You can add some extra props to your generated fetchers.
       *
       * Note: You need to re-gen after adding the first property to
       * have the \`${pascal(prefix)}FetcherExtraProps\` injected in \`${pascal(
          prefix
        )}Components.ts\`
       **/
    }`
  }

const baseUrl = ${baseUrl ? `"${baseUrl}"` : `""; // TODO add your baseUrl`}

export type ErrorWrapper<TError> =
  | TError
  | { status: "unknown"; payload: string };

export type ${pascal(
    prefix
  )}FetcherOptions<TBody, THeaders, TQueryParams, TPathParams> = {
  url: string;
  method: string;
  body?: TBody;
  headers?: THeaders;
  queryParams?: TQueryParams;
  pathParams?: TPathParams;
  signal?: AbortSignal;
} & ${
    contextPath
      ? `${pascal(prefix)}Context["fetcherOptions"];`
      : `${pascal(prefix)}FetcherExtraProps`
  }

export async function ${camel(prefix)}Fetch<
  TData,
  TError,
  TBody extends {} | FormData | undefined | null,
  THeaders extends {},
  TQueryParams extends {},
  TPathParams extends {}
>({
  url,
  method,
  body,
  headers,
  pathParams,
  queryParams,
  signal,
}: ${pascal(prefix)}FetcherOptions<
  TBody,
  THeaders,
  TQueryParams,
  TPathParams
>): Promise<TData> {
  try {
    const requestHeaders: HeadersInit = {
      "Content-Type": "application/json",
      ...headers
    };

    /**
     * As the fetch API is being used, when multipart/form-data is specified
     * the Content-Type header must be deleted so that the browser can set
     * the correct boundary.
     * https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects#sending_files_using_a_formdata_object
     */
    if (requestHeaders["Content-Type"].toLowerCase().includes("multipart/form-data")) {
      delete requestHeaders["Content-Type"];
    }

    const response = await window.fetch(\`\${baseUrl}\${resolveUrl(url, queryParams, pathParams)}\`,
      {
        signal,
        method: method.toUpperCase(),
        body: body ? (body instanceof FormData ? body : JSON.stringify(body)) : undefined,
        headers: requestHeaders
      }
    );
    if (!response.ok) {
      let error: ErrorWrapper<TError>;
      try {
        error = await response.json();
      } catch (e) {
        error = {
          status: "unknown" as const,
          payload:
            e instanceof Error
              ? \`Unexpected error (\${e.message})\`
              : "Unexpected error"
        };
      }

      throw error;
    }

    if (response.headers.get('content-type')?.includes('json')) {
      return await response.json();
    } else {
      // if it is not a json response, assume it is a blob and cast it to TData
      return (await response.blob()) as unknown as TData;
    }
  } catch (e) {
    let errorObject: Error = {
      name: "unknown" as const,
      message:
        e instanceof Error ? \`Network error (\${e.message})\` : "Network error",
      stack: e as string,
    };
    throw errorObject;
  }
}

const resolveUrl = (
  url: string,
  queryParams: Record<string, string> = {},
  pathParams: Record<string, string> = {}
) => {
  let query = new URLSearchParams(queryParams).toString();
  if (query) query = \`?\${query}\`;
  return url.replace(/\\{\\w*\\}/g, (key) => pathParams[key.slice(1, -1)]) + query;
};
`;

--- End of openapi-codegen/plugins/typescript/src/templates/fetcher.ts ---

--- Start of openapi-codegen/plugins/typescript/src/templates/templates.test.ts ---
import prettier from "prettier";

import { getContext } from "./context";
import { getFetcher } from "./fetcher";

describe("context", () => {
  it("should be parsable by prettier", () => {
    const template = getContext("petstore", "./components");
    expect(() => {
      prettier.format(template, { parser: "babel-ts" });
    }).not.toThrow();
  });
});

describe("fetcher", () => {
  it("should be parsable by prettier", () => {
    const template = getFetcher({
      prefix: "petstore",
      contextPath: "./context",
    });
    expect(() => {
      prettier.format(template, { parser: "babel-ts" });
    }).not.toThrow();
  });
});

--- End of openapi-codegen/plugins/typescript/src/templates/templates.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/templates/context.ts ---
import { pascal } from "case";

export const getContext = (prefix: string, componentsFile: string) =>
  `import type { QueryKey, UseQueryOptions } from "@tanstack/react-query";
  import { QueryOperation } from './${componentsFile}';
  
  export type ${pascal(prefix)}Context = {
    fetcherOptions: {
      /**
       * Headers to inject in the fetcher
       */
      headers?: {};
      /**
       * Query params to inject in the fetcher
       */
      queryParams?: {};
    };
    queryOptions: {
      /**
       * Set this to \`false\` to disable automatic refetching when the query mounts or changes query keys.
       * Defaults to \`true\`.
       */
      enabled?: boolean;
    };
    /**
     * Query key manager.
     */
    queryKeyFn: (operation: QueryOperation) => QueryKey;
  };
  
  /**
   * Context injected into every react-query hook wrappers
   * 
   * @param queryOptions options from the useQuery wrapper
   */
   export function use${pascal(prefix)}Context<
   TQueryFnData = unknown,
   TError = unknown,
   TData = TQueryFnData,
   TQueryKey extends QueryKey = QueryKey
 >(
   _queryOptions?: Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'queryKey' | 'queryFn'>
 ): ${pascal(prefix)}Context {
    return {
      fetcherOptions: {},
      queryOptions: {},
      queryKeyFn
  }
};

  export const queryKeyFn = (operation: QueryOperation) => {
    const queryKey: unknown[] = hasPathParams(operation)
      ? operation.path
          .split("/")
          .filter(Boolean)
          .map((i) => resolvePathParam(i, operation.variables.pathParams))
      : operation.path.split("/").filter(Boolean);
  
    if (hasQueryParams(operation)) {
      queryKey.push(operation.variables.queryParams);
    }
  
    if (hasBody(operation)) {
      queryKey.push(operation.variables.body);
    }
  
    return queryKey;
  }
  // Helpers
  const resolvePathParam = (
    key: string,
    pathParams: Record<string, string>
  ) => {
    if (key.startsWith("{") && key.endsWith("}")) {
      return pathParams[key.slice(1, -1)];
    }
    return key;
  };

  const hasPathParams = (
    operation: QueryOperation
  ): operation is QueryOperation & {
    variables: { pathParams: Record<string, string> };
  } => {
    return Boolean((operation.variables as any).pathParams);
  };

  const hasBody = (
    operation: QueryOperation
  ): operation is QueryOperation & {
    variables: { body: Record<string, unknown> };
  } => {
    return Boolean((operation.variables as any).body);
  };

  const hasQueryParams = (
    operation: QueryOperation
  ): operation is QueryOperation & {
    variables: { queryParams: Record<string, unknown> };
  } => {
    return Boolean((operation.variables as any).queryParams);
  };
  `;

--- End of openapi-codegen/plugins/typescript/src/templates/context.ts ---

--- Start of openapi-codegen/plugins/typescript/src/templates/utils.ts ---
import {
  clientErrorStatus,
  serverErrorStatus,
} from "../core/getErrorResponseType";

export const getUtils = () =>
  `type ComputeRange<
 N extends number,
 Result extends Array<unknown> = []
> = Result["length"] extends N
 ? Result
 : ComputeRange<N, [...Result, Result["length"]]>;

export type ${clientErrorStatus} = Exclude<ComputeRange<500>[number], ComputeRange<400>[number]>;
export type ${serverErrorStatus} = Exclude<ComputeRange<600>[number], ComputeRange<500>[number]>;`;

--- End of openapi-codegen/plugins/typescript/src/templates/utils.ts ---

--- Start of openapi-codegen/plugins/typescript/src/templates/context.test.ts ---
describe("queryKeyFn", () => {
  /* Playground to craft `queryKeyFn` & its helpers */
  const queryKeyFn = (operation: QueryOperation) => {
    const queryKey: unknown[] = hasPathParams(operation)
      ? operation.path
          .split("/")
          .filter(Boolean)
          .map((i) => resolvePathParam(i, operation.variables.pathParams))
      : operation.path.split("/").filter(Boolean);

    if (hasQueryParams(operation)) {
      queryKey.push(operation.variables.queryParams);
    }

    if (hasBody(operation)) {
      queryKey.push(operation.variables.body);
    }

    return queryKey;
  };

  const resolvePathParam = (
    key: string,
    pathParams: Record<string, string>
  ) => {
    if (key.startsWith("{") && key.endsWith("}")) {
      return pathParams[key.slice(1, -1)];
    }
    return key;
  };

  const hasPathParams = (
    operation: QueryOperation
  ): operation is QueryOperation & {
    variables: { pathParams: Record<string, string> };
  } => {
    return Boolean((operation.variables as any).pathParams);
  };

  const hasBody = (
    operation: QueryOperation
  ): operation is QueryOperation & {
    variables: { body: Record<string, unknown> };
  } => {
    return Boolean((operation.variables as any).body);
  };

  const hasQueryParams = (
    operation: QueryOperation
  ): operation is QueryOperation & {
    variables: { queryParams: Record<string, unknown> };
  } => {
    return Boolean((operation.variables as any).queryParams);
  };
  /* End of playground */

  type TestCase = {
    operation: QueryOperation;
    expected: unknown[];
  };

  const tests: TestCase[] = [
    {
      operation: {
        operationId: "randomGif",
        path: "/gifs/random",
        variables: {},
      },
      expected: ["gifs", "random"],
    },
    {
      operation: {
        operationId: "getGifById",
        path: "/gifs/{gifId}",
        variables: {
          pathParams: {
            gifId: "id",
          },
        },
      },
      expected: ["gifs", "id"],
    },
    {
      operation: {
        operationId: "randomSticker",
        path: "/stickers/random",
        variables: {
          body: {
            foo: "id",
            bar: 42,
          },
        },
      },
      expected: ["stickers", "random", { foo: "id", bar: 42 }],
    },
    {
      operation: {
        operationId: "searchGifs",
        path: "/gifs/search",
        variables: {
          queryParams: {
            q: "awesome",
          },
        },
      },
      expected: ["gifs", "search", { q: "awesome" }],
    },
  ];

  tests.forEach(({ operation, expected }) => {
    it(`should generate the correct key for ${operation.operationId}`, () => {
      expect(queryKeyFn(operation)).toEqual(expected);
    });
  });
});

// Types generated from giphy openAPI for testing
type QueryOperation =
  | {
      path: "/gifs/search";
      operationId: "searchGifs";
      variables: { queryParams: { q: string } };
    }
  | {
      path: "/gifs/trending";
      operationId: "trendingGifs";
      variables: {};
    }
  | {
      path: "/gifs/translate";
      operationId: "translateGif";
      variables: {};
    }
  | {
      path: "/gifs/random";
      operationId: "randomGif";
      variables: {};
    }
  | {
      path: "/gifs/{gifId}";
      operationId: "getGifById";
      variables: { pathParams: { gifId: string } };
    }
  | {
      path: "/gifs";
      operationId: "getGifsById";
      variables: {};
    }
  | {
      path: "/stickers/search";
      operationId: "searchStickers";
      variables: { queryParams: { q: string } };
    }
  | {
      path: "/stickers/trending";
      operationId: "trendingStickers";
      variables: {};
    }
  | {
      path: "/stickers/translate";
      operationId: "translateSticker";
      variables: { queryParams: { s: string } };
    }
  | {
      path: "/stickers/random";
      operationId: "randomSticker";
      variables: { body: { foo: string; bar: number } };
    };

--- End of openapi-codegen/plugins/typescript/src/templates/context.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/fixtures/petstore.ts ---
import { OpenAPIObject } from "openapi3-ts";

export const petstore: OpenAPIObject = {
  openapi: "3.0.0",
  info: {
    version: "1.0.0",
    title: "Swagger Petstore",
    description:
      "A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification",
    termsOfService: "http://swagger.io/terms/",
    contact: {
      name: "Swagger API Team",
      email: "apiteam@swagger.io",
      url: "http://swagger.io",
    },
    license: {
      name: "Apache 2.0",
      url: "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
  },
  servers: [
    {
      url: "http://petstore.swagger.io/api",
    },
  ],
  paths: {
    "/pets": {
      get: {
        description:
          "Returns all pets from the system that the user has access to\nNam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.\n\nSed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.\n",
        operationId: "findPets",
        parameters: [
          {
            name: "tags",
            in: "query",
            description: "tags to filter by",
            required: false,
            style: "form",
            schema: {
              type: "array",
              items: {
                type: "string",
              },
            },
          },
          {
            name: "limit",
            in: "query",
            description: "maximum number of results to return",
            required: false,
            schema: {
              type: "integer",
              format: "int32",
            },
          },
        ],
        responses: {
          "200": {
            description: "pet response",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    $ref: "#/components/schemas/Pet",
                  },
                },
              },
            },
          },
          default: {
            description: "unexpected error",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Error",
                },
              },
            },
          },
        },
      },
      post: {
        description: "Creates a new pet in the store.  Duplicates are allowed",
        operationId: "addPet",
        requestBody: {
          description: "Pet to add to the store",
          required: true,
          content: {
            "application/json": {
              schema: {
                $ref: "#/components/schemas/NewPet",
              },
            },
          },
        },
        responses: {
          "200": {
            description: "pet response",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Pet",
                },
              },
            },
          },
          default: {
            description: "unexpected error",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Error",
                },
              },
            },
          },
        },
      },
    },
    "/pets/{id}": {
      get: {
        description:
          "Returns a user based on a single ID, if the user does not have access to the pet",
        operationId: "find pet by id",
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of pet to fetch",
            required: true,
            schema: {
              type: "integer",
              format: "int64",
            },
          },
        ],
        responses: {
          "200": {
            description: "pet response",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Pet",
                },
              },
            },
          },
          default: {
            description: "unexpected error",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Error",
                },
              },
            },
          },
        },
      },
      delete: {
        description: "deletes a single pet based on the ID supplied",
        operationId: "deletePet",
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of pet to delete",
            required: true,
            schema: {
              type: "integer",
              format: "int64",
            },
          },
        ],
        responses: {
          "204": {
            description: "pet deleted",
          },
          default: {
            description: "unexpected error",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Error",
                },
              },
            },
          },
        },
      },
      patch: {
        description: "Updates a pet in the store.",
        operationId: "updatePet",
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of pet to update",
            required: true,
            schema: {
              type: "integer",
              format: "int64",
            },
          },
        ],
        requestBody: {
          $ref: "#/components/requestBodies/updatePetRequest",
        },
        responses: {
          "200": {
            description: "pet response",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Pet",
                },
              },
            },
          },
          default: {
            description: "unexpected error",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Error",
                },
              },
            },
          },
        },
      },
    },
  },
  components: {
    parameters: {
      idParam: {
        name: "id",
        in: "path",
        required: true,
        schema: {
          description: "Unique identifier",
          type: "string",
        },
      },
    },
    requestBodies: {
      updatePetRequest: {
        content: {
          "application/json": {
            schema: {
              $ref: "#/components/schemas/NewPet",
            },
          },
        },
        required: true,
      },
    },
    responses: {
      NotModified: {
        description: "Not modified",
      },
      PetResponse: {
        description: "A pet",
        content: {
          "application/json": {
            schema: {
              $ref: "#/components/schemas/Pet",
            },
          },
        },
      },
    },
    schemas: {
      Pet: {
        description: "A pet.",
        allOf: [
          {
            $ref: "#/components/schemas/NewPet",
          },
          {
            type: "object",
            required: ["id"],
            properties: {
              id: {
                type: "integer",
                format: "int64",
              },
            },
          },
        ],
      },
      NewPet: {
        description: "A new pet.",
        type: "object",
        required: ["name"],
        properties: {
          name: {
            type: "string",
          },
          tag: {
            type: "string",
          },
        },
      },
      CatOrDog: {
        description: "A discriminator example.",
        oneOf: [
          {
            $ref: "#/components/schemas/Cat",
          },
          {
            $ref: "#/components/schemas/Dog",
          },
        ],
        discriminator: {
          propertyName: "type",
          mapping: {
            cat: "#/components/schemas/Cat",
            dog: "#/components/schemas/Dog",
          },
        },
      },
      Cat: {
        description: "A cat, meow.",
        type: "object",
        properties: {
          type: {
            type: "string",
          },
          breed: {
            type: "string",
            enum: ["labrador", "carlin", "beagle"],
          },
        },
        required: ["type", "breed"],
      },
      Dog: {
        description: "A dog, wooof.",
        type: "object",
        properties: {
          type: {
            type: "string",
          },
          breed: {
            type: "string",
            enum: ["saimois", "bengal", "british shorthair"],
          },
        },
        required: ["type", "breed"],
      },
      Error: {
        description: "An error :(",
        type: "object",
        required: ["code", "message"],
        properties: {
          code: {
            type: "integer",
            format: "int32",
          },
          message: {
            type: "string",
          },
        },
      },
      Request: {
        description: "Request description",
        type: "object",
        properties: {
          action: {
            type: "array",
            items: {
              type: "string",
              enum: ["create", "read", "update", "delete"],
            },
          },
        },
      },
    },
  },
};

--- End of openapi-codegen/plugins/typescript/src/fixtures/petstore.ts ---

--- Start of openapi-codegen/plugins/typescript/src/generators/generateReactQueryFunctions.test.ts ---
import { OpenAPIObject } from "openapi3-ts";
import {
  Config,
  generateReactQueryFunctions,
} from "./generateReactQueryFunctions";

const config: Config = {
  filenamePrefix: "petstore",
  schemasFiles: {
    parameters: "petstoreParameters",
    schemas: "petstoreSchemas",
    responses: "petstoreResponses",
    requestBodies: "petstoreRequestBodies",
  },
};

describe("generateReactQueryFunctions", () => {
  it("should inject the customFetch import", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {},
    };

    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => false, // customFetcher is not there
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreFetcher.ts");
  });

  it("should generate a useQuery wrapper (no parameters)", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets": {
          get: {
            operationId: "listPets",
            description: "Get all the pets",
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreFunctions.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { PetstoreContext, queryKeyFn } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";

      export type ListPetsError = Fetcher.ErrorWrapper<undefined>;

      export type ListPetsResponse = Schemas.Pet[];

      export type ListPetsVariables = PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Get all the pets
       */
      export const fetchListPets = (variables: ListPetsVariables, signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, {}, {}, {}>({ url: \\"/pets\\", method: \\"get\\", ...variables, signal });

      /**
       * Get all the pets
       */
      export const listPetsQuery = (variables: ListPetsVariables): [
          reactQuery.QueryKey,
          ({ signal }: {
              signal?: AbortSignal;
          }) => Promise<ListPetsResponse>
      ] => [
          queryKeyFn({
              path: \\"/pets\\",
              operationId: \\"listPets\\",
              variables
          }),
          async ({ signal }: {
              signal?: AbortSignal;
          }) => fetchListPets({ ...variables }, signal)
      ];

      export type QueryOperation = {
          path: \\"/pets\\";
          operationId: \\"listPets\\";
          variables: ListPetsVariables;
      };
      "
    `);
  });

  it("should generate a useQuery wrapper (with queryParams)", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets": {
          get: {
            operationId: "listPets",
            description: "Get all the pets",
            parameters: [
              {
                in: "query",
                name: "breed",
                description: "Filter on the dog breed",
                required: true,
                schema: {
                  type: "string",
                },
              },
              { $ref: "#/components/parameters/colorParam" },
            ],
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      components: {
        parameters: {
          colorParam: {
            in: "query",
            description: "Color of the dog",
            name: "color",
            schema: {
              type: "string",
              enum: ["white", "black", "grey"],
            },
          },
        },
      },
    };

    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreFunctions.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { PetstoreContext, queryKeyFn } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";

      export type ListPetsQueryParams = {
          /**
           * Filter on the dog breed
           */
          breed: string;
          /**
           * Color of the dog
           */
          color?: \\"white\\" | \\"black\\" | \\"grey\\";
      };

      export type ListPetsError = Fetcher.ErrorWrapper<undefined>;

      export type ListPetsResponse = Schemas.Pet[];

      export type ListPetsVariables = {
          queryParams: ListPetsQueryParams;
      } & PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Get all the pets
       */
      export const fetchListPets = (variables: ListPetsVariables, signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, {}, ListPetsQueryParams, {}>({ url: \\"/pets\\", method: \\"get\\", ...variables, signal });

      /**
       * Get all the pets
       */
      export const listPetsQuery = (variables: ListPetsVariables): [
          reactQuery.QueryKey,
          ({ signal }: {
              signal?: AbortSignal;
          }) => Promise<ListPetsResponse>
      ] => [
          queryKeyFn({
              path: \\"/pets\\",
              operationId: \\"listPets\\",
              variables
          }),
          async ({ signal }: {
              signal?: AbortSignal;
          }) => fetchListPets({ ...variables }, signal)
      ];

      export type QueryOperation = {
          path: \\"/pets\\";
          operationId: \\"listPets\\";
          variables: ListPetsVariables;
      };
      "
    `);
  });

  it("should generate a useQuery wrapper (with pathParams)", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets/{pet_id}": {
          get: {
            operationId: "showPetById",
            description: "Info for a specific pet",
            parameters: [
              {
                in: "path",
                name: "pet_id",
                description: "The id of the pet to retrieve",
                required: true,
                schema: {
                  type: "string",
                },
              },
            ],
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreFunctions.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { PetstoreContext, queryKeyFn } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";

      export type ShowPetByIdPathParams = {
          /**
           * The id of the pet to retrieve
           */
          petId: string;
      };

      export type ShowPetByIdError = Fetcher.ErrorWrapper<undefined>;

      export type ShowPetByIdResponse = Schemas.Pet[];

      export type ShowPetByIdVariables = {
          pathParams: ShowPetByIdPathParams;
      } & PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Info for a specific pet
       */
      export const fetchShowPetById = (variables: ShowPetByIdVariables, signal?: AbortSignal) => petstoreFetch<ShowPetByIdResponse, ShowPetByIdError, undefined, {}, {}, ShowPetByIdPathParams>({ url: \\"/pets/{petId}\\", method: \\"get\\", ...variables, signal });

      /**
       * Info for a specific pet
       */
      export const showPetByIdQuery = (variables: ShowPetByIdVariables): [
          reactQuery.QueryKey,
          ({ signal }: {
              signal?: AbortSignal;
          }) => Promise<ShowPetByIdResponse>
      ] => [
          queryKeyFn({
              path: \\"/pets/{petId}\\",
              operationId: \\"showPetById\\",
              variables
          }),
          async ({ signal }: {
              signal?: AbortSignal;
          }) => fetchShowPetById({ ...variables }, signal)
      ];

      export type QueryOperation = {
          path: \\"/pets/{petId}\\";
          operationId: \\"showPetById\\";
          variables: ShowPetByIdVariables;
      };
      "
    `);
  });

  it("should deal with injected headers (marked them as optional)", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets": {
          get: {
            operationId: "listPets",
            description: "Get all the pets",
            parameters: [
              {
                in: "header",
                name: "breed",
                description: "Filter on the dog breed",
                required: true,
                schema: {
                  type: "string",
                },
              },
              { $ref: "#/components/parameters/colorParam" },
            ],
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      components: {
        parameters: {
          colorParam: {
            in: "query",
            description: "Color of the dog",
            name: "color",
            schema: {
              type: "string",
              enum: ["white", "black", "grey"],
            },
          },
        },
      },
    };

    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      { ...config, injectedHeaders: ["breed"] }
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreFunctions.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { PetstoreContext, queryKeyFn } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";

      export type ListPetsQueryParams = {
          /**
           * Color of the dog
           */
          color?: \\"white\\" | \\"black\\" | \\"grey\\";
      };

      export type ListPetsHeaders = {
          /**
           * Filter on the dog breed
           */
          breed?: string;
      };

      export type ListPetsError = Fetcher.ErrorWrapper<undefined>;

      export type ListPetsResponse = Schemas.Pet[];

      export type ListPetsVariables = {
          headers?: ListPetsHeaders;
          queryParams?: ListPetsQueryParams;
      } & PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Get all the pets
       */
      export const fetchListPets = (variables: ListPetsVariables, signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, ListPetsHeaders, ListPetsQueryParams, {}>({ url: \\"/pets\\", method: \\"get\\", ...variables, signal });

      /**
       * Get all the pets
       */
      export const listPetsQuery = (variables: ListPetsVariables): [
          reactQuery.QueryKey,
          ({ signal }: {
              signal?: AbortSignal;
          }) => Promise<ListPetsResponse>
      ] => [
          queryKeyFn({
              path: \\"/pets\\",
              operationId: \\"listPets\\",
              variables
          }),
          async ({ signal }: {
              signal?: AbortSignal;
          }) => fetchListPets({ ...variables }, signal)
      ];

      export type QueryOperation = {
          path: \\"/pets\\";
          operationId: \\"listPets\\";
          variables: ListPetsVariables;
      };
      "
    `);
  });

  it("should not generated duplicated types", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets": {
          get: {
            operationId: "listPets",
            description: "Get all the pets",
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
              "201": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreFunctions.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { PetstoreContext, queryKeyFn } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";

      export type ListPetsError = Fetcher.ErrorWrapper<undefined>;

      export type ListPetsResponse = Schemas.Pet[];

      export type ListPetsVariables = PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Get all the pets
       */
      export const fetchListPets = (variables: ListPetsVariables, signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, {}, {}, {}>({ url: \\"/pets\\", method: \\"get\\", ...variables, signal });

      /**
       * Get all the pets
       */
      export const listPetsQuery = (variables: ListPetsVariables): [
          reactQuery.QueryKey,
          ({ signal }: {
              signal?: AbortSignal;
          }) => Promise<ListPetsResponse>
      ] => [
          queryKeyFn({
              path: \\"/pets\\",
              operationId: \\"listPets\\",
              variables
          }),
          async ({ signal }: {
              signal?: AbortSignal;
          }) => fetchListPets({ ...variables }, signal)
      ];

      export type QueryOperation = {
          path: \\"/pets\\";
          operationId: \\"listPets\\";
          variables: ListPetsVariables;
      };
      "
    `);
  });

  it("should generate useMutation for POST operation", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pet": {
          post: {
            operationId: "AddPet",
            requestBody: {
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      name: {
                        type: "string",
                      },
                      color: {
                        type: "string",
                      },
                      breed: {
                        type: "string",
                      },
                      age: {
                        type: "integer",
                      },
                    },
                    required: ["name", "breed", "age"],
                  },
                },
              },
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
              500: {
                content: {
                  "application/json": {
                    description: "An Error",
                    schema: {
                      type: "object",
                      properties: {
                        code: {
                          type: "integer",
                          enum: [500],
                        },
                        message: {
                          type: "string",
                        },
                      },
                      required: ["code", "message"],
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreFunctions.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { PetstoreContext, queryKeyFn } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should generate useMutation if openapi-codegen-component is defined", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pet": {
          get: {
            operationId: "AddPet",
            "x-openapi-codegen-component": "useMutate",
            requestBody: {
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      name: {
                        type: "string",
                      },
                      color: {
                        type: "string",
                      },
                      breed: {
                        type: "string",
                      },
                      age: {
                        type: "integer",
                      },
                    },
                    required: ["name", "breed", "age"],
                  },
                },
              },
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
              500: {
                content: {
                  "application/json": {
                    description: "An Error",
                    schema: {
                      type: "object",
                      properties: {
                        code: {
                          type: "integer",
                          enum: [500],
                        },
                        message: {
                          type: "string",
                        },
                      },
                      required: ["code", "message"],
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreFunctions.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { PetstoreContext, queryKeyFn } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should resolve requestBody ref", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      components: {
        requestBodies: {
          dog: {
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    name: {
                      type: "string",
                    },
                    color: {
                      type: "string",
                    },
                    breed: {
                      type: "string",
                    },
                    age: {
                      type: "integer",
                    },
                  },
                  required: ["name", "breed", "age"],
                },
              },
            },
          },
        },
      },
      paths: {
        "/pet": {
          post: {
            operationId: "AddPet",
            requestBody: {
              $ref: "#/components/requestBodies/dog",
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
              500: {
                content: {
                  "application/json": {
                    description: "An Error",
                    schema: {
                      type: "object",
                      properties: {
                        code: {
                          type: "integer",
                          enum: [500],
                        },
                        message: {
                          type: "string",
                        },
                      },
                      required: ["code", "message"],
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreFunctions.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { PetstoreContext, queryKeyFn } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should deal with pathParams", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      components: {
        requestBodies: {
          UpdatePetRequestBody: {
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    name: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
      paths: {
        "/pet/{pet_id}": {
          parameters: [
            {
              in: "path",
              name: "pet_id",
              schema: {
                type: "string",
              },
              required: true,
            },
          ],
          put: {
            operationId: "updatePet",
            requestBody: {
              $ref: "#/components/requestBodies/UpdatePetRequestBody",
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
    };
    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreFunctions.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { PetstoreContext, queryKeyFn } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should build components without prefix", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      components: {
        requestBodies: {
          UpdatePetRequestBody: {
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    name: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
      paths: {
        "/pet/{pet_id}": {
          parameters: [
            {
              in: "path",
              name: "pet_id",
              schema: {
                type: "string",
              },
              required: true,
            },
          ],
          put: {
            operationId: "updatePet",
            requestBody: {
              $ref: "#/components/requestBodies/UpdatePetRequestBody",
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
    };
    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      { ...config, filenamePrefix: "" }
    );

    expect(writeFile.mock.calls[0][0]).toBe("functions.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { Context, queryKeyFn } from \\"./context\\";
      import type * as Fetcher from \\"./fetcher\\";
      import { fetch } from \\"./fetcher\\";

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should generate utils file if needed", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets": {
          get: {
            operationId: "listPets",
            description: "Get all the pets",
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
              "5xx": {
                description: "Server error",
                content: {
                  "application/json": {
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryFunctions(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreUtils.ts");
    expect(writeFile.mock.calls[1][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { PetstoreContext, queryKeyFn } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";
      import type { ServerErrorStatus } from \\"./petstoreUtils\\";

      export type ListPetsError = Fetcher.ErrorWrapper<{
          status: ServerErrorStatus;
          payload: string;
      }>;

      export type ListPetsResponse = Schemas.Pet[];

      export type ListPetsVariables = PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Get all the pets
       */
      export const fetchListPets = (variables: ListPetsVariables, signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, {}, {}, {}>({ url: \\"/pets\\", method: \\"get\\", ...variables, signal });

      /**
       * Get all the pets
       */
      export const listPetsQuery = (variables: ListPetsVariables): [
          reactQuery.QueryKey,
          ({ signal }: {
              signal?: AbortSignal;
          }) => Promise<ListPetsResponse>
      ] => [
          queryKeyFn({
              path: \\"/pets\\",
              operationId: \\"listPets\\",
              variables
          }),
          async ({ signal }: {
              signal?: AbortSignal;
          }) => fetchListPets({ ...variables }, signal)
      ];

      export type QueryOperation = {
          path: \\"/pets\\";
          operationId: \\"listPets\\";
          variables: ListPetsVariables;
      };
      "
    `);
  });
});

--- End of openapi-codegen/plugins/typescript/src/generators/generateReactQueryFunctions.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/generators/generateReactQueryFunctions.ts ---
import ts, { factory as f } from "typescript";
import * as c from "case";
import { get } from "lodash";

import { ConfigBase, Context } from "./types";
import { PathItemObject } from "openapi3-ts";

import { getUsedImports } from "../core/getUsedImports";
import { createWatermark } from "../core/createWatermark";
import { createOperationFetcherFnNodes } from "../core/createOperationFetcherFnNodes";
import { createOperationQueryFnNodes } from "../core/createOperationQueryFnNodes";

import { isVerb } from "../core/isVerb";
import { isOperationObject } from "../core/isOperationObject";
import { getOperationTypes } from "../core/getOperationTypes";
import { createNamedImport } from "../core/createNamedImport";

import { getFetcher } from "../templates/fetcher";
import { getContext } from "../templates/context";
import { getUtils } from "../templates/utils";
import { createNamespaceImport } from "../core/createNamespaceImport";
import { camelizedPathParams } from "../core/camelizedPathParams";

export type Config = ConfigBase & {
  /**
   * Generated files paths from `generateSchemaTypes`
   */
  schemasFiles: {
    requestBodies: string;
    schemas: string;
    parameters: string;
    responses: string;
  };
  /**
   * List of headers injected in the custom fetcher
   *
   * This will mark the header as optional in the component API
   */
  injectedHeaders?: string[];
};

export const generateReactQueryFunctions = async (
  context: Context,
  config: Config
) => {
  const sourceFile = ts.createSourceFile(
    "index.ts",
    "",
    ts.ScriptTarget.Latest
  );

  const printer = ts.createPrinter({
    newLine: ts.NewLineKind.LineFeed,
    removeComments: false,
  });

  const printNodes = (nodes: ts.Node[]) =>
    nodes
      .map((node: ts.Node, i, nodes) => {
        return (
          printer.printNode(ts.EmitHint.Unspecified, node, sourceFile) +
          (ts.isJSDoc(node) ||
          (ts.isImportDeclaration(node) &&
            nodes[i + 1] &&
            ts.isImportDeclaration(nodes[i + 1]))
            ? ""
            : "\n")
        );
      })
      .join("\n");

  const filenamePrefix =
    c.snake(config.filenamePrefix ?? context.openAPIDocument.info.title) + "-";

  const formatFilename = config.filenameCase ? c[config.filenameCase] : c.camel;

  const filename = formatFilename(filenamePrefix + "-functions");

  const fetcherFn = c.camel(`${filenamePrefix}-fetch`);
  const contextTypeName = `${c.pascal(filenamePrefix)}Context`;
  const nodes: ts.Node[] = [];
  const keyManagerItems: ts.TypeLiteralNode[] = [];

  const fetcherFilename = formatFilename(filenamePrefix + "-fetcher");
  const contextFilename = formatFilename(filenamePrefix + "-context");
  const utilsFilename = formatFilename(filenamePrefix + "-utils");

  if (!context.existsFile(`${fetcherFilename}.ts`)) {
    context.writeFile(
      `${fetcherFilename}.ts`,
      getFetcher({
        prefix: filenamePrefix,
        contextPath: contextFilename,
        baseUrl: get(context.openAPIDocument, "servers.0.url"),
      })
    );
  }

  if (!context.existsFile(`${contextFilename}.ts`)) {
    context.writeFile(
      `${contextFilename}.ts`,
      getContext(filenamePrefix, filename)
    );
  }

  // Generate `useQuery` & `useMutation`
  const operationIds: string[] = [];

  Object.entries(context.openAPIDocument.paths).forEach(
    ([route, verbs]: [string, PathItemObject]) => {
      Object.entries(verbs).forEach(([verb, operation]) => {
        if (!isVerb(verb) || !isOperationObject(operation)) return;
        const operationId = c.camel(operation.operationId);
        if (operationIds.includes(operationId)) {
          throw new Error(
            `The operationId "${operation.operationId}" is duplicated in your schema definition!`
          );
        }
        operationIds.push(operationId);

        const {
          dataType,
          errorType,
          requestBodyType,
          pathParamsType,
          variablesType,
          queryParamsType,
          headersType,
          declarationNodes,
        } = getOperationTypes({
          openAPIDocument: context.openAPIDocument,
          operation,
          operationId,
          printNodes,
          injectedHeaders: config.injectedHeaders,
          pathParameters: verbs.parameters,
          variablesExtraPropsType: f.createIndexedAccessTypeNode(
            f.createTypeReferenceNode(
              f.createIdentifier(contextTypeName),
              undefined
            ),
            f.createLiteralTypeNode(f.createStringLiteral("fetcherOptions"))
          ),
        });

        

        const operationFetcherFnName = `fetch${c.pascal(operationId)}`;
        const operationQueryFnName = `${c.pascal(operationId)}Query`;
        const component: "useQuery" | "useMutate" =
          operation["x-openapi-codegen-component"] ||
          (verb === "get" ? "useQuery" : "useMutate");

        if (!["useQuery", "useMutate"].includes(component)) {
          throw new Error(`[x-openapi-codegen-component] Invalid value for ${operation.operationId} operation
          Valid options: "useMutate", "useQuery"`);
        }

        if (component === "useQuery") {
          
          nodes.push(...declarationNodes);

          keyManagerItems.push(
            f.createTypeLiteralNode([
              f.createPropertySignature(
                undefined,
                f.createIdentifier("path"),
                undefined,
                f.createLiteralTypeNode(
                  f.createStringLiteral(camelizedPathParams(route))
                )
              ),
              f.createPropertySignature(
                undefined,
                f.createIdentifier("operationId"),
                undefined,
                f.createLiteralTypeNode(f.createStringLiteral(operationId))
              ),
              f.createPropertySignature(
                undefined,
                f.createIdentifier("variables"),
                undefined,
                variablesType
              ),
            ])
          );

          nodes.push(
            ...createOperationFetcherFnNodes({
              dataType,
              errorType,
              requestBodyType,
              pathParamsType,
              variablesType,
              queryParamsType,
              headersType,
              operation,
              fetcherFn,
              url: route,
              verb,
              name: operationFetcherFnName,
            }),
            ...createOperationQueryFnNodes({
              operationFetcherFnName,
              dataType,
              errorType,
              requestBodyType,
              pathParamsType,
              variablesType,
              queryParamsType,
              headersType,
              operation,
              fetcherFn,
              url: route,
              verb,
              name: operationQueryFnName,
            })
          );
        }
      });
    }
  );

  if (operationIds.length === 0) {
    console.log(`⚠️ You don't have any operation with "operationId" defined!`);
  }
  const queryKeyManager = f.createTypeAliasDeclaration(
    [f.createModifier(ts.SyntaxKind.ExportKeyword)],
    "QueryOperation",
    undefined,
    keyManagerItems.length > 0
      ? f.createUnionTypeNode(keyManagerItems)
      : f.createTypeLiteralNode([
          f.createPropertySignature(
            undefined,
            f.createIdentifier("path"),
            undefined,
            f.createKeywordTypeNode(ts.SyntaxKind.StringKeyword)
          ),
          f.createPropertySignature(
            undefined,
            f.createIdentifier("operationId"),
            undefined,
            f.createKeywordTypeNode(ts.SyntaxKind.NeverKeyword)
          ),
          f.createPropertySignature(
            undefined,
            f.createIdentifier("variables"),
            undefined,
            f.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword)
          ),
        ])
  );

  const { nodes: usedImportsNodes, keys: usedImportsKeys } = getUsedImports(
    nodes,
    {
      ...config.schemasFiles,
      utils: utilsFilename,
    }
  );

  if (usedImportsKeys.includes("utils")) {
    await context.writeFile(`${utilsFilename}.ts`, getUtils());
  }

  await context.writeFile(
    filename + ".ts",
    printNodes([
      createWatermark(context.openAPIDocument.info),
      createReactQueryImport(),
      createNamedImport(
        [contextTypeName, "queryKeyFn"],
        `./${contextFilename}`
      ),
      createNamespaceImport("Fetcher", `./${fetcherFilename}`),
      createNamedImport(fetcherFn, `./${fetcherFilename}`),
      ...usedImportsNodes,
      ...nodes,
      queryKeyManager,
    ])
  );
};

const createReactQueryImport = () =>
  f.createImportDeclaration(
    undefined,
    f.createImportClause(
      false,
      undefined,
      f.createNamespaceImport(f.createIdentifier("reactQuery"))
    ),
    f.createStringLiteral("@tanstack/react-query"),
    undefined
  );

--- End of openapi-codegen/plugins/typescript/src/generators/generateReactQueryFunctions.ts ---

--- Start of openapi-codegen/plugins/typescript/src/generators/generateFetchers.test.ts ---
import { set } from "lodash";
import { OpenAPIObject } from "openapi3-ts";
import { Config, generateFetchers } from "./generateFetchers";

const config: Config = {
  filenamePrefix: "petstore",
  schemasFiles: {
    parameters: "petstoreParameters",
    schemas: "petstoreSchemas",
    responses: "petstoreResponses",
    requestBodies: "petstoreRequestBodies",
  },
};

describe("generateFetchers", () => {
  const openAPIDocument: OpenAPIObject = {
    openapi: "3.0.0",
    info: {
      title: "petshop",
      version: "1.0.0",
    },
    paths: {
      "/pets": {
        get: {
          operationId: "listPets",
          description: "Get all the pets",
          responses: {
            "200": {
              description: "pet response",
              content: {
                "application/json": {
                  schema: {
                    type: "array",
                    items: {
                      $ref: "#/components/schemas/Pet",
                    },
                  },
                },
              },
            },
            "404": {
              description: "not found",
              $ref: "#/components/responses/NotFoundError",
            },
            "5xx": {
              content: {
                "application/json": {
                  schema: {
                    $ref: "#/components/schemas/Error",
                  },
                },
              },
            },
          },
        },
      },
    },
  };

  it("should generate fetchers", async () => {
    const writeFile = jest.fn();

    await generateFetchers(
      {
        openAPIDocument,
        writeFile,
        readFile: async () => "",
        existsFile: () => true,
      },
      config
    );

    expect(writeFile.mock.calls[1][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[1][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";
      import type * as Responses from \\"./petstoreResponses\\";
      import type { ServerErrorStatus } from \\"./petstoreUtils\\";

      export type ListPetsError = Fetcher.ErrorWrapper<{
          status: 404;
          payload: Responses.NotFoundError;
      } | {
          status: ServerErrorStatus;
          payload: Schemas.Error;
      }>;

      export type ListPetsResponse = Schemas.Pet[];

      /**
       * Get all the pets
       */
      export const listPets = (signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, {}, {}, {}>({ url: \\"/pets\\", method: \\"get\\", signal });
      "
    `);
  });

  it("should generate fetchers without prefix", async () => {
    const writeFile = jest.fn();

    await generateFetchers(
      {
        openAPIDocument,
        writeFile,
        readFile: async () => "",
        existsFile: () => true,
      },
      { ...config, filenamePrefix: "" }
    );

    expect(writeFile.mock.calls[1][0]).toBe("components.ts");
    expect(writeFile.mock.calls[1][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import type * as Fetcher from \\"./fetcher\\";
      import { fetch } from \\"./fetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";
      import type * as Responses from \\"./petstoreResponses\\";
      import type { ServerErrorStatus } from \\"./utils\\";

      export type ListPetsError = Fetcher.ErrorWrapper<{
          status: 404;
          payload: Responses.NotFoundError;
      } | {
          status: ServerErrorStatus;
          payload: Schemas.Error;
      }>;

      export type ListPetsResponse = Schemas.Pet[];

      /**
       * Get all the pets
       */
      export const listPets = (signal?: AbortSignal) => fetch<ListPetsResponse, ListPetsError, undefined, {}, {}, {}>({ url: \\"/pets\\", method: \\"get\\", signal });
      "
    `);
  });

  it("should generate fetcher with injected props", async () => {
    const writeFile = jest.fn();

    await generateFetchers(
      {
        openAPIDocument,
        writeFile,
        readFile: async () => `
        export type PetstoreFetcherExtraProps = {
          /**
           * Treat 404 errors as success
           */
          byPassNotFound?: boolean;
        };
        `,
        existsFile: () => true,
      },
      config
    );

    expect(writeFile.mock.calls[1][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[1][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch, PetstoreFetcherExtraProps } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";
      import type * as Responses from \\"./petstoreResponses\\";
      import type { ServerErrorStatus } from \\"./petstoreUtils\\";

      export type ListPetsError = Fetcher.ErrorWrapper<{
          status: 404;
          payload: Responses.NotFoundError;
      } | {
          status: ServerErrorStatus;
          payload: Schemas.Error;
      }>;

      export type ListPetsResponse = Schemas.Pet[];

      export type ListPetsVariables = PetstoreFetcherExtraProps;

      /**
       * Get all the pets
       */
      export const listPets = (variables: ListPetsVariables, signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, {}, {}, {}>({ url: \\"/pets\\", method: \\"get\\", ...variables, signal });
      "
    `);
  });

  it("should generate fetcher with operations by tag", async () => {
    const writeFile = jest.fn();

    const openAPIDocumentWithTags = set(
      openAPIDocument,
      "paths./pets.get.tags",
      ["pets"]
    );

    await generateFetchers(
      {
        openAPIDocument: openAPIDocumentWithTags,
        writeFile,
        readFile: async () => "",
        existsFile: () => true,
      },
      config
    );

    expect(writeFile.mock.calls[1][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[1][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";
      import type * as Responses from \\"./petstoreResponses\\";
      import type { ServerErrorStatus } from \\"./petstoreUtils\\";

      export type ListPetsError = Fetcher.ErrorWrapper<{
          status: 404;
          payload: Responses.NotFoundError;
      } | {
          status: ServerErrorStatus;
          payload: Schemas.Error;
      }>;

      export type ListPetsResponse = Schemas.Pet[];

      /**
       * Get all the pets
       */
      export const listPets = (signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, {}, {}, {}>({ url: \\"/pets\\", method: \\"get\\", signal });

      export const operationsByTag = { \\"pets\\": { listPets } };
      "
    `);
  });
});

--- End of openapi-codegen/plugins/typescript/src/generators/generateFetchers.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/generators/generateReactQueryComponents.ts ---
import ts, { factory as f } from "typescript";
import * as c from "case";
import { get } from "lodash";

import { ConfigBase, Context } from "./types";
import { OperationObject, PathItemObject } from "openapi3-ts";

import { getUsedImports } from "../core/getUsedImports";
import { createWatermark } from "../core/createWatermark";
import { createOperationFetcherFnNodes } from "../core/createOperationFetcherFnNodes";
import { isVerb } from "../core/isVerb";
import { isOperationObject } from "../core/isOperationObject";
import { getOperationTypes } from "../core/getOperationTypes";
import { createNamedImport } from "../core/createNamedImport";

import { getFetcher } from "../templates/fetcher";
import { getContext } from "../templates/context";
import { getUtils } from "../templates/utils";
import { createNamespaceImport } from "../core/createNamespaceImport";
import { camelizedPathParams } from "../core/camelizedPathParams";

export type Config = ConfigBase & {
  /**
   * Generated files paths from `generateSchemaTypes`
   */
  schemasFiles: {
    requestBodies: string;
    schemas: string;
    parameters: string;
    responses: string;
  };
  /**
   * List of headers injected in the custom fetcher
   *
   * This will mark the header as optional in the component API
   */
  injectedHeaders?: string[];
};

export const generateReactQueryComponents = async (
  context: Context,
  config: Config
) => {
  const sourceFile = ts.createSourceFile(
    "index.ts",
    "",
    ts.ScriptTarget.Latest
  );

  const printer = ts.createPrinter({
    newLine: ts.NewLineKind.LineFeed,
    removeComments: false,
  });

  const printNodes = (nodes: ts.Node[]) =>
    nodes
      .map((node: ts.Node, i, nodes) => {
        return (
          printer.printNode(ts.EmitHint.Unspecified, node, sourceFile) +
          (ts.isJSDoc(node) ||
          (ts.isImportDeclaration(node) &&
            nodes[i + 1] &&
            ts.isImportDeclaration(nodes[i + 1]))
            ? ""
            : "\n")
        );
      })
      .join("\n");

  const filenamePrefix =
    c.snake(config.filenamePrefix ?? context.openAPIDocument.info.title) + "-";

  const formatFilename = config.filenameCase ? c[config.filenameCase] : c.camel;

  const filename = formatFilename(filenamePrefix + "-components");

  const fetcherFn = c.camel(`${filenamePrefix}-fetch`);
  const contextTypeName = `${c.pascal(filenamePrefix)}Context`;
  const contextHookName = `use${c.pascal(filenamePrefix)}Context`;
  const nodes: ts.Node[] = [];
  const keyManagerItems: ts.TypeLiteralNode[] = [];

  const fetcherFilename = formatFilename(filenamePrefix + "-fetcher");
  const contextFilename = formatFilename(filenamePrefix + "-context");
  const utilsFilename = formatFilename(filenamePrefix + "-utils");

  if (!context.existsFile(`${fetcherFilename}.ts`)) {
    context.writeFile(
      `${fetcherFilename}.ts`,
      getFetcher({
        prefix: filenamePrefix,
        contextPath: contextFilename,
        baseUrl: get(context.openAPIDocument, "servers.0.url"),
      })
    );
  }

  if (!context.existsFile(`${contextFilename}.ts`)) {
    context.writeFile(
      `${contextFilename}.ts`,
      getContext(filenamePrefix, filename)
    );
  }

  // Generate `useQuery` & `useMutation`
  const operationIds: string[] = [];

  Object.entries(context.openAPIDocument.paths).forEach(
    ([route, verbs]: [string, PathItemObject]) => {
      Object.entries(verbs).forEach(([verb, operation]) => {
        if (!isVerb(verb) || !isOperationObject(operation)) return;
        const operationId = c.camel(operation.operationId);
        if (operationIds.includes(operationId)) {
          throw new Error(
            `The operationId "${operation.operationId}" is duplicated in your schema definition!`
          );
        }
        operationIds.push(operationId);

        const {
          dataType,
          errorType,
          requestBodyType,
          pathParamsType,
          variablesType,
          queryParamsType,
          headersType,
          declarationNodes,
        } = getOperationTypes({
          openAPIDocument: context.openAPIDocument,
          operation,
          operationId,
          printNodes,
          injectedHeaders: config.injectedHeaders,
          pathParameters: verbs.parameters,
          variablesExtraPropsType: f.createIndexedAccessTypeNode(
            f.createTypeReferenceNode(
              f.createIdentifier(contextTypeName),
              undefined
            ),
            f.createLiteralTypeNode(f.createStringLiteral("fetcherOptions"))
          ),
        });

        nodes.push(...declarationNodes);

        const operationFetcherFnName = `fetch${c.pascal(operationId)}`;
        const component: "useQuery" | "useMutate" =
          operation["x-openapi-codegen-component"] ||
          (verb === "get" ? "useQuery" : "useMutate");

        if (!["useQuery", "useMutate"].includes(component)) {
          throw new Error(`[x-openapi-codegen-component] Invalid value for ${operation.operationId} operation
          Valid options: "useMutate", "useQuery"`);
        }

        if (component === "useQuery") {
          keyManagerItems.push(
            f.createTypeLiteralNode([
              f.createPropertySignature(
                undefined,
                f.createIdentifier("path"),
                undefined,
                f.createLiteralTypeNode(
                  f.createStringLiteral(camelizedPathParams(route))
                )
              ),
              f.createPropertySignature(
                undefined,
                f.createIdentifier("operationId"),
                undefined,
                f.createLiteralTypeNode(f.createStringLiteral(operationId))
              ),
              f.createPropertySignature(
                undefined,
                f.createIdentifier("variables"),
                undefined,
                variablesType
              ),
            ])
          );
        }

        nodes.push(
          ...createOperationFetcherFnNodes({
            dataType,
            errorType,
            requestBodyType,
            pathParamsType,
            variablesType,
            queryParamsType,
            headersType,
            operation,
            fetcherFn,
            url: route,
            verb,
            name: operationFetcherFnName,
          }),
          ...(component === "useQuery"
            ? createQueryHook({
                operationFetcherFnName,
                operation,
                dataType,
                errorType,
                variablesType,
                contextHookName,
                name: `use${c.pascal(operationId)}`,
                operationId,
                url: route,
              })
            : createMutationHook({
                operationFetcherFnName,
                operation,
                dataType,
                errorType,
                variablesType,
                contextHookName,
                name: `use${c.pascal(operationId)}`,
              }))
        );
      });
    }
  );

  if (operationIds.length === 0) {
    console.log(`⚠️ You don't have any operation with "operationId" defined!`);
  }
  const queryKeyManager = f.createTypeAliasDeclaration(
    [f.createModifier(ts.SyntaxKind.ExportKeyword)],
    "QueryOperation",
    undefined,
    keyManagerItems.length > 0
      ? f.createUnionTypeNode(keyManagerItems)
      : f.createTypeLiteralNode([
          f.createPropertySignature(
            undefined,
            f.createIdentifier("path"),
            undefined,
            f.createKeywordTypeNode(ts.SyntaxKind.StringKeyword)
          ),
          f.createPropertySignature(
            undefined,
            f.createIdentifier("operationId"),
            undefined,
            f.createKeywordTypeNode(ts.SyntaxKind.NeverKeyword)
          ),
          f.createPropertySignature(
            undefined,
            f.createIdentifier("variables"),
            undefined,
            f.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword)
          ),
        ])
  );

  const { nodes: usedImportsNodes, keys: usedImportsKeys } = getUsedImports(
    nodes,
    {
      ...config.schemasFiles,
      utils: utilsFilename,
    }
  );

  if (usedImportsKeys.includes("utils")) {
    await context.writeFile(`${utilsFilename}.ts`, getUtils());
  }

  await context.writeFile(
    filename + ".ts",
    printNodes([
      createWatermark(context.openAPIDocument.info),
      createReactQueryImport(),
      createNamedImport(
        [contextHookName, contextTypeName],
        `./${contextFilename}`
      ),
      createNamespaceImport("Fetcher", `./${fetcherFilename}`),
      createNamedImport(fetcherFn, `./${fetcherFilename}`),
      ...usedImportsNodes,
      ...nodes,
      queryKeyManager,
    ])
  );
};

const createMutationHook = ({
  operationFetcherFnName,
  contextHookName,
  dataType,
  errorType,
  variablesType,
  name,
  operation,
}: {
  operationFetcherFnName: string;
  contextHookName: string;
  name: string;
  dataType: ts.TypeNode;
  errorType: ts.TypeNode;
  variablesType: ts.TypeNode;
  operation: OperationObject;
}) => {
  const nodes: ts.Node[] = [];
  if (operation.description) {
    nodes.push(f.createJSDocComment(operation.description.trim(), []));
  }

  nodes.push(
    f.createVariableStatement(
      [f.createModifier(ts.SyntaxKind.ExportKeyword)],
      f.createVariableDeclarationList(
        [
          f.createVariableDeclaration(
            f.createIdentifier(name),
            undefined,
            undefined,
            f.createArrowFunction(
              undefined,
              undefined,
              [
                f.createParameterDeclaration(
                  undefined,
                  undefined,
                  f.createIdentifier("options"),
                  f.createToken(ts.SyntaxKind.QuestionToken),
                  f.createTypeReferenceNode(f.createIdentifier("Omit"), [
                    f.createTypeReferenceNode(
                      f.createQualifiedName(
                        f.createIdentifier("reactQuery"),
                        f.createIdentifier("UseMutationOptions")
                      ),
                      [dataType, errorType, variablesType]
                    ),
                    f.createLiteralTypeNode(
                      f.createStringLiteral("mutationFn")
                    ),
                  ]),
                  undefined
                ),
              ],
              undefined,
              f.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
              f.createBlock(
                [
                  f.createVariableStatement(
                    undefined,
                    f.createVariableDeclarationList(
                      [
                        f.createVariableDeclaration(
                          f.createObjectBindingPattern([
                            f.createBindingElement(
                              undefined,
                              undefined,
                              f.createIdentifier("fetcherOptions"),
                              undefined
                            ),
                          ]),
                          undefined,
                          undefined,
                          f.createCallExpression(
                            f.createIdentifier(contextHookName),
                            undefined,
                            []
                          )
                        ),
                      ],
                      ts.NodeFlags.Const
                    )
                  ),
                  f.createReturnStatement(
                    f.createCallExpression(
                      f.createPropertyAccessExpression(
                        f.createIdentifier("reactQuery"),
                        f.createIdentifier("useMutation")
                      ),
                      [dataType, errorType, variablesType],
                      [
                        f.createObjectLiteralExpression(
                          [
                            f.createPropertyAssignment(
                              "mutationFn",
                              f.createArrowFunction(
                                undefined,
                                undefined,
                                [
                                  f.createParameterDeclaration(
                                    undefined,
                                    undefined,
                                    f.createIdentifier("variables"),
                                    undefined,
                                    variablesType,
                                    undefined
                                  ),
                                ],
                                undefined,
                                f.createToken(
                                  ts.SyntaxKind.EqualsGreaterThanToken
                                ),
                                f.createCallExpression(
                                  f.createIdentifier(operationFetcherFnName),
                                  undefined,
                                  [
                                    f.createObjectLiteralExpression(
                                      [
                                        f.createSpreadAssignment(
                                          f.createIdentifier("fetcherOptions")
                                        ),
                                        f.createSpreadAssignment(
                                          f.createIdentifier("variables")
                                        ),
                                      ],
                                      false
                                    ),
                                  ]
                                )
                              )
                            ),
                            f.createSpreadAssignment(
                              f.createIdentifier("options")
                            ),
                          ],
                          true
                        ),
                      ]
                    )
                  ),
                ],
                true
              )
            )
          ),
        ],
        ts.NodeFlags.Const
      )
    )
  );

  return nodes;
};

const createQueryHook = ({
  operationFetcherFnName,
  contextHookName,
  dataType,
  errorType,
  variablesType,
  name,
  operationId,
  operation,
  url,
}: {
  operationFetcherFnName: string;
  contextHookName: string;
  name: string;
  operationId: string;
  url: string;
  dataType: ts.TypeNode;
  errorType: ts.TypeNode;
  variablesType: ts.TypeNode;
  operation: OperationObject;
}) => {
  const nodes: ts.Node[] = [];
  if (operation.description) {
    nodes.push(f.createJSDocComment(operation.description.trim(), []));
  }
  nodes.push(
    f.createVariableStatement(
      [f.createModifier(ts.SyntaxKind.ExportKeyword)],
      f.createVariableDeclarationList(
        [
          f.createVariableDeclaration(
            f.createIdentifier(name),
            undefined,
            undefined,
            f.createArrowFunction(
              undefined,
              [
                f.createTypeParameterDeclaration(
                  undefined,
                  "TData",
                  undefined,
                  dataType
                ),
              ],
              [
                f.createParameterDeclaration(
                  undefined,
                  undefined,
                  f.createIdentifier("variables"),
                  undefined,
                  variablesType
                ),
                f.createParameterDeclaration(
                  undefined,
                  undefined,
                  f.createIdentifier("options"),
                  f.createToken(ts.SyntaxKind.QuestionToken),
                  createUseQueryOptionsType(dataType, errorType)
                ),
              ],
              undefined,
              f.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
              f.createBlock([
                f.createVariableStatement(
                  undefined,
                  f.createVariableDeclarationList(
                    [
                      f.createVariableDeclaration(
                        f.createObjectBindingPattern([
                          f.createBindingElement(
                            undefined,
                            undefined,
                            f.createIdentifier("fetcherOptions"),
                            undefined
                          ),
                          f.createBindingElement(
                            undefined,
                            undefined,
                            f.createIdentifier("queryOptions"),
                            undefined
                          ),
                          f.createBindingElement(
                            undefined,
                            undefined,
                            f.createIdentifier("queryKeyFn"),
                            undefined
                          ),
                        ]),
                        undefined,
                        undefined,
                        f.createCallExpression(
                          f.createIdentifier(contextHookName),
                          undefined,
                          [f.createIdentifier("options")]
                        )
                      ),
                    ],
                    ts.NodeFlags.Const
                  )
                ),
                f.createReturnStatement(
                  f.createCallExpression(
                    f.createPropertyAccessExpression(
                      f.createIdentifier("reactQuery"),
                      f.createIdentifier("useQuery")
                    ),
                    [
                      dataType,
                      errorType,
                      f.createTypeReferenceNode(
                        f.createIdentifier("TData"),
                        []
                      ),
                    ],
                    [
                      f.createObjectLiteralExpression(
                        [
                          f.createPropertyAssignment(
                            "queryKey",
                            f.createCallExpression(
                              f.createIdentifier("queryKeyFn"),
                              undefined,
                              [
                                f.createObjectLiteralExpression([
                                  f.createPropertyAssignment(
                                    "path",
                                    f.createStringLiteral(
                                      camelizedPathParams(url)
                                    )
                                  ),
                                  f.createPropertyAssignment(
                                    "operationId",
                                    f.createStringLiteral(operationId)
                                  ),
                                  f.createShorthandPropertyAssignment(
                                    f.createIdentifier("variables")
                                  ),
                                ]),
                              ]
                            )
                          ),
                          f.createPropertyAssignment(
                            "queryFn",
                            f.createArrowFunction(
                              undefined,
                              undefined,
                              [
                                f.createParameterDeclaration(
                                  undefined,
                                  undefined,
                                  f.createObjectBindingPattern([
                                    f.createBindingElement(
                                      undefined,
                                      undefined,
                                      "signal"
                                    ),
                                  ])
                                ),
                              ],
                              undefined,
                              f.createToken(
                                ts.SyntaxKind.EqualsGreaterThanToken
                              ),
                              f.createCallExpression(
                                f.createIdentifier(operationFetcherFnName),
                                undefined,
                                [
                                  f.createObjectLiteralExpression(
                                    [
                                      f.createSpreadAssignment(
                                        f.createIdentifier("fetcherOptions")
                                      ),
                                      f.createSpreadAssignment(
                                        f.createIdentifier("variables")
                                      ),
                                    ],
                                    false
                                  ),
                                  f.createIdentifier("signal"),
                                ]
                              )
                            )
                          ),
                          f.createSpreadAssignment(
                            f.createIdentifier("options")
                          ),
                          f.createSpreadAssignment(
                            f.createIdentifier("queryOptions")
                          ),
                        ],
                        true
                      ),
                    ]
                  )
                ),
              ])
            )
          ),
        ],
        ts.NodeFlags.Const
      )
    )
  );

  return nodes;
};

const createUseQueryOptionsType = (
  dataType: ts.TypeNode,
  errorType: ts.TypeNode
) =>
  f.createTypeReferenceNode(f.createIdentifier("Omit"), [
    f.createTypeReferenceNode(
      f.createQualifiedName(
        f.createIdentifier("reactQuery"),
        f.createIdentifier("UseQueryOptions")
      ),
      [
        dataType,
        errorType,
        f.createTypeReferenceNode(f.createIdentifier("TData"), []),
      ]
    ),
    f.createUnionTypeNode([
      f.createLiteralTypeNode(f.createStringLiteral("queryKey")),
      f.createLiteralTypeNode(f.createStringLiteral("queryFn")),
      f.createLiteralTypeNode(f.createStringLiteral("initialData")),
    ]),
  ]);

const createReactQueryImport = () =>
  f.createImportDeclaration(
    undefined,
    f.createImportClause(
      false,
      undefined,
      f.createNamespaceImport(f.createIdentifier("reactQuery"))
    ),
    f.createStringLiteral("@tanstack/react-query"),
    undefined
  );

--- End of openapi-codegen/plugins/typescript/src/generators/generateReactQueryComponents.ts ---

--- Start of openapi-codegen/plugins/typescript/src/generators/generateSchemaTypes.test.ts ---
import { petstore } from "../fixtures/petstore";
import { generateSchemaTypes } from "./generateSchemaTypes";

describe("generateSchemaTypes", () => {
  describe("filenameCase option", () => {
    it("should generate files in camel case", () => {
      const writeFile = jest.fn();
      const readFile = jest.fn(() => Promise.resolve(""));

      generateSchemaTypes(
        {
          openAPIDocument: petstore,
          writeFile,
          readFile,
          existsFile: () => true,
        },
        {
          filenameCase: "camel",
        }
      );
      expect(writeFile.mock.calls[0][0]).toBe("swaggerPetstoreSchemas.ts");
    });

    it("should generate files in snake case", () => {
      const writeFile = jest.fn();
      const readFile = jest.fn(() => Promise.resolve(""));

      generateSchemaTypes(
        {
          openAPIDocument: petstore,
          writeFile,
          readFile,
          existsFile: () => true,
        },
        {
          filenameCase: "snake",
        }
      );
      expect(writeFile.mock.calls[0][0]).toBe("swagger_petstore_schemas.ts");
    });

    it("should generate files in kebab case", () => {
      const writeFile = jest.fn();
      const readFile = jest.fn(() => Promise.resolve(""));

      generateSchemaTypes(
        {
          openAPIDocument: petstore,
          writeFile,
          readFile,
          existsFile: () => true,
        },
        {
          filenameCase: "kebab",
        }
      );
      expect(writeFile.mock.calls[0][0]).toBe("swagger-petstore-schemas.ts");
    });

    it("should generate files in pascal case", () => {
      const writeFile = jest.fn();
      const readFile = jest.fn(() => Promise.resolve(""));

      generateSchemaTypes(
        {
          openAPIDocument: petstore,
          writeFile,
          readFile,
          existsFile: () => true,
        },
        {
          filenameCase: "pascal",
        }
      );
      expect(writeFile.mock.calls[0][0]).toBe("SwaggerPetstoreSchemas.ts");
    });
  });

  describe("filenamePrefix option", () => {
    it("should take have the correct prefix", () => {
      const writeFile = jest.fn();
      const readFile = jest.fn(() => Promise.resolve(""));
      generateSchemaTypes(
        {
          openAPIDocument: petstore,
          writeFile,
          readFile,
          existsFile: () => true,
        },
        {
          filenameCase: "camel",
          filenamePrefix: "petstore",
        }
      );
      expect(writeFile.mock.calls[0][0]).toBe("petstoreSchemas.ts");
    });
  });

  describe("without filenamePrefix option", () => {
    it("should not have a prefix", () => {
      const writeFile = jest.fn();
      const readFile = jest.fn(() => Promise.resolve(""));
      generateSchemaTypes(
        {
          openAPIDocument: petstore,
          writeFile,
          readFile,
          existsFile: () => true,
        },
        {
          filenameCase: "camel",
          filenamePrefix: "",
        }
      );
      expect(writeFile.mock.calls[0][0]).toBe("schemas.ts");
    });
  });

  describe("schemas file generation", () => {
    it("should generate the schemas file", async () => {
      const writeFile = jest.fn();
      const readFile = jest.fn(() => Promise.resolve(""));
      await generateSchemaTypes(
        {
          openAPIDocument: petstore,
          writeFile,
          readFile,
          existsFile: () => true,
        },
        {
          filenameCase: "camel",
        }
      );
      expect(writeFile.mock.calls[0][0]).toBe("swaggerPetstoreSchemas.ts");
      expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
        "/**
         * Generated by @openapi-codegen
         * 
         * @version 1.0.0
         */
        /**
         * A new pet.
         */
        export type Pet = NewPet & {
            /**
             * @format int64
             */
            id: number;
        };

        /**
         * A new pet.
         */
        export type NewPet = {
            name: string;
            tag?: string;
        };

        /**
         * A discriminator example.
         */
        export type CatOrDog = (Omit<Cat, \\"type\\"> & {
            type: \\"cat\\";
        }) | (Omit<Dog, \\"type\\"> & {
            type: \\"dog\\";
        });

        /**
         * A cat, meow.
         */
        export type Cat = {
            type: string;
            breed: \\"labrador\\" | \\"carlin\\" | \\"beagle\\";
        };

        /**
         * A dog, wooof.
         */
        export type Dog = {
            type: string;
            breed: \\"saimois\\" | \\"bengal\\" | \\"british shorthair\\";
        };

        /**
         * An error :(
         */
        export type Error = {
            /**
             * @format int32
             */
            code: number;
            message: string;
        };

        /**
         * Request description
         */
        export type Request = {
            action?: (\\"create\\" | \\"read\\" | \\"update\\" | \\"delete\\")[];
        };
        "
      `);
    });

    it("should generate the schemas file with enums instead of string unions", async () => {
      const writeFile = jest.fn();
      const readFile = jest.fn(() => Promise.resolve(""));
      await generateSchemaTypes(
        {
          openAPIDocument: petstore,
          writeFile,
          readFile,
          existsFile: () => true,
        },
        {
          filenameCase: "camel",
          useEnums: true,
        }
      );
      expect(writeFile.mock.calls[0][0]).toBe("swaggerPetstoreSchemas.ts");
      expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
        "/**
         * Generated by @openapi-codegen
         * 
         * @version 1.0.0
         */
        export enum CatBreed {
            labrador = \\"labrador\\",
            carlin = \\"carlin\\",
            beagle = \\"beagle\\"
        }

        export enum DogBreed {
            saimois = \\"saimois\\",
            bengal = \\"bengal\\",
            british shorthair = \\"british shorthair\\"
        }

        /**
         * A new pet.
         */
        export type Pet = NewPet & {
            /**
             * @format int64
             */
            id: number;
        };

        /**
         * A new pet.
         */
        export type NewPet = {
            name: string;
            tag?: string;
        };

        /**
         * A discriminator example.
         */
        export type CatOrDog = (Omit<Cat, \\"type\\"> & {
            type: \\"cat\\";
        }) | (Omit<Dog, \\"type\\"> & {
            type: \\"dog\\";
        });

        /**
         * A cat, meow.
         */
        export type Cat = {
            type: string;
            breed: CatBreed;
        };

        /**
         * A dog, wooof.
         */
        export type Dog = {
            type: string;
            breed: DogBreed;
        };

        /**
         * An error :(
         */
        export type Error = {
            /**
             * @format int32
             */
            code: number;
            message: string;
        };

        /**
         * Request description
         */
        export type Request = {
            action?: (\\"create\\" | \\"read\\" | \\"update\\" | \\"delete\\")[];
        };
        "
      `);
    });

    it("should generate the responses file", async () => {
      const writeFile = jest.fn();
      const readFile = jest.fn(() => Promise.resolve(""));
      await generateSchemaTypes(
        {
          openAPIDocument: petstore,
          writeFile,
          readFile,
          existsFile: () => true,
        },
        {
          filenameCase: "camel",
        }
      );
      expect(writeFile.mock.calls[1][0]).toBe("swaggerPetstoreResponses.ts");
      expect(writeFile.mock.calls[1][1]).toMatchInlineSnapshot(`
        "/**
         * Generated by @openapi-codegen
         * 
         * @version 1.0.0
         */
        import type * as Schemas from \\"./swaggerPetstoreSchemas\\";

        export type NotModified = void;

        export type PetResponse = Schemas.Pet;
        "
      `);
    });

    it("should generate the request bodies file", async () => {
      const writeFile = jest.fn();
      const readFile = jest.fn(() => Promise.resolve(""));
      await generateSchemaTypes(
        {
          openAPIDocument: petstore,
          writeFile,
          readFile,
          existsFile: () => true,
        },
        {
          filenameCase: "camel",
        }
      );
      expect(writeFile.mock.calls[2][0]).toBe(
        "swaggerPetstoreRequestBodies.ts"
      );
      expect(writeFile.mock.calls[2][1]).toMatchInlineSnapshot(`
        "/**
         * Generated by @openapi-codegen
         * 
         * @version 1.0.0
         */
        import type * as Schemas from \\"./swaggerPetstoreSchemas\\";

        export type UpdatePetRequest = Schemas.NewPet;
        "
      `);
    });

    it("should generate the parameters file", async () => {
      const writeFile = jest.fn();
      const readFile = jest.fn(() => Promise.resolve(""));

      await generateSchemaTypes(
        {
          openAPIDocument: petstore,
          writeFile,
          readFile,
          existsFile: () => true,
        },
        {
          filenameCase: "camel",
        }
      );
      expect(writeFile.mock.calls[3][0]).toBe("swaggerPetstoreParameters.ts");
      expect(writeFile.mock.calls[3][1]).toMatchInlineSnapshot(`
        "/**
         * Generated by @openapi-codegen
         * 
         * @version 1.0.0
         */
        /**
         * Unique identifier
         */
        export type IdParam = string;
        "
      `);
    });
  });
});

--- End of openapi-codegen/plugins/typescript/src/generators/generateSchemaTypes.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/generators/generateReactQueryComponents.test.ts ---
import { OpenAPIObject } from "openapi3-ts";
import {
  Config,
  generateReactQueryComponents,
} from "./generateReactQueryComponents";

const config: Config = {
  filenamePrefix: "petstore",
  schemasFiles: {
    parameters: "petstoreParameters",
    schemas: "petstoreSchemas",
    responses: "petstoreResponses",
    requestBodies: "petstoreRequestBodies",
  },
};

describe("generateReactQueryComponents", () => {
  it("should inject the customFetch import", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {},
    };

    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => false, // customFetcher is not there
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreFetcher.ts");
  });

  it("should generate a useQuery wrapper (no parameters)", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets": {
          get: {
            operationId: "listPets",
            description: "Get all the pets",
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";

      export type ListPetsError = Fetcher.ErrorWrapper<undefined>;

      export type ListPetsResponse = Schemas.Pet[];

      export type ListPetsVariables = PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Get all the pets
       */
      export const fetchListPets = (variables: ListPetsVariables, signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, {}, {}, {}>({ url: \\"/pets\\", method: \\"get\\", ...variables, signal });

      /**
       * Get all the pets
       */
      export const useListPets = <TData = ListPetsResponse>(variables: ListPetsVariables, options?: Omit<reactQuery.UseQueryOptions<ListPetsResponse, ListPetsError, TData>, \\"queryKey\\" | \\"queryFn\\" | \\"initialData\\">) => { const { fetcherOptions, queryOptions, queryKeyFn } = usePetstoreContext(options); return reactQuery.useQuery<ListPetsResponse, ListPetsError, TData>({
          queryKey: queryKeyFn({ path: \\"/pets\\", operationId: \\"listPets\\", variables }),
          queryFn: ({ signal }) => fetchListPets({ ...fetcherOptions, ...variables }, signal),
          ...options,
          ...queryOptions
      }); };

      export type QueryOperation = {
          path: \\"/pets\\";
          operationId: \\"listPets\\";
          variables: ListPetsVariables;
      };
      "
    `);
  });

  it("should generate a useQuery wrapper (with queryParams)", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets": {
          get: {
            operationId: "listPets",
            description: "Get all the pets",
            parameters: [
              {
                in: "query",
                name: "breed",
                description: "Filter on the dog breed",
                required: true,
                schema: {
                  type: "string",
                },
              },
              { $ref: "#/components/parameters/colorParam" },
            ],
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      components: {
        parameters: {
          colorParam: {
            in: "query",
            description: "Color of the dog",
            name: "color",
            schema: {
              type: "string",
              enum: ["white", "black", "grey"],
            },
          },
        },
      },
    };

    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";

      export type ListPetsQueryParams = {
          /**
           * Filter on the dog breed
           */
          breed: string;
          /**
           * Color of the dog
           */
          color?: \\"white\\" | \\"black\\" | \\"grey\\";
      };

      export type ListPetsError = Fetcher.ErrorWrapper<undefined>;

      export type ListPetsResponse = Schemas.Pet[];

      export type ListPetsVariables = {
          queryParams: ListPetsQueryParams;
      } & PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Get all the pets
       */
      export const fetchListPets = (variables: ListPetsVariables, signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, {}, ListPetsQueryParams, {}>({ url: \\"/pets\\", method: \\"get\\", ...variables, signal });

      /**
       * Get all the pets
       */
      export const useListPets = <TData = ListPetsResponse>(variables: ListPetsVariables, options?: Omit<reactQuery.UseQueryOptions<ListPetsResponse, ListPetsError, TData>, \\"queryKey\\" | \\"queryFn\\" | \\"initialData\\">) => { const { fetcherOptions, queryOptions, queryKeyFn } = usePetstoreContext(options); return reactQuery.useQuery<ListPetsResponse, ListPetsError, TData>({
          queryKey: queryKeyFn({ path: \\"/pets\\", operationId: \\"listPets\\", variables }),
          queryFn: ({ signal }) => fetchListPets({ ...fetcherOptions, ...variables }, signal),
          ...options,
          ...queryOptions
      }); };

      export type QueryOperation = {
          path: \\"/pets\\";
          operationId: \\"listPets\\";
          variables: ListPetsVariables;
      };
      "
    `);
  });

  it("should generate a useQuery wrapper (with pathParams)", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets/{pet_id}": {
          get: {
            operationId: "showPetById",
            description: "Info for a specific pet",
            parameters: [
              {
                in: "path",
                name: "pet_id",
                description: "The id of the pet to retrieve",
                required: true,
                schema: {
                  type: "string",
                },
              },
            ],
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";

      export type ShowPetByIdPathParams = {
          /**
           * The id of the pet to retrieve
           */
          petId: string;
      };

      export type ShowPetByIdError = Fetcher.ErrorWrapper<undefined>;

      export type ShowPetByIdResponse = Schemas.Pet[];

      export type ShowPetByIdVariables = {
          pathParams: ShowPetByIdPathParams;
      } & PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Info for a specific pet
       */
      export const fetchShowPetById = (variables: ShowPetByIdVariables, signal?: AbortSignal) => petstoreFetch<ShowPetByIdResponse, ShowPetByIdError, undefined, {}, {}, ShowPetByIdPathParams>({ url: \\"/pets/{petId}\\", method: \\"get\\", ...variables, signal });

      /**
       * Info for a specific pet
       */
      export const useShowPetById = <TData = ShowPetByIdResponse>(variables: ShowPetByIdVariables, options?: Omit<reactQuery.UseQueryOptions<ShowPetByIdResponse, ShowPetByIdError, TData>, \\"queryKey\\" | \\"queryFn\\" | \\"initialData\\">) => { const { fetcherOptions, queryOptions, queryKeyFn } = usePetstoreContext(options); return reactQuery.useQuery<ShowPetByIdResponse, ShowPetByIdError, TData>({
          queryKey: queryKeyFn({ path: \\"/pets/{petId}\\", operationId: \\"showPetById\\", variables }),
          queryFn: ({ signal }) => fetchShowPetById({ ...fetcherOptions, ...variables }, signal),
          ...options,
          ...queryOptions
      }); };

      export type QueryOperation = {
          path: \\"/pets/{petId}\\";
          operationId: \\"showPetById\\";
          variables: ShowPetByIdVariables;
      };
      "
    `);
  });

  it("should deal with injected headers (marked them as optional)", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets": {
          get: {
            operationId: "listPets",
            description: "Get all the pets",
            parameters: [
              {
                in: "header",
                name: "breed",
                description: "Filter on the dog breed",
                required: true,
                schema: {
                  type: "string",
                },
              },
              { $ref: "#/components/parameters/colorParam" },
            ],
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      components: {
        parameters: {
          colorParam: {
            in: "query",
            description: "Color of the dog",
            name: "color",
            schema: {
              type: "string",
              enum: ["white", "black", "grey"],
            },
          },
        },
      },
    };

    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      { ...config, injectedHeaders: ["breed"] }
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";

      export type ListPetsQueryParams = {
          /**
           * Color of the dog
           */
          color?: \\"white\\" | \\"black\\" | \\"grey\\";
      };

      export type ListPetsHeaders = {
          /**
           * Filter on the dog breed
           */
          breed?: string;
      };

      export type ListPetsError = Fetcher.ErrorWrapper<undefined>;

      export type ListPetsResponse = Schemas.Pet[];

      export type ListPetsVariables = {
          headers?: ListPetsHeaders;
          queryParams?: ListPetsQueryParams;
      } & PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Get all the pets
       */
      export const fetchListPets = (variables: ListPetsVariables, signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, ListPetsHeaders, ListPetsQueryParams, {}>({ url: \\"/pets\\", method: \\"get\\", ...variables, signal });

      /**
       * Get all the pets
       */
      export const useListPets = <TData = ListPetsResponse>(variables: ListPetsVariables, options?: Omit<reactQuery.UseQueryOptions<ListPetsResponse, ListPetsError, TData>, \\"queryKey\\" | \\"queryFn\\" | \\"initialData\\">) => { const { fetcherOptions, queryOptions, queryKeyFn } = usePetstoreContext(options); return reactQuery.useQuery<ListPetsResponse, ListPetsError, TData>({
          queryKey: queryKeyFn({ path: \\"/pets\\", operationId: \\"listPets\\", variables }),
          queryFn: ({ signal }) => fetchListPets({ ...fetcherOptions, ...variables }, signal),
          ...options,
          ...queryOptions
      }); };

      export type QueryOperation = {
          path: \\"/pets\\";
          operationId: \\"listPets\\";
          variables: ListPetsVariables;
      };
      "
    `);
  });

  it("should not generated duplicated types", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets": {
          get: {
            operationId: "listPets",
            description: "Get all the pets",
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
              "201": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";

      export type ListPetsError = Fetcher.ErrorWrapper<undefined>;

      export type ListPetsResponse = Schemas.Pet[];

      export type ListPetsVariables = PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Get all the pets
       */
      export const fetchListPets = (variables: ListPetsVariables, signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, {}, {}, {}>({ url: \\"/pets\\", method: \\"get\\", ...variables, signal });

      /**
       * Get all the pets
       */
      export const useListPets = <TData = ListPetsResponse>(variables: ListPetsVariables, options?: Omit<reactQuery.UseQueryOptions<ListPetsResponse, ListPetsError, TData>, \\"queryKey\\" | \\"queryFn\\" | \\"initialData\\">) => { const { fetcherOptions, queryOptions, queryKeyFn } = usePetstoreContext(options); return reactQuery.useQuery<ListPetsResponse, ListPetsError, TData>({
          queryKey: queryKeyFn({ path: \\"/pets\\", operationId: \\"listPets\\", variables }),
          queryFn: ({ signal }) => fetchListPets({ ...fetcherOptions, ...variables }, signal),
          ...options,
          ...queryOptions
      }); };

      export type QueryOperation = {
          path: \\"/pets\\";
          operationId: \\"listPets\\";
          variables: ListPetsVariables;
      };
      "
    `);
  });

  it("should generate useMutation for POST operation", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pet": {
          post: {
            operationId: "AddPet",
            requestBody: {
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      name: {
                        type: "string",
                      },
                      color: {
                        type: "string",
                      },
                      breed: {
                        type: "string",
                      },
                      age: {
                        type: "integer",
                      },
                    },
                    required: ["name", "breed", "age"],
                  },
                },
              },
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
              500: {
                content: {
                  "application/json": {
                    description: "An Error",
                    schema: {
                      type: "object",
                      properties: {
                        code: {
                          type: "integer",
                          enum: [500],
                        },
                        message: {
                          type: "string",
                        },
                      },
                      required: ["code", "message"],
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";

      export type AddPetError = Fetcher.ErrorWrapper<{
          status: 500;
          payload: {
              code: 500;
              message: string;
          };
      }>;

      export type AddPetRequestBody = {
          name: string;
          color?: string;
          breed: string;
          age: number;
      };

      export type AddPetVariables = {
          body: AddPetRequestBody;
      } & PetstoreContext[\\"fetcherOptions\\"];

      export const fetchAddPet = (variables: AddPetVariables, signal?: AbortSignal) => petstoreFetch<string, AddPetError, AddPetRequestBody, {}, {}, {}>({ url: \\"/pet\\", method: \\"post\\", ...variables, signal });

      export const useAddPet = (options?: Omit<reactQuery.UseMutationOptions<string, AddPetError, AddPetVariables>, \\"mutationFn\\">) => {
          const { fetcherOptions } = usePetstoreContext();
          return reactQuery.useMutation<string, AddPetError, AddPetVariables>({
              mutationFn: (variables: AddPetVariables) => fetchAddPet({ ...fetcherOptions, ...variables }),
              ...options
          });
      };

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should generate useMutation if openapi-codegen-component is defined", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pet": {
          get: {
            operationId: "AddPet",
            "x-openapi-codegen-component": "useMutate",
            requestBody: {
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      name: {
                        type: "string",
                      },
                      color: {
                        type: "string",
                      },
                      breed: {
                        type: "string",
                      },
                      age: {
                        type: "integer",
                      },
                    },
                    required: ["name", "breed", "age"],
                  },
                },
              },
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
              500: {
                content: {
                  "application/json": {
                    description: "An Error",
                    schema: {
                      type: "object",
                      properties: {
                        code: {
                          type: "integer",
                          enum: [500],
                        },
                        message: {
                          type: "string",
                        },
                      },
                      required: ["code", "message"],
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";

      export type AddPetError = Fetcher.ErrorWrapper<{
          status: 500;
          payload: {
              code: 500;
              message: string;
          };
      }>;

      export type AddPetRequestBody = {
          name: string;
          color?: string;
          breed: string;
          age: number;
      };

      export type AddPetVariables = {
          body: AddPetRequestBody;
      } & PetstoreContext[\\"fetcherOptions\\"];

      export const fetchAddPet = (variables: AddPetVariables, signal?: AbortSignal) => petstoreFetch<string, AddPetError, AddPetRequestBody, {}, {}, {}>({ url: \\"/pet\\", method: \\"get\\", ...variables, signal });

      export const useAddPet = (options?: Omit<reactQuery.UseMutationOptions<string, AddPetError, AddPetVariables>, \\"mutationFn\\">) => {
          const { fetcherOptions } = usePetstoreContext();
          return reactQuery.useMutation<string, AddPetError, AddPetVariables>({
              mutationFn: (variables: AddPetVariables) => fetchAddPet({ ...fetcherOptions, ...variables }),
              ...options
          });
      };

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should resolve requestBody ref", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      components: {
        requestBodies: {
          dog: {
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    name: {
                      type: "string",
                    },
                    color: {
                      type: "string",
                    },
                    breed: {
                      type: "string",
                    },
                    age: {
                      type: "integer",
                    },
                  },
                  required: ["name", "breed", "age"],
                },
              },
            },
          },
        },
      },
      paths: {
        "/pet": {
          post: {
            operationId: "AddPet",
            requestBody: {
              $ref: "#/components/requestBodies/dog",
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
              500: {
                content: {
                  "application/json": {
                    description: "An Error",
                    schema: {
                      type: "object",
                      properties: {
                        code: {
                          type: "integer",
                          enum: [500],
                        },
                        message: {
                          type: "string",
                        },
                      },
                      required: ["code", "message"],
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as RequestBodies from \\"./petstoreRequestBodies\\";

      export type AddPetError = Fetcher.ErrorWrapper<{
          status: 500;
          payload: {
              code: 500;
              message: string;
          };
      }>;

      export type AddPetVariables = {
          body: RequestBodies.Dog;
      } & PetstoreContext[\\"fetcherOptions\\"];

      export const fetchAddPet = (variables: AddPetVariables, signal?: AbortSignal) => petstoreFetch<string, AddPetError, RequestBodies.Dog, {}, {}, {}>({ url: \\"/pet\\", method: \\"post\\", ...variables, signal });

      export const useAddPet = (options?: Omit<reactQuery.UseMutationOptions<string, AddPetError, AddPetVariables>, \\"mutationFn\\">) => {
          const { fetcherOptions } = usePetstoreContext();
          return reactQuery.useMutation<string, AddPetError, AddPetVariables>({
              mutationFn: (variables: AddPetVariables) => fetchAddPet({ ...fetcherOptions, ...variables }),
              ...options
          });
      };

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should deal with pathParams (snake case)", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      components: {
        requestBodies: {
          UpdatePetRequestBody: {
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    name: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
      paths: {
        "/pet/{pet_id}": {
          parameters: [
            {
              in: "path",
              name: "pet_id",
              schema: {
                type: "string",
              },
              required: true,
            },
          ],
          put: {
            operationId: "updatePet",
            requestBody: {
              $ref: "#/components/requestBodies/UpdatePetRequestBody",
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
    };
    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as RequestBodies from \\"./petstoreRequestBodies\\";

      export type UpdatePetPathParams = {
          petId: string;
      };

      export type UpdatePetError = Fetcher.ErrorWrapper<undefined>;

      export type UpdatePetVariables = {
          body?: RequestBodies.UpdatePetRequestBody;
          pathParams: UpdatePetPathParams;
      } & PetstoreContext[\\"fetcherOptions\\"];

      export const fetchUpdatePet = (variables: UpdatePetVariables, signal?: AbortSignal) => petstoreFetch<string, UpdatePetError, RequestBodies.UpdatePetRequestBody, {}, {}, UpdatePetPathParams>({ url: \\"/pet/{petId}\\", method: \\"put\\", ...variables, signal });

      export const useUpdatePet = (options?: Omit<reactQuery.UseMutationOptions<string, UpdatePetError, UpdatePetVariables>, \\"mutationFn\\">) => {
          const { fetcherOptions } = usePetstoreContext();
          return reactQuery.useMutation<string, UpdatePetError, UpdatePetVariables>({
              mutationFn: (variables: UpdatePetVariables) => fetchUpdatePet({ ...fetcherOptions, ...variables }),
              ...options
          });
      };

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should deal with pathParams (dash case)", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      components: {
        requestBodies: {
          UpdatePetRequestBody: {
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    name: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
      paths: {
        "/pet/{pet-id}": {
          parameters: [
            {
              in: "path",
              name: "pet-id",
              schema: {
                type: "string",
              },
              required: true,
            },
          ],
          put: {
            operationId: "updatePet",
            requestBody: {
              $ref: "#/components/requestBodies/UpdatePetRequestBody",
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
    };
    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as RequestBodies from \\"./petstoreRequestBodies\\";

      export type UpdatePetPathParams = {
          petId: string;
      };

      export type UpdatePetError = Fetcher.ErrorWrapper<undefined>;

      export type UpdatePetVariables = {
          body?: RequestBodies.UpdatePetRequestBody;
          pathParams: UpdatePetPathParams;
      } & PetstoreContext[\\"fetcherOptions\\"];

      export const fetchUpdatePet = (variables: UpdatePetVariables, signal?: AbortSignal) => petstoreFetch<string, UpdatePetError, RequestBodies.UpdatePetRequestBody, {}, {}, UpdatePetPathParams>({ url: \\"/pet/{petId}\\", method: \\"put\\", ...variables, signal });

      export const useUpdatePet = (options?: Omit<reactQuery.UseMutationOptions<string, UpdatePetError, UpdatePetVariables>, \\"mutationFn\\">) => {
          const { fetcherOptions } = usePetstoreContext();
          return reactQuery.useMutation<string, UpdatePetError, UpdatePetVariables>({
              mutationFn: (variables: UpdatePetVariables) => fetchUpdatePet({ ...fetcherOptions, ...variables }),
              ...options
          });
      };

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should deal with pathParams (dot case)", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      components: {
        requestBodies: {
          UpdatePetRequestBody: {
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    name: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
      paths: {
        "/pet/{pet.id}": {
          parameters: [
            {
              in: "path",
              name: "pet.id",
              schema: {
                type: "string",
              },
              required: true,
            },
          ],
          put: {
            operationId: "updatePet",
            requestBody: {
              $ref: "#/components/requestBodies/UpdatePetRequestBody",
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
    };
    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreComponents.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as RequestBodies from \\"./petstoreRequestBodies\\";

      export type UpdatePetPathParams = {
          petId: string;
      };

      export type UpdatePetError = Fetcher.ErrorWrapper<undefined>;

      export type UpdatePetVariables = {
          body?: RequestBodies.UpdatePetRequestBody;
          pathParams: UpdatePetPathParams;
      } & PetstoreContext[\\"fetcherOptions\\"];

      export const fetchUpdatePet = (variables: UpdatePetVariables, signal?: AbortSignal) => petstoreFetch<string, UpdatePetError, RequestBodies.UpdatePetRequestBody, {}, {}, UpdatePetPathParams>({ url: \\"/pet/{petId}\\", method: \\"put\\", ...variables, signal });

      export const useUpdatePet = (options?: Omit<reactQuery.UseMutationOptions<string, UpdatePetError, UpdatePetVariables>, \\"mutationFn\\">) => {
          const { fetcherOptions } = usePetstoreContext();
          return reactQuery.useMutation<string, UpdatePetError, UpdatePetVariables>({
              mutationFn: (variables: UpdatePetVariables) => fetchUpdatePet({ ...fetcherOptions, ...variables }),
              ...options
          });
      };

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should build components without prefix", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      components: {
        requestBodies: {
          UpdatePetRequestBody: {
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    name: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
      paths: {
        "/pet/{pet_id}": {
          parameters: [
            {
              in: "path",
              name: "pet_id",
              schema: {
                type: "string",
              },
              required: true,
            },
          ],
          put: {
            operationId: "updatePet",
            requestBody: {
              $ref: "#/components/requestBodies/UpdatePetRequestBody",
            },
            responses: {
              200: {
                content: {
                  "application/json": {
                    description: "Successful response",
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
    };
    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      { ...config, filenamePrefix: "" }
    );

    expect(writeFile.mock.calls[0][0]).toBe("components.ts");
    expect(writeFile.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { useContext, Context } from \\"./context\\";
      import type * as Fetcher from \\"./fetcher\\";
      import { fetch } from \\"./fetcher\\";
      import type * as RequestBodies from \\"./petstoreRequestBodies\\";

      export type UpdatePetPathParams = {
          petId: string;
      };

      export type UpdatePetError = Fetcher.ErrorWrapper<undefined>;

      export type UpdatePetVariables = {
          body?: RequestBodies.UpdatePetRequestBody;
          pathParams: UpdatePetPathParams;
      } & Context[\\"fetcherOptions\\"];

      export const fetchUpdatePet = (variables: UpdatePetVariables, signal?: AbortSignal) => fetch<string, UpdatePetError, RequestBodies.UpdatePetRequestBody, {}, {}, UpdatePetPathParams>({ url: \\"/pet/{petId}\\", method: \\"put\\", ...variables, signal });

      export const useUpdatePet = (options?: Omit<reactQuery.UseMutationOptions<string, UpdatePetError, UpdatePetVariables>, \\"mutationFn\\">) => {
          const { fetcherOptions } = useContext();
          return reactQuery.useMutation<string, UpdatePetError, UpdatePetVariables>({
              mutationFn: (variables: UpdatePetVariables) => fetchUpdatePet({ ...fetcherOptions, ...variables }),
              ...options
          });
      };

      export type QueryOperation = {
          path: string;
          operationId: never;
          variables: unknown;
      };
      "
    `);
  });

  it("should generate utils file if needed", async () => {
    const writeFile = jest.fn();
    const openAPIDocument: OpenAPIObject = {
      openapi: "3.0.0",
      info: {
        title: "petshop",
        version: "1.0.0",
      },
      paths: {
        "/pets": {
          get: {
            operationId: "listPets",
            description: "Get all the pets",
            responses: {
              "200": {
                description: "pet response",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Pet",
                      },
                    },
                  },
                },
              },
              "5xx": {
                description: "Server error",
                content: {
                  "application/json": {
                    schema: {
                      type: "string",
                    },
                  },
                },
              },
            },
          },
        },
      },
    };

    await generateReactQueryComponents(
      {
        openAPIDocument,
        writeFile,
        existsFile: () => true,
        readFile: async () => "",
      },
      config
    );

    expect(writeFile.mock.calls[0][0]).toBe("petstoreUtils.ts");
    expect(writeFile.mock.calls[1][1]).toMatchInlineSnapshot(`
      "/**
       * Generated by @openapi-codegen
       * 
       * @version 1.0.0
       */
      import * as reactQuery from \\"@tanstack/react-query\\";
      import { usePetstoreContext, PetstoreContext } from \\"./petstoreContext\\";
      import type * as Fetcher from \\"./petstoreFetcher\\";
      import { petstoreFetch } from \\"./petstoreFetcher\\";
      import type * as Schemas from \\"./petstoreSchemas\\";
      import type { ServerErrorStatus } from \\"./petstoreUtils\\";

      export type ListPetsError = Fetcher.ErrorWrapper<{
          status: ServerErrorStatus;
          payload: string;
      }>;

      export type ListPetsResponse = Schemas.Pet[];

      export type ListPetsVariables = PetstoreContext[\\"fetcherOptions\\"];

      /**
       * Get all the pets
       */
      export const fetchListPets = (variables: ListPetsVariables, signal?: AbortSignal) => petstoreFetch<ListPetsResponse, ListPetsError, undefined, {}, {}, {}>({ url: \\"/pets\\", method: \\"get\\", ...variables, signal });

      /**
       * Get all the pets
       */
      export const useListPets = <TData = ListPetsResponse>(variables: ListPetsVariables, options?: Omit<reactQuery.UseQueryOptions<ListPetsResponse, ListPetsError, TData>, \\"queryKey\\" | \\"queryFn\\" | \\"initialData\\">) => { const { fetcherOptions, queryOptions, queryKeyFn } = usePetstoreContext(options); return reactQuery.useQuery<ListPetsResponse, ListPetsError, TData>({
          queryKey: queryKeyFn({ path: \\"/pets\\", operationId: \\"listPets\\", variables }),
          queryFn: ({ signal }) => fetchListPets({ ...fetcherOptions, ...variables }, signal),
          ...options,
          ...queryOptions
      }); };

      export type QueryOperation = {
          path: \\"/pets\\";
          operationId: \\"listPets\\";
          variables: ListPetsVariables;
      };
      "
    `);
  });
});

--- End of openapi-codegen/plugins/typescript/src/generators/generateReactQueryComponents.test.ts ---

--- Start of openapi-codegen/plugins/typescript/src/generators/generateFetchers.ts ---
import ts, { factory as f } from "typescript";
import * as c from "case";
import { get } from "lodash";

import { ConfigBase, Context } from "./types";
import { PathItemObject } from "openapi3-ts";

import { getUsedImports } from "../core/getUsedImports";
import { createWatermark } from "../core/createWatermark";
import { createOperationFetcherFnNodes } from "../core/createOperationFetcherFnNodes";
import { isVerb } from "../core/isVerb";
import { isOperationObject } from "../core/isOperationObject";
import { getOperationTypes } from "../core/getOperationTypes";
import { createNamedImport } from "../core/createNamedImport";

import { getFetcher } from "../templates/fetcher";
import { getUtils } from "../templates/utils";
import { createNamespaceImport } from "../core/createNamespaceImport";

export type Config = ConfigBase & {
  /**
   * Generated files paths from `generateSchemaTypes`
   */
  schemasFiles: {
    requestBodies: string;
    schemas: string;
    parameters: string;
    responses: string;
  };
  /**
   * List of headers injected in the custom fetcher
   *
   * This will mark the header as optional in the component API
   */
  injectedHeaders?: string[];
};

export const generateFetchers = async (context: Context, config: Config) => {
  const sourceFile = ts.createSourceFile(
    "index.ts",
    "",
    ts.ScriptTarget.Latest
  );

  const printer = ts.createPrinter({
    newLine: ts.NewLineKind.LineFeed,
    removeComments: false,
  });

  const printNodes = (nodes: ts.Node[]) =>
    nodes
      .map((node: ts.Node, i, nodes) => {
        return (
          printer.printNode(ts.EmitHint.Unspecified, node, sourceFile) +
          (ts.isJSDoc(node) ||
          (ts.isImportDeclaration(node) &&
            nodes[i + 1] &&
            ts.isImportDeclaration(nodes[i + 1]))
            ? ""
            : "\n")
        );
      })
      .join("\n");

  const filenamePrefix =
    c.snake(config.filenamePrefix ?? context.openAPIDocument.info.title) + "-";

  const formatFilename = config.filenameCase ? c[config.filenameCase] : c.camel;

  const filename = formatFilename(filenamePrefix + "-components");

  const fetcherFn = c.camel(`${filenamePrefix}-fetch`);
  const nodes: ts.Node[] = [];
  const fetcherImports = [fetcherFn];

  const fetcherFilename = formatFilename(filenamePrefix + "-fetcher");
  const utilsFilename = formatFilename(filenamePrefix + "-utils");

  const fetcherExtraPropsTypeName = `${c.pascal(
    filenamePrefix
  )}FetcherExtraProps`;

  let variablesExtraPropsType: ts.TypeNode = f.createKeywordTypeNode(
    ts.SyntaxKind.VoidKeyword
  );

  if (!context.existsFile(`${fetcherFilename}.ts`)) {
    context.writeFile(
      `${fetcherFilename}.ts`,
      getFetcher({
        prefix: filenamePrefix,
        baseUrl: get(context.openAPIDocument, "servers.0.url"),
      })
    );
  } else {
    const fetcherSourceText = await context.readFile(`${fetcherFilename}.ts`);

    const fetcherSourceFile = ts.createSourceFile(
      `${fetcherFilename}.ts`,
      fetcherSourceText,
      ts.ScriptTarget.Latest
    );

    // Lookup for {prefix}FetcherExtraProps declaration
    ts.forEachChild(fetcherSourceFile, (node) => {
      if (
        ts.isTypeAliasDeclaration(node) &&
        node.name.escapedText === fetcherExtraPropsTypeName &&
        ts.isTypeLiteralNode(node.type) &&
        node.type.members.length > 0
      ) {
        // Use the type of defined
        variablesExtraPropsType = f.createTypeReferenceNode(
          fetcherExtraPropsTypeName
        );
        fetcherImports.push(fetcherExtraPropsTypeName);
      }
    });
  }

  const operationIds: string[] = [];
  const operationByTags: Record<string, string[]> = {};

  Object.entries(context.openAPIDocument.paths).forEach(
    ([route, verbs]: [string, PathItemObject]) => {
      Object.entries(verbs).forEach(([verb, operation]) => {
        if (!isVerb(verb) || !isOperationObject(operation)) return;
        const operationId = c.camel(operation.operationId);
        if (operationIds.includes(operationId)) {
          throw new Error(
            `The operationId "${operation.operationId}" is duplicated in your schema definition!`
          );
        }

        operationIds.push(operationId);
        operation.tags?.forEach((tag) => {
          if (!operationByTags[tag]) operationByTags[tag] = [];
          operationByTags[tag].push(operationId);
        });

        const {
          dataType,
          errorType,
          requestBodyType,
          pathParamsType,
          variablesType,
          queryParamsType,
          headersType,
          declarationNodes,
        } = getOperationTypes({
          openAPIDocument: context.openAPIDocument,
          operation,
          operationId,
          printNodes,
          injectedHeaders: config.injectedHeaders,
          pathParameters: verbs.parameters,
          variablesExtraPropsType,
        });

        nodes.push(
          ...declarationNodes,
          ...createOperationFetcherFnNodes({
            dataType,
            errorType,
            requestBodyType,
            pathParamsType,
            variablesType,
            queryParamsType,
            headersType,
            operation,
            fetcherFn,
            url: route,
            verb,
            name: operationId,
          })
        );
      });
    }
  );

  if (operationIds.length === 0) {
    console.log(`⚠️ You don't have any operation with "operationId" defined!`);
  }

  if (Object.keys(operationByTags).length > 0) {
    nodes.push(
      f.createVariableStatement(
        [f.createModifier(ts.SyntaxKind.ExportKeyword)],
        f.createVariableDeclarationList(
          [
            f.createVariableDeclaration(
              f.createIdentifier("operationsByTag"),
              undefined,
              undefined,
              f.createObjectLiteralExpression(
                Object.entries(operationByTags).map(([tag, operationIds]) => {
                  return f.createPropertyAssignment(
                    f.createStringLiteral(c.camel(tag)),
                    f.createObjectLiteralExpression(
                      operationIds.map((operationId) =>
                        f.createShorthandPropertyAssignment(operationId)
                      )
                    )
                  );
                })
              )
            ),
          ],
          ts.NodeFlags.Const
        )
      )
    );
  }

  const { nodes: usedImportsNodes, keys: usedImportsKeys } = getUsedImports(
    nodes,
    {
      ...config.schemasFiles,
      utils: utilsFilename,
    }
  );

  if (usedImportsKeys.includes("utils")) {
    await context.writeFile(`${utilsFilename}.ts`, getUtils());
  }

  await context.writeFile(
    filename + ".ts",
    printNodes([
      createWatermark(context.openAPIDocument.info),
      createNamespaceImport("Fetcher", `./${fetcherFilename}`),
      createNamedImport(fetcherImports, `./${fetcherFilename}`),
      ...usedImportsNodes,
      ...nodes,
    ])
  );
};

--- End of openapi-codegen/plugins/typescript/src/generators/generateFetchers.ts ---

--- Start of openapi-codegen/plugins/typescript/src/generators/types.ts ---
import { OpenAPIObject } from "openapi3-ts";
import * as c from "case";

/**
 * Generator context (provided by `@openapi-codegen/cli`)
 */
export type Context = {
  openAPIDocument: OpenAPIObject;
  writeFile: (file: string, data: string) => Promise<void>;
  readFile: (file: string) => Promise<string>;
  existsFile: (file: string) => boolean;
};

/**
 * Generator configuration
 */
export type ConfigBase = {
  /**
   * @default openapi.info.title
   */
  filenamePrefix?: string;
  /**
   * Case convention for filenames.
   *
   * @default camel
   */
  filenameCase?: keyof Pick<typeof c, "snake" | "camel" | "kebab" | "pascal">;
  /**
   * Allows using explicit enums instead of string unions.
   *
   * @default false
   */
  useEnums?: boolean;
};

--- End of openapi-codegen/plugins/typescript/src/generators/types.ts ---

--- Start of openapi-codegen/plugins/typescript/src/generators/generateSchemaTypes.ts ---
import * as c from "case";
import ts from "typescript";

import { ReferenceObject, SchemaObject } from "openapi3-ts";
import { createWatermark } from "../core/createWatermark";
import { getUsedImports } from "../core/getUsedImports";
import { schemaToTypeAliasDeclaration } from "../core/schemaToTypeAliasDeclaration";
import { getEnumProperties } from "../utils/getEnumProperties";
import { ConfigBase, Context } from "./types";

import { isReferenceObject } from "openapi3-ts";

import { findCompatibleMediaType } from "../core/findCompatibleMediaType";
import { schemaToEnumDeclaration } from "../core/schemaToEnumDeclaration";

type Config = ConfigBase;

/**
 * Generate schemas types (components & responses)
 * @param context CLI Context
 * @param config Configuration
 */
export const generateSchemaTypes = async (
  context: Context,
  config: Config = {}
) => {
  const { components } = context.openAPIDocument;
  if (!components) {
    throw new Error("No components founds!");
  }

  const sourceFile = ts.createSourceFile(
    "index.ts",
    "",
    ts.ScriptTarget.Latest
  );

  const printer = ts.createPrinter({
    newLine: ts.NewLineKind.LineFeed,
    removeComments: false,
  });

  const printNodes = (nodes: ts.Node[]) =>
    nodes
      .map((node: ts.Node) => {
        return (
          printer.printNode(ts.EmitHint.Unspecified, node, sourceFile) +
          (ts.isJSDoc(node) ? "" : "\n")
        );
      })
      .join("\n");

  const handleTypeAlias = (
    componentSchema: [string, SchemaObject | ReferenceObject][]
  ) =>
    componentSchema.reduce<ts.Node[]>(
      (mem, [name, schema]) => [
        ...mem,
        ...schemaToTypeAliasDeclaration(
          name,
          schema,
          {
            openAPIDocument: context.openAPIDocument,
            currentComponent: "schemas",
          },
          config.useEnums
        ),
      ],
      []
    );

  const filenamePrefix =
    c.snake(config.filenamePrefix ?? context.openAPIDocument.info.title) + "-";

  const formatFilename = config.filenameCase ? c[config.filenameCase] : c.camel;
  const files = {
    requestBodies: formatFilename(filenamePrefix + "-request-bodies"),
    schemas: formatFilename(filenamePrefix + "-schemas"),
    parameters: formatFilename(filenamePrefix + "-parameters"),
    responses: formatFilename(filenamePrefix + "-responses"),
    utils: formatFilename(filenamePrefix + "-utils"),
  };

  // Generate `components/schemas` types
  if (components.schemas) {
    const schemas: ts.Node[] = [];
    const componentSchemaEntries = Object.entries(components.schemas);

    if (config.useEnums) {
      const enumSchemaEntries = getEnumProperties(componentSchemaEntries);
      const enumSchemas = enumSchemaEntries.reduce<ts.Node[]>(
        (mem, [name, schema]) => [
          ...mem,
          ...schemaToEnumDeclaration(name, schema, {
            openAPIDocument: context.openAPIDocument,
            currentComponent: "schemas",
          }),
        ],
        []
      );

      const componentsSchemas = handleTypeAlias(
        componentSchemaEntries.filter(
          ([name]) => !enumSchemaEntries.some(([enumName]) => name === enumName)
        )
      );

      schemas.push(...enumSchemas, ...componentsSchemas);
    } else {
      const componentsSchemas = handleTypeAlias(componentSchemaEntries);
      schemas.push(...componentsSchemas);
    }

    await context.writeFile(
      files.schemas + ".ts",
      printNodes([
        createWatermark(context.openAPIDocument.info),
        ...getUsedImports(schemas, files).nodes,
        ...schemas,
      ])
    );
  }

  // Generate `components/responses` types
  if (components.responses) {
    const componentsResponses = Object.entries(components.responses).reduce<
      ts.Node[]
    >((mem, [name, responseObject]) => {
      if (isReferenceObject(responseObject)) return mem;
      const mediaType = findCompatibleMediaType(responseObject);

      return [
        ...mem,
        ...schemaToTypeAliasDeclaration(name, mediaType?.schema || {}, {
          openAPIDocument: context.openAPIDocument,
          currentComponent: "responses",
        }),
      ];
    }, []);

    if (componentsResponses.length) {
      await context.writeFile(
        files.responses + ".ts",
        printNodes([
          createWatermark(context.openAPIDocument.info),
          ...getUsedImports(componentsResponses, files).nodes,
          ...componentsResponses,
        ])
      );
    }
  }

  // Generate `components/requestBodies` types
  if (components.requestBodies) {
    const componentsRequestBodies = Object.entries(
      components.requestBodies
    ).reduce<ts.Node[]>((mem, [name, requestBodyObject]) => {
      if (isReferenceObject(requestBodyObject)) return mem;
      const mediaType = findCompatibleMediaType(requestBodyObject);
      if (!mediaType || !mediaType.schema) return mem;

      return [
        ...mem,
        ...schemaToTypeAliasDeclaration(name, mediaType.schema, {
          openAPIDocument: context.openAPIDocument,
          currentComponent: "requestBodies",
        }),
      ];
    }, []);

    if (componentsRequestBodies.length) {
      await context.writeFile(
        files.requestBodies + ".ts",
        printNodes([
          createWatermark(context.openAPIDocument.info),
          ...getUsedImports(componentsRequestBodies, files).nodes,
          ...componentsRequestBodies,
        ])
      );
    }
  }

  // Generate `components/parameters` types
  if (components.parameters) {
    const componentsParameters = Object.entries(components.parameters).reduce<
      ts.Node[]
    >((mem, [name, parameterObject]) => {
      if (isReferenceObject(parameterObject) || !parameterObject.schema) {
        return mem;
      }
      return [
        ...mem,
        ...schemaToTypeAliasDeclaration(name, parameterObject.schema, {
          openAPIDocument: context.openAPIDocument,
          currentComponent: "parameters",
        }),
      ];
    }, []);

    await context.writeFile(
      files.parameters + ".ts",
      printNodes([
        createWatermark(context.openAPIDocument.info),
        ...getUsedImports(componentsParameters, files).nodes,
        ...componentsParameters,
      ])
    );
  }

  return {
    schemasFiles: files,
  };
};

--- End of openapi-codegen/plugins/typescript/src/generators/generateSchemaTypes.ts ---

--- Start of openapi-codegen/cli/CHANGELOG.md ---
# Content omitted for convenience

--- End of openapi-codegen/cli/CHANGELOG.md ---

--- Start of openapi-codegen/cli/README.md ---
# OpenAPI Codegen

## Getting started

1. Add a `openapi-codegen.config.ts` at the root of your project

```ts
// openapi-codegen.config.ts
import { defineConfig } from "@openapi-codegen/cli";
import {
  generateSchemaTypes,
  generateReactQueryComponents,
} from "@openapi-codegen/typescript";

export default defineConfig({
  example: {
    from: {
      source: "github",
      owner: "fabien0102",
      repository: "openapi-codegen",
      ref: "main",
      specPath: "examples/spec.yaml",
    },

    // can be overridden from cli
    outputDir: "src/queries",

    to: async (context) => {
      const filenamePrefix = "example";

      // Generate all the schemas types (components & responses)
      const { schemasFiles } = await generateSchemaTypes(context, {
        filenamePrefix,
      });

      // Generate all react-query components
      await generateReactQueryComponents(context, {
        filenamePrefix,
        schemasFiles,
      });
    },
  },
});
```

2. Expose openapi-codegen in your `package.json`

```diff
--- a/package.json
+++ b/package.json
   "scripts": {
+    "gen": "openapi-codegen",
   }
```

3. Run the generator (`example` is the config key defined in the step 1)

```bash
$ yarn gen example
```

4. Start playing! 🥳

--- End of openapi-codegen/cli/README.md ---

--- Start of openapi-codegen/cli/codegen.yml ---
# Content omitted for convenience

--- End of openapi-codegen/cli/codegen.yml ---

--- Start of openapi-codegen/cli/rollup.config.js ---
import resolve from "@rollup/plugin-node-resolve";
import commonjs from "@rollup/plugin-commonjs";
import json from "@rollup/plugin-json";
import shebang from "rollup-plugin-preserve-shebang";
import autoExternal from "rollup-plugin-auto-external";
import internal from "rollup-plugin-internal";
import typescript from "@rollup/plugin-typescript";

const typescriptPlugin = typescript({
  tsconfig: "./tsconfig.package.json",
  compilerOptions: {
    outDir: ".",
    sourceMap: false,
  },
});

export default [
  {
    input: "src/index.ts",
    output: {
      file: "lib/index.js",
      format: "es",
    },
    cache: false,
    plugins: [typescriptPlugin],
  },
  {
    input: "src/cli.ts",
    output: {
      file: "lib/cli.js",
      format: "es",
      banner: "#!/usr/bin/env node",
    },
    cache: false,
    plugins: [
      shebang(),
      resolve(),
      typescriptPlugin,
      commonjs(),
      json(),
      autoExternal(),
      internal(["react", "ink", "@apollo/client"]),
    ],
    external: ["yoga-layout-prebuilt"],
  },
];

--- End of openapi-codegen/cli/rollup.config.js ---

--- Start of openapi-codegen/cli/tsconfig.package.json ---
# Content omitted for convenience

--- End of openapi-codegen/cli/tsconfig.package.json ---

--- Start of openapi-codegen/cli/package.json ---
# Content omitted for convenience

--- End of openapi-codegen/cli/package.json ---

--- Start of openapi-codegen/cli/tsconfig.json ---
# Content omitted for convenience

--- End of openapi-codegen/cli/tsconfig.json ---

--- Start of openapi-codegen/cli/.env.example ---
GITHUB_TOKEN=secret
--- End of openapi-codegen/cli/.env.example ---

--- Start of openapi-codegen/cli/examples/openapi-codegen.config.ts ---
import { defineConfig } from "../lib/index.js";

export default defineConfig({
  withFile: {
    from: {
      source: "file",
      relativePath: "examples/petstore.json",
    },
    outputDir: "petstore",
    to: async (context) => {
      console.log(context);
    },
  },
  withUrl: {
    from: {
      source: "url",
      url: "https://api.apis.guru/v2/specs/github.com/1.1.4/openapi.yaml",
    },
    outputDir: "github",
    to: async (context) => {
      console.log(context);
    },
  },
  withGithub: {
    from: {
      source: "github",
      owner: "fabien0102",
      ref: "main",
      repository: "openapi-codegen",
      specPath: "cli/examples/petstore.json",
    },
    outputDir: "petstore",
    to: async (context) => {
      console.log(context);
    },
  },
});

--- End of openapi-codegen/cli/examples/openapi-codegen.config.ts ---

--- Start of openapi-codegen/cli/examples/petstore.json ---
# Content omitted for convenience

--- End of openapi-codegen/cli/examples/petstore.json ---

--- Start of openapi-codegen/cli/src/cli.ts ---
#!/usr/bin/env node

import { Cli } from "clipanion";

import { GenerateCommand } from "./commands/GenerateCommand.js";
import { InitCommand } from "./commands/InitCommand.js";
import { readFileSync } from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const [_node, _app, ...args] = process.argv;
const packageJSON = JSON.parse(
  readFileSync(join(__dirname, "../package.json"), "utf-8")
);

const cli = new Cli({
  binaryLabel: `OpenAPI codegen`,
  binaryName: `openapi-codegen`,
  binaryVersion: packageJSON.version,
});

cli.register(InitCommand);
cli.register(GenerateCommand);
cli.runExit(args);

--- End of openapi-codegen/cli/src/cli.ts ---

--- Start of openapi-codegen/cli/src/index.ts ---
import { Config, Namespace } from "./types";

/**
 * Type helper to make it easier to use openapi-codegen.ts.
 */
export const defineConfig = (configs: Record<Namespace, Config>) => configs;

--- End of openapi-codegen/cli/src/index.ts ---

--- Start of openapi-codegen/cli/src/types/swagger2openapi.d.ts ---
declare module "swagger2openapi" {
  import { OpenAPIObject } from "openapi3-ts";
  interface ConverObjCallbackData {
    openapi: OpenAPIObject;
  }
  function convertObj(
    schema: unknown,
    options: {},
    callback: (err: Error, data: ConverObjCallbackData) => void
  ): void;
}

--- End of openapi-codegen/cli/src/types/swagger2openapi.d.ts ---

--- Start of openapi-codegen/cli/src/types/index.ts ---
import { OpenAPIObject } from "openapi3-ts";

/**
 * OpenAPI source file.
 */
export type OpenAPISourceFile = {
  /**
   * Raw text
   */
  text: string;
  /**
   * File format
   */
  format: "json" | "yaml";
};

export type FileOptions = {
  source: "file";

  /**
   * Relative path of the spec file
   */
  relativePath: string;
};

export type UrlOptions = {
  source: "url";

  /**
   * URL of the spec file
   */
  url: string;

  /**
   * Additional headers
   */
  headers?: { [key: string]: string };

  /**
   * HTTP Method
   */
  method?: "get" | "post";
};

export type GithubOptions = {
  source: "github";

  /**
   * Owner of the repository
   */
  owner: string;

  /**
   * Repository name
   */
  repository: string;

  /**
   * Git reference (branch name, commit sha or tag)
   */
  ref: string;

  /**
   * OpenAPI specs file path
   */
  specPath: string;
};

export type FromOptions = FileOptions | UrlOptions | GithubOptions;

export type Context = {
  openAPIDocument: OpenAPIObject;
  outputDir: string;
  writeFile: (file: string, data: string) => Promise<void>;
  readFile: (file: string) => Promise<string>;
  existsFile: (file: string) => boolean;
};

/**
 * Namespace of your api.
 *
 * This will be used to call the config
 *
 * example:
 * $ openapi-codegen gen {namespace}
 */
export type Namespace = string;

export type Config = {
  from: FromOptions;
  outputDir: string;
  to: (context: Context) => Promise<void>;
};

export type Import = {
  namedImports: string[];
  module: string;
};

export type Plugin =
  | "typescript/types-only"
  | "typescript/react-query"
  | "typescript/fetch";

--- End of openapi-codegen/cli/src/types/index.ts ---

--- Start of openapi-codegen/cli/src/core/generateConfigProperty.test.ts ---
import ts from "typescript";
import { generateConfigProperty } from "./generateConfigProperty";

describe("generateConfigProperty", () => {
  it("should generate a type only configuration node", () => {
    const config = generateConfigProperty({
      namespace: "foo",
      options: {
        from: {
          source: "file",
          relativePath: "specs.yaml",
        },
        outputDir: "specs",
        plugin: "typescript/types-only",
      },
    });

    expect(print(config)).toMatchInlineSnapshot(`
      "foo: {
          from: {
              source: \\"file\\",
              relativePath: \\"specs.yaml\\"
          },
          outputDir: \\"specs\\",
          to: async (context) => {
              await generateSchemaTypes(context, {
                  filenamePrefix: \\"foo\\"
              });
          }
      }"
    `);
  });

  it("should generate a react-query configuration node", () => {
    const config = generateConfigProperty({
      namespace: "foo",
      options: {
        from: {
          source: "file",
          relativePath: "specs.yaml",
        },
        outputDir: "specs",
        plugin: "typescript/react-query",
      },
    });

    expect(print(config)).toMatchInlineSnapshot(`
      "foo: {
          from: {
              source: \\"file\\",
              relativePath: \\"specs.yaml\\"
          },
          outputDir: \\"specs\\",
          to: async (context) => {
              const filenamePrefix = \\"foo\\";
              const { schemasFiles } = await generateSchemaTypes(context, {
                  filenamePrefix
              });
              await generateReactQueryComponents(context, {
                  filenamePrefix,
                  schemasFiles
              });
          }
      }"
    `);
  });

  it("should generate a react-query configuration node", () => {
    const config = generateConfigProperty({
      namespace: "foo",
      options: {
        from: {
          source: "github",
          ref: "main",
          owner: "fabien0102",
          repository: "openapi-codegen",
          specPath: "examples/petstore.json",
        },
        outputDir: "specs",
        plugin: "typescript/fetch",
      },
    });

    expect(print(config)).toMatchInlineSnapshot(`
      "foo: {
          from: {
              source: \\"github\\",
              ref: \\"main\\",
              owner: \\"fabien0102\\",
              repository: \\"openapi-codegen\\",
              specPath: \\"examples/petstore.json\\"
          },
          outputDir: \\"specs\\",
          to: async (context) => {
              const filenamePrefix = \\"foo\\";
              const { schemasFiles } = await generateSchemaTypes(context, {
                  filenamePrefix
              });
              await generateFetchers(context, {
                  filenamePrefix,
                  schemasFiles
              });
          }
      }"
    `);
  });
});

// Helpers
const sourceFile = ts.createSourceFile("index.ts", "", ts.ScriptTarget.Latest);

const printer = ts.createPrinter({
  newLine: ts.NewLineKind.LineFeed,
  removeComments: false,
});

const print = (node: ts.Node) =>
  printer.printNode(ts.EmitHint.Unspecified, node, sourceFile);

--- End of openapi-codegen/cli/src/core/generateConfigProperty.test.ts ---

--- Start of openapi-codegen/cli/src/core/generateConfigProperty.ts ---
import ts from "typescript";

import type { Config, Import, Plugin } from "../types";

const { factory } = ts;

export type GenerateConfigOptions = {
  /**
   * New configuration key
   */
  namespace: string;

  /**
   * Configuration options
   */
  options: Pick<Config, "from" | "outputDir"> & { plugin: Plugin };
};

/**
 * Generate the configuration `PropertyAssignment` node.
 */
export function generateConfigProperty({
  namespace,
  options,
}: GenerateConfigOptions) {
  return factory.createPropertyAssignment(
    factory.createIdentifier(namespace),
    factory.createObjectLiteralExpression(
      [
        factory.createPropertyAssignment(
          factory.createIdentifier("from"),
          factory.createObjectLiteralExpression(
            Object.entries(options.from).map(
              ([key, value]) =>
                factory.createPropertyAssignment(
                  factory.createIdentifier(key),
                  typeof value === "string"
                    ? factory.createStringLiteral(value)
                    : factory.createObjectLiteralExpression(
                        Object.entries(value).map(([k, v]) =>
                          factory.createPropertyAssignment(
                            factory.createIdentifier(k),
                            factory.createStringLiteral(v)
                          )
                        )
                      )
                ),
              true
            ),
            true
          )
        ),
        factory.createPropertyAssignment(
          factory.createIdentifier("outputDir"),
          factory.createStringLiteral(options.outputDir)
        ),
        factory.createPropertyAssignment(
          factory.createIdentifier("to"),
          factory.createArrowFunction(
            [factory.createModifier(ts.SyntaxKind.AsyncKeyword)],
            undefined,
            [
              factory.createParameterDeclaration(
                undefined,
                undefined,
                factory.createIdentifier("context"),
                undefined,
                undefined,
                undefined
              ),
            ],
            undefined,
            factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
            factory.createBlock(
              getToFunctionStatements(options.plugin, namespace),
              true
            )
          )
        ),
      ],
      true
    )
  );
}

function getToFunctionStatements(
  plugin: Plugin,
  namespace: string
): ts.Statement[] {
  switch (plugin) {
    case "typescript/types-only":
      return [
        factory.createExpressionStatement(
          factory.createAwaitExpression(
            factory.createCallExpression(
              factory.createIdentifier("generateSchemaTypes"),
              undefined,
              [
                factory.createIdentifier("context"),
                factory.createObjectLiteralExpression(
                  [
                    factory.createPropertyAssignment(
                      factory.createIdentifier("filenamePrefix"),
                      factory.createStringLiteral(namespace)
                    ),
                  ],
                  true
                ),
              ]
            )
          )
        ),
      ];
    case "typescript/fetch":
      return [
        factory.createVariableStatement(
          undefined,
          factory.createVariableDeclarationList(
            [
              factory.createVariableDeclaration(
                factory.createIdentifier("filenamePrefix"),
                undefined,
                undefined,
                factory.createStringLiteral(namespace)
              ),
            ],
            ts.NodeFlags.Const |
              ts.NodeFlags.AwaitContext |
              ts.NodeFlags.ContextFlags |
              ts.NodeFlags.TypeExcludesFlags
          )
        ),
        factory.createVariableStatement(
          undefined,
          factory.createVariableDeclarationList(
            [
              factory.createVariableDeclaration(
                factory.createObjectBindingPattern([
                  factory.createBindingElement(
                    undefined,
                    undefined,
                    factory.createIdentifier("schemasFiles"),
                    undefined
                  ),
                ]),
                undefined,
                undefined,
                factory.createAwaitExpression(
                  factory.createCallExpression(
                    factory.createIdentifier("generateSchemaTypes"),
                    undefined,
                    [
                      factory.createIdentifier("context"),
                      factory.createObjectLiteralExpression(
                        [
                          factory.createShorthandPropertyAssignment(
                            factory.createIdentifier("filenamePrefix"),
                            undefined
                          ),
                        ],
                        true
                      ),
                    ]
                  )
                )
              ),
            ],
            ts.NodeFlags.Const |
              ts.NodeFlags.AwaitContext |
              ts.NodeFlags.ContextFlags |
              ts.NodeFlags.TypeExcludesFlags
          )
        ),
        factory.createExpressionStatement(
          factory.createAwaitExpression(
            factory.createCallExpression(
              factory.createIdentifier("generateFetchers"),
              undefined,
              [
                factory.createIdentifier("context"),
                factory.createObjectLiteralExpression(
                  [
                    factory.createShorthandPropertyAssignment(
                      factory.createIdentifier("filenamePrefix"),
                      undefined
                    ),
                    factory.createShorthandPropertyAssignment(
                      factory.createIdentifier("schemasFiles"),
                      undefined
                    ),
                  ],
                  true
                ),
              ]
            )
          )
        ),
      ];
    case "typescript/react-query":
      return [
        factory.createVariableStatement(
          undefined,
          factory.createVariableDeclarationList(
            [
              factory.createVariableDeclaration(
                factory.createIdentifier("filenamePrefix"),
                undefined,
                undefined,
                factory.createStringLiteral(namespace)
              ),
            ],
            ts.NodeFlags.Const |
              ts.NodeFlags.AwaitContext |
              ts.NodeFlags.ContextFlags |
              ts.NodeFlags.TypeExcludesFlags
          )
        ),
        factory.createVariableStatement(
          undefined,
          factory.createVariableDeclarationList(
            [
              factory.createVariableDeclaration(
                factory.createObjectBindingPattern([
                  factory.createBindingElement(
                    undefined,
                    undefined,
                    factory.createIdentifier("schemasFiles"),
                    undefined
                  ),
                ]),
                undefined,
                undefined,
                factory.createAwaitExpression(
                  factory.createCallExpression(
                    factory.createIdentifier("generateSchemaTypes"),
                    undefined,
                    [
                      factory.createIdentifier("context"),
                      factory.createObjectLiteralExpression(
                        [
                          factory.createShorthandPropertyAssignment(
                            factory.createIdentifier("filenamePrefix"),
                            undefined
                          ),
                        ],
                        true
                      ),
                    ]
                  )
                )
              ),
            ],
            ts.NodeFlags.Const |
              ts.NodeFlags.AwaitContext |
              ts.NodeFlags.ContextFlags |
              ts.NodeFlags.TypeExcludesFlags
          )
        ),
        factory.createExpressionStatement(
          factory.createAwaitExpression(
            factory.createCallExpression(
              factory.createIdentifier("generateReactQueryComponents"),
              undefined,
              [
                factory.createIdentifier("context"),
                factory.createObjectLiteralExpression(
                  [
                    factory.createShorthandPropertyAssignment(
                      factory.createIdentifier("filenamePrefix"),
                      undefined
                    ),
                    factory.createShorthandPropertyAssignment(
                      factory.createIdentifier("schemasFiles"),
                      undefined
                    ),
                  ],
                  true
                ),
              ]
            )
          )
        ),
      ];
  }
}

/**
 * Get list of required imports regarding the plugin
 *
 * @param plugin
 * @returns
 */
export function getImports(plugin: Plugin): Import[] {
  switch (plugin) {
    case "typescript/fetch":
      return [
        {
          module: "@openapi-codegen/typescript",
          namedImports: ["generateSchemaTypes", "generateFetchers"],
        },
      ];
    case "typescript/types-only":
      return [
        {
          module: "@openapi-codegen/typescript",
          namedImports: ["generateSchemaTypes"],
        },
      ];
    case "typescript/react-query":
      return [
        {
          module: "@openapi-codegen/typescript",
          namedImports: ["generateSchemaTypes", "generateReactQueryComponents"],
        },
      ];
  }
}

--- End of openapi-codegen/cli/src/core/generateConfigProperty.ts ---

--- Start of openapi-codegen/cli/src/core/getOpenAPISourceFile.url.test.ts ---
import { getOpenAPISourceFile } from "./getOpenAPISourceFile";
import nock from "nock";

describe("getOpenAPISourceFile (source = url)", () => {
  it("should retrieve a json file specs", async () => {
    nock(
      "https://github.com/fabien0102/openapi-codegen/blob/main/cli/examples/petstore.json"
    )
      .get("")
      .replyWithFile(200, "cli/src/fixtures/spec.json");

    const { format, text } = await getOpenAPISourceFile({
      source: "url",
      method: "get",
      url: "https://github.com/fabien0102/openapi-codegen/blob/main/cli/examples/petstore.json",
    });

    expect(format).toBe("json");
    expect(text).toMatchInlineSnapshot(`
      "{
        \\"openapi\\": \\"3.0.2\\",
        \\"info\\": {
          \\"title\\": \\"API Title\\",
          \\"version\\": \\"1.0\\"
        },
        \\"servers\\": [
          {
            \\"url\\": \\"https://api.server.test/v1\\"
          }
        ],
        \\"paths\\": {
          \\"/test\\": {
            \\"get\\": {
              \\"responses\\": {
                \\"200\\": {
                  \\"description\\": \\"OK\\"
                }
              }
            }
          }
        }
      }
      "
    `);
  });

  it("should guess the format with search params", async () => {
    nock(
      "https://github.com/fabien0102/openapi-codegen/blob/main/cli/examples/petstore.yaml"
    )
      .get("?key=secret")
      .replyWithFile(200, "cli/src/fixtures/spec.yaml");

    const { format, text } = await getOpenAPISourceFile({
      source: "url",
      method: "get",
      url: "https://github.com/fabien0102/openapi-codegen/blob/main/cli/examples/petstore.yaml?key=secret",
    });

    expect(format).toBe("yaml");
    expect(text).toMatchInlineSnapshot(`
      "openapi: \\"3.0.2\\"
      info:
        title: API Title
        version: \\"1.0\\"
      servers:
        - url: https://api.server.test/v1
      paths:
        /test:
          get:
            responses:
              \\"200\\":
                description: OK
      "
    `);
  });
});

--- End of openapi-codegen/cli/src/core/getOpenAPISourceFile.url.test.ts ---

--- Start of openapi-codegen/cli/src/core/updateConfig.ts ---
import ts from "typescript";
import type { Import } from "../types";

const { factory: f } = ts;

interface AddImportsOptions {
  /**
   * Original sourceFile
   */
  sourceFile: ts.SourceFile;

  /**
   * List of imports to insert in the file
   */
  importsToInsert: Import[];

  /**
   * List of the existing imports (module name)
   */
  existingImports: string[];

  /**
   * Config property to add
   */
  configProperty: ts.PropertyAssignment;
}

export function updateConfig({
  sourceFile,
  existingImports,
  importsToInsert,
  configProperty,
}: AddImportsOptions) {
  // Split imports in two categories
  const { toInsert, toUpdate } = importsToInsert.reduce(
    (mem, i) => {
      if (existingImports.includes(i.module)) {
        mem.toUpdate.set(i.module, i.namedImports);
      } else {
        mem.toInsert.set(i.module, i.namedImports);
      }
      return mem;
    },
    {
      toInsert: new Map<string, string[]>(),
      toUpdate: new Map<string, string[]>(),
    }
  );

  const addImportsAndConfigProperty: ts.TransformerFactory<ts.SourceFile> = (
    context
  ) => {
    const visit: ts.Visitor = (node) => {
      node = ts.visitEachChild(node, visit, context);

      if (
        ts.isImportDeclaration(node) &&
        toUpdate.has(getText(node.moduleSpecifier))
      ) {
        const importClauseNames: string[] = toUpdate.get(
          getText(node.moduleSpecifier)
        )!;
        node.importClause?.namedBindings?.forEachChild((child) => {
          if (
            ts.isImportSpecifier(child) &&
            !importClauseNames.includes(child.name.text)
          ) {
            importClauseNames.unshift(child.name.text);
          }
        });

        return f.createImportDeclaration(
          node.modifiers,
          f.createImportClause(
            false,
            undefined,
            f.createNamedImports(
              importClauseNames.map((i) =>
                f.createImportSpecifier(false, undefined, f.createIdentifier(i))
              )
            )
          ),
          node.moduleSpecifier
        );
      }

      if (
        ts.isExportAssignment(node) &&
        ts.isCallExpression(node.expression) &&
        ts.isIdentifier(node.expression.expression) &&
        node.expression.expression.escapedText === "defineConfig"
      ) {
        const prevProperties = ts.isObjectLiteralExpression(
          node.expression.arguments[0]
        )
          ? node.expression.arguments[0].properties
          : [];

        return f.updateExportAssignment(
          node,
          node.decorators,
          node.modifiers,
          f.updateCallExpression(
            node.expression,
            node.expression.expression,
            node.expression.typeArguments,
            [
              f.createObjectLiteralExpression(
                [...prevProperties, configProperty],
                true
              ),
            ]
          )
        );
      }

      return node;
    };

    return (node) => ts.visitNode(node, visit);
  };

  const {
    transformed: [sourceFileWithImports],
  } = ts.transform(sourceFile, [addImportsAndConfigProperty]);

  const printer = ts.createPrinter({
    newLine: ts.NewLineKind.LineFeed,
    removeComments: false,
  });

  return ts.createSourceFile(
    "index.ts",
    createImportStatements(toInsert) + printer.printFile(sourceFileWithImports),
    ts.ScriptTarget.ESNext
  );
}

function createImportStatements(imports: Map<string, string[]>) {
  if (imports.size === 0) return "";

  const sourceFile = ts.createSourceFile(
    "index.ts",
    "",
    ts.ScriptTarget.ESNext
  );
  const printer = ts.createPrinter({
    newLine: ts.NewLineKind.LineFeed,
    removeComments: false,
  });

  const statements = Array.from(imports.entries()).map(
    ([module, namedImports]) =>
      f.createImportDeclaration(
        undefined,
        f.createImportClause(
          false,
          undefined,
          f.createNamedImports(
            namedImports.map((name) =>
              f.createImportSpecifier(
                false,
                undefined,
                f.createIdentifier(name)
              )
            )
          )
        ),
        f.createStringLiteral(module),
        undefined
      )
  );

  return statements
    .map((statement) =>
      printer.printNode(ts.EmitHint.Unspecified, statement, sourceFile)
    )
    .join("\n");
}

function getText(expression: ts.Expression) {
  try {
    // @ts-expect-error
    return (expression.text as string) ?? "";
  } catch {
    return "";
  }
}

--- End of openapi-codegen/cli/src/core/updateConfig.ts ---

--- Start of openapi-codegen/cli/src/core/getOpenAPISourceFile.ts ---
import { UsageError } from "clipanion";
import { readFileSync, unlinkSync } from "fs";
import { HTTPError } from "got";
import { homedir } from "os";
import { join, parse } from "path";
import { URL } from "url";
import { FromOptions, OpenAPISourceFile } from "../types";

/**
 * Retrieve the OpenAPI source.
 *
 * @param options
 */
export const getOpenAPISourceFile = async (
  options: FromOptions
): Promise<OpenAPISourceFile> => {
  switch (options.source) {
    case "file":
      const text = readFileSync(
        join(process.cwd(), options.relativePath),
        "utf-8"
      );
      const { ext } = parse(options.relativePath);
      const format = getFormat(ext);

      return { text, format };

    case "url": {
      const { default: got } = await import("got");
      const { pathname } = new URL(options.url);
      const file = await got[options.method || "get"](options.url, {
        headers: options.headers || {},
      });
      let format: OpenAPISourceFile["format"] = "yaml";
      if (
        pathname.toLowerCase().endsWith("json") ||
        file.headers["content-type"]?.startsWith("application/json")
      ) {
        format = "json";
      }

      return { text: file.body, format };
    }

    case "github": {
      // Retrieve Github token
      const { Prompt } = await import("../prompts/Prompt.js");
      const prompt = new Prompt();

      const token = await prompt.githubToken();

      // Retrieve specs
      const { default: got } = await import("got");

      try {
        const raw = await got
          .post("https://api.github.com/graphql", {
            headers: {
              "content-type": "application/json",
              "user-agent": "openapi-codegen",
              authorization: `bearer ${token}`,
            },
            body: JSON.stringify({
              query: `query {
            repository(name: "${options.repository}", owner: "${options.owner}") {
              object(expression: "${options.ref}:${options.specPath}") {
                ... on Blob {
                  text
                }
              }
            }
          }`,
            }),
          })
          .json<{
            data: { repository: { object: { text: string } | null } };
            errors?: [
              {
                message: string;
              }
            ];
          }>();

        prompt.close();
        if (raw.errors) {
          throw new UsageError(raw.errors[0].message);
        }
        if (raw.data.repository.object === null) {
          throw new UsageError(`No file found at "${options.specPath}"`);
        }

        let format: OpenAPISourceFile["format"] = "yaml";
        if (options.specPath.toLowerCase().endsWith("json")) {
          format = "json";
        }

        return { text: raw.data.repository.object.text, format };
      } catch (e) {
        if (
          e instanceof HTTPError &&
          e.response.statusCode === 401 &&
          !process.env.GITHUB_TOKEN
        ) {
          const removeToken = await prompt.confirm(
            "Your token doesn't have the correct permissions, should we remove it?"
          );
          prompt.close();

          if (removeToken) {
            const githubTokenPath = join(homedir(), ".openapi-codegen");
            unlinkSync(githubTokenPath);
            return await getOpenAPISourceFile(options);
          }
        }
        throw e;
      }
    }
  }
};

/**
 * Get the format of the specifications (yaml or json)
 *
 * @param extension
 */
export const getFormat = (extension: string) => {
  if (extension.startsWith(".")) {
    extension = extension.slice(1);
  }
  if (extension.toLowerCase() === "yaml") {
    return "yaml";
  }
  if (extension.toLowerCase() === "yml") {
    return "yaml";
  }
  if (extension.toLowerCase() === "json") {
    return "json";
  }
  throw new Error(`"${extension}" extension file is not supported!`);
};

--- End of openapi-codegen/cli/src/core/getOpenAPISourceFile.ts ---

--- Start of openapi-codegen/cli/src/core/parseOpenAPISourceFile.ts ---
import { OpenAPIObject } from "openapi3-ts";

import type { OpenAPISourceFile } from "../types";

import swagger2openapi from "swagger2openapi";
import YAML from "js-yaml";

/**
 * Parse an openAPI source file to an openAPI object.
 *
 * This method will convert legacy swagger 2 specs to openapi 3.0
 *
 * @param text raw data of the spec
 * @param format format of the spec
 */
export const parseOpenAPISourceFile = ({
  text,
  format,
}: OpenAPISourceFile): Promise<OpenAPIObject> => {
  const schema = format === "yaml" ? YAML.load(text) : JSON.parse(text);

  return new Promise((resolve, reject) => {
    if (!schema.openapi || !schema.openapi.startsWith("3.0")) {
      swagger2openapi.convertObj(schema, {}, (err, convertedObj) => {
        if (err) {
          reject(err);
        } else {
          resolve(convertedObj.openapi);
        }
      });
    } else {
      resolve(schema);
    }
  });
};

--- End of openapi-codegen/cli/src/core/parseOpenAPISourceFile.ts ---

--- Start of openapi-codegen/cli/src/core/getOpenAPISourceFile.file.test.ts ---
import { getOpenAPISourceFile } from "./getOpenAPISourceFile";

describe("getOpenAPISourceFile (source = file)", () => {
  it("should retrieve a local yaml file specs", async () => {
    const { text, format } = await getOpenAPISourceFile({
      source: "file",
      relativePath: "cli/src/fixtures/spec.yaml",
    });

    expect(format).toBe("yaml");
    expect(text).toMatchInlineSnapshot(`
      "openapi: \\"3.0.2\\"
      info:
        title: API Title
        version: \\"1.0\\"
      servers:
        - url: https://api.server.test/v1
      paths:
        /test:
          get:
            responses:
              \\"200\\":
                description: OK
      "
    `);
  });

  it("should retrieve a local yml file specs", async () => {
    const { text, format } = await getOpenAPISourceFile({
      source: "file",
      relativePath: "cli/src/fixtures/spec.yml",
    });

    expect(format).toBe("yaml");
    expect(text).toMatchInlineSnapshot(`
      "openapi: \\"3.0.2\\"
      info:
        title: API Title
        version: \\"1.0\\"
      servers:
        - url: https://api.server.test/v1
      paths:
        /test:
          get:
            responses:
              \\"200\\":
                description: OK
      "
    `);
  });

  it("should retrieve a local json file specs", async () => {
    const { text, format } = await getOpenAPISourceFile({
      source: "file",
      relativePath: "cli/src/fixtures/spec.json",
    });

    expect(format).toBe("json");
    expect(text).toMatchInlineSnapshot(`
      "{
        \\"openapi\\": \\"3.0.2\\",
        \\"info\\": {
          \\"title\\": \\"API Title\\",
          \\"version\\": \\"1.0\\"
        },
        \\"servers\\": [
          {
            \\"url\\": \\"https://api.server.test/v1\\"
          }
        ],
        \\"paths\\": {
          \\"/test\\": {
            \\"get\\": {
              \\"responses\\": {
                \\"200\\": {
                  \\"description\\": \\"OK\\"
                }
              }
            }
          }
        }
      }
      "
    `);
  });

  it("should throw an error if the format is not yaml or json", async () => {
    try {
      await getOpenAPISourceFile({
        source: "file",
        relativePath: "cli/src/fixtures/spec.yolo",
      });
      fail("should throw an error");
    } catch (e) {
      expect(e).toMatchInlineSnapshot(
        `[Error: "yolo" extension file is not supported!]`
      );
    }
  });
});

--- End of openapi-codegen/cli/src/core/getOpenAPISourceFile.file.test.ts ---

--- Start of openapi-codegen/cli/src/core/updateConfig.test.ts ---
import ts from "typescript";
import { updateConfig } from "./updateConfig";

describe("updateConfig", () => {
  const configProperty = ts.factory.createPropertyAssignment(
    "test",
    ts.factory.createObjectLiteralExpression([], false)
  );

  it("should add import statement if not already existing", () => {
    const sourceText = `import { defineConfig } from "@openapi-codegen/cli";
    
    // This comment should stay
    export default defineConfig({})`;
    const sourceFile = ts.createSourceFile(
      "openapi-codegen.config.ts",
      sourceText,
      ts.ScriptTarget.Latest
    );

    const transformedSourceFile = updateConfig({
      sourceFile,
      existingImports: ["@openapi-codegen/cli"],
      importsToInsert: [
        {
          namedImports: ["generateReactQueryComponents", "generateSchemaTypes"],
          module: "@openapi-codegen/typescript",
        },
      ],
      configProperty,
    });

    expect(printer.printFile(transformedSourceFile)).toMatchInlineSnapshot(`
      "import { generateReactQueryComponents, generateSchemaTypes } from \\"@openapi-codegen/typescript\\";
      import { defineConfig } from \\"@openapi-codegen/cli\\";
      // This comment should stay
      export default defineConfig({
          test: {}
      });
      "
    `);
  });

  it("should update import statement if already existing", () => {
    const sourceText = `import { defineConfig } from "@openapi-codegen/cli";
    import { renameComponent } from "@openapi-codegen/typescript";

    export default defineConfig({
      plop: {}
    })`;
    const sourceFile = ts.createSourceFile(
      "openapi-codegen.config.ts",
      sourceText,
      ts.ScriptTarget.Latest
    );

    const transformedSourceFile = updateConfig({
      sourceFile,
      existingImports: ["@openapi-codegen/cli", "@openapi-codegen/typescript"],
      importsToInsert: [
        {
          namedImports: ["generateReactQueryComponents", "generateSchemaTypes"],
          module: "@openapi-codegen/typescript",
        },
      ],
      configProperty,
    });

    expect(printer.printFile(transformedSourceFile)).toMatchInlineSnapshot(`
      "import { defineConfig } from \\"@openapi-codegen/cli\\";
      import { renameComponent, generateReactQueryComponents, generateSchemaTypes } from \\"@openapi-codegen/typescript\\";
      export default defineConfig({
          plop: {},
          test: {}
      });
      "
    `);
  });

  it("should not create duplicates imports", () => {
    const sourceText = `import { defineConfig } from "@openapi-codegen/cli";
    import { renameComponent, generateReactQueryComponents } from "@openapi-codegen/typescript";

    export default defineConfig({})`;
    const sourceFile = ts.createSourceFile(
      "openapi-codegen.config.ts",
      sourceText,
      ts.ScriptTarget.Latest
    );

    const transformedSourceFile = updateConfig({
      sourceFile,
      existingImports: ["@openapi-codegen/cli", "@openapi-codegen/typescript"],
      importsToInsert: [
        {
          namedImports: ["generateReactQueryComponents", "generateSchemaTypes"],
          module: "@openapi-codegen/typescript",
        },
      ],
      configProperty,
    });

    expect(printer.printFile(transformedSourceFile)).toMatchInlineSnapshot(`
      "import { defineConfig } from \\"@openapi-codegen/cli\\";
      import { renameComponent, generateReactQueryComponents, generateSchemaTypes } from \\"@openapi-codegen/typescript\\";
      export default defineConfig({
          test: {}
      });
      "
    `);
  });
});

// Helpers
const printer = ts.createPrinter({
  newLine: ts.NewLineKind.LineFeed,
  removeComments: false,
});

--- End of openapi-codegen/cli/src/core/updateConfig.test.ts ---

--- Start of openapi-codegen/cli/src/utils/getText.ts ---
import ts from "typescript";

export function getText(expression: ts.Expression) {
  try {
    // @ts-expect-error
    return (expression.text as string) ?? "";
  } catch {
    return "";
  }
}

--- End of openapi-codegen/cli/src/utils/getText.ts ---

--- Start of openapi-codegen/cli/src/prompts/Prompt.tsx ---
import React from "react";
import { render } from "ink";
import { ReplaySubject } from "rxjs";

import type { GithubOptions } from "src/types";

import { Choice } from "./Select.js";
import { App, PromptUnit } from "./App.js";
import { GithubPullRequestProps, PullRequest } from "./GithubPullRequest.js";

export type InputOptions = {
  message: string;
  hint?: string;
  defaultValue?: string;
};

export type ConfirmOptions = {
  message: string;
  defaultValue?: boolean;
};

export type SelectOptions<TChoice> = {
  choices: Choice<TChoice>[];
  message: string;
  hint?: string;
};

export class Prompt {
  private state = new ReplaySubject<PromptUnit>();

  /**
   * Ink render instance.
   */
  private app = render(<App state={this.state} />);

  /**
   * Close the prompt session.
   */
  public close() {
    this.app.clear();
    this.app.unmount();
  }

  /**
   * Ask a question to the user.
   *
   * @example
   * const name = await prompt.input("What’s your name?")
   */
  public input(message: string): Promise<string>;
  public input(options: InputOptions): Promise<string>;
  public input(options: InputOptions | string): Promise<string> {
    const props = typeof options === "string" ? { message: options } : options;

    return new Promise<string>((resolve) => {
      this.state.next({
        type: "input",
        onSubmit: resolve,
        ...props,
      });
    });
  }

  /**
   * Show a list of options to the user.
   *
   * @example
   * const gender = await prompt.select({
   *   choices: [
   *    { label: "Male", value: "m" as const },
   *    { label: "Female", value: "f" as const }
   *   ],
   *   message: "What’s your gender?"
   * })
   */
  public select<TChoice>(props: SelectOptions<TChoice>): Promise<TChoice> {
    return new Promise<TChoice>((resolve) => {
      this.state.next({
        type: "select",
        onSubmit: resolve,
        ...props,
      });
    });
  }

  /**
   * Ask a question with yes or no expected answer.
   *
   * @example
   * const withSauce = await prompt.confirm("Do you want sauce?")
   */
  public confirm(message: string): Promise<boolean>;
  public confirm(options: ConfirmOptions): Promise<boolean>;
  public confirm(options: ConfirmOptions | string): Promise<boolean> {
    const props = typeof options === "string" ? { message: options } : options;

    return new Promise<boolean>((resolve) => {
      this.state.next({
        type: "confirm",
        onSubmit: resolve,
        ...props,
      });
    });
  }

  /**
   * Smart prompt for selecting a github file.
   */
  public github(token: string): Promise<GithubOptions> {
    return new Promise<GithubOptions>((resolve) => {
      this.state.next({
        type: "github",
        token,
        onSubmit: resolve,
      });
    });
  }

  /**
   * Retrieve github token. This will ask if the token is not already stored.
   */
  public githubToken(): Promise<string> {
    return new Promise<string>((resolve) => {
      this.state.next({
        type: "githubToken",
        onSubmit: resolve,
      });
    });
  }

  /**
   * Select a pull-request.
   *
   * @returns The ref of the pull-request
   */
  public githubPullRequest(
    options: Omit<GithubPullRequestProps, "onSubmit">
  ): Promise<PullRequest> {
    return new Promise<PullRequest>((resolve) => {
      this.state.next({
        type: "githubPullRequest",
        owner: options.owner,
        repository: options.repository,
        token: options.token,
        pullRequestNumber: options.pullRequestNumber,
        onSubmit: resolve,
      });
    });
  }
}

--- End of openapi-codegen/cli/src/prompts/Prompt.tsx ---

--- Start of openapi-codegen/cli/src/prompts/App.tsx ---
import React, { useEffect, useState } from "react";
import { Observable } from "rxjs";
import { Box } from "ink";
import { Input, InputProps } from "./Input.js";
import { Select, SelectProps } from "./Select.js";
import { Confirm, ConfirmProps } from "./Confirm.js";
import { Github, GithubProps } from "./Github.js";
import { GithubToken, GithubTokenProps } from "./GithubToken.js";
import {
  GithubPullRequest,
  GithubPullRequestProps,
} from "./GithubPullRequest.js";

export type PromptUnit =
  | ({ type: "input" } & InputProps)
  | ({ type: "select" } & SelectProps<any>)
  | ({ type: "confirm" } & ConfirmProps)
  | ({ type: "github" } & GithubProps)
  | ({ type: "githubToken" } & GithubTokenProps)
  | ({ type: "githubPullRequest" } & GithubPullRequestProps);

type AppProps = {
  state: Observable<PromptUnit>;
};

export function App({ state }: AppProps) {
  const [prompts, setPrompts] = useState<PromptUnit[]>([]);

  useEffect(() => {
    const sub = state.subscribe((p) => {
      setPrompts((prev) => [...prev, p]);
    });

    return () => sub.unsubscribe();
  }, [state]);

  if (prompts.length > 0) {
    return (
      <Box flexDirection="column">
        {prompts.map((promptProps, index) => {
          switch (promptProps.type) {
            case "input":
              return <Input {...promptProps} key={index} />;
            case "select":
              return <Select {...promptProps} key={index} />;
            case "confirm":
              return <Confirm {...promptProps} key={index} />;
            case "github":
              return <Github {...promptProps} key={index} />;
            case "githubToken":
              return <GithubToken {...promptProps} key={index} />;
            case "githubPullRequest":
              return <GithubPullRequest {...promptProps} key={index} />;
          }
        })}
      </Box>
    );
  }

  return null;
}

--- End of openapi-codegen/cli/src/prompts/App.tsx ---

--- Start of openapi-codegen/cli/src/prompts/GithubPullRequest.tsx ---
import { ApolloClient, HttpLink, InMemoryCache } from "@apollo/client";

import React, { useEffect, useState } from "react";
import { Box, Text } from "ink";
import fetch from "got-fetch";

import { useSearchPullRequestQuery } from "./queries/github.js";
import { Message } from "./Message.js";
import { Select } from "./Select.js";
import { TextInput } from "./TextInput.js";
import { Confirm } from "./Confirm.js";
import { Spinner } from "./Spinner.js";

export type PullRequest = {
  ref: string;
  owner: string;
  repository: string;
};

export type GithubPullRequestProps = {
  /**
   * If provided, the prompt will just resolve the branch name without asking anything else.
   */
  pullRequestNumber?: number;
  token: string;
  repository: string;
  owner: string;
  onSubmit: (head: PullRequest) => void;
};

export const GithubPullRequest = ({
  token,
  repository,
  pullRequestNumber,
  owner,
  onSubmit,
}: GithubPullRequestProps) => {
  const [search, setSearch] = useState("");

  const apolloClient = React.useMemo(
    () =>
      new ApolloClient({
        link: new HttpLink({
          uri: "https://api.github.com/graphql",
          headers: token
            ? {
                Authorization: `Bearer ${token}`,
              }
            : {},
          fetch: fetch as any,
        }),
        cache: new InMemoryCache(),
      }),
    [token]
  );

  const { data, error, loading } = useSearchPullRequestQuery({
    variables: {
      owner,
      repositoryName: repository,
    },
    client: apolloClient,
  });

  useEffect(() => {
    if (pullRequestNumber && data?.repository?.pullRequests.nodes) {
      const pr = data.repository.pullRequests.nodes.find(
        (node) => node?.number === pullRequestNumber
      );
      if (pr) {
        onSubmit({
          ref: pr.headRefName,
          owner: pr.headRepository?.owner.login ?? owner,
          repository: pr.headRepository?.name ?? repository,
        });
      }
    }
  }, [data, pullRequestNumber]);

  if (pullRequestNumber) {
    const pr = data?.repository?.pullRequests.nodes?.find(
      (node) => node?.number === pullRequestNumber
    );
    if (loading)
      return (
        <Text>
          <Spinner />
          Resolving pull request
        </Text>
      );
    if (!pr)
      return <Text>The pull request #{pullRequestNumber} is not open</Text>;
    return null;
  }

  if (data?.repository?.pullRequests.nodes?.length === 0) {
    return (
      <Box flexDirection="column">
        <Confirm
          message={`No open pull request found, do you want to fallback on "${data.repository.defaultBranchRef?.name}" branch?`}
          onSubmit={(answer) => {
            if (answer === true && data?.repository?.defaultBranchRef?.name) {
              onSubmit({
                owner,
                repository,
                ref: data.repository.defaultBranchRef?.name,
              });
            } else {
              process.exit(0);
            }
          }}
        />
      </Box>
    );
  }

  return (
    <Box flexDirection="column">
      <Box>
        <Message>Pull request title</Message>
        <TextInput onChange={setSearch} value={search} />
      </Box>
      {loading && (
        <Text>
          <Spinner />
          Loading
        </Text>
      )}
      {error && <Box>{error.message}</Box>}
      {data && data.repository?.pullRequests.nodes && (
        <Select
          choices={data.repository.pullRequests.nodes
            .filter((node) =>
              search === ""
                ? true
                : new RegExp(search, "i").exec(
                    `#${node?.number} ${node?.title}` || ""
                  )
            )
            .slice(-10)
            .map((node) => ({
              label: `#${node?.number} ${node?.title}`,
              value: {
                owner: node?.headRepository?.owner.login || owner,
                repository: node?.headRepository?.name || repository,
                ref: node?.headRefName || "main",
              },
            }))}
          onSubmit={onSubmit}
        />
      )}
    </Box>
  );
};

--- End of openapi-codegen/cli/src/prompts/GithubPullRequest.tsx ---

--- Start of openapi-codegen/cli/src/prompts/TextInput.tsx ---
// Fork from `ink-text-input` package
// https://github.com/vadimdemedes/ink-text-input

import React, { useState, useEffect } from "react";
import type { FC } from "react";
import { Text, useInput } from "ink";
import chalk from "chalk";

interface TextInputProps {
  /**
   * Text to display when `value` is empty.
   */
  placeholder?: string;

  /**
   * Listen to user's input. Useful in case there are multiple input components
   * at the same time and input must be "routed" to a specific component.
   */
  focus?: boolean;

  /**
   * Replace all chars and mask the value. Useful for password inputs.
   */
  mask?: string;

  /**
   * Whether to show cursor and allow navigation inside text input with arrow keys.
   */
  showCursor?: boolean;

  /**
   * Highlight pasted text
   */
  highlightPastedText?: boolean;

  /**
   * Value to display in a text input.
   */
  value: string;

  /**
   * Function to call when value updates.
   */
  onChange: (value: string) => void;

  /**
   * Function to call when `Enter` is pressed, where first argument is a value of the input.
   */
  onSubmit?: (value: string) => void;
}

export const TextInput: FC<TextInputProps> = ({
  value: originalValue,
  placeholder = "",
  focus = true,
  mask,
  highlightPastedText = false,
  showCursor = true,
  onChange,
  onSubmit,
}) => {
  const [{ cursorOffset, cursorWidth }, setState] = useState({
    cursorOffset: (originalValue || "").length,
    cursorWidth: 0,
  });

  useEffect(() => {
    setState((previousState) => {
      if (!focus || !showCursor) {
        return previousState;
      }

      const newValue = originalValue || "";

      if (previousState.cursorOffset > newValue.length - 1) {
        return {
          cursorOffset: newValue.length,
          cursorWidth: 0,
        };
      }

      return previousState;
    });
  }, [originalValue, focus, showCursor]);

  const cursorActualWidth = highlightPastedText ? cursorWidth : 0;

  const value = mask ? mask.repeat(originalValue.length) : originalValue;
  let renderedValue = value;
  let renderedPlaceholder = placeholder ? chalk.grey(placeholder) : undefined;

  // Fake mouse cursor, because it's too inconvenient to deal with actual cursor and ansi escapes
  if (showCursor && focus) {
    renderedPlaceholder =
      placeholder.length > 0
        ? chalk.inverse(placeholder[0]) + chalk.grey(placeholder.slice(1))
        : chalk.inverse(" ");

    renderedValue = value.length > 0 ? "" : chalk.inverse(" ");

    let i = 0;

    for (const char of value) {
      if (i >= cursorOffset - cursorActualWidth && i <= cursorOffset) {
        renderedValue += chalk.inverse(char);
      } else {
        renderedValue += char;
      }

      i++;
    }

    if (value.length > 0 && cursorOffset === value.length) {
      renderedValue += chalk.inverse(" ");
    }
  }

  useInput(
    (input, key) => {
      if (
        key.upArrow ||
        key.downArrow ||
        (key.ctrl && input === "c") ||
        key.tab ||
        (key.shift && key.tab)
      ) {
        return;
      }

      if (key.return) {
        if (onSubmit) {
          onSubmit(originalValue);
        }

        return;
      }

      let nextCursorOffset = cursorOffset;
      let nextValue = originalValue;
      let nextCursorWidth = 0;

      if (key.leftArrow) {
        if (showCursor) {
          nextCursorOffset--;
        }
      } else if (key.rightArrow) {
        if (showCursor) {
          nextCursorOffset++;
        }
      } else if (key.backspace || key.delete) {
        if (cursorOffset > 0) {
          nextValue =
            originalValue.slice(0, cursorOffset - 1) +
            originalValue.slice(cursorOffset, originalValue.length);

          nextCursorOffset--;
        }
      } else {
        nextValue =
          originalValue.slice(0, cursorOffset) +
          input +
          originalValue.slice(cursorOffset, originalValue.length);

        nextCursorOffset += input.length;

        if (input.length > 1) {
          nextCursorWidth = input.length;
        }
      }

      if (cursorOffset < 0) {
        nextCursorOffset = 0;
      }

      if (cursorOffset > originalValue.length) {
        nextCursorOffset = originalValue.length;
      }

      setState({
        cursorOffset: nextCursorOffset,
        cursorWidth: nextCursorWidth,
      });

      if (nextValue !== originalValue) {
        onChange(nextValue);
      }
    },
    { isActive: focus }
  );

  return (
    <Text>
      {placeholder
        ? value.length > 0
          ? renderedValue
          : renderedPlaceholder
        : renderedValue}
    </Text>
  );
};

--- End of openapi-codegen/cli/src/prompts/TextInput.tsx ---

--- Start of openapi-codegen/cli/src/prompts/Github.tsx ---
import { ApolloClient, HttpLink, InMemoryCache } from "@apollo/client";

import { Box, Text } from "ink";
import fetch from "got-fetch";
import React from "react";

import type { GithubOptions } from "../types";

import { Message } from "./Message.js";
import {
  useSearchRepositoryQuery,
  useSearchUserQuery,
} from "./queries/github.js";
import { Select } from "./Select.js";
import { TextInput } from "./TextInput.js";

type Step1 = Pick<Partial<GithubOptions>, "owner">;
type Step2 = Required<Step1> & Pick<Partial<GithubOptions>, "repository">;
type Step3 = Required<Step2> & Pick<Partial<GithubOptions>, "source">;
type Step4 = Required<Step3> & Pick<Partial<GithubOptions>, "specPath">;

type State =
  | (Step1 & { step: 1 })
  | (Step2 & { step: 2 })
  | (Step3 & { step: 3 })
  | (Step4 & { step: 4 });

export type GithubProps = {
  token: string;
  onSubmit: (value: GithubOptions) => void;
};

export const Github = ({ onSubmit, token }: GithubProps) => {
  const [state, setState] = React.useState<State>({ step: 1 });

  const apolloClient = React.useMemo(
    () =>
      new ApolloClient({
        link: new HttpLink({
          uri: "https://api.github.com/graphql",
          headers: token
            ? {
                Authorization: `Bearer ${token}`,
              }
            : {},
          fetch: fetch as any,
        }),
        cache: new InMemoryCache(),
      }),
    [token]
  );

  const {
    data: users,
    error: usersError,
    loading: usersLoading,
  } = useSearchUserQuery({
    variables: {
      query: state.owner || "",
    },
    skip: !state.owner,
    client: apolloClient,
  });

  const {
    data: repositories,
    error: repositoriesError,
    loading: repositoriesLoading,
  } = useSearchRepositoryQuery({
    variables: {
      query: (state.step === 2 && `${state.owner}/`) || "",
    },
    skip: state.step !== 2,
    client: apolloClient,
  });

  switch (state.step) {
    case 1:
      return (
        <Box flexDirection="column">
          <Box>
            <Message>Owner?</Message>
            <TextInput
              onChange={(owner) => setState({ step: 1, owner })}
              value={state.owner || ""}
            />
          </Box>
          {usersLoading && <Text>Loading…</Text>}
          {usersError && <Box>{usersError.message}</Box>}
          {users && users.search.nodes && (
            <Select
              choices={users.search.nodes.map((node) =>
                node?.__typename === "User"
                  ? { label: node.login, value: node.login }
                  : { label: "-", value: "-" }
              )}
              onSubmit={(owner) => setState({ step: 2, owner })}
            />
          )}
        </Box>
      );
    case 2:
      return (
        <Box flexDirection="column">
          <Box>
            <Message>Pick a repository</Message>
            <Text color="blackBright">{state.owner}/ </Text>
            <TextInput
              onChange={(repository) => setState({ ...state, repository })}
              value={state.repository || ""}
            />
          </Box>
          {repositoriesLoading && <Text>Loading…</Text>}
          {repositoriesError && <Box>{repositoriesError.message}</Box>}
          {repositories && repositories.search.nodes && (
            <Select
              choices={repositories.search.nodes.map((node) =>
                node?.__typename === "Repository"
                  ? { label: node.name, value: node.name }
                  : {
                      label: "-",
                      value: "-",
                    }
              )}
              onSubmit={(repository) =>
                setState({ ...state, step: 3, repository })
              }
            />
          )}
        </Box>
      );
  }

  return null;
};

--- End of openapi-codegen/cli/src/prompts/Github.tsx ---

--- Start of openapi-codegen/cli/src/prompts/GithubToken.tsx ---
import React, { useState } from "react";
import { Box, Text } from "ink";

import { join } from "path";
import { homedir } from "os";
import { existsSync, readFileSync, writeFileSync } from "fs";

import { Input } from "./Input.js";

export type GithubTokenProps = {
  onSubmit: (token: string) => void;
};

/**
 * Retrieve github token, ask if not already set.
 */
export const GithubToken = ({ onSubmit }: GithubTokenProps) => {
  const token = getEnvGithubToken();
  const [hasSubmit, setHasSubmit] = useState(false);

  if (hasSubmit) return null;

  if (token) {
    onSubmit(token);
    setHasSubmit(true);
  }

  return (
    <Box flexDirection="column">
      <Input
        message="Github token"
        onSubmit={(val) => {
          writeFileSync(githubTokenPath, val);
          onSubmit(val);
          setHasSubmit(true);
        }}
      />
      <Box marginTop={1} paddingLeft={2} flexDirection="column">
        <Text>Please provide a GitHub token with `repo` rules checked</Text>
        <Text color="cyan">
          https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line
        </Text>
      </Box>
    </Box>
  );
};

const githubTokenPath = join(homedir(), ".openapi-codegen");

/**
 * Retrieve stored github token
 */
const getEnvGithubToken = () => {
  let accessToken = process.env.GITHUB_TOKEN;
  if (!accessToken && existsSync(githubTokenPath)) {
    accessToken = readFileSync(githubTokenPath, "utf-8");
  }

  return accessToken;
};

--- End of openapi-codegen/cli/src/prompts/GithubToken.tsx ---

--- Start of openapi-codegen/cli/src/prompts/Confirm.tsx ---
import { Box, Text } from "ink";
import React, { useState } from "react";

import { Message } from "./Message.js";
import { TextInput } from "./TextInput.js";

export type ConfirmProps = {
  message: string;
  defaultValue?: boolean;
  onSubmit: (value: boolean) => void;
};

export const Confirm = ({ message, defaultValue, onSubmit }: ConfirmProps) => {
  const [value, setValue] = useState("");
  const [isValid, setIsValid] = useState(true);
  const [answer, setAnswer] = useState<boolean>();

  return (
    <>
      <Box>
        <Message>{message}</Message>
        <Box marginRight={1}>
          {typeof defaultValue === "boolean" ? (
            <Text>({defaultValue ? "Y/n" : "y/N"})</Text>
          ) : (
            <Text>(y/n)</Text>
          )}
        </Box>
        {answer !== undefined ? (
          <Text color={answer ? "green" : "red"}>{answer ? "Yes" : "No"}</Text>
        ) : (
          <TextInput
            onChange={(val) => {
              setIsValid(true);
              setValue(val);
            }}
            value={value}
            onSubmit={(val) => {
              if (typeof defaultValue === "boolean" && val === "") {
                setAnswer(defaultValue);
                onSubmit(defaultValue);
                return;
              }

              const result = valueToBoolean(val);
              if (result.valid) {
                setAnswer(result.value);
                onSubmit(result.value);
              } else {
                setIsValid(false);
              }
            }}
            showCursor={!answer}
          />
        )}
      </Box>
      {!isValid ? (
        <Text color="red">The answer need to be "Yes" or "No"!</Text>
      ) : null}
    </>
  );
};

const valueToBoolean = (
  input: string
): { valid: true; value: boolean } | { valid: false } => {
  const lowerInput = input.toLowerCase();
  if (lowerInput === "y" || lowerInput === "yes") {
    return { valid: true, value: true };
  }
  if (lowerInput === "n" || lowerInput === "no") {
    return { valid: true, value: false };
  }
  return { valid: false };
};

--- End of openapi-codegen/cli/src/prompts/Confirm.tsx ---

--- Start of openapi-codegen/cli/src/prompts/Hint.tsx ---
import React from "react";
import { Box, Text } from "ink";

export type HintProps = {
  children: string;
};

/**
 * Display a hint to the user.
 */
export const Hint = ({ children }: HintProps) => (
  <Box marginLeft={1}>
    <Text color="blackBright">{children}</Text>
  </Box>
);

--- End of openapi-codegen/cli/src/prompts/Hint.tsx ---

--- Start of openapi-codegen/cli/src/prompts/Message.tsx ---
import React from "react";
import { Box, Text } from "ink";

type MessageProps = {
  children: string;
};

/**
 * Display a question to the user.
 */
export const Message = ({ children }: MessageProps) => (
  <Box flexDirection="row">
    <Box marginRight={1}>
      <Text color="green">?</Text>
    </Box>
    <Box marginRight={1}>
      <Text bold>{children}</Text>
    </Box>
  </Box>
);

--- End of openapi-codegen/cli/src/prompts/Message.tsx ---

--- Start of openapi-codegen/cli/src/prompts/Spinner.tsx ---
import React from "react";
import { useState, useEffect } from "react";
import { Text } from "ink";

const frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"];

/**
 * Spinner
 */
export const Spinner = () => {
  const [frame, setFrame] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setFrame((previousFrame) => {
        const isLastFrame = previousFrame === frames.length - 1;
        return isLastFrame ? 0 : previousFrame + 1;
      });
    }, 80);

    return () => {
      clearInterval(timer);
    };
  }, []);

  return <Text color="green">{frames[frame]} </Text>;
};

--- End of openapi-codegen/cli/src/prompts/Spinner.tsx ---

--- Start of openapi-codegen/cli/src/prompts/Select.tsx ---
import React, { useState } from "react";
import { Box, Text, useInput } from "ink";

import { Answer } from "./Answer.js";
import { Hint } from "./Hint.js";
import { Message } from "./Message.js";

export type Choice<T> = {
  value: T;
  label: string;
  hint?: string;
};

export type SelectProps<TChoice> = {
  message?: string;
  choices: Choice<TChoice>[];
  onSubmit: (value: TChoice) => void;
};

export function Select<TChoice>({
  message,
  choices,
  onSubmit,
}: SelectProps<TChoice>) {
  const [selectedChoice, setSelectedChoice] = useState(0);
  const [answer, setAnswer] = useState<string>();

  useInput((input, key) => {
    if (key.downArrow) {
      setSelectedChoice((prev) => (prev + 1) % choices.length);
    }

    if (key.upArrow) {
      setSelectedChoice((prev) => {
        if (prev === 0) return choices.length - 1;
        return prev - 1;
      });
    }

    if (key.return) {
      setAnswer(choices[selectedChoice].label);
      onSubmit(choices[selectedChoice].value);
    }
  });

  const choiceMaxLength = choices
    .map((c) => c.label.length)
    .reduce((mem, i) => Math.max(mem, i), 0);

  return (
    <Box flexDirection={answer ? "row" : "column"}>
      {message && <Message>{message}</Message>}
      {answer ? (
        <Answer>{answer}</Answer>
      ) : (
        <Box flexDirection="column">
          {choices.map((choice, i) => (
            <Box key={`choice-${i}`}>
              <Box minWidth={2}>
                {i === selectedChoice && <Text color="cyan">❯</Text>}
              </Box>
              <Box minWidth={choiceMaxLength + 1}>
                <Text>{choice.label}</Text>
              </Box>
              {choice.hint ? <Hint>{choice.hint}</Hint> : null}
            </Box>
          ))}
        </Box>
      )}
    </Box>
  );
}

--- End of openapi-codegen/cli/src/prompts/Select.tsx ---

--- Start of openapi-codegen/cli/src/prompts/Input.tsx ---
import { Box, Text } from "ink";
import React from "react";

import { TextInput } from "./TextInput.js";
import { Answer } from "./Answer.js";
import { Hint } from "./Hint.js";
import { Message } from "./Message.js";

export type InputProps = {
  message: string;
  hint?: string;
  defaultValue?: string;
  onSubmit: (value: string) => void;
};

export const Input = ({
  message,
  hint,
  defaultValue,
  onSubmit,
}: InputProps) => {
  const [value, setValue] = React.useState("");
  const [answer, setAnswer] = React.useState<string>();
  const [isValid, setIsValid] = React.useState(true);

  return (
    <>
      <Box>
        <Message>{message}</Message>
        {defaultValue ? (
          <Box marginRight={1}>
            <Text>({defaultValue})</Text>
          </Box>
        ) : null}
        {answer ? (
          <Answer>{answer}</Answer>
        ) : (
          <TextInput
            onChange={(val) => {
              setIsValid(true);
              setValue(val);
            }}
            value={value}
            onSubmit={(val) => {
              if (val === "" && defaultValue) {
                setAnswer(defaultValue);
                onSubmit(defaultValue);
              } else if (val === "" && !defaultValue) {
                setIsValid(false);
              } else {
                setAnswer(val);
                onSubmit(val);
              }
            }}
            showCursor={!answer}
          />
        )}
        {!value && hint ? <Hint>{hint}</Hint> : null}
      </Box>
      {!isValid ? <Text color="red">The answer can’t be empty!</Text> : null}
    </>
  );
};

--- End of openapi-codegen/cli/src/prompts/Input.tsx ---

--- Start of openapi-codegen/cli/src/prompts/Answer.tsx ---
import { Text } from "ink";
import React from "react";

export type AnswerProps = {
  children: string;
};

/**
 * Display a validated answer.
 */
export const Answer = ({ children }: AnswerProps) => (
  <Text color="cyan">{children}</Text>
);

--- End of openapi-codegen/cli/src/prompts/Answer.tsx ---

--- Start of openapi-codegen/cli/src/prompts/queries/searchUser.graphql ---
query searchUser($query: String!) {
  search(first: 10, query: $query, type: USER) {
    nodes {
      ... on User {
        login
      }
    }
  }
}

--- End of openapi-codegen/cli/src/prompts/queries/searchUser.graphql ---

--- Start of openapi-codegen/cli/src/prompts/queries/searchFile.graphql ---
query searchFile(
  $expression: String!
  $repositoryName: String!
  $owner: String!
) {
  repository(name: $repositoryName, owner: $owner) {
    object(expression: $expression) {
      ... on Tree {
        entries {
          type
          name
        }
      }
    }
  }
}

--- End of openapi-codegen/cli/src/prompts/queries/searchFile.graphql ---

--- Start of openapi-codegen/cli/src/prompts/queries/searchRepository.graphql ---
query searchRepository($query: String!) {
  search(first: 10, query: $query, type: REPOSITORY) {
    nodes {
      ... on Repository {
        name
      }
    }
  }
}

--- End of openapi-codegen/cli/src/prompts/queries/searchRepository.graphql ---

--- Start of openapi-codegen/cli/src/prompts/queries/github.tsx ---
import type Apollo from "@apollo/client";
import { gql, useQuery, useLazyQuery } from "@apollo/client";
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A (potentially binary) string encoded using base64. */
  Base64String: any;
  /** An ISO-8601 encoded date string. */
  Date: any;
  /** An ISO-8601 encoded UTC date string. */
  DateTime: any;
  /** A Git object ID. */
  GitObjectID: any;
  /** Git SSH string */
  GitSSHRemote: any;
  /** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */
  GitTimestamp: any;
  /** A string containing HTML code. */
  HTML: any;
  /** An ISO-8601 encoded UTC date string with millisecond precision. */
  PreciseDateTime: any;
  /** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */
  URI: any;
  /** A valid x509 certificate string */
  X509Certificate: any;
};

/** Autogenerated input type of AbortQueuedMigrations */
export type AbortQueuedMigrationsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization that is running the migrations. */
  ownerId: Scalars["ID"];
};

/** Autogenerated return type of AbortQueuedMigrations */
export type AbortQueuedMigrationsPayload = {
  __typename?: "AbortQueuedMigrationsPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Did the operation succeed? */
  success?: Maybe<Scalars["Boolean"]>;
};

/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
export type AcceptEnterpriseAdministratorInvitationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the invitation being accepted */
  invitationId: Scalars["ID"];
};

/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
export type AcceptEnterpriseAdministratorInvitationPayload = {
  __typename?: "AcceptEnterpriseAdministratorInvitationPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The invitation that was accepted. */
  invitation?: Maybe<EnterpriseAdministratorInvitation>;
  /** A message confirming the result of accepting an administrator invitation. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of AcceptTopicSuggestion */
export type AcceptTopicSuggestionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the suggested topic. */
  name: Scalars["String"];
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of AcceptTopicSuggestion */
export type AcceptTopicSuggestionPayload = {
  __typename?: "AcceptTopicSuggestionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The accepted topic. */
  topic?: Maybe<Topic>;
};

/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export type Actor = {
  /** A URL pointing to the actor's public avatar. */
  avatarUrl: Scalars["URI"];
  /** The username of the actor. */
  login: Scalars["String"];
  /** The HTTP path for this actor. */
  resourcePath: Scalars["URI"];
  /** The HTTP URL for this actor. */
  url: Scalars["URI"];
};

/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export type ActorAvatarUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** Location information for an actor */
export type ActorLocation = {
  __typename?: "ActorLocation";
  /** City */
  city?: Maybe<Scalars["String"]>;
  /** Country name */
  country?: Maybe<Scalars["String"]>;
  /** Country code */
  countryCode?: Maybe<Scalars["String"]>;
  /** Region name */
  region?: Maybe<Scalars["String"]>;
  /** Region or state code */
  regionCode?: Maybe<Scalars["String"]>;
};

/** The actor's type. */
export enum ActorType {
  /** Indicates a team actor. */
  Team = "TEAM",
  /** Indicates a user actor. */
  User = "USER",
}

/** Autogenerated input type of AddAssigneesToAssignable */
export type AddAssigneesToAssignableInput = {
  /** The id of the assignable object to add assignees to. */
  assignableId: Scalars["ID"];
  /** The id of users to add as assignees. */
  assigneeIds: Array<Scalars["ID"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of AddAssigneesToAssignable */
export type AddAssigneesToAssignablePayload = {
  __typename?: "AddAssigneesToAssignablePayload";
  /** The item that was assigned. */
  assignable?: Maybe<Assignable>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of AddComment */
export type AddCommentInput = {
  /** The contents of the comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars["ID"];
};

/** Autogenerated return type of AddComment */
export type AddCommentPayload = {
  __typename?: "AddCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The edge from the subject's comment connection. */
  commentEdge?: Maybe<IssueCommentEdge>;
  /** The subject */
  subject?: Maybe<Node>;
  /** The edge from the subject's timeline connection. */
  timelineEdge?: Maybe<IssueTimelineItemEdge>;
};

/** Autogenerated input type of AddDiscussionComment */
export type AddDiscussionCommentInput = {
  /** The contents of the comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion to comment on. */
  discussionId: Scalars["ID"];
  /** The Node ID of the discussion comment within this discussion to reply to. */
  replyToId?: InputMaybe<Scalars["ID"]>;
};

/** Autogenerated return type of AddDiscussionComment */
export type AddDiscussionCommentPayload = {
  __typename?: "AddDiscussionCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The newly created discussion comment. */
  comment?: Maybe<DiscussionComment>;
};

/** Autogenerated input type of AddEnterpriseSupportEntitlement */
export type AddEnterpriseSupportEntitlementInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars["ID"];
  /** The login of a member who will receive the support entitlement. */
  login: Scalars["String"];
};

/** Autogenerated return type of AddEnterpriseSupportEntitlement */
export type AddEnterpriseSupportEntitlementPayload = {
  __typename?: "AddEnterpriseSupportEntitlementPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** A message confirming the result of adding the support entitlement. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of AddLabelsToLabelable */
export type AddLabelsToLabelableInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ids of the labels to add. */
  labelIds: Array<Scalars["ID"]>;
  /** The id of the labelable object to add labels to. */
  labelableId: Scalars["ID"];
};

/** Autogenerated return type of AddLabelsToLabelable */
export type AddLabelsToLabelablePayload = {
  __typename?: "AddLabelsToLabelablePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The item that was labeled. */
  labelable?: Maybe<Labelable>;
};

/** Autogenerated input type of AddProjectCard */
export type AddProjectCardInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The content of the card. Must be a member of the ProjectCardItem union */
  contentId?: InputMaybe<Scalars["ID"]>;
  /** The note on the card. */
  note?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the ProjectColumn. */
  projectColumnId: Scalars["ID"];
};

/** Autogenerated return type of AddProjectCard */
export type AddProjectCardPayload = {
  __typename?: "AddProjectCardPayload";
  /** The edge from the ProjectColumn's card connection. */
  cardEdge?: Maybe<ProjectCardEdge>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The ProjectColumn */
  projectColumn?: Maybe<ProjectColumn>;
};

/** Autogenerated input type of AddProjectColumn */
export type AddProjectColumnInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the column. */
  name: Scalars["String"];
  /** The Node ID of the project. */
  projectId: Scalars["ID"];
};

/** Autogenerated return type of AddProjectColumn */
export type AddProjectColumnPayload = {
  __typename?: "AddProjectColumnPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The edge from the project's column connection. */
  columnEdge?: Maybe<ProjectColumnEdge>;
  /** The project */
  project?: Maybe<Project>;
};

/** Autogenerated input type of AddProjectNextItem */
export type AddProjectNextItemInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The content id of the item (Issue or PullRequest). */
  contentId: Scalars["ID"];
  /** The ID of the Project to add the item to. */
  projectId: Scalars["ID"];
};

/** Autogenerated return type of AddProjectNextItem */
export type AddProjectNextItemPayload = {
  __typename?: "AddProjectNextItemPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The item added to the project. */
  projectNextItem?: Maybe<ProjectNextItem>;
};

/** Autogenerated input type of AddPullRequestReviewComment */
export type AddPullRequestReviewCommentInput = {
  /** The text of the comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The SHA of the commit to comment on. */
  commitOID?: InputMaybe<Scalars["GitObjectID"]>;
  /** The comment id to reply to. */
  inReplyTo?: InputMaybe<Scalars["ID"]>;
  /** The relative path of the file to comment on. */
  path?: InputMaybe<Scalars["String"]>;
  /** The line index in the diff to comment on. */
  position?: InputMaybe<Scalars["Int"]>;
  /** The node ID of the pull request reviewing */
  pullRequestId?: InputMaybe<Scalars["ID"]>;
  /** The Node ID of the review to modify. */
  pullRequestReviewId?: InputMaybe<Scalars["ID"]>;
};

/** Autogenerated return type of AddPullRequestReviewComment */
export type AddPullRequestReviewCommentPayload = {
  __typename?: "AddPullRequestReviewCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The newly created comment. */
  comment?: Maybe<PullRequestReviewComment>;
  /** The edge from the review's comment connection. */
  commentEdge?: Maybe<PullRequestReviewCommentEdge>;
};

/** Autogenerated input type of AddPullRequestReview */
export type AddPullRequestReviewInput = {
  /** The contents of the review body comment. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The review line comments. */
  comments?: InputMaybe<Array<InputMaybe<DraftPullRequestReviewComment>>>;
  /** The commit OID the review pertains to. */
  commitOID?: InputMaybe<Scalars["GitObjectID"]>;
  /** The event to perform on the pull request review. */
  event?: InputMaybe<PullRequestReviewEvent>;
  /** The Node ID of the pull request to modify. */
  pullRequestId: Scalars["ID"];
  /** The review line comment threads. */
  threads?: InputMaybe<Array<InputMaybe<DraftPullRequestReviewThread>>>;
};

/** Autogenerated return type of AddPullRequestReview */
export type AddPullRequestReviewPayload = {
  __typename?: "AddPullRequestReviewPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The newly created pull request review. */
  pullRequestReview?: Maybe<PullRequestReview>;
  /** The edge from the pull request's review connection. */
  reviewEdge?: Maybe<PullRequestReviewEdge>;
};

/** Autogenerated input type of AddPullRequestReviewThread */
export type AddPullRequestReviewThreadInput = {
  /** Body of the thread's first comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
  line: Scalars["Int"];
  /** Path to the file being commented on. */
  path: Scalars["String"];
  /** The node ID of the pull request reviewing */
  pullRequestId?: InputMaybe<Scalars["ID"]>;
  /** The Node ID of the review to modify. */
  pullRequestReviewId?: InputMaybe<Scalars["ID"]>;
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  side?: InputMaybe<DiffSide>;
  /** The first line of the range to which the comment refers. */
  startLine?: InputMaybe<Scalars["Int"]>;
  /** The side of the diff on which the start line resides. */
  startSide?: InputMaybe<DiffSide>;
};

/** Autogenerated return type of AddPullRequestReviewThread */
export type AddPullRequestReviewThreadPayload = {
  __typename?: "AddPullRequestReviewThreadPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The newly created thread. */
  thread?: Maybe<PullRequestReviewThread>;
};

/** Autogenerated input type of AddReaction */
export type AddReactionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the emoji to react with. */
  content: ReactionContent;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars["ID"];
};

/** Autogenerated return type of AddReaction */
export type AddReactionPayload = {
  __typename?: "AddReactionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The reaction object. */
  reaction?: Maybe<Reaction>;
  /** The reactable subject. */
  subject?: Maybe<Reactable>;
};

/** Autogenerated input type of AddStar */
export type AddStarInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Starrable ID to star. */
  starrableId: Scalars["ID"];
};

/** Autogenerated return type of AddStar */
export type AddStarPayload = {
  __typename?: "AddStarPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The starrable. */
  starrable?: Maybe<Starrable>;
};

/** Autogenerated input type of AddUpvote */
export type AddUpvoteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion or comment to upvote. */
  subjectId: Scalars["ID"];
};

/** Autogenerated return type of AddUpvote */
export type AddUpvotePayload = {
  __typename?: "AddUpvotePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The votable subject. */
  subject?: Maybe<Votable>;
};

/** Autogenerated input type of AddVerifiableDomain */
export type AddVerifiableDomainInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The URL of the domain */
  domain: Scalars["URI"];
  /** The ID of the owner to add the domain to */
  ownerId: Scalars["ID"];
};

/** Autogenerated return type of AddVerifiableDomain */
export type AddVerifiableDomainPayload = {
  __typename?: "AddVerifiableDomainPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The verifiable domain that was added. */
  domain?: Maybe<VerifiableDomain>;
};

/** Represents a 'added_to_project' event on a given issue or pull request. */
export type AddedToProjectEvent = Node & {
  __typename?: "AddedToProjectEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
};

/** A GitHub App. */
export type App = Node & {
  __typename?: "App";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** The description of the app. */
  description?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  /** The IP addresses of the app. */
  ipAllowListEntries: IpAllowListEntryConnection;
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor: Scalars["String"];
  /** A URL pointing to the app's logo. */
  logoUrl: Scalars["URI"];
  /** The name of the app. */
  name: Scalars["String"];
  /** A slug based on the name of the app for use in URLs. */
  slug: Scalars["String"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The URL to the app's homepage. */
  url: Scalars["URI"];
};

/** A GitHub App. */
export type AppIpAllowListEntriesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IpAllowListEntryOrder>;
};

/** A GitHub App. */
export type AppLogoUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** Autogenerated input type of ApproveDeployments */
export type ApproveDeploymentsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Optional comment for approving deployments */
  comment?: InputMaybe<Scalars["String"]>;
  /** The ids of environments to reject deployments */
  environmentIds: Array<Scalars["ID"]>;
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: Scalars["ID"];
};

/** Autogenerated return type of ApproveDeployments */
export type ApproveDeploymentsPayload = {
  __typename?: "ApproveDeploymentsPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The affected deployments. */
  deployments?: Maybe<Array<Deployment>>;
};

/** Autogenerated input type of ApproveVerifiableDomain */
export type ApproveVerifiableDomainInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the verifiable domain to approve. */
  id: Scalars["ID"];
};

/** Autogenerated return type of ApproveVerifiableDomain */
export type ApproveVerifiableDomainPayload = {
  __typename?: "ApproveVerifiableDomainPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The verifiable domain that was approved. */
  domain?: Maybe<VerifiableDomain>;
};

/** Autogenerated input type of ArchiveRepository */
export type ArchiveRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the repository to mark as archived. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of ArchiveRepository */
export type ArchiveRepositoryPayload = {
  __typename?: "ArchiveRepositoryPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The repository that was marked as archived. */
  repository?: Maybe<Repository>;
};

/** An object that can have users assigned to it. */
export type Assignable = {
  /** A list of Users assigned to this object. */
  assignees: UserConnection;
};

/** An object that can have users assigned to it. */
export type AssignableAssigneesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Represents an 'assigned' event on any assignable object. */
export type AssignedEvent = Node & {
  __typename?: "AssignedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the assignable associated with the event. */
  assignable: Assignable;
  /** Identifies the user or mannequin that was assigned. */
  assignee?: Maybe<Assignee>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /**
   * Identifies the user who was assigned.
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */
  user?: Maybe<User>;
};

/** Types that can be assigned to issues. */
export type Assignee = Bot | Mannequin | Organization | User;

/** An entry in the audit log. */
export type AuditEntry = {
  /** The action name */
  action: Scalars["String"];
  /** The user who initiated the action */
  actor?: Maybe<AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars["String"]>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars["String"]>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars["URI"]>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars["URI"]>;
  /** The time the action was initiated */
  createdAt: Scalars["PreciseDateTime"];
  /** The corresponding operation type for the action */
  operationType?: Maybe<OperationType>;
  /** The user affected by the action */
  user?: Maybe<User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars["String"]>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars["URI"]>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars["URI"]>;
};

/** Types that can initiate an audit log event. */
export type AuditEntryActor = Bot | Organization | User;

/** Ordering options for Audit Log connections. */
export type AuditLogOrder = {
  /** The ordering direction. */
  direction?: InputMaybe<OrderDirection>;
  /** The field to order Audit Logs by. */
  field?: InputMaybe<AuditLogOrderField>;
};

/** Properties by which Audit Log connections can be ordered. */
export enum AuditLogOrderField {
  /** Order audit log entries by timestamp */
  CreatedAt = "CREATED_AT",
}

/** Represents a 'auto_merge_disabled' event on a given pull request. */
export type AutoMergeDisabledEvent = Node & {
  __typename?: "AutoMergeDisabledEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The user who disabled auto-merge for this Pull Request */
  disabler?: Maybe<User>;
  id: Scalars["ID"];
  /** PullRequest referenced by event */
  pullRequest?: Maybe<PullRequest>;
  /** The reason auto-merge was disabled */
  reason?: Maybe<Scalars["String"]>;
  /** The reason_code relating to why auto-merge was disabled */
  reasonCode?: Maybe<Scalars["String"]>;
};

/** Represents a 'auto_merge_enabled' event on a given pull request. */
export type AutoMergeEnabledEvent = Node & {
  __typename?: "AutoMergeEnabledEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The user who enabled auto-merge for this Pull Request */
  enabler?: Maybe<User>;
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest?: Maybe<PullRequest>;
};

/** Represents an auto-merge request for a pull request */
export type AutoMergeRequest = {
  __typename?: "AutoMergeRequest";
  /** The email address of the author of this auto-merge request. */
  authorEmail?: Maybe<Scalars["String"]>;
  /** The commit message of the auto-merge request. */
  commitBody?: Maybe<Scalars["String"]>;
  /** The commit title of the auto-merge request. */
  commitHeadline?: Maybe<Scalars["String"]>;
  /** When was this auto-merge request was enabled. */
  enabledAt?: Maybe<Scalars["DateTime"]>;
  /** The actor who created the auto-merge request. */
  enabledBy?: Maybe<Actor>;
  /** The merge method of the auto-merge request. */
  mergeMethod: PullRequestMergeMethod;
  /** The pull request that this auto-merge request is set against. */
  pullRequest: PullRequest;
};

/** Represents a 'auto_rebase_enabled' event on a given pull request. */
export type AutoRebaseEnabledEvent = Node & {
  __typename?: "AutoRebaseEnabledEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The user who enabled auto-merge (rebase) for this Pull Request */
  enabler?: Maybe<User>;
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest?: Maybe<PullRequest>;
};

/** Represents a 'auto_squash_enabled' event on a given pull request. */
export type AutoSquashEnabledEvent = Node & {
  __typename?: "AutoSquashEnabledEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The user who enabled auto-merge (squash) for this Pull Request */
  enabler?: Maybe<User>;
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest?: Maybe<PullRequest>;
};

/** Represents a 'automatic_base_change_failed' event on a given pull request. */
export type AutomaticBaseChangeFailedEvent = Node & {
  __typename?: "AutomaticBaseChangeFailedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** The new base for this PR */
  newBase: Scalars["String"];
  /** The old base for this PR */
  oldBase: Scalars["String"];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
};

/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
export type AutomaticBaseChangeSucceededEvent = Node & {
  __typename?: "AutomaticBaseChangeSucceededEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** The new base for this PR */
  newBase: Scalars["String"];
  /** The old base for this PR */
  oldBase: Scalars["String"];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
};

/** Represents a 'base_ref_changed' event on a given issue or pull request. */
export type BaseRefChangedEvent = Node & {
  __typename?: "BaseRefChangedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the name of the base ref for the pull request after it was changed. */
  currentRefName: Scalars["String"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** Identifies the name of the base ref for the pull request before it was changed. */
  previousRefName: Scalars["String"];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
};

/** Represents a 'base_ref_deleted' event on a given pull request. */
export type BaseRefDeletedEvent = Node & {
  __typename?: "BaseRefDeletedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the name of the Ref associated with the `base_ref_deleted` event. */
  baseRefName?: Maybe<Scalars["String"]>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest?: Maybe<PullRequest>;
};

/** Represents a 'base_ref_force_pushed' event on a given pull request. */
export type BaseRefForcePushedEvent = Node & {
  __typename?: "BaseRefForcePushedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
  afterCommit?: Maybe<Commit>;
  /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
  beforeCommit?: Maybe<Commit>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
  ref?: Maybe<Ref>;
};

/** Represents a Git blame. */
export type Blame = {
  __typename?: "Blame";
  /** The list of ranges from a Git blame. */
  ranges: Array<BlameRange>;
};

/** Represents a range of information from a Git blame. */
export type BlameRange = {
  __typename?: "BlameRange";
  /** Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change. */
  age: Scalars["Int"];
  /** Identifies the line author */
  commit: Commit;
  /** The ending line for the range */
  endingLine: Scalars["Int"];
  /** The starting line for the range */
  startingLine: Scalars["Int"];
};

/** Represents a Git blob. */
export type Blob = GitObject &
  Node & {
    __typename?: "Blob";
    /** An abbreviated version of the Git object ID */
    abbreviatedOid: Scalars["String"];
    /** Byte size of Blob object */
    byteSize: Scalars["Int"];
    /** The HTTP path for this Git object */
    commitResourcePath: Scalars["URI"];
    /** The HTTP URL for this Git object */
    commitUrl: Scalars["URI"];
    id: Scalars["ID"];
    /** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */
    isBinary?: Maybe<Scalars["Boolean"]>;
    /** Indicates whether the contents is truncated */
    isTruncated: Scalars["Boolean"];
    /** The Git object ID */
    oid: Scalars["GitObjectID"];
    /** The Repository the Git object belongs to */
    repository: Repository;
    /** UTF8 text data or null if the Blob is binary */
    text?: Maybe<Scalars["String"]>;
  };

/** A special type of user which takes actions on behalf of GitHub Apps. */
export type Bot = Actor &
  Node &
  UniformResourceLocatable & {
    __typename?: "Bot";
    /** A URL pointing to the GitHub App's public avatar. */
    avatarUrl: Scalars["URI"];
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    id: Scalars["ID"];
    /** The username of the actor. */
    login: Scalars["String"];
    /** The HTTP path for this bot */
    resourcePath: Scalars["URI"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this bot */
    url: Scalars["URI"];
  };

/** A special type of user which takes actions on behalf of GitHub Apps. */
export type BotAvatarUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** Types which can be actors for `BranchActorAllowance` objects. */
export type BranchActorAllowanceActor = Team | User;

/** A branch protection rule. */
export type BranchProtectionRule = Node & {
  __typename?: "BranchProtectionRule";
  /** Can this branch be deleted. */
  allowsDeletions: Scalars["Boolean"];
  /** Are force pushes allowed on this branch. */
  allowsForcePushes: Scalars["Boolean"];
  /** A list of conflicts matching branches protection rule and other branch protection rules */
  branchProtectionRuleConflicts: BranchProtectionRuleConflictConnection;
  /** A list of actors able to force push for this branch protection rule. */
  bypassForcePushAllowances: BypassForcePushAllowanceConnection;
  /** A list of actors able to bypass PRs for this branch protection rule. */
  bypassPullRequestAllowances: BypassPullRequestAllowanceConnection;
  /** The actor who created this branch protection rule. */
  creator?: Maybe<Actor>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews: Scalars["Boolean"];
  id: Scalars["ID"];
  /** Can admins overwrite branch protection. */
  isAdminEnforced: Scalars["Boolean"];
  /** Repository refs that are protected by this rule */
  matchingRefs: RefConnection;
  /** Identifies the protection rule pattern. */
  pattern: Scalars["String"];
  /** A list push allowances for this branch protection rule. */
  pushAllowances: PushAllowanceConnection;
  /** The repository associated with this branch protection rule. */
  repository?: Maybe<Repository>;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Maybe<Scalars["Int"]>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** List of required status checks that must pass for commits to be accepted to matching branches. */
  requiredStatusChecks?: Maybe<Array<RequiredStatusCheckDescription>>;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews: Scalars["Boolean"];
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews: Scalars["Boolean"];
  /** Are commits required to be signed. */
  requiresCommitSignatures: Scalars["Boolean"];
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution: Scalars["Boolean"];
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory: Scalars["Boolean"];
  /** Are status checks required to update matching branches. */
  requiresStatusChecks: Scalars["Boolean"];
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks: Scalars["Boolean"];
  /** Is pushing to matching branches restricted. */
  restrictsPushes: Scalars["Boolean"];
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals: Scalars["Boolean"];
  /** A list review dismissal allowances for this branch protection rule. */
  reviewDismissalAllowances: ReviewDismissalAllowanceConnection;
};

/** A branch protection rule. */
export type BranchProtectionRuleBranchProtectionRuleConflictsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A branch protection rule. */
export type BranchProtectionRuleBypassForcePushAllowancesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A branch protection rule. */
export type BranchProtectionRuleBypassPullRequestAllowancesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A branch protection rule. */
export type BranchProtectionRuleMatchingRefsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query?: InputMaybe<Scalars["String"]>;
};

/** A branch protection rule. */
export type BranchProtectionRulePushAllowancesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A branch protection rule. */
export type BranchProtectionRuleReviewDismissalAllowancesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A conflict between two branch protection rules. */
export type BranchProtectionRuleConflict = {
  __typename?: "BranchProtectionRuleConflict";
  /** Identifies the branch protection rule. */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  /** Identifies the conflicting branch protection rule. */
  conflictingBranchProtectionRule?: Maybe<BranchProtectionRule>;
  /** Identifies the branch ref that has conflicting rules */
  ref?: Maybe<Ref>;
};

/** The connection type for BranchProtectionRuleConflict. */
export type BranchProtectionRuleConflictConnection = {
  __typename?: "BranchProtectionRuleConflictConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BranchProtectionRuleConflictEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<BranchProtectionRuleConflict>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type BranchProtectionRuleConflictEdge = {
  __typename?: "BranchProtectionRuleConflictEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<BranchProtectionRuleConflict>;
};

/** The connection type for BranchProtectionRule. */
export type BranchProtectionRuleConnection = {
  __typename?: "BranchProtectionRuleConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BranchProtectionRuleEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<BranchProtectionRule>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type BranchProtectionRuleEdge = {
  __typename?: "BranchProtectionRuleEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<BranchProtectionRule>;
};

/** A team or user who has the ability to bypass a force push requirement on a protected branch. */
export type BypassForcePushAllowance = Node & {
  __typename?: "BypassForcePushAllowance";
  /** The actor that can dismiss. */
  actor?: Maybe<BranchActorAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  id: Scalars["ID"];
};

/** The connection type for BypassForcePushAllowance. */
export type BypassForcePushAllowanceConnection = {
  __typename?: "BypassForcePushAllowanceConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BypassForcePushAllowanceEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<BypassForcePushAllowance>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type BypassForcePushAllowanceEdge = {
  __typename?: "BypassForcePushAllowanceEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<BypassForcePushAllowance>;
};

/** A team or user who has the ability to bypass a pull request requirement on a protected branch. */
export type BypassPullRequestAllowance = Node & {
  __typename?: "BypassPullRequestAllowance";
  /** The actor that can dismiss. */
  actor?: Maybe<BranchActorAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  id: Scalars["ID"];
};

/** The connection type for BypassPullRequestAllowance. */
export type BypassPullRequestAllowanceConnection = {
  __typename?: "BypassPullRequestAllowanceConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BypassPullRequestAllowanceEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<BypassPullRequestAllowance>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type BypassPullRequestAllowanceEdge = {
  __typename?: "BypassPullRequestAllowanceEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<BypassPullRequestAllowance>;
};

/** The Common Vulnerability Scoring System */
export type Cvss = {
  __typename?: "CVSS";
  /** The CVSS score associated with this advisory */
  score: Scalars["Float"];
  /** The CVSS vector string associated with this advisory */
  vectorString?: Maybe<Scalars["String"]>;
};

/** A common weakness enumeration */
export type Cwe = Node & {
  __typename?: "CWE";
  /** The id of the CWE */
  cweId: Scalars["String"];
  /** A detailed description of this CWE */
  description: Scalars["String"];
  id: Scalars["ID"];
  /** The name of this CWE */
  name: Scalars["String"];
};

/** The connection type for CWE. */
export type CweConnection = {
  __typename?: "CWEConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CweEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Cwe>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type CweEdge = {
  __typename?: "CWEEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Cwe>;
};

/** Autogenerated input type of CancelEnterpriseAdminInvitation */
export type CancelEnterpriseAdminInvitationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the pending enterprise administrator invitation. */
  invitationId: Scalars["ID"];
};

/** Autogenerated return type of CancelEnterpriseAdminInvitation */
export type CancelEnterpriseAdminInvitationPayload = {
  __typename?: "CancelEnterpriseAdminInvitationPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The invitation that was canceled. */
  invitation?: Maybe<EnterpriseAdministratorInvitation>;
  /** A message confirming the result of canceling an administrator invitation. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of CancelSponsorship */
export type CancelSponsorshipInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: InputMaybe<Scalars["String"]>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of CancelSponsorship */
export type CancelSponsorshipPayload = {
  __typename?: "CancelSponsorshipPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The tier that was being used at the time of cancellation. */
  sponsorsTier?: Maybe<SponsorsTier>;
};

/** Autogenerated input type of ChangeUserStatus */
export type ChangeUserStatusInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
  emoji?: InputMaybe<Scalars["String"]>;
  /** If set, the user status will not be shown after this date. */
  expiresAt?: InputMaybe<Scalars["DateTime"]>;
  /** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */
  limitedAvailability?: InputMaybe<Scalars["Boolean"]>;
  /** A short description of your current status. */
  message?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible. */
  organizationId?: InputMaybe<Scalars["ID"]>;
};

/** Autogenerated return type of ChangeUserStatus */
export type ChangeUserStatusPayload = {
  __typename?: "ChangeUserStatusPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Your updated status. */
  status?: Maybe<UserStatus>;
};

/** A single check annotation. */
export type CheckAnnotation = {
  __typename?: "CheckAnnotation";
  /** The annotation's severity level. */
  annotationLevel?: Maybe<CheckAnnotationLevel>;
  /** The path to the file that this annotation was made on. */
  blobUrl: Scalars["URI"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** The position of this annotation. */
  location: CheckAnnotationSpan;
  /** The annotation's message. */
  message: Scalars["String"];
  /** The path that this annotation was made on. */
  path: Scalars["String"];
  /** Additional information about the annotation. */
  rawDetails?: Maybe<Scalars["String"]>;
  /** The annotation's title */
  title?: Maybe<Scalars["String"]>;
};

/** The connection type for CheckAnnotation. */
export type CheckAnnotationConnection = {
  __typename?: "CheckAnnotationConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CheckAnnotationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<CheckAnnotation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Information from a check run analysis to specific lines of code. */
export type CheckAnnotationData = {
  /** Represents an annotation's information level */
  annotationLevel: CheckAnnotationLevel;
  /** The location of the annotation */
  location: CheckAnnotationRange;
  /** A short description of the feedback for these lines of code. */
  message: Scalars["String"];
  /** The path of the file to add an annotation to. */
  path: Scalars["String"];
  /** Details about this annotation. */
  rawDetails?: InputMaybe<Scalars["String"]>;
  /** The title that represents the annotation. */
  title?: InputMaybe<Scalars["String"]>;
};

/** An edge in a connection. */
export type CheckAnnotationEdge = {
  __typename?: "CheckAnnotationEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<CheckAnnotation>;
};

/** Represents an annotation's information level. */
export enum CheckAnnotationLevel {
  /** An annotation indicating an inescapable error. */
  Failure = "FAILURE",
  /** An annotation indicating some information. */
  Notice = "NOTICE",
  /** An annotation indicating an ignorable error. */
  Warning = "WARNING",
}

/** A character position in a check annotation. */
export type CheckAnnotationPosition = {
  __typename?: "CheckAnnotationPosition";
  /** Column number (1 indexed). */
  column?: Maybe<Scalars["Int"]>;
  /** Line number (1 indexed). */
  line: Scalars["Int"];
};

/** Information from a check run analysis to specific lines of code. */
export type CheckAnnotationRange = {
  /** The ending column of the range. */
  endColumn?: InputMaybe<Scalars["Int"]>;
  /** The ending line of the range. */
  endLine: Scalars["Int"];
  /** The starting column of the range. */
  startColumn?: InputMaybe<Scalars["Int"]>;
  /** The starting line of the range. */
  startLine: Scalars["Int"];
};

/** An inclusive pair of positions for a check annotation. */
export type CheckAnnotationSpan = {
  __typename?: "CheckAnnotationSpan";
  /** End position (inclusive). */
  end: CheckAnnotationPosition;
  /** Start position (inclusive). */
  start: CheckAnnotationPosition;
};

/** The possible states for a check suite or run conclusion. */
export enum CheckConclusionState {
  /** The check suite or run requires action. */
  ActionRequired = "ACTION_REQUIRED",
  /** The check suite or run has been cancelled. */
  Cancelled = "CANCELLED",
  /** The check suite or run has failed. */
  Failure = "FAILURE",
  /** The check suite or run was neutral. */
  Neutral = "NEUTRAL",
  /** The check suite or run was skipped. */
  Skipped = "SKIPPED",
  /** The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion. */
  Stale = "STALE",
  /** The check suite or run has failed at startup. */
  StartupFailure = "STARTUP_FAILURE",
  /** The check suite or run has succeeded. */
  Success = "SUCCESS",
  /** The check suite or run has timed out. */
  TimedOut = "TIMED_OUT",
}

/** A check run. */
export type CheckRun = Node &
  RequirableByPullRequest &
  UniformResourceLocatable & {
    __typename?: "CheckRun";
    /** The check run's annotations */
    annotations?: Maybe<CheckAnnotationConnection>;
    /** The check suite that this run is a part of. */
    checkSuite: CheckSuite;
    /** Identifies the date and time when the check run was completed. */
    completedAt?: Maybe<Scalars["DateTime"]>;
    /** The conclusion of the check run. */
    conclusion?: Maybe<CheckConclusionState>;
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The corresponding deployment for this job, if any */
    deployment?: Maybe<Deployment>;
    /** The URL from which to find full details of the check run on the integrator's site. */
    detailsUrl?: Maybe<Scalars["URI"]>;
    /** A reference for the check run on the integrator's system. */
    externalId?: Maybe<Scalars["String"]>;
    id: Scalars["ID"];
    /** Whether this is required to pass before merging for a specific pull request. */
    isRequired: Scalars["Boolean"];
    /** The name of the check for this check run. */
    name: Scalars["String"];
    /** Information about a pending deployment, if any, in this check run */
    pendingDeploymentRequest?: Maybe<DeploymentRequest>;
    /** The permalink to the check run summary. */
    permalink: Scalars["URI"];
    /** The repository associated with this check run. */
    repository: Repository;
    /** The HTTP path for this check run. */
    resourcePath: Scalars["URI"];
    /** Identifies the date and time when the check run was started. */
    startedAt?: Maybe<Scalars["DateTime"]>;
    /** The current status of the check run. */
    status: CheckStatusState;
    /** The check run's steps */
    steps?: Maybe<CheckStepConnection>;
    /** A string representing the check run's summary */
    summary?: Maybe<Scalars["String"]>;
    /** A string representing the check run's text */
    text?: Maybe<Scalars["String"]>;
    /** A string representing the check run */
    title?: Maybe<Scalars["String"]>;
    /** The HTTP URL for this check run. */
    url: Scalars["URI"];
  };

/** A check run. */
export type CheckRunAnnotationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A check run. */
export type CheckRunIsRequiredArgs = {
  pullRequestId?: InputMaybe<Scalars["ID"]>;
  pullRequestNumber?: InputMaybe<Scalars["Int"]>;
};

/** A check run. */
export type CheckRunStepsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  number?: InputMaybe<Scalars["Int"]>;
};

/** Possible further actions the integrator can perform. */
export type CheckRunAction = {
  /** A short explanation of what this action would do. */
  description: Scalars["String"];
  /** A reference for the action on the integrator's system.  */
  identifier: Scalars["String"];
  /** The text to be displayed on a button in the web UI. */
  label: Scalars["String"];
};

/** The connection type for CheckRun. */
export type CheckRunConnection = {
  __typename?: "CheckRunConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CheckRunEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<CheckRun>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type CheckRunEdge = {
  __typename?: "CheckRunEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<CheckRun>;
};

/** The filters that are available when fetching check runs. */
export type CheckRunFilter = {
  /** Filters the check runs created by this application ID. */
  appId?: InputMaybe<Scalars["Int"]>;
  /** Filters the check runs by this name. */
  checkName?: InputMaybe<Scalars["String"]>;
  /** Filters the check runs by this type. */
  checkType?: InputMaybe<CheckRunType>;
  /** Filters the check runs by this status. */
  status?: InputMaybe<CheckStatusState>;
};

/** Descriptive details about the check run. */
export type CheckRunOutput = {
  /** The annotations that are made as part of the check run. */
  annotations?: InputMaybe<Array<CheckAnnotationData>>;
  /** Images attached to the check run output displayed in the GitHub pull request UI. */
  images?: InputMaybe<Array<CheckRunOutputImage>>;
  /** The summary of the check run (supports Commonmark). */
  summary: Scalars["String"];
  /** The details of the check run (supports Commonmark). */
  text?: InputMaybe<Scalars["String"]>;
  /** A title to provide for this check run. */
  title: Scalars["String"];
};

/** Images attached to the check run output displayed in the GitHub pull request UI. */
export type CheckRunOutputImage = {
  /** The alternative text for the image. */
  alt: Scalars["String"];
  /** A short image description. */
  caption?: InputMaybe<Scalars["String"]>;
  /** The full URL of the image. */
  imageUrl: Scalars["URI"];
};

/** The possible types of check runs. */
export enum CheckRunType {
  /** Every check run available. */
  All = "ALL",
  /** The latest check run. */
  Latest = "LATEST",
}

/** The possible states for a check suite or run status. */
export enum CheckStatusState {
  /** The check suite or run has been completed. */
  Completed = "COMPLETED",
  /** The check suite or run is in progress. */
  InProgress = "IN_PROGRESS",
  /** The check suite or run is in pending state. */
  Pending = "PENDING",
  /** The check suite or run has been queued. */
  Queued = "QUEUED",
  /** The check suite or run has been requested. */
  Requested = "REQUESTED",
  /** The check suite or run is in waiting state. */
  Waiting = "WAITING",
}

/** A single check step. */
export type CheckStep = {
  __typename?: "CheckStep";
  /** Identifies the date and time when the check step was completed. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The conclusion of the check step. */
  conclusion?: Maybe<CheckConclusionState>;
  /** A reference for the check step on the integrator's system. */
  externalId?: Maybe<Scalars["String"]>;
  /** The step's name. */
  name: Scalars["String"];
  /** The index of the step in the list of steps of the parent check run. */
  number: Scalars["Int"];
  /** Number of seconds to completion. */
  secondsToCompletion?: Maybe<Scalars["Int"]>;
  /** Identifies the date and time when the check step was started. */
  startedAt?: Maybe<Scalars["DateTime"]>;
  /** The current status of the check step. */
  status: CheckStatusState;
};

/** The connection type for CheckStep. */
export type CheckStepConnection = {
  __typename?: "CheckStepConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CheckStepEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<CheckStep>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type CheckStepEdge = {
  __typename?: "CheckStepEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<CheckStep>;
};

/** A check suite. */
export type CheckSuite = Node & {
  __typename?: "CheckSuite";
  /** The GitHub App which created this check suite. */
  app?: Maybe<App>;
  /** The name of the branch for this check suite. */
  branch?: Maybe<Ref>;
  /** The check runs associated with a check suite. */
  checkRuns?: Maybe<CheckRunConnection>;
  /** The commit for this check suite */
  commit: Commit;
  /** The conclusion of this check suite. */
  conclusion?: Maybe<CheckConclusionState>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The user who triggered the check suite. */
  creator?: Maybe<User>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** A list of open pull requests matching the check suite. */
  matchingPullRequests?: Maybe<PullRequestConnection>;
  /** The push that triggered this check suite. */
  push?: Maybe<Push>;
  /** The repository associated with this check suite. */
  repository: Repository;
  /** The HTTP path for this check suite */
  resourcePath: Scalars["URI"];
  /** The status of this check suite. */
  status: CheckStatusState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The HTTP URL for this check suite */
  url: Scalars["URI"];
  /** The workflow run associated with this check suite. */
  workflowRun?: Maybe<WorkflowRun>;
};

/** A check suite. */
export type CheckSuiteCheckRunsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  filterBy?: InputMaybe<CheckRunFilter>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A check suite. */
export type CheckSuiteMatchingPullRequestsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  baseRefName?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  headRefName?: InputMaybe<Scalars["String"]>;
  labels?: InputMaybe<Array<Scalars["String"]>>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueOrder>;
  states?: InputMaybe<Array<PullRequestState>>;
};

/** The auto-trigger preferences that are available for check suites. */
export type CheckSuiteAutoTriggerPreference = {
  /** The node ID of the application that owns the check suite. */
  appId: Scalars["ID"];
  /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
  setting: Scalars["Boolean"];
};

/** The connection type for CheckSuite. */
export type CheckSuiteConnection = {
  __typename?: "CheckSuiteConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CheckSuiteEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<CheckSuite>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type CheckSuiteEdge = {
  __typename?: "CheckSuiteEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<CheckSuite>;
};

/** The filters that are available when fetching check suites. */
export type CheckSuiteFilter = {
  /** Filters the check suites created by this application ID. */
  appId?: InputMaybe<Scalars["Int"]>;
  /** Filters the check suites by this name. */
  checkName?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated input type of ClearLabelsFromLabelable */
export type ClearLabelsFromLabelableInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the labelable object to clear the labels from. */
  labelableId: Scalars["ID"];
};

/** Autogenerated return type of ClearLabelsFromLabelable */
export type ClearLabelsFromLabelablePayload = {
  __typename?: "ClearLabelsFromLabelablePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The item that was unlabeled. */
  labelable?: Maybe<Labelable>;
};

/** Autogenerated input type of CloneProject */
export type CloneProjectInput = {
  /** The description of the project. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether or not to clone the source project's workflows. */
  includeWorkflows: Scalars["Boolean"];
  /** The name of the project. */
  name: Scalars["String"];
  /** The visibility of the project, defaults to false (private). */
  public?: InputMaybe<Scalars["Boolean"]>;
  /** The source project to clone. */
  sourceId: Scalars["ID"];
  /** The owner ID to create the project under. */
  targetOwnerId: Scalars["ID"];
};

/** Autogenerated return type of CloneProject */
export type CloneProjectPayload = {
  __typename?: "CloneProjectPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The id of the JobStatus for populating cloned fields. */
  jobStatusId?: Maybe<Scalars["String"]>;
  /** The new cloned project. */
  project?: Maybe<Project>;
};

/** Autogenerated input type of CloneTemplateRepository */
export type CloneTemplateRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A short description of the new repository. */
  description?: InputMaybe<Scalars["String"]>;
  /** Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template. */
  includeAllBranches?: InputMaybe<Scalars["Boolean"]>;
  /** The name of the new repository. */
  name: Scalars["String"];
  /** The ID of the owner for the new repository. */
  ownerId: Scalars["ID"];
  /** The Node ID of the template repository. */
  repositoryId: Scalars["ID"];
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility;
};

/** Autogenerated return type of CloneTemplateRepository */
export type CloneTemplateRepositoryPayload = {
  __typename?: "CloneTemplateRepositoryPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new repository. */
  repository?: Maybe<Repository>;
};

/** An object that can be closed */
export type Closable = {
  /** `true` if the object is closed (definition of closed may depend on type) */
  closed: Scalars["Boolean"];
  /** Identifies the date and time when the object was closed. */
  closedAt?: Maybe<Scalars["DateTime"]>;
};

/** Autogenerated input type of CloseIssue */
export type CloseIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the issue to be closed. */
  issueId: Scalars["ID"];
};

/** Autogenerated return type of CloseIssue */
export type CloseIssuePayload = {
  __typename?: "CloseIssuePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The issue that was closed. */
  issue?: Maybe<Issue>;
};

/** Autogenerated input type of ClosePullRequest */
export type ClosePullRequestInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the pull request to be closed. */
  pullRequestId: Scalars["ID"];
};

/** Autogenerated return type of ClosePullRequest */
export type ClosePullRequestPayload = {
  __typename?: "ClosePullRequestPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The pull request that was closed. */
  pullRequest?: Maybe<PullRequest>;
};

/** Represents a 'closed' event on any `Closable`. */
export type ClosedEvent = Node &
  UniformResourceLocatable & {
    __typename?: "ClosedEvent";
    /** Identifies the actor who performed the event. */
    actor?: Maybe<Actor>;
    /** Object that was closed. */
    closable: Closable;
    /** Object which triggered the creation of this event. */
    closer?: Maybe<Closer>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    id: Scalars["ID"];
    /** The HTTP path for this closed event. */
    resourcePath: Scalars["URI"];
    /** The HTTP URL for this closed event. */
    url: Scalars["URI"];
  };

/** The object which triggered a `ClosedEvent`. */
export type Closer = Commit | PullRequest;

/** The Code of Conduct for a repository */
export type CodeOfConduct = Node & {
  __typename?: "CodeOfConduct";
  /** The body of the Code of Conduct */
  body?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  /** The key for the Code of Conduct */
  key: Scalars["String"];
  /** The formal name of the Code of Conduct */
  name: Scalars["String"];
  /** The HTTP path for this Code of Conduct */
  resourcePath?: Maybe<Scalars["URI"]>;
  /** The HTTP URL for this Code of Conduct */
  url?: Maybe<Scalars["URI"]>;
};

/** Collaborators affiliation level with a subject. */
export enum CollaboratorAffiliation {
  /** All collaborators the authenticated user can see. */
  All = "ALL",
  /** All collaborators with permissions to an organization-owned subject, regardless of organization membership status. */
  Direct = "DIRECT",
  /** All outside collaborators of an organization-owned subject. */
  Outside = "OUTSIDE",
}

/** Represents a comment. */
export type Comment = {
  /** The actor who authored the comment. */
  author?: Maybe<Actor>;
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation;
  /** The body as Markdown. */
  body: Scalars["String"];
  /** The body rendered to HTML. */
  bodyHTML: Scalars["HTML"];
  /** The body rendered to text. */
  bodyText: Scalars["String"];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars["Boolean"];
  /** The actor who edited the comment. */
  editor?: Maybe<Actor>;
  id: Scalars["ID"];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars["Boolean"];
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars["DateTime"]>;
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars["DateTime"]>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<UserContentEditConnection>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars["Boolean"];
};

/** Represents a comment. */
export type CommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A comment author association with repository. */
export enum CommentAuthorAssociation {
  /** Author has been invited to collaborate on the repository. */
  Collaborator = "COLLABORATOR",
  /** Author has previously committed to the repository. */
  Contributor = "CONTRIBUTOR",
  /** Author has not previously committed to GitHub. */
  FirstTimer = "FIRST_TIMER",
  /** Author has not previously committed to the repository. */
  FirstTimeContributor = "FIRST_TIME_CONTRIBUTOR",
  /** Author is a placeholder for an unclaimed user. */
  Mannequin = "MANNEQUIN",
  /** Author is a member of the organization that owns the repository. */
  Member = "MEMBER",
  /** Author has no association with the repository. */
  None = "NONE",
  /** Author is the owner of the repository. */
  Owner = "OWNER",
}

/** The possible errors that will prevent a user from updating a comment. */
export enum CommentCannotUpdateReason {
  /** Unable to create comment because repository is archived. */
  Archived = "ARCHIVED",
  /** You cannot update this comment */
  Denied = "DENIED",
  /** You must be the author or have write access to this repository to update this comment. */
  InsufficientAccess = "INSUFFICIENT_ACCESS",
  /** Unable to create comment because issue is locked. */
  Locked = "LOCKED",
  /** You must be logged in to update this comment. */
  LoginRequired = "LOGIN_REQUIRED",
  /** Repository is under maintenance. */
  Maintenance = "MAINTENANCE",
  /** At least one email address must be verified to update this comment. */
  VerifiedEmailRequired = "VERIFIED_EMAIL_REQUIRED",
}

/** Represents a 'comment_deleted' event on a given issue or pull request. */
export type CommentDeletedEvent = Node & {
  __typename?: "CommentDeletedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** The user who authored the deleted comment. */
  deletedCommentAuthor?: Maybe<Actor>;
  id: Scalars["ID"];
};

/** Represents a Git commit. */
export type Commit = GitObject &
  Node &
  Subscribable &
  UniformResourceLocatable & {
    __typename?: "Commit";
    /** An abbreviated version of the Git object ID */
    abbreviatedOid: Scalars["String"];
    /** The number of additions in this commit. */
    additions: Scalars["Int"];
    /** The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit */
    associatedPullRequests?: Maybe<PullRequestConnection>;
    /** Authorship details of the commit. */
    author?: Maybe<GitActor>;
    /** Check if the committer and the author match. */
    authoredByCommitter: Scalars["Boolean"];
    /** The datetime when this commit was authored. */
    authoredDate: Scalars["DateTime"];
    /**
     * The list of authors for this commit based on the git author and the Co-authored-by
     * message trailer. The git author will always be first.
     *
     */
    authors: GitActorConnection;
    /** Fetches `git blame` information. */
    blame: Blame;
    /** The number of changed files in this commit. */
    changedFiles: Scalars["Int"];
    /** The check suites associated with a commit. */
    checkSuites?: Maybe<CheckSuiteConnection>;
    /** Comments made on the commit. */
    comments: CommitCommentConnection;
    /** The HTTP path for this Git object */
    commitResourcePath: Scalars["URI"];
    /** The HTTP URL for this Git object */
    commitUrl: Scalars["URI"];
    /** The datetime when this commit was committed. */
    committedDate: Scalars["DateTime"];
    /** Check if committed via GitHub web UI. */
    committedViaWeb: Scalars["Boolean"];
    /** Committer details of the commit. */
    committer?: Maybe<GitActor>;
    /** The number of deletions in this commit. */
    deletions: Scalars["Int"];
    /** The deployments associated with a commit. */
    deployments?: Maybe<DeploymentConnection>;
    /** The tree entry representing the file located at the given path. */
    file?: Maybe<TreeEntry>;
    /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
    history: CommitHistoryConnection;
    id: Scalars["ID"];
    /** The Git commit message */
    message: Scalars["String"];
    /** The Git commit message body */
    messageBody: Scalars["String"];
    /** The commit message body rendered to HTML. */
    messageBodyHTML: Scalars["HTML"];
    /** The Git commit message headline */
    messageHeadline: Scalars["String"];
    /** The commit message headline rendered to HTML. */
    messageHeadlineHTML: Scalars["HTML"];
    /** The Git object ID */
    oid: Scalars["GitObjectID"];
    /** The organization this commit was made on behalf of. */
    onBehalfOf?: Maybe<Organization>;
    /** The parents of a commit. */
    parents: CommitConnection;
    /** The datetime when this commit was pushed. */
    pushedDate?: Maybe<Scalars["DateTime"]>;
    /** The Repository this commit belongs to */
    repository: Repository;
    /** The HTTP path for this commit */
    resourcePath: Scalars["URI"];
    /** Commit signing information, if present. */
    signature?: Maybe<GitSignature>;
    /** Status information for this commit */
    status?: Maybe<Status>;
    /** Check and Status rollup information for this commit. */
    statusCheckRollup?: Maybe<StatusCheckRollup>;
    /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
    submodules: SubmoduleConnection;
    /**
     * Returns a URL to download a tarball archive for a repository.
     * Note: For private repositories, these links are temporary and expire after five minutes.
     */
    tarballUrl: Scalars["URI"];
    /** Commit's root Tree */
    tree: Tree;
    /** The HTTP path for the tree of this commit */
    treeResourcePath: Scalars["URI"];
    /** The HTTP URL for the tree of this commit */
    treeUrl: Scalars["URI"];
    /** The HTTP URL for this commit */
    url: Scalars["URI"];
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"];
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: Maybe<SubscriptionState>;
    /**
     * Returns a URL to download a zipball archive for a repository.
     * Note: For private repositories, these links are temporary and expire after five minutes.
     */
    zipballUrl: Scalars["URI"];
  };

/** Represents a Git commit. */
export type CommitAssociatedPullRequestsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<PullRequestOrder>;
};

/** Represents a Git commit. */
export type CommitAuthorsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Represents a Git commit. */
export type CommitBlameArgs = {
  path: Scalars["String"];
};

/** Represents a Git commit. */
export type CommitCheckSuitesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  filterBy?: InputMaybe<CheckSuiteFilter>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Represents a Git commit. */
export type CommitCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Represents a Git commit. */
export type CommitDeploymentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  environments?: InputMaybe<Array<Scalars["String"]>>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<DeploymentOrder>;
};

/** Represents a Git commit. */
export type CommitFileArgs = {
  path: Scalars["String"];
};

/** Represents a Git commit. */
export type CommitHistoryArgs = {
  after?: InputMaybe<Scalars["String"]>;
  author?: InputMaybe<CommitAuthor>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  path?: InputMaybe<Scalars["String"]>;
  since?: InputMaybe<Scalars["GitTimestamp"]>;
  until?: InputMaybe<Scalars["GitTimestamp"]>;
};

/** Represents a Git commit. */
export type CommitParentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Represents a Git commit. */
export type CommitSubmodulesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Specifies an author for filtering Git commits. */
export type CommitAuthor = {
  /** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
  emails?: InputMaybe<Array<Scalars["String"]>>;
  /** ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails. */
  id?: InputMaybe<Scalars["ID"]>;
};

/** Represents a comment on a given Commit. */
export type CommitComment = Comment &
  Deletable &
  Minimizable &
  Node &
  Reactable &
  RepositoryNode &
  Updatable &
  UpdatableComment & {
    __typename?: "CommitComment";
    /** The actor who authored the comment. */
    author?: Maybe<Actor>;
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation;
    /** Identifies the comment body. */
    body: Scalars["String"];
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** The body rendered to text. */
    bodyText: Scalars["String"];
    /** Identifies the commit associated with the comment, if the commit exists. */
    commit?: Maybe<Commit>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The actor who edited the comment. */
    editor?: Maybe<Actor>;
    id: Scalars["ID"];
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"];
    /** Returns whether or not a comment has been minimized. */
    isMinimized: Scalars["Boolean"];
    /** The moment the editor made the last edit */
    lastEditedAt?: Maybe<Scalars["DateTime"]>;
    /** Returns why the comment was minimized. */
    minimizedReason?: Maybe<Scalars["String"]>;
    /** Identifies the file path associated with the comment. */
    path?: Maybe<Scalars["String"]>;
    /** Identifies the line position associated with the comment. */
    position?: Maybe<Scalars["Int"]>;
    /** Identifies when the comment was published at. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: Maybe<Array<ReactionGroup>>;
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection;
    /** The repository associated with this node. */
    repository: Repository;
    /** The HTTP path permalink for this commit comment. */
    resourcePath: Scalars["URI"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL permalink for this commit comment. */
    url: Scalars["URI"];
    /** A list of edits to this content. */
    userContentEdits?: Maybe<UserContentEditConnection>;
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"];
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize: Scalars["Boolean"];
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"];
  };

/** Represents a comment on a given Commit. */
export type CommitCommentReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** Represents a comment on a given Commit. */
export type CommitCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for CommitComment. */
export type CommitCommentConnection = {
  __typename?: "CommitCommentConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CommitCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<CommitComment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type CommitCommentEdge = {
  __typename?: "CommitCommentEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<CommitComment>;
};

/** A thread of comments on a commit. */
export type CommitCommentThread = Node &
  RepositoryNode & {
    __typename?: "CommitCommentThread";
    /** The comments that exist in this thread. */
    comments: CommitCommentConnection;
    /** The commit the comments were made on. */
    commit?: Maybe<Commit>;
    id: Scalars["ID"];
    /** The file the comments were made on. */
    path?: Maybe<Scalars["String"]>;
    /** The position in the diff for the commit that the comment was made on. */
    position?: Maybe<Scalars["Int"]>;
    /** The repository associated with this node. */
    repository: Repository;
  };

/** A thread of comments on a commit. */
export type CommitCommentThreadCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for Commit. */
export type CommitConnection = {
  __typename?: "CommitConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CommitEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Commit>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Ordering options for commit contribution connections. */
export type CommitContributionOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field by which to order commit contributions. */
  field: CommitContributionOrderField;
};

/** Properties by which commit contribution connections can be ordered. */
export enum CommitContributionOrderField {
  /** Order commit contributions by how many commits they represent. */
  CommitCount = "COMMIT_COUNT",
  /** Order commit contributions by when they were made. */
  OccurredAt = "OCCURRED_AT",
}

/** This aggregates commits made by a user within one repository. */
export type CommitContributionsByRepository = {
  __typename?: "CommitContributionsByRepository";
  /** The commit contributions, each representing a day. */
  contributions: CreatedCommitContributionConnection;
  /** The repository in which the commits were made. */
  repository: Repository;
  /** The HTTP path for the user's commits to the repository in this time range. */
  resourcePath: Scalars["URI"];
  /** The HTTP URL for the user's commits to the repository in this time range. */
  url: Scalars["URI"];
};

/** This aggregates commits made by a user within one repository. */
export type CommitContributionsByRepositoryContributionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<CommitContributionOrder>;
};

/** An edge in a connection. */
export type CommitEdge = {
  __typename?: "CommitEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Commit>;
};

/** The connection type for Commit. */
export type CommitHistoryConnection = {
  __typename?: "CommitHistoryConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CommitEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Commit>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** A message to include with a new commit */
export type CommitMessage = {
  /** The body of the message. */
  body?: InputMaybe<Scalars["String"]>;
  /** The headline of the message. */
  headline: Scalars["String"];
};

/**
 * A git ref for a commit to be appended to.
 *
 * The ref must be a branch, i.e. its fully qualified name must start
 * with `refs/heads/` (although the input is not required to be fully
 * qualified).
 *
 * The Ref may be specified by its global node ID or by the
 * repository nameWithOwner and branch name.
 *
 * ### Examples
 *
 * Specify a branch using a global node ID:
 *
 *     { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
 *
 * Specify a branch using nameWithOwner and branch name:
 *
 *     {
 *       "nameWithOwner": "github/graphql-client",
 *       "branchName": "main"
 *     }
 *
 *
 */
export type CommittableBranch = {
  /** The unqualified name of the branch to append the commit to. */
  branchName?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the Ref to be updated. */
  id?: InputMaybe<Scalars["ID"]>;
  /** The nameWithOwner of the repository to commit to. */
  repositoryNameWithOwner?: InputMaybe<Scalars["String"]>;
};

/** Represents a 'connected' event on a given issue or pull request. */
export type ConnectedEvent = Node & {
  __typename?: "ConnectedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Reference originated in a different repository. */
  isCrossRepository: Scalars["Boolean"];
  /** Issue or pull request that made the reference. */
  source: ReferencedSubject;
  /** Issue or pull request which was connected. */
  subject: ReferencedSubject;
};

/** Represents a contribution a user made on GitHub, such as opening an issue. */
export type Contribution = {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars["Boolean"];
  /** When this contribution was made. */
  occurredAt: Scalars["DateTime"];
  /** The HTTP path for this contribution. */
  resourcePath: Scalars["URI"];
  /** The HTTP URL for this contribution. */
  url: Scalars["URI"];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
};

/** A calendar of contributions made on GitHub by a user. */
export type ContributionCalendar = {
  __typename?: "ContributionCalendar";
  /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
  colors: Array<Scalars["String"]>;
  /** Determine if the color set was chosen because it's currently Halloween. */
  isHalloween: Scalars["Boolean"];
  /** A list of the months of contributions in this calendar. */
  months: Array<ContributionCalendarMonth>;
  /** The count of total contributions in the calendar. */
  totalContributions: Scalars["Int"];
  /** A list of the weeks of contributions in this calendar. */
  weeks: Array<ContributionCalendarWeek>;
};

/** Represents a single day of contributions on GitHub by a user. */
export type ContributionCalendarDay = {
  __typename?: "ContributionCalendarDay";
  /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
  color: Scalars["String"];
  /** How many contributions were made by the user on this day. */
  contributionCount: Scalars["Int"];
  /** Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar. */
  contributionLevel: ContributionLevel;
  /** The day this square represents. */
  date: Scalars["Date"];
  /** A number representing which day of the week this square represents, e.g., 1 is Monday. */
  weekday: Scalars["Int"];
};

/** A month of contributions in a user's contribution graph. */
export type ContributionCalendarMonth = {
  __typename?: "ContributionCalendarMonth";
  /** The date of the first day of this month. */
  firstDay: Scalars["Date"];
  /** The name of the month. */
  name: Scalars["String"];
  /** How many weeks started in this month. */
  totalWeeks: Scalars["Int"];
  /** The year the month occurred in. */
  year: Scalars["Int"];
};

/** A week of contributions in a user's contribution graph. */
export type ContributionCalendarWeek = {
  __typename?: "ContributionCalendarWeek";
  /** The days of contributions in this week. */
  contributionDays: Array<ContributionCalendarDay>;
  /** The date of the earliest square in this week. */
  firstDay: Scalars["Date"];
};

/** Varying levels of contributions from none to many. */
export enum ContributionLevel {
  /** Lowest 25% of days of contributions. */
  FirstQuartile = "FIRST_QUARTILE",
  /** Highest 25% of days of contributions. More contributions than the third quartile. */
  FourthQuartile = "FOURTH_QUARTILE",
  /** No contributions occurred. */
  None = "NONE",
  /** Second lowest 25% of days of contributions. More contributions than the first quartile. */
  SecondQuartile = "SECOND_QUARTILE",
  /** Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile. */
  ThirdQuartile = "THIRD_QUARTILE",
}

/** Ordering options for contribution connections. */
export type ContributionOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollection = {
  __typename?: "ContributionsCollection";
  /** Commit contributions made by the user, grouped by repository. */
  commitContributionsByRepository: Array<CommitContributionsByRepository>;
  /** A calendar of this user's contributions on GitHub. */
  contributionCalendar: ContributionCalendar;
  /** The years the user has been making contributions with the most recent year first. */
  contributionYears: Array<Scalars["Int"]>;
  /**
   * Determine if this collection's time span ends in the current month.
   *
   */
  doesEndInCurrentMonth: Scalars["Boolean"];
  /** The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */
  earliestRestrictedContributionDate?: Maybe<Scalars["Date"]>;
  /** The ending date and time of this collection. */
  endedAt: Scalars["DateTime"];
  /** The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */
  firstIssueContribution?: Maybe<CreatedIssueOrRestrictedContribution>;
  /** The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */
  firstPullRequestContribution?: Maybe<CreatedPullRequestOrRestrictedContribution>;
  /** The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned. */
  firstRepositoryContribution?: Maybe<CreatedRepositoryOrRestrictedContribution>;
  /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
  hasActivityInThePast: Scalars["Boolean"];
  /** Determine if there are any contributions in this collection. */
  hasAnyContributions: Scalars["Boolean"];
  /** Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts. */
  hasAnyRestrictedContributions: Scalars["Boolean"];
  /** Whether or not the collector's time span is all within the same day. */
  isSingleDay: Scalars["Boolean"];
  /** A list of issues the user opened. */
  issueContributions: CreatedIssueContributionConnection;
  /** Issue contributions made by the user, grouped by repository. */
  issueContributionsByRepository: Array<IssueContributionsByRepository>;
  /** When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false. */
  joinedGitHubContribution?: Maybe<JoinedGitHubContribution>;
  /** The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */
  latestRestrictedContributionDate?: Maybe<Scalars["Date"]>;
  /**
   * When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity.
   *
   */
  mostRecentCollectionWithActivity?: Maybe<ContributionsCollection>;
  /**
   * Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions.
   *
   */
  mostRecentCollectionWithoutActivity?: Maybe<ContributionsCollection>;
  /**
   * The issue the user opened on GitHub that received the most comments in the specified
   * time frame.
   *
   */
  popularIssueContribution?: Maybe<CreatedIssueContribution>;
  /**
   * The pull request the user opened on GitHub that received the most comments in the
   * specified time frame.
   *
   */
  popularPullRequestContribution?: Maybe<CreatedPullRequestContribution>;
  /** Pull request contributions made by the user. */
  pullRequestContributions: CreatedPullRequestContributionConnection;
  /** Pull request contributions made by the user, grouped by repository. */
  pullRequestContributionsByRepository: Array<PullRequestContributionsByRepository>;
  /** Pull request review contributions made by the user. */
  pullRequestReviewContributions: CreatedPullRequestReviewContributionConnection;
  /** Pull request review contributions made by the user, grouped by repository. */
  pullRequestReviewContributionsByRepository: Array<PullRequestReviewContributionsByRepository>;
  /** A list of repositories owned by the user that the user created in this time range. */
  repositoryContributions: CreatedRepositoryContributionConnection;
  /** A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts. */
  restrictedContributionsCount: Scalars["Int"];
  /** The beginning date and time of this collection. */
  startedAt: Scalars["DateTime"];
  /** How many commits were made by the user in this time span. */
  totalCommitContributions: Scalars["Int"];
  /** How many issues the user opened. */
  totalIssueContributions: Scalars["Int"];
  /** How many pull requests the user opened. */
  totalPullRequestContributions: Scalars["Int"];
  /** How many pull request reviews the user left. */
  totalPullRequestReviewContributions: Scalars["Int"];
  /** How many different repositories the user committed to. */
  totalRepositoriesWithContributedCommits: Scalars["Int"];
  /** How many different repositories the user opened issues in. */
  totalRepositoriesWithContributedIssues: Scalars["Int"];
  /** How many different repositories the user left pull request reviews in. */
  totalRepositoriesWithContributedPullRequestReviews: Scalars["Int"];
  /** How many different repositories the user opened pull requests in. */
  totalRepositoriesWithContributedPullRequests: Scalars["Int"];
  /** How many repositories the user created. */
  totalRepositoryContributions: Scalars["Int"];
  /** The user who made the contributions in this collection. */
  user: User;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionCommitContributionsByRepositoryArgs = {
  maxRepositories?: InputMaybe<Scalars["Int"]>;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionIssueContributionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  excludeFirst?: InputMaybe<Scalars["Boolean"]>;
  excludePopular?: InputMaybe<Scalars["Boolean"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ContributionOrder>;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionIssueContributionsByRepositoryArgs = {
  excludeFirst?: InputMaybe<Scalars["Boolean"]>;
  excludePopular?: InputMaybe<Scalars["Boolean"]>;
  maxRepositories?: InputMaybe<Scalars["Int"]>;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionPullRequestContributionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  excludeFirst?: InputMaybe<Scalars["Boolean"]>;
  excludePopular?: InputMaybe<Scalars["Boolean"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ContributionOrder>;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionPullRequestContributionsByRepositoryArgs = {
  excludeFirst?: InputMaybe<Scalars["Boolean"]>;
  excludePopular?: InputMaybe<Scalars["Boolean"]>;
  maxRepositories?: InputMaybe<Scalars["Int"]>;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionPullRequestReviewContributionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ContributionOrder>;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionPullRequestReviewContributionsByRepositoryArgs =
  {
    maxRepositories?: InputMaybe<Scalars["Int"]>;
  };

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionRepositoryContributionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  excludeFirst?: InputMaybe<Scalars["Boolean"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ContributionOrder>;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionTotalIssueContributionsArgs = {
  excludeFirst?: InputMaybe<Scalars["Boolean"]>;
  excludePopular?: InputMaybe<Scalars["Boolean"]>;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionTotalPullRequestContributionsArgs = {
  excludeFirst?: InputMaybe<Scalars["Boolean"]>;
  excludePopular?: InputMaybe<Scalars["Boolean"]>;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionTotalRepositoriesWithContributedIssuesArgs =
  {
    excludeFirst?: InputMaybe<Scalars["Boolean"]>;
    excludePopular?: InputMaybe<Scalars["Boolean"]>;
  };

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionTotalRepositoriesWithContributedPullRequestsArgs =
  {
    excludeFirst?: InputMaybe<Scalars["Boolean"]>;
    excludePopular?: InputMaybe<Scalars["Boolean"]>;
  };

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type ContributionsCollectionTotalRepositoryContributionsArgs = {
  excludeFirst?: InputMaybe<Scalars["Boolean"]>;
};

/** Autogenerated input type of ConvertProjectCardNoteToIssue */
export type ConvertProjectCardNoteToIssueInput = {
  /** The body of the newly created issue. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ProjectCard ID to convert. */
  projectCardId: Scalars["ID"];
  /** The ID of the repository to create the issue in. */
  repositoryId: Scalars["ID"];
  /** The title of the newly created issue. Defaults to the card's note text. */
  title?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of ConvertProjectCardNoteToIssue */
export type ConvertProjectCardNoteToIssuePayload = {
  __typename?: "ConvertProjectCardNoteToIssuePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated ProjectCard. */
  projectCard?: Maybe<ProjectCard>;
};

/** Autogenerated input type of ConvertPullRequestToDraft */
export type ConvertPullRequestToDraftInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the pull request to convert to draft */
  pullRequestId: Scalars["ID"];
};

/** Autogenerated return type of ConvertPullRequestToDraft */
export type ConvertPullRequestToDraftPayload = {
  __typename?: "ConvertPullRequestToDraftPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The pull request that is now a draft. */
  pullRequest?: Maybe<PullRequest>;
};

/** Represents a 'convert_to_draft' event on a given pull request. */
export type ConvertToDraftEvent = Node &
  UniformResourceLocatable & {
    __typename?: "ConvertToDraftEvent";
    /** Identifies the actor who performed the event. */
    actor?: Maybe<Actor>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    id: Scalars["ID"];
    /** PullRequest referenced by event. */
    pullRequest: PullRequest;
    /** The HTTP path for this convert to draft event. */
    resourcePath: Scalars["URI"];
    /** The HTTP URL for this convert to draft event. */
    url: Scalars["URI"];
  };

/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
export type ConvertedNoteToIssueEvent = Node & {
  __typename?: "ConvertedNoteToIssueEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
};

/** Represents a 'converted_to_discussion' event on a given issue. */
export type ConvertedToDiscussionEvent = Node & {
  __typename?: "ConvertedToDiscussionEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The discussion that the issue was converted into. */
  discussion?: Maybe<Discussion>;
  id: Scalars["ID"];
};

/** Autogenerated input type of CreateBranchProtectionRule */
export type CreateBranchProtectionRuleInput = {
  /** Can this branch be deleted. */
  allowsDeletions?: InputMaybe<Scalars["Boolean"]>;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: InputMaybe<Scalars["Boolean"]>;
  /** A list of User or Team IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** A list of User or Team IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Can admins overwrite branch protection. */
  isAdminEnforced?: InputMaybe<Scalars["Boolean"]>;
  /** The glob-like pattern used to determine matching branches. */
  pattern: Scalars["String"];
  /** A list of User, Team or App IDs allowed to push to matching branches. */
  pushActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The global relay id of the repository in which a new branch protection rule should be created in. */
  repositoryId: Scalars["ID"];
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: InputMaybe<Scalars["Int"]>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: InputMaybe<Array<Scalars["String"]>>;
  /** The list of required status checks */
  requiredStatusChecks?: InputMaybe<Array<RequiredStatusCheckInput>>;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Are commits required to be signed. */
  requiresCommitSignatures?: InputMaybe<Scalars["Boolean"]>;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: InputMaybe<Scalars["Boolean"]>;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: InputMaybe<Scalars["Boolean"]>;
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: InputMaybe<Scalars["Boolean"]>;
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: InputMaybe<Scalars["Boolean"]>;
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: InputMaybe<Scalars["Boolean"]>;
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: InputMaybe<Scalars["Boolean"]>;
  /** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: InputMaybe<Array<Scalars["ID"]>>;
};

/** Autogenerated return type of CreateBranchProtectionRule */
export type CreateBranchProtectionRulePayload = {
  __typename?: "CreateBranchProtectionRulePayload";
  /** The newly created BranchProtectionRule. */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of CreateCheckRun */
export type CreateCheckRunInput = {
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: InputMaybe<Array<CheckRunAction>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The time that the check run finished. */
  completedAt?: InputMaybe<Scalars["DateTime"]>;
  /** The final conclusion of the check. */
  conclusion?: InputMaybe<CheckConclusionState>;
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: InputMaybe<Scalars["URI"]>;
  /** A reference for the run on the integrator's system. */
  externalId?: InputMaybe<Scalars["String"]>;
  /** The SHA of the head commit. */
  headSha: Scalars["GitObjectID"];
  /** The name of the check. */
  name: Scalars["String"];
  /** Descriptive details about the run. */
  output?: InputMaybe<CheckRunOutput>;
  /** The node ID of the repository. */
  repositoryId: Scalars["ID"];
  /** The time that the check run began. */
  startedAt?: InputMaybe<Scalars["DateTime"]>;
  /** The current status. */
  status?: InputMaybe<RequestableCheckStatusState>;
};

/** Autogenerated return type of CreateCheckRun */
export type CreateCheckRunPayload = {
  __typename?: "CreateCheckRunPayload";
  /** The newly created check run. */
  checkRun?: Maybe<CheckRun>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of CreateCheckSuite */
export type CreateCheckSuiteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The SHA of the head commit. */
  headSha: Scalars["GitObjectID"];
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of CreateCheckSuite */
export type CreateCheckSuitePayload = {
  __typename?: "CreateCheckSuitePayload";
  /** The newly created check suite. */
  checkSuite?: Maybe<CheckSuite>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of CreateCommitOnBranch */
export type CreateCommitOnBranchInput = {
  /** The Ref to be updated.  Must be a branch. */
  branch: CommittableBranch;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The git commit oid expected at the head of the branch prior to the commit */
  expectedHeadOid: Scalars["GitObjectID"];
  /** A description of changes to files in this commit. */
  fileChanges?: InputMaybe<FileChanges>;
  /** The commit message the be included with the commit. */
  message: CommitMessage;
};

/** Autogenerated return type of CreateCommitOnBranch */
export type CreateCommitOnBranchPayload = {
  __typename?: "CreateCommitOnBranchPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new commit. */
  commit?: Maybe<Commit>;
  /** The ref which has been updated to point to the new commit. */
  ref?: Maybe<Ref>;
};

/** Autogenerated input type of CreateDiscussion */
export type CreateDiscussionInput = {
  /** The body of the discussion. */
  body: Scalars["String"];
  /** The id of the discussion category to associate with this discussion. */
  categoryId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the repository on which to create the discussion. */
  repositoryId: Scalars["ID"];
  /** The title of the discussion. */
  title: Scalars["String"];
};

/** Autogenerated return type of CreateDiscussion */
export type CreateDiscussionPayload = {
  __typename?: "CreateDiscussionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The discussion that was just created. */
  discussion?: Maybe<Discussion>;
};

/** Autogenerated input type of CreateEnterpriseOrganization */
export type CreateEnterpriseOrganizationInput = {
  /** The logins for the administrators of the new organization. */
  adminLogins: Array<Scalars["String"]>;
  /** The email used for sending billing receipts. */
  billingEmail: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise owning the new organization. */
  enterpriseId: Scalars["ID"];
  /** The login of the new organization. */
  login: Scalars["String"];
  /** The profile name of the new organization. */
  profileName: Scalars["String"];
};

/** Autogenerated return type of CreateEnterpriseOrganization */
export type CreateEnterpriseOrganizationPayload = {
  __typename?: "CreateEnterpriseOrganizationPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise that owns the created organization. */
  enterprise?: Maybe<Enterprise>;
  /** The organization that was created. */
  organization?: Maybe<Organization>;
};

/** Autogenerated input type of CreateEnvironment */
export type CreateEnvironmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the environment. */
  name: Scalars["String"];
  /** The node ID of the repository. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of CreateEnvironment */
export type CreateEnvironmentPayload = {
  __typename?: "CreateEnvironmentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new or existing environment. */
  environment?: Maybe<Environment>;
};

/** Autogenerated input type of CreateIpAllowListEntry */
export type CreateIpAllowListEntryInput = {
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: Scalars["Boolean"];
  /** An optional name for the IP allow list entry. */
  name?: InputMaybe<Scalars["String"]>;
  /** The ID of the owner for which to create the new IP allow list entry. */
  ownerId: Scalars["ID"];
};

/** Autogenerated return type of CreateIpAllowListEntry */
export type CreateIpAllowListEntryPayload = {
  __typename?: "CreateIpAllowListEntryPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The IP allow list entry that was created. */
  ipAllowListEntry?: Maybe<IpAllowListEntry>;
};

/** Autogenerated input type of CreateIssue */
export type CreateIssueInput = {
  /** The Node ID for the user assignee for this issue. */
  assigneeIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The body for the issue description. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */
  issueTemplate?: InputMaybe<Scalars["String"]>;
  /** An array of Node IDs of labels for this issue. */
  labelIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The Node ID of the milestone for this issue. */
  milestoneId?: InputMaybe<Scalars["ID"]>;
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
  /** The title for the issue. */
  title: Scalars["String"];
};

/** Autogenerated return type of CreateIssue */
export type CreateIssuePayload = {
  __typename?: "CreateIssuePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new issue. */
  issue?: Maybe<Issue>;
};

/** Autogenerated input type of CreateMigrationSource */
export type CreateMigrationSourceInput = {
  /** The Octoshift migration source access token. */
  accessToken?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: InputMaybe<Scalars["String"]>;
  /** The Octoshift migration source name. */
  name: Scalars["String"];
  /** The ID of the organization that will own the Octoshift migration source. */
  ownerId: Scalars["ID"];
  /** The Octoshift migration source type. */
  type: MigrationSourceType;
  /** The Octoshift migration source URL. */
  url: Scalars["String"];
};

/** Autogenerated return type of CreateMigrationSource */
export type CreateMigrationSourcePayload = {
  __typename?: "CreateMigrationSourcePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The created Octoshift migration source. */
  migrationSource?: Maybe<MigrationSource>;
};

/** Autogenerated input type of CreateProject */
export type CreateProjectInput = {
  /** The description of project. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of project. */
  name: Scalars["String"];
  /** The owner ID to create the project under. */
  ownerId: Scalars["ID"];
  /** A list of repository IDs to create as linked repositories for the project */
  repositoryIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The name of the GitHub-provided template. */
  template?: InputMaybe<ProjectTemplate>;
};

/** Autogenerated return type of CreateProject */
export type CreateProjectPayload = {
  __typename?: "CreateProjectPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new project. */
  project?: Maybe<Project>;
};

/** Autogenerated input type of CreatePullRequest */
export type CreatePullRequestInput = {
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository. You cannot update the base branch on a pull request to point
   * to another repository.
   *
   */
  baseRefName: Scalars["String"];
  /** The contents of the pull request. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Indicates whether this pull request should be a draft. */
  draft?: InputMaybe<Scalars["Boolean"]>;
  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests
   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
   *
   */
  headRefName: Scalars["String"];
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: InputMaybe<Scalars["Boolean"]>;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
  /** The title of the pull request. */
  title: Scalars["String"];
};

/** Autogenerated return type of CreatePullRequest */
export type CreatePullRequestPayload = {
  __typename?: "CreatePullRequestPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new pull request. */
  pullRequest?: Maybe<PullRequest>;
};

/** Autogenerated input type of CreateRef */
export type CreateRefInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
  name: Scalars["String"];
  /** The GitObjectID that the new Ref shall target. Must point to a commit. */
  oid: Scalars["GitObjectID"];
  /** The Node ID of the Repository to create the Ref in. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of CreateRef */
export type CreateRefPayload = {
  __typename?: "CreateRefPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The newly created ref. */
  ref?: Maybe<Ref>;
};

/** Autogenerated input type of CreateRepository */
export type CreateRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A short description of the new repository. */
  description?: InputMaybe<Scalars["String"]>;
  /** Indicates if the repository should have the issues feature enabled. */
  hasIssuesEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** Indicates if the repository should have the wiki feature enabled. */
  hasWikiEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** The URL for a web page about this repository. */
  homepageUrl?: InputMaybe<Scalars["URI"]>;
  /** The name of the new repository. */
  name: Scalars["String"];
  /** The ID of the owner for the new repository. */
  ownerId?: InputMaybe<Scalars["ID"]>;
  /** When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository. */
  teamId?: InputMaybe<Scalars["ID"]>;
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  template?: InputMaybe<Scalars["Boolean"]>;
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility;
};

/** Autogenerated return type of CreateRepository */
export type CreateRepositoryPayload = {
  __typename?: "CreateRepositoryPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new repository. */
  repository?: Maybe<Repository>;
};

/** Autogenerated input type of CreateSponsorsTier */
export type CreateSponsorsTierInput = {
  /** The value of the new tier in US dollars. Valid values: 1-12000. */
  amount: Scalars["Int"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */
  description: Scalars["String"];
  /** Whether sponsorships using this tier should happen monthly/yearly or just once. */
  isRecurring?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to make the tier available immediately for sponsors to choose. Defaults to creating a draft tier that will not be publicly visible. */
  publish?: InputMaybe<Scalars["Boolean"]>;
  /** Optional ID of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. */
  repositoryId?: InputMaybe<Scalars["ID"]>;
  /** Optional name of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. Necessary if repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */
  repositoryName?: InputMaybe<Scalars["String"]>;
  /** Optional login of the organization owner of the private repository that sponsors at this tier should gain read-only access to. Necessary if repositoryName is given. Will be ignored if repositoryId is given. */
  repositoryOwnerLogin?: InputMaybe<Scalars["String"]>;
  /** The ID of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars["String"]>;
  /** Optional message new sponsors at this tier will receive. */
  welcomeMessage?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateSponsorsTier */
export type CreateSponsorsTierPayload = {
  __typename?: "CreateSponsorsTierPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new tier. */
  sponsorsTier?: Maybe<SponsorsTier>;
};

/** Autogenerated input type of CreateSponsorship */
export type CreateSponsorshipInput = {
  /** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */
  amount?: InputMaybe<Scalars["Int"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */
  isRecurring?: InputMaybe<Scalars["Boolean"]>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  privacyLevel?: InputMaybe<SponsorshipPrivacy>;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  receiveEmails?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: InputMaybe<Scalars["String"]>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars["String"]>;
  /** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */
  tierId?: InputMaybe<Scalars["ID"]>;
};

/** Autogenerated return type of CreateSponsorship */
export type CreateSponsorshipPayload = {
  __typename?: "CreateSponsorshipPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The sponsorship that was started. */
  sponsorship?: Maybe<Sponsorship>;
};

/** Autogenerated input type of CreateTeamDiscussionComment */
export type CreateTeamDiscussionCommentInput = {
  /** The content of the comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the discussion to which the comment belongs. */
  discussionId: Scalars["ID"];
};

/** Autogenerated return type of CreateTeamDiscussionComment */
export type CreateTeamDiscussionCommentPayload = {
  __typename?: "CreateTeamDiscussionCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new comment. */
  teamDiscussionComment?: Maybe<TeamDiscussionComment>;
};

/** Autogenerated input type of CreateTeamDiscussion */
export type CreateTeamDiscussionInput = {
  /** The content of the discussion. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion. */
  private?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the team to which the discussion belongs. */
  teamId: Scalars["ID"];
  /** The title of the discussion. */
  title: Scalars["String"];
};

/** Autogenerated return type of CreateTeamDiscussion */
export type CreateTeamDiscussionPayload = {
  __typename?: "CreateTeamDiscussionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new discussion. */
  teamDiscussion?: Maybe<TeamDiscussion>;
};

/** Represents the contribution a user made by committing to a repository. */
export type CreatedCommitContribution = Contribution & {
  __typename?: "CreatedCommitContribution";
  /** How many commits were made on this day to this repository by the user. */
  commitCount: Scalars["Int"];
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars["Boolean"];
  /** When this contribution was made. */
  occurredAt: Scalars["DateTime"];
  /** The repository the user made a commit in. */
  repository: Repository;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars["URI"];
  /** The HTTP URL for this contribution. */
  url: Scalars["URI"];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
};

/** The connection type for CreatedCommitContribution. */
export type CreatedCommitContributionConnection = {
  __typename?: "CreatedCommitContributionConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CreatedCommitContributionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<CreatedCommitContribution>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of commits across days and repositories in the connection.
   *
   */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type CreatedCommitContributionEdge = {
  __typename?: "CreatedCommitContributionEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<CreatedCommitContribution>;
};

/** Represents the contribution a user made on GitHub by opening an issue. */
export type CreatedIssueContribution = Contribution & {
  __typename?: "CreatedIssueContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars["Boolean"];
  /** The issue that was opened. */
  issue: Issue;
  /** When this contribution was made. */
  occurredAt: Scalars["DateTime"];
  /** The HTTP path for this contribution. */
  resourcePath: Scalars["URI"];
  /** The HTTP URL for this contribution. */
  url: Scalars["URI"];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
};

/** The connection type for CreatedIssueContribution. */
export type CreatedIssueContributionConnection = {
  __typename?: "CreatedIssueContributionConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CreatedIssueContributionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<CreatedIssueContribution>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type CreatedIssueContributionEdge = {
  __typename?: "CreatedIssueContributionEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<CreatedIssueContribution>;
};

/** Represents either a issue the viewer can access or a restricted contribution. */
export type CreatedIssueOrRestrictedContribution =
  | CreatedIssueContribution
  | RestrictedContribution;

/** Represents the contribution a user made on GitHub by opening a pull request. */
export type CreatedPullRequestContribution = Contribution & {
  __typename?: "CreatedPullRequestContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars["Boolean"];
  /** When this contribution was made. */
  occurredAt: Scalars["DateTime"];
  /** The pull request that was opened. */
  pullRequest: PullRequest;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars["URI"];
  /** The HTTP URL for this contribution. */
  url: Scalars["URI"];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
};

/** The connection type for CreatedPullRequestContribution. */
export type CreatedPullRequestContributionConnection = {
  __typename?: "CreatedPullRequestContributionConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CreatedPullRequestContributionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<CreatedPullRequestContribution>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type CreatedPullRequestContributionEdge = {
  __typename?: "CreatedPullRequestContributionEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<CreatedPullRequestContribution>;
};

/** Represents either a pull request the viewer can access or a restricted contribution. */
export type CreatedPullRequestOrRestrictedContribution =
  | CreatedPullRequestContribution
  | RestrictedContribution;

/** Represents the contribution a user made by leaving a review on a pull request. */
export type CreatedPullRequestReviewContribution = Contribution & {
  __typename?: "CreatedPullRequestReviewContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars["Boolean"];
  /** When this contribution was made. */
  occurredAt: Scalars["DateTime"];
  /** The pull request the user reviewed. */
  pullRequest: PullRequest;
  /** The review the user left on the pull request. */
  pullRequestReview: PullRequestReview;
  /** The repository containing the pull request that the user reviewed. */
  repository: Repository;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars["URI"];
  /** The HTTP URL for this contribution. */
  url: Scalars["URI"];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
};

/** The connection type for CreatedPullRequestReviewContribution. */
export type CreatedPullRequestReviewContributionConnection = {
  __typename?: "CreatedPullRequestReviewContributionConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CreatedPullRequestReviewContributionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<CreatedPullRequestReviewContribution>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type CreatedPullRequestReviewContributionEdge = {
  __typename?: "CreatedPullRequestReviewContributionEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<CreatedPullRequestReviewContribution>;
};

/** Represents the contribution a user made on GitHub by creating a repository. */
export type CreatedRepositoryContribution = Contribution & {
  __typename?: "CreatedRepositoryContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars["Boolean"];
  /** When this contribution was made. */
  occurredAt: Scalars["DateTime"];
  /** The repository that was created. */
  repository: Repository;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars["URI"];
  /** The HTTP URL for this contribution. */
  url: Scalars["URI"];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
};

/** The connection type for CreatedRepositoryContribution. */
export type CreatedRepositoryContributionConnection = {
  __typename?: "CreatedRepositoryContributionConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CreatedRepositoryContributionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<CreatedRepositoryContribution>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type CreatedRepositoryContributionEdge = {
  __typename?: "CreatedRepositoryContributionEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<CreatedRepositoryContribution>;
};

/** Represents either a repository the viewer can access or a restricted contribution. */
export type CreatedRepositoryOrRestrictedContribution =
  | CreatedRepositoryContribution
  | RestrictedContribution;

/** Represents a mention made by one issue or pull request to another. */
export type CrossReferencedEvent = Node &
  UniformResourceLocatable & {
    __typename?: "CrossReferencedEvent";
    /** Identifies the actor who performed the event. */
    actor?: Maybe<Actor>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    id: Scalars["ID"];
    /** Reference originated in a different repository. */
    isCrossRepository: Scalars["Boolean"];
    /** Identifies when the reference was made. */
    referencedAt: Scalars["DateTime"];
    /** The HTTP path for this pull request. */
    resourcePath: Scalars["URI"];
    /** Issue or pull request that made the reference. */
    source: ReferencedSubject;
    /** Issue or pull request to which the reference was made. */
    target: ReferencedSubject;
    /** The HTTP URL for this pull request. */
    url: Scalars["URI"];
    /** Checks if the target will be closed when the source is merged. */
    willCloseTarget: Scalars["Boolean"];
  };

/** Autogenerated input type of DeclineTopicSuggestion */
export type DeclineTopicSuggestionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the suggested topic. */
  name: Scalars["String"];
  /** The reason why the suggested topic is declined. */
  reason: TopicSuggestionDeclineReason;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of DeclineTopicSuggestion */
export type DeclineTopicSuggestionPayload = {
  __typename?: "DeclineTopicSuggestionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The declined topic. */
  topic?: Maybe<Topic>;
};

/** The possible base permissions for repositories. */
export enum DefaultRepositoryPermissionField {
  /** Can read, write, and administrate repos by default */
  Admin = "ADMIN",
  /** No access */
  None = "NONE",
  /** Can read repos by default */
  Read = "READ",
  /** Can read and write repos by default */
  Write = "WRITE",
}

/** Entities that can be deleted. */
export type Deletable = {
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars["Boolean"];
};

/** Autogenerated input type of DeleteBranchProtectionRule */
export type DeleteBranchProtectionRuleInput = {
  /** The global relay id of the branch protection rule to be deleted. */
  branchProtectionRuleId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of DeleteBranchProtectionRule */
export type DeleteBranchProtectionRulePayload = {
  __typename?: "DeleteBranchProtectionRulePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of DeleteDeployment */
export type DeleteDeploymentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the deployment to be deleted. */
  id: Scalars["ID"];
};

/** Autogenerated return type of DeleteDeployment */
export type DeleteDeploymentPayload = {
  __typename?: "DeleteDeploymentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of DeleteDiscussionComment */
export type DeleteDiscussionCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node id of the discussion comment to delete. */
  id: Scalars["ID"];
};

/** Autogenerated return type of DeleteDiscussionComment */
export type DeleteDiscussionCommentPayload = {
  __typename?: "DeleteDiscussionCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The discussion comment that was just deleted. */
  comment?: Maybe<DiscussionComment>;
};

/** Autogenerated input type of DeleteDiscussion */
export type DeleteDiscussionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the discussion to delete. */
  id: Scalars["ID"];
};

/** Autogenerated return type of DeleteDiscussion */
export type DeleteDiscussionPayload = {
  __typename?: "DeleteDiscussionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The discussion that was just deleted. */
  discussion?: Maybe<Discussion>;
};

/** Autogenerated input type of DeleteEnvironment */
export type DeleteEnvironmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the environment to be deleted. */
  id: Scalars["ID"];
};

/** Autogenerated return type of DeleteEnvironment */
export type DeleteEnvironmentPayload = {
  __typename?: "DeleteEnvironmentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of DeleteIpAllowListEntry */
export type DeleteIpAllowListEntryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the IP allow list entry to delete. */
  ipAllowListEntryId: Scalars["ID"];
};

/** Autogenerated return type of DeleteIpAllowListEntry */
export type DeleteIpAllowListEntryPayload = {
  __typename?: "DeleteIpAllowListEntryPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The IP allow list entry that was deleted. */
  ipAllowListEntry?: Maybe<IpAllowListEntry>;
};

/** Autogenerated input type of DeleteIssueComment */
export type DeleteIssueCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the comment to delete. */
  id: Scalars["ID"];
};

/** Autogenerated return type of DeleteIssueComment */
export type DeleteIssueCommentPayload = {
  __typename?: "DeleteIssueCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of DeleteIssue */
export type DeleteIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the issue to delete. */
  issueId: Scalars["ID"];
};

/** Autogenerated return type of DeleteIssue */
export type DeleteIssuePayload = {
  __typename?: "DeleteIssuePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The repository the issue belonged to */
  repository?: Maybe<Repository>;
};

/** Autogenerated input type of DeleteProjectCard */
export type DeleteProjectCardInput = {
  /** The id of the card to delete. */
  cardId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of DeleteProjectCard */
export type DeleteProjectCardPayload = {
  __typename?: "DeleteProjectCardPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The column the deleted card was in. */
  column?: Maybe<ProjectColumn>;
  /** The deleted card ID. */
  deletedCardId?: Maybe<Scalars["ID"]>;
};

/** Autogenerated input type of DeleteProjectColumn */
export type DeleteProjectColumnInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the column to delete. */
  columnId: Scalars["ID"];
};

/** Autogenerated return type of DeleteProjectColumn */
export type DeleteProjectColumnPayload = {
  __typename?: "DeleteProjectColumnPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The deleted column ID. */
  deletedColumnId?: Maybe<Scalars["ID"]>;
  /** The project the deleted column was in. */
  project?: Maybe<Project>;
};

/** Autogenerated input type of DeleteProject */
export type DeleteProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Project ID to update. */
  projectId: Scalars["ID"];
};

/** Autogenerated input type of DeleteProjectNextItem */
export type DeleteProjectNextItemInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the item to be removed. */
  itemId: Scalars["ID"];
  /** The ID of the Project from which the item should be removed. */
  projectId: Scalars["ID"];
};

/** Autogenerated return type of DeleteProjectNextItem */
export type DeleteProjectNextItemPayload = {
  __typename?: "DeleteProjectNextItemPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The ID of the deleted item. */
  deletedItemId?: Maybe<Scalars["ID"]>;
};

/** Autogenerated return type of DeleteProject */
export type DeleteProjectPayload = {
  __typename?: "DeleteProjectPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The repository or organization the project was removed from. */
  owner?: Maybe<ProjectOwner>;
};

/** Autogenerated input type of DeletePullRequestReviewComment */
export type DeletePullRequestReviewCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the comment to delete. */
  id: Scalars["ID"];
};

/** Autogenerated return type of DeletePullRequestReviewComment */
export type DeletePullRequestReviewCommentPayload = {
  __typename?: "DeletePullRequestReviewCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The pull request review the deleted comment belonged to. */
  pullRequestReview?: Maybe<PullRequestReview>;
};

/** Autogenerated input type of DeletePullRequestReview */
export type DeletePullRequestReviewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the pull request review to delete. */
  pullRequestReviewId: Scalars["ID"];
};

/** Autogenerated return type of DeletePullRequestReview */
export type DeletePullRequestReviewPayload = {
  __typename?: "DeletePullRequestReviewPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The deleted pull request review. */
  pullRequestReview?: Maybe<PullRequestReview>;
};

/** Autogenerated input type of DeleteRef */
export type DeleteRefInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the Ref to be deleted. */
  refId: Scalars["ID"];
};

/** Autogenerated return type of DeleteRef */
export type DeleteRefPayload = {
  __typename?: "DeleteRefPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of DeleteTeamDiscussionComment */
export type DeleteTeamDiscussionCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the comment to delete. */
  id: Scalars["ID"];
};

/** Autogenerated return type of DeleteTeamDiscussionComment */
export type DeleteTeamDiscussionCommentPayload = {
  __typename?: "DeleteTeamDiscussionCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of DeleteTeamDiscussion */
export type DeleteTeamDiscussionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The discussion ID to delete. */
  id: Scalars["ID"];
};

/** Autogenerated return type of DeleteTeamDiscussion */
export type DeleteTeamDiscussionPayload = {
  __typename?: "DeleteTeamDiscussionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of DeleteVerifiableDomain */
export type DeleteVerifiableDomainInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the verifiable domain to delete. */
  id: Scalars["ID"];
};

/** Autogenerated return type of DeleteVerifiableDomain */
export type DeleteVerifiableDomainPayload = {
  __typename?: "DeleteVerifiableDomainPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The owning account from which the domain was deleted. */
  owner?: Maybe<VerifiableDomainOwner>;
};

/** Represents a 'demilestoned' event on a given issue or pull request. */
export type DemilestonedEvent = Node & {
  __typename?: "DemilestonedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Identifies the milestone title associated with the 'demilestoned' event. */
  milestoneTitle: Scalars["String"];
  /** Object referenced by event. */
  subject: MilestoneItem;
};

/** A Dependabot Update for a dependency in a repository */
export type DependabotUpdate = RepositoryNode & {
  __typename?: "DependabotUpdate";
  /** The error from a dependency update */
  error?: Maybe<DependabotUpdateError>;
  /** The associated pull request */
  pullRequest?: Maybe<PullRequest>;
  /** The repository associated with this node. */
  repository: Repository;
};

/** An error produced from a Dependabot Update */
export type DependabotUpdateError = {
  __typename?: "DependabotUpdateError";
  /** The body of the error */
  body: Scalars["String"];
  /** The error code */
  errorType: Scalars["String"];
  /** The title of the error */
  title: Scalars["String"];
};

/** The possible ecosystems of a dependency graph package. */
export enum DependencyGraphEcosystem {
  /** GitHub Actions */
  Actions = "ACTIONS",
  /** PHP packages hosted at packagist.org */
  Composer = "COMPOSER",
  /** Go modules */
  Go = "GO",
  /** Java artifacts hosted at the Maven central repository */
  Maven = "MAVEN",
  /** JavaScript packages hosted at npmjs.com */
  Npm = "NPM",
  /** .NET packages hosted at the NuGet Gallery */
  Nuget = "NUGET",
  /** Python packages hosted at PyPI.org */
  Pip = "PIP",
  /** Ruby gems hosted at RubyGems.org */
  Rubygems = "RUBYGEMS",
}

/** A repository deploy key. */
export type DeployKey = Node & {
  __typename?: "DeployKey";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** The deploy key. */
  key: Scalars["String"];
  /** Whether or not the deploy key is read only. */
  readOnly: Scalars["Boolean"];
  /** The deploy key title. */
  title: Scalars["String"];
  /** Whether or not the deploy key has been verified. */
  verified: Scalars["Boolean"];
};

/** The connection type for DeployKey. */
export type DeployKeyConnection = {
  __typename?: "DeployKeyConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DeployKeyEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<DeployKey>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type DeployKeyEdge = {
  __typename?: "DeployKeyEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<DeployKey>;
};

/** Represents a 'deployed' event on a given pull request. */
export type DeployedEvent = Node & {
  __typename?: "DeployedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** The deployment associated with the 'deployed' event. */
  deployment: Deployment;
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** The ref associated with the 'deployed' event. */
  ref?: Maybe<Ref>;
};

/** Represents triggered deployment instance. */
export type Deployment = Node & {
  __typename?: "Deployment";
  /** Identifies the commit sha of the deployment. */
  commit?: Maybe<Commit>;
  /** Identifies the oid of the deployment commit, even if the commit has been deleted. */
  commitOid: Scalars["String"];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the actor who triggered the deployment. */
  creator: Actor;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** The deployment description. */
  description?: Maybe<Scalars["String"]>;
  /** The latest environment to which this deployment was made. */
  environment?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  /** The latest environment to which this deployment was made. */
  latestEnvironment?: Maybe<Scalars["String"]>;
  /** The latest status of this deployment. */
  latestStatus?: Maybe<DeploymentStatus>;
  /** The original environment to which this deployment was made. */
  originalEnvironment?: Maybe<Scalars["String"]>;
  /** Extra information that a deployment system might need. */
  payload?: Maybe<Scalars["String"]>;
  /** Identifies the Ref of the deployment, if the deployment was created by ref. */
  ref?: Maybe<Ref>;
  /** Identifies the repository associated with the deployment. */
  repository: Repository;
  /** The current state of the deployment. */
  state?: Maybe<DeploymentState>;
  /** A list of statuses associated with the deployment. */
  statuses?: Maybe<DeploymentStatusConnection>;
  /** The deployment task. */
  task?: Maybe<Scalars["String"]>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** Represents triggered deployment instance. */
export type DeploymentStatusesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for Deployment. */
export type DeploymentConnection = {
  __typename?: "DeploymentConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DeploymentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Deployment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type DeploymentEdge = {
  __typename?: "DeploymentEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Deployment>;
};

/** Represents a 'deployment_environment_changed' event on a given pull request. */
export type DeploymentEnvironmentChangedEvent = Node & {
  __typename?: "DeploymentEnvironmentChangedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The deployment status that updated the deployment environment. */
  deploymentStatus: DeploymentStatus;
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
};

/** Ordering options for deployment connections */
export type DeploymentOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order deployments by. */
  field: DeploymentOrderField;
};

/** Properties by which deployment connections can be ordered. */
export enum DeploymentOrderField {
  /** Order collection by creation time */
  CreatedAt = "CREATED_AT",
}

/** A protection rule. */
export type DeploymentProtectionRule = {
  __typename?: "DeploymentProtectionRule";
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** The teams or users that can review the deployment */
  reviewers: DeploymentReviewerConnection;
  /** The timeout in minutes for this protection rule. */
  timeout: Scalars["Int"];
  /** The type of protection rule. */
  type: DeploymentProtectionRuleType;
};

/** A protection rule. */
export type DeploymentProtectionRuleReviewersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for DeploymentProtectionRule. */
export type DeploymentProtectionRuleConnection = {
  __typename?: "DeploymentProtectionRuleConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DeploymentProtectionRuleEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<DeploymentProtectionRule>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type DeploymentProtectionRuleEdge = {
  __typename?: "DeploymentProtectionRuleEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<DeploymentProtectionRule>;
};

/** The possible protection rule types. */
export enum DeploymentProtectionRuleType {
  /** Required reviewers */
  RequiredReviewers = "REQUIRED_REVIEWERS",
  /** Wait timer */
  WaitTimer = "WAIT_TIMER",
}

/** A request to deploy a workflow run to an environment. */
export type DeploymentRequest = {
  __typename?: "DeploymentRequest";
  /** Whether or not the current user can approve the deployment */
  currentUserCanApprove: Scalars["Boolean"];
  /** The target environment of the deployment */
  environment: Environment;
  /** The teams or users that can review the deployment */
  reviewers: DeploymentReviewerConnection;
  /** The wait timer in minutes configured in the environment */
  waitTimer: Scalars["Int"];
  /** The wait timer in minutes configured in the environment */
  waitTimerStartedAt?: Maybe<Scalars["DateTime"]>;
};

/** A request to deploy a workflow run to an environment. */
export type DeploymentRequestReviewersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for DeploymentRequest. */
export type DeploymentRequestConnection = {
  __typename?: "DeploymentRequestConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DeploymentRequestEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<DeploymentRequest>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type DeploymentRequestEdge = {
  __typename?: "DeploymentRequestEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<DeploymentRequest>;
};

/** A deployment review. */
export type DeploymentReview = Node & {
  __typename?: "DeploymentReview";
  /** The comment the user left. */
  comment: Scalars["String"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** The environments approved or rejected */
  environments: EnvironmentConnection;
  id: Scalars["ID"];
  /** The decision of the user. */
  state: DeploymentReviewState;
  /** The user that reviewed the deployment. */
  user: User;
};

/** A deployment review. */
export type DeploymentReviewEnvironmentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for DeploymentReview. */
export type DeploymentReviewConnection = {
  __typename?: "DeploymentReviewConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DeploymentReviewEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<DeploymentReview>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type DeploymentReviewEdge = {
  __typename?: "DeploymentReviewEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<DeploymentReview>;
};

/** The possible states for a deployment review. */
export enum DeploymentReviewState {
  /** The deployment was approved. */
  Approved = "APPROVED",
  /** The deployment was rejected. */
  Rejected = "REJECTED",
}

/** Users and teams. */
export type DeploymentReviewer = Team | User;

/** The connection type for DeploymentReviewer. */
export type DeploymentReviewerConnection = {
  __typename?: "DeploymentReviewerConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DeploymentReviewerEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<DeploymentReviewer>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type DeploymentReviewerEdge = {
  __typename?: "DeploymentReviewerEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<DeploymentReviewer>;
};

/** The possible states in which a deployment can be. */
export enum DeploymentState {
  /** The pending deployment was not updated after 30 minutes. */
  Abandoned = "ABANDONED",
  /** The deployment is currently active. */
  Active = "ACTIVE",
  /** An inactive transient deployment. */
  Destroyed = "DESTROYED",
  /** The deployment experienced an error. */
  Error = "ERROR",
  /** The deployment has failed. */
  Failure = "FAILURE",
  /** The deployment is inactive. */
  Inactive = "INACTIVE",
  /** The deployment is in progress. */
  InProgress = "IN_PROGRESS",
  /** The deployment is pending. */
  Pending = "PENDING",
  /** The deployment has queued */
  Queued = "QUEUED",
  /** The deployment is waiting. */
  Waiting = "WAITING",
}

/** Describes the status of a given deployment attempt. */
export type DeploymentStatus = Node & {
  __typename?: "DeploymentStatus";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the actor who triggered the deployment. */
  creator: Actor;
  /** Identifies the deployment associated with status. */
  deployment: Deployment;
  /** Identifies the description of the deployment. */
  description?: Maybe<Scalars["String"]>;
  /** Identifies the environment URL of the deployment. */
  environmentUrl?: Maybe<Scalars["URI"]>;
  id: Scalars["ID"];
  /** Identifies the log URL of the deployment. */
  logUrl?: Maybe<Scalars["URI"]>;
  /** Identifies the current state of the deployment. */
  state: DeploymentStatusState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** The connection type for DeploymentStatus. */
export type DeploymentStatusConnection = {
  __typename?: "DeploymentStatusConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DeploymentStatusEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<DeploymentStatus>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type DeploymentStatusEdge = {
  __typename?: "DeploymentStatusEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<DeploymentStatus>;
};

/** The possible states for a deployment status. */
export enum DeploymentStatusState {
  /** The deployment experienced an error. */
  Error = "ERROR",
  /** The deployment has failed. */
  Failure = "FAILURE",
  /** The deployment is inactive. */
  Inactive = "INACTIVE",
  /** The deployment is in progress. */
  InProgress = "IN_PROGRESS",
  /** The deployment is pending. */
  Pending = "PENDING",
  /** The deployment is queued */
  Queued = "QUEUED",
  /** The deployment was successful. */
  Success = "SUCCESS",
  /** The deployment is waiting. */
  Waiting = "WAITING",
}

/** The possible sides of a diff. */
export enum DiffSide {
  /** The left side of the diff. */
  Left = "LEFT",
  /** The right side of the diff. */
  Right = "RIGHT",
}

/** Autogenerated input type of DisablePullRequestAutoMerge */
export type DisablePullRequestAutoMergeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the pull request to disable auto merge on. */
  pullRequestId: Scalars["ID"];
};

/** Autogenerated return type of DisablePullRequestAutoMerge */
export type DisablePullRequestAutoMergePayload = {
  __typename?: "DisablePullRequestAutoMergePayload";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The pull request auto merge was disabled on. */
  pullRequest?: Maybe<PullRequest>;
};

/** Represents a 'disconnected' event on a given issue or pull request. */
export type DisconnectedEvent = Node & {
  __typename?: "DisconnectedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Reference originated in a different repository. */
  isCrossRepository: Scalars["Boolean"];
  /** Issue or pull request from which the issue was disconnected. */
  source: ReferencedSubject;
  /** Issue or pull request which was disconnected. */
  subject: ReferencedSubject;
};

/** A discussion in a repository. */
export type Discussion = Comment &
  Deletable &
  Labelable &
  Lockable &
  Node &
  Reactable &
  RepositoryNode &
  Subscribable &
  Updatable &
  Votable & {
    __typename?: "Discussion";
    /** Reason that the conversation was locked. */
    activeLockReason?: Maybe<LockReason>;
    /** The comment chosen as this discussion's answer, if any. */
    answer?: Maybe<DiscussionComment>;
    /** The time when a user chose this discussion's answer, if answered. */
    answerChosenAt?: Maybe<Scalars["DateTime"]>;
    /** The user who chose this discussion's answer, if answered. */
    answerChosenBy?: Maybe<Actor>;
    /** The actor who authored the comment. */
    author?: Maybe<Actor>;
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation;
    /** The main text of the discussion post. */
    body: Scalars["String"];
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** The body rendered to text. */
    bodyText: Scalars["String"];
    /** The category for this discussion. */
    category: DiscussionCategory;
    /** The replies to the discussion. */
    comments: DiscussionCommentConnection;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The actor who edited the comment. */
    editor?: Maybe<Actor>;
    id: Scalars["ID"];
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"];
    /** A list of labels associated with the object. */
    labels?: Maybe<LabelConnection>;
    /** The moment the editor made the last edit */
    lastEditedAt?: Maybe<Scalars["DateTime"]>;
    /** `true` if the object is locked */
    locked: Scalars["Boolean"];
    /** The number identifying this discussion within the repository. */
    number: Scalars["Int"];
    /** Identifies when the comment was published at. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: Maybe<Array<ReactionGroup>>;
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection;
    /** The repository associated with this node. */
    repository: Repository;
    /** The path for this discussion. */
    resourcePath: Scalars["URI"];
    /** The title of this discussion. */
    title: Scalars["String"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** Number of upvotes that this subject has received. */
    upvoteCount: Scalars["Int"];
    /** The URL for this discussion. */
    url: Scalars["URI"];
    /** A list of edits to this content. */
    userContentEdits?: Maybe<UserContentEditConnection>;
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"];
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"];
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** Whether or not the current user can add or remove an upvote on this subject. */
    viewerCanUpvote: Scalars["Boolean"];
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"];
    /** Whether or not the current user has already upvoted this subject. */
    viewerHasUpvoted: Scalars["Boolean"];
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: Maybe<SubscriptionState>;
  };

/** A discussion in a repository. */
export type DiscussionCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A discussion in a repository. */
export type DiscussionLabelsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<LabelOrder>;
};

/** A discussion in a repository. */
export type DiscussionReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** A discussion in a repository. */
export type DiscussionUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A category for discussions in a repository. */
export type DiscussionCategory = Node &
  RepositoryNode & {
    __typename?: "DiscussionCategory";
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** A description of this category. */
    description?: Maybe<Scalars["String"]>;
    /** An emoji representing this category. */
    emoji: Scalars["String"];
    /** This category's emoji rendered as HTML. */
    emojiHTML: Scalars["HTML"];
    id: Scalars["ID"];
    /** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */
    isAnswerable: Scalars["Boolean"];
    /** The name of this category. */
    name: Scalars["String"];
    /** The repository associated with this node. */
    repository: Repository;
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
  };

/** The connection type for DiscussionCategory. */
export type DiscussionCategoryConnection = {
  __typename?: "DiscussionCategoryConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DiscussionCategoryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<DiscussionCategory>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type DiscussionCategoryEdge = {
  __typename?: "DiscussionCategoryEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<DiscussionCategory>;
};

/** A comment on a discussion. */
export type DiscussionComment = Comment &
  Deletable &
  Minimizable &
  Node &
  Reactable &
  Updatable &
  UpdatableComment &
  Votable & {
    __typename?: "DiscussionComment";
    /** The actor who authored the comment. */
    author?: Maybe<Actor>;
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation;
    /** The body as Markdown. */
    body: Scalars["String"];
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** The body rendered to text. */
    bodyText: Scalars["String"];
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The time when this replied-to comment was deleted */
    deletedAt?: Maybe<Scalars["DateTime"]>;
    /** The discussion this comment was created in */
    discussion?: Maybe<Discussion>;
    /** The actor who edited the comment. */
    editor?: Maybe<Actor>;
    id: Scalars["ID"];
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"];
    /** Has this comment been chosen as the answer of its discussion? */
    isAnswer: Scalars["Boolean"];
    /** Returns whether or not a comment has been minimized. */
    isMinimized: Scalars["Boolean"];
    /** The moment the editor made the last edit */
    lastEditedAt?: Maybe<Scalars["DateTime"]>;
    /** Returns why the comment was minimized. */
    minimizedReason?: Maybe<Scalars["String"]>;
    /** Identifies when the comment was published at. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: Maybe<Array<ReactionGroup>>;
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection;
    /** The threaded replies to this comment. */
    replies: DiscussionCommentConnection;
    /** The discussion comment this comment is a reply to */
    replyTo?: Maybe<DiscussionComment>;
    /** The path for this discussion comment. */
    resourcePath: Scalars["URI"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** Number of upvotes that this subject has received. */
    upvoteCount: Scalars["Int"];
    /** The URL for this discussion comment. */
    url: Scalars["URI"];
    /** A list of edits to this content. */
    userContentEdits?: Maybe<UserContentEditConnection>;
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"];
    /** Can the current user mark this comment as an answer? */
    viewerCanMarkAsAnswer: Scalars["Boolean"];
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize: Scalars["Boolean"];
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"];
    /** Can the current user unmark this comment as an answer? */
    viewerCanUnmarkAsAnswer: Scalars["Boolean"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** Whether or not the current user can add or remove an upvote on this subject. */
    viewerCanUpvote: Scalars["Boolean"];
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"];
    /** Whether or not the current user has already upvoted this subject. */
    viewerHasUpvoted: Scalars["Boolean"];
  };

/** A comment on a discussion. */
export type DiscussionCommentReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** A comment on a discussion. */
export type DiscussionCommentRepliesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A comment on a discussion. */
export type DiscussionCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for DiscussionComment. */
export type DiscussionCommentConnection = {
  __typename?: "DiscussionCommentConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DiscussionCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<DiscussionComment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type DiscussionCommentEdge = {
  __typename?: "DiscussionCommentEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<DiscussionComment>;
};

/** The connection type for Discussion. */
export type DiscussionConnection = {
  __typename?: "DiscussionConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DiscussionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Discussion>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type DiscussionEdge = {
  __typename?: "DiscussionEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Discussion>;
};

/** Ways in which lists of discussions can be ordered upon return. */
export type DiscussionOrder = {
  /** The direction in which to order discussions by the specified field. */
  direction: OrderDirection;
  /** The field by which to order discussions. */
  field: DiscussionOrderField;
};

/** Properties by which discussion connections can be ordered. */
export enum DiscussionOrderField {
  /** Order discussions by creation time. */
  CreatedAt = "CREATED_AT",
  /** Order discussions by most recent modification time. */
  UpdatedAt = "UPDATED_AT",
}

/** Autogenerated input type of DismissPullRequestReview */
export type DismissPullRequestReviewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The contents of the pull request review dismissal message. */
  message: Scalars["String"];
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: Scalars["ID"];
};

/** Autogenerated return type of DismissPullRequestReview */
export type DismissPullRequestReviewPayload = {
  __typename?: "DismissPullRequestReviewPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The dismissed pull request review. */
  pullRequestReview?: Maybe<PullRequestReview>;
};

/** The possible reasons that a Dependabot alert was dismissed. */
export enum DismissReason {
  /** A fix has already been started */
  FixStarted = "FIX_STARTED",
  /** This alert is inaccurate or incorrect */
  Inaccurate = "INACCURATE",
  /** Vulnerable code is not actually used */
  NotUsed = "NOT_USED",
  /** No bandwidth to fix this */
  NoBandwidth = "NO_BANDWIDTH",
  /** Risk is tolerable to this project */
  TolerableRisk = "TOLERABLE_RISK",
}

/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */
export type DismissRepositoryVulnerabilityAlertInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The reason the Dependabot alert is being dismissed. */
  dismissReason: DismissReason;
  /** The Dependabot alert ID to dismiss. */
  repositoryVulnerabilityAlertId: Scalars["ID"];
};

/** Autogenerated return type of DismissRepositoryVulnerabilityAlert */
export type DismissRepositoryVulnerabilityAlertPayload = {
  __typename?: "DismissRepositoryVulnerabilityAlertPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The Dependabot alert that was dismissed */
  repositoryVulnerabilityAlert?: Maybe<RepositoryVulnerabilityAlert>;
};

/** A draft issue within a project. */
export type DraftIssue = Node & {
  __typename?: "DraftIssue";
  /** A list of users to assigned to this draft issue. */
  assignees: UserConnection;
  /** The body of the draft issue. */
  body: Scalars["String"];
  /** The body of the draft issue rendered to HTML. */
  bodyHTML: Scalars["HTML"];
  /** The body of the draft issue rendered to text. */
  bodyText: Scalars["String"];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The actor who created this draft issue. */
  creator?: Maybe<Actor>;
  id: Scalars["ID"];
  /** The project that contains this draft issue. */
  project: ProjectNext;
  /** The project item that wraps this draft issue. */
  projectItem: ProjectNextItem;
  /** The title of the draft issue */
  title: Scalars["String"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** A draft issue within a project. */
export type DraftIssueAssigneesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Specifies a review comment to be left with a Pull Request Review. */
export type DraftPullRequestReviewComment = {
  /** Body of the comment to leave. */
  body: Scalars["String"];
  /** Path to the file being commented on. */
  path: Scalars["String"];
  /** Position in the file to leave a comment on. */
  position: Scalars["Int"];
};

/** Specifies a review comment thread to be left with a Pull Request Review. */
export type DraftPullRequestReviewThread = {
  /** Body of the comment to leave. */
  body: Scalars["String"];
  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
  line: Scalars["Int"];
  /** Path to the file being commented on. */
  path: Scalars["String"];
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  side?: InputMaybe<DiffSide>;
  /** The first line of the range to which the comment refers. */
  startLine?: InputMaybe<Scalars["Int"]>;
  /** The side of the diff on which the start line resides. */
  startSide?: InputMaybe<DiffSide>;
};

/** Autogenerated input type of EnablePullRequestAutoMerge */
export type EnablePullRequestAutoMergeInput = {
  /** The email address to associate with this merge. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. */
  commitBody?: InputMaybe<Scalars["String"]>;
  /** Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. */
  commitHeadline?: InputMaybe<Scalars["String"]>;
  /** The merge method to use. If omitted, defaults to 'MERGE' */
  mergeMethod?: InputMaybe<PullRequestMergeMethod>;
  /** ID of the pull request to enable auto-merge on. */
  pullRequestId: Scalars["ID"];
};

/** Autogenerated return type of EnablePullRequestAutoMerge */
export type EnablePullRequestAutoMergePayload = {
  __typename?: "EnablePullRequestAutoMergePayload";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The pull request auto-merge was enabled on. */
  pullRequest?: Maybe<PullRequest>;
};

/** An account to manage multiple organizations with consolidated policy and billing. */
export type Enterprise = Node & {
  __typename?: "Enterprise";
  /** A URL pointing to the enterprise's public avatar. */
  avatarUrl: Scalars["URI"];
  /** Enterprise billing information visible to enterprise billing managers. */
  billingInfo?: Maybe<EnterpriseBillingInfo>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** The description of the enterprise. */
  description?: Maybe<Scalars["String"]>;
  /** The description of the enterprise as HTML. */
  descriptionHTML: Scalars["HTML"];
  id: Scalars["ID"];
  /** The location of the enterprise. */
  location?: Maybe<Scalars["String"]>;
  /** A list of users who are members of this enterprise. */
  members: EnterpriseMemberConnection;
  /** The name of the enterprise. */
  name: Scalars["String"];
  /** A list of organizations that belong to this enterprise. */
  organizations: OrganizationConnection;
  /** Enterprise information only visible to enterprise owners. */
  ownerInfo?: Maybe<EnterpriseOwnerInfo>;
  /** The HTTP path for this enterprise. */
  resourcePath: Scalars["URI"];
  /** The URL-friendly identifier for the enterprise. */
  slug: Scalars["String"];
  /** The HTTP URL for this enterprise. */
  url: Scalars["URI"];
  /**
   * A list of user accounts on this enterprise.
   * @deprecated The `Enterprise.userAccounts` field is being removed. Use the `Enterprise.members` field instead. Removal on 2022-07-01 UTC.
   */
  userAccounts: EnterpriseUserAccountConnection;
  /** Is the current viewer an admin of this enterprise? */
  viewerIsAdmin: Scalars["Boolean"];
  /** The URL of the enterprise website. */
  websiteUrl?: Maybe<Scalars["URI"]>;
};

/** An account to manage multiple organizations with consolidated policy and billing. */
export type EnterpriseAvatarUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** An account to manage multiple organizations with consolidated policy and billing. */
export type EnterpriseMembersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  deployment?: InputMaybe<EnterpriseUserDeployment>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<EnterpriseMemberOrder>;
  organizationLogins?: InputMaybe<Array<Scalars["String"]>>;
  query?: InputMaybe<Scalars["String"]>;
  role?: InputMaybe<EnterpriseUserAccountMembershipRole>;
};

/** An account to manage multiple organizations with consolidated policy and billing. */
export type EnterpriseOrganizationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<OrganizationOrder>;
  query?: InputMaybe<Scalars["String"]>;
  viewerOrganizationRole?: InputMaybe<RoleInOrganization>;
};

/** An account to manage multiple organizations with consolidated policy and billing. */
export type EnterpriseUserAccountsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for User. */
export type EnterpriseAdministratorConnection = {
  __typename?: "EnterpriseAdministratorConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseAdministratorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** A User who is an administrator of an enterprise. */
export type EnterpriseAdministratorEdge = {
  __typename?: "EnterpriseAdministratorEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
  /** The role of the administrator. */
  role: EnterpriseAdministratorRole;
};

/** An invitation for a user to become an owner or billing manager of an enterprise. */
export type EnterpriseAdministratorInvitation = Node & {
  __typename?: "EnterpriseAdministratorInvitation";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The email of the person who was invited to the enterprise. */
  email?: Maybe<Scalars["String"]>;
  /** The enterprise the invitation is for. */
  enterprise: Enterprise;
  id: Scalars["ID"];
  /** The user who was invited to the enterprise. */
  invitee?: Maybe<User>;
  /** The user who created the invitation. */
  inviter?: Maybe<User>;
  /** The invitee's pending role in the enterprise (owner or billing_manager). */
  role: EnterpriseAdministratorRole;
};

/** The connection type for EnterpriseAdministratorInvitation. */
export type EnterpriseAdministratorInvitationConnection = {
  __typename?: "EnterpriseAdministratorInvitationConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseAdministratorInvitationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<EnterpriseAdministratorInvitation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type EnterpriseAdministratorInvitationEdge = {
  __typename?: "EnterpriseAdministratorInvitationEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<EnterpriseAdministratorInvitation>;
};

/** Ordering options for enterprise administrator invitation connections */
export type EnterpriseAdministratorInvitationOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order enterprise administrator invitations by. */
  field: EnterpriseAdministratorInvitationOrderField;
};

/** Properties by which enterprise administrator invitation connections can be ordered. */
export enum EnterpriseAdministratorInvitationOrderField {
  /** Order enterprise administrator member invitations by creation time */
  CreatedAt = "CREATED_AT",
}

/** The possible administrator roles in an enterprise account. */
export enum EnterpriseAdministratorRole {
  /** Represents a billing manager of the enterprise account. */
  BillingManager = "BILLING_MANAGER",
  /** Represents an owner of the enterprise account. */
  Owner = "OWNER",
}

/** Metadata for an audit entry containing enterprise account information. */
export type EnterpriseAuditEntryData = {
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: Maybe<Scalars["URI"]>;
  /** The slug of the enterprise. */
  enterpriseSlug?: Maybe<Scalars["String"]>;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: Maybe<Scalars["URI"]>;
};

/** Enterprise billing information visible to enterprise billing managers and owners. */
export type EnterpriseBillingInfo = {
  __typename?: "EnterpriseBillingInfo";
  /** The number of licenseable users/emails across the enterprise. */
  allLicensableUsersCount: Scalars["Int"];
  /** The number of data packs used by all organizations owned by the enterprise. */
  assetPacks: Scalars["Int"];
  /**
   * The number of available seats across all owned organizations based on the unique number of billable users.
   * @deprecated `availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.
   */
  availableSeats: Scalars["Int"];
  /** The bandwidth quota in GB for all organizations owned by the enterprise. */
  bandwidthQuota: Scalars["Float"];
  /** The bandwidth usage in GB for all organizations owned by the enterprise. */
  bandwidthUsage: Scalars["Float"];
  /** The bandwidth usage as a percentage of the bandwidth quota. */
  bandwidthUsagePercentage: Scalars["Int"];
  /**
   * The total seats across all organizations owned by the enterprise.
   * @deprecated `seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.
   */
  seats: Scalars["Int"];
  /** The storage quota in GB for all organizations owned by the enterprise. */
  storageQuota: Scalars["Float"];
  /** The storage usage in GB for all organizations owned by the enterprise. */
  storageUsage: Scalars["Float"];
  /** The storage usage as a percentage of the storage quota. */
  storageUsagePercentage: Scalars["Int"];
  /** The number of available licenses across all owned organizations based on the unique number of billable users. */
  totalAvailableLicenses: Scalars["Int"];
  /** The total number of licenses allocated. */
  totalLicenses: Scalars["Int"];
};

/** The possible values for the enterprise base repository permission setting. */
export enum EnterpriseDefaultRepositoryPermissionSettingValue {
  /** Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories. */
  Admin = "ADMIN",
  /** Organization members will only be able to clone and pull public repositories. */
  None = "NONE",
  /** Organizations in the enterprise choose base repository permissions for their members. */
  NoPolicy = "NO_POLICY",
  /** Organization members will be able to clone and pull all organization repositories. */
  Read = "READ",
  /** Organization members will be able to clone, pull, and push all organization repositories. */
  Write = "WRITE",
}

/** The possible values for an enabled/disabled enterprise setting. */
export enum EnterpriseEnabledDisabledSettingValue {
  /** The setting is disabled for organizations in the enterprise. */
  Disabled = "DISABLED",
  /** The setting is enabled for organizations in the enterprise. */
  Enabled = "ENABLED",
  /** There is no policy set for organizations in the enterprise. */
  NoPolicy = "NO_POLICY",
}

/** The possible values for an enabled/no policy enterprise setting. */
export enum EnterpriseEnabledSettingValue {
  /** The setting is enabled for organizations in the enterprise. */
  Enabled = "ENABLED",
  /** There is no policy set for organizations in the enterprise. */
  NoPolicy = "NO_POLICY",
}

/** An identity provider configured to provision identities for an enterprise. */
export type EnterpriseIdentityProvider = Node & {
  __typename?: "EnterpriseIdentityProvider";
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod?: Maybe<SamlDigestAlgorithm>;
  /** The enterprise this identity provider belongs to. */
  enterprise?: Maybe<Enterprise>;
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities: ExternalIdentityConnection;
  id: Scalars["ID"];
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate?: Maybe<Scalars["X509Certificate"]>;
  /** The Issuer Entity ID for the SAML identity provider. */
  issuer?: Maybe<Scalars["String"]>;
  /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
  recoveryCodes?: Maybe<Array<Scalars["String"]>>;
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod?: Maybe<SamlSignatureAlgorithm>;
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl?: Maybe<Scalars["URI"]>;
};

/** An identity provider configured to provision identities for an enterprise. */
export type EnterpriseIdentityProviderExternalIdentitiesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  login?: InputMaybe<Scalars["String"]>;
  membersOnly?: InputMaybe<Scalars["Boolean"]>;
  userName?: InputMaybe<Scalars["String"]>;
};

/** An object that is a member of an enterprise. */
export type EnterpriseMember = EnterpriseUserAccount | User;

/** The connection type for EnterpriseMember. */
export type EnterpriseMemberConnection = {
  __typename?: "EnterpriseMemberConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseMemberEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<EnterpriseMember>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** A User who is a member of an enterprise through one or more organizations. */
export type EnterpriseMemberEdge = {
  __typename?: "EnterpriseMemberEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /**
   * Whether the user does not have a license for the enterprise.
   * @deprecated All members consume a license Removal on 2021-01-01 UTC.
   */
  isUnlicensed: Scalars["Boolean"];
  /** The item at the end of the edge. */
  node?: Maybe<EnterpriseMember>;
};

/** Ordering options for enterprise member connections. */
export type EnterpriseMemberOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order enterprise members by. */
  field: EnterpriseMemberOrderField;
};

/** Properties by which enterprise member connections can be ordered. */
export enum EnterpriseMemberOrderField {
  /** Order enterprise members by creation time */
  CreatedAt = "CREATED_AT",
  /** Order enterprise members by login */
  Login = "LOGIN",
}

/** The possible values for the enterprise members can create repositories setting. */
export enum EnterpriseMembersCanCreateRepositoriesSettingValue {
  /** Members will be able to create public and private repositories. */
  All = "ALL",
  /** Members will not be able to create public or private repositories. */
  Disabled = "DISABLED",
  /** Organization administrators choose whether to allow members to create repositories. */
  NoPolicy = "NO_POLICY",
  /** Members will be able to create only private repositories. */
  Private = "PRIVATE",
  /** Members will be able to create only public repositories. */
  Public = "PUBLIC",
}

/** The possible values for the members can make purchases setting. */
export enum EnterpriseMembersCanMakePurchasesSettingValue {
  /** The setting is disabled for organizations in the enterprise. */
  Disabled = "DISABLED",
  /** The setting is enabled for organizations in the enterprise. */
  Enabled = "ENABLED",
}

/** The connection type for Organization. */
export type EnterpriseOrganizationMembershipConnection = {
  __typename?: "EnterpriseOrganizationMembershipConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseOrganizationMembershipEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Organization>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An enterprise organization that a user is a member of. */
export type EnterpriseOrganizationMembershipEdge = {
  __typename?: "EnterpriseOrganizationMembershipEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Organization>;
  /** The role of the user in the enterprise membership. */
  role: EnterpriseUserAccountMembershipRole;
};

/** The connection type for User. */
export type EnterpriseOutsideCollaboratorConnection = {
  __typename?: "EnterpriseOutsideCollaboratorConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseOutsideCollaboratorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export type EnterpriseOutsideCollaboratorEdge = {
  __typename?: "EnterpriseOutsideCollaboratorEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /**
   * Whether the outside collaborator does not have a license for the enterprise.
   * @deprecated All outside collaborators consume a license Removal on 2021-01-01 UTC.
   */
  isUnlicensed: Scalars["Boolean"];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
  /** The enterprise organization repositories this user is a member of. */
  repositories: EnterpriseRepositoryInfoConnection;
};

/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export type EnterpriseOutsideCollaboratorEdgeRepositoriesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<RepositoryOrder>;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfo = {
  __typename?: "EnterpriseOwnerInfo";
  /** A list of all of the administrators for this enterprise. */
  admins: EnterpriseAdministratorConnection;
  /** A list of users in the enterprise who currently have two-factor authentication disabled. */
  affiliatedUsersWithTwoFactorDisabled: UserConnection;
  /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
  affiliatedUsersWithTwoFactorDisabledExist: Scalars["Boolean"];
  /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided private repository forking setting value. */
  allowPrivateRepositoryForkingSettingOrganizations: OrganizationConnection;
  /** The setting value for base repository permissions for organizations in this enterprise. */
  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue;
  /** A list of enterprise organizations configured with the provided base repository permission. */
  defaultRepositoryPermissionSettingOrganizations: OrganizationConnection;
  /** A list of domains owned by the enterprise. */
  domains: VerifiableDomainConnection;
  /** Enterprise Server installations owned by the enterprise. */
  enterpriseServerInstallations: EnterpriseServerInstallationConnection;
  /** The setting value for whether the enterprise has an IP allow list enabled. */
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;
  /** The IP addresses that are allowed to access resources owned by the enterprise. */
  ipAllowListEntries: IpAllowListEntryConnection;
  /** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */
  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue;
  /** Whether or not the base repository permission is currently being updated. */
  isUpdatingDefaultRepositoryPermission: Scalars["Boolean"];
  /** Whether the two-factor authentication requirement is currently being enforced. */
  isUpdatingTwoFactorRequirement: Scalars["Boolean"];
  /** The setting value for whether organization members with admin permissions on a repository can change repository visibility. */
  membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
  membersCanChangeRepositoryVisibilitySettingOrganizations: OrganizationConnection;
  /** The setting value for whether members of organizations in the enterprise can create internal repositories. */
  membersCanCreateInternalRepositoriesSetting?: Maybe<Scalars["Boolean"]>;
  /** The setting value for whether members of organizations in the enterprise can create private repositories. */
  membersCanCreatePrivateRepositoriesSetting?: Maybe<Scalars["Boolean"]>;
  /** The setting value for whether members of organizations in the enterprise can create public repositories. */
  membersCanCreatePublicRepositoriesSetting?: Maybe<Scalars["Boolean"]>;
  /** The setting value for whether members of organizations in the enterprise can create repositories. */
  membersCanCreateRepositoriesSetting?: Maybe<EnterpriseMembersCanCreateRepositoriesSettingValue>;
  /** A list of enterprise organizations configured with the provided repository creation setting value. */
  membersCanCreateRepositoriesSettingOrganizations: OrganizationConnection;
  /** The setting value for whether members with admin permissions for repositories can delete issues. */
  membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can delete issues setting value. */
  membersCanDeleteIssuesSettingOrganizations: OrganizationConnection;
  /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
  membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
  membersCanDeleteRepositoriesSettingOrganizations: OrganizationConnection;
  /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
  membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
  membersCanInviteCollaboratorsSettingOrganizations: OrganizationConnection;
  /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
  membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue;
  /** The setting value for whether members with admin permissions for repositories can update protected branches. */
  membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
  membersCanUpdateProtectedBranchesSettingOrganizations: OrganizationConnection;
  /** The setting value for whether members can view dependency insights. */
  membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
  membersCanViewDependencyInsightsSettingOrganizations: OrganizationConnection;
  /** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */
  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue;
  /** The OIDC Identity Provider for the enterprise. */
  oidcProvider?: Maybe<OidcProvider>;
  /** The setting value for whether organization projects are enabled for organizations in this enterprise. */
  organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided organization projects setting value. */
  organizationProjectsSettingOrganizations: OrganizationConnection;
  /** A list of outside collaborators across the repositories in the enterprise. */
  outsideCollaborators: EnterpriseOutsideCollaboratorConnection;
  /** A list of pending administrator invitations for the enterprise. */
  pendingAdminInvitations: EnterpriseAdministratorInvitationConnection;
  /** A list of pending collaborator invitations across the repositories in the enterprise. */
  pendingCollaboratorInvitations: RepositoryInvitationConnection;
  /** A list of pending member invitations for organizations in the enterprise. */
  pendingMemberInvitations: EnterprisePendingMemberInvitationConnection;
  /** The setting value for whether repository projects are enabled in this enterprise. */
  repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided repository projects setting value. */
  repositoryProjectsSettingOrganizations: OrganizationConnection;
  /** The SAML Identity Provider for the enterprise. When used by a GitHub App, requires an installation token with read and write access to members. */
  samlIdentityProvider?: Maybe<EnterpriseIdentityProvider>;
  /** A list of enterprise organizations configured with the SAML single sign-on setting value. */
  samlIdentityProviderSettingOrganizations: OrganizationConnection;
  /** A list of members with a support entitlement. */
  supportEntitlements: EnterpriseMemberConnection;
  /** The setting value for whether team discussions are enabled for organizations in this enterprise. */
  teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided team discussions setting value. */
  teamDiscussionsSettingOrganizations: OrganizationConnection;
  /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
  twoFactorRequiredSetting: EnterpriseEnabledSettingValue;
  /** A list of enterprise organizations configured with the two-factor authentication setting value. */
  twoFactorRequiredSettingOrganizations: OrganizationConnection;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoAdminsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<EnterpriseMemberOrder>;
  query?: InputMaybe<Scalars["String"]>;
  role?: InputMaybe<EnterpriseAdministratorRole>;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoAffiliatedUsersWithTwoFactorDisabledArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoAllowPrivateRepositoryForkingSettingOrganizationsArgs =
  {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    last?: InputMaybe<Scalars["Int"]>;
    orderBy?: InputMaybe<OrganizationOrder>;
    value: Scalars["Boolean"];
  };

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoDefaultRepositoryPermissionSettingOrganizationsArgs =
  {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    last?: InputMaybe<Scalars["Int"]>;
    orderBy?: InputMaybe<OrganizationOrder>;
    value: DefaultRepositoryPermissionField;
  };

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoDomainsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  isApproved?: InputMaybe<Scalars["Boolean"]>;
  isVerified?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<VerifiableDomainOrder>;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoEnterpriseServerInstallationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  connectedOnly?: InputMaybe<Scalars["Boolean"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<EnterpriseServerInstallationOrder>;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoIpAllowListEntriesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IpAllowListEntryOrder>;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoMembersCanChangeRepositoryVisibilitySettingOrganizationsArgs =
  {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    last?: InputMaybe<Scalars["Int"]>;
    orderBy?: InputMaybe<OrganizationOrder>;
    value: Scalars["Boolean"];
  };

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoMembersCanCreateRepositoriesSettingOrganizationsArgs =
  {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    last?: InputMaybe<Scalars["Int"]>;
    orderBy?: InputMaybe<OrganizationOrder>;
    value: OrganizationMembersCanCreateRepositoriesSettingValue;
  };

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoMembersCanDeleteIssuesSettingOrganizationsArgs =
  {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    last?: InputMaybe<Scalars["Int"]>;
    orderBy?: InputMaybe<OrganizationOrder>;
    value: Scalars["Boolean"];
  };

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoMembersCanDeleteRepositoriesSettingOrganizationsArgs =
  {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    last?: InputMaybe<Scalars["Int"]>;
    orderBy?: InputMaybe<OrganizationOrder>;
    value: Scalars["Boolean"];
  };

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoMembersCanInviteCollaboratorsSettingOrganizationsArgs =
  {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    last?: InputMaybe<Scalars["Int"]>;
    orderBy?: InputMaybe<OrganizationOrder>;
    value: Scalars["Boolean"];
  };

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoMembersCanUpdateProtectedBranchesSettingOrganizationsArgs =
  {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    last?: InputMaybe<Scalars["Int"]>;
    orderBy?: InputMaybe<OrganizationOrder>;
    value: Scalars["Boolean"];
  };

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoMembersCanViewDependencyInsightsSettingOrganizationsArgs =
  {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    last?: InputMaybe<Scalars["Int"]>;
    orderBy?: InputMaybe<OrganizationOrder>;
    value: Scalars["Boolean"];
  };

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoOrganizationProjectsSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<OrganizationOrder>;
  value: Scalars["Boolean"];
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoOutsideCollaboratorsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  login?: InputMaybe<Scalars["String"]>;
  orderBy?: InputMaybe<EnterpriseMemberOrder>;
  query?: InputMaybe<Scalars["String"]>;
  visibility?: InputMaybe<RepositoryVisibility>;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoPendingAdminInvitationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<EnterpriseAdministratorInvitationOrder>;
  query?: InputMaybe<Scalars["String"]>;
  role?: InputMaybe<EnterpriseAdministratorRole>;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoPendingCollaboratorInvitationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<RepositoryInvitationOrder>;
  query?: InputMaybe<Scalars["String"]>;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoPendingMemberInvitationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query?: InputMaybe<Scalars["String"]>;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoRepositoryProjectsSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<OrganizationOrder>;
  value: Scalars["Boolean"];
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoSamlIdentityProviderSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<OrganizationOrder>;
  value: IdentityProviderConfigurationState;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoSupportEntitlementsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<EnterpriseMemberOrder>;
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoTeamDiscussionsSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<OrganizationOrder>;
  value: Scalars["Boolean"];
};

/** Enterprise information only visible to enterprise owners. */
export type EnterpriseOwnerInfoTwoFactorRequiredSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<OrganizationOrder>;
  value: Scalars["Boolean"];
};

/** The connection type for OrganizationInvitation. */
export type EnterprisePendingMemberInvitationConnection = {
  __typename?: "EnterprisePendingMemberInvitationConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterprisePendingMemberInvitationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
  /** Identifies the total count of unique users in the connection. */
  totalUniqueUserCount: Scalars["Int"];
};

/** An invitation to be a member in an enterprise organization. */
export type EnterprisePendingMemberInvitationEdge = {
  __typename?: "EnterprisePendingMemberInvitationEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /**
   * Whether the invitation has a license for the enterprise.
   * @deprecated All pending members consume a license Removal on 2020-07-01 UTC.
   */
  isUnlicensed: Scalars["Boolean"];
  /** The item at the end of the edge. */
  node?: Maybe<OrganizationInvitation>;
};

/** A subset of repository information queryable from an enterprise. */
export type EnterpriseRepositoryInfo = Node & {
  __typename?: "EnterpriseRepositoryInfo";
  id: Scalars["ID"];
  /** Identifies if the repository is private or internal. */
  isPrivate: Scalars["Boolean"];
  /** The repository's name. */
  name: Scalars["String"];
  /** The repository's name with owner. */
  nameWithOwner: Scalars["String"];
};

/** The connection type for EnterpriseRepositoryInfo. */
export type EnterpriseRepositoryInfoConnection = {
  __typename?: "EnterpriseRepositoryInfoConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseRepositoryInfoEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<EnterpriseRepositoryInfo>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type EnterpriseRepositoryInfoEdge = {
  __typename?: "EnterpriseRepositoryInfoEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<EnterpriseRepositoryInfo>;
};

/** An Enterprise Server installation. */
export type EnterpriseServerInstallation = Node & {
  __typename?: "EnterpriseServerInstallation";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The customer name to which the Enterprise Server installation belongs. */
  customerName: Scalars["String"];
  /** The host name of the Enterprise Server installation. */
  hostName: Scalars["String"];
  id: Scalars["ID"];
  /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
  isConnected: Scalars["Boolean"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** User accounts on this Enterprise Server installation. */
  userAccounts: EnterpriseServerUserAccountConnection;
  /** User accounts uploads for the Enterprise Server installation. */
  userAccountsUploads: EnterpriseServerUserAccountsUploadConnection;
};

/** An Enterprise Server installation. */
export type EnterpriseServerInstallationUserAccountsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<EnterpriseServerUserAccountOrder>;
};

/** An Enterprise Server installation. */
export type EnterpriseServerInstallationUserAccountsUploadsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<EnterpriseServerUserAccountsUploadOrder>;
};

/** The connection type for EnterpriseServerInstallation. */
export type EnterpriseServerInstallationConnection = {
  __typename?: "EnterpriseServerInstallationConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseServerInstallationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<EnterpriseServerInstallation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type EnterpriseServerInstallationEdge = {
  __typename?: "EnterpriseServerInstallationEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<EnterpriseServerInstallation>;
};

/** Ordering options for Enterprise Server installation connections. */
export type EnterpriseServerInstallationOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order Enterprise Server installations by. */
  field: EnterpriseServerInstallationOrderField;
};

/** Properties by which Enterprise Server installation connections can be ordered. */
export enum EnterpriseServerInstallationOrderField {
  /** Order Enterprise Server installations by creation time */
  CreatedAt = "CREATED_AT",
  /** Order Enterprise Server installations by customer name */
  CustomerName = "CUSTOMER_NAME",
  /** Order Enterprise Server installations by host name */
  HostName = "HOST_NAME",
}

/** A user account on an Enterprise Server installation. */
export type EnterpriseServerUserAccount = Node & {
  __typename?: "EnterpriseServerUserAccount";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** User emails belonging to this user account. */
  emails: EnterpriseServerUserAccountEmailConnection;
  /** The Enterprise Server installation on which this user account exists. */
  enterpriseServerInstallation: EnterpriseServerInstallation;
  id: Scalars["ID"];
  /** Whether the user account is a site administrator on the Enterprise Server installation. */
  isSiteAdmin: Scalars["Boolean"];
  /** The login of the user account on the Enterprise Server installation. */
  login: Scalars["String"];
  /** The profile name of the user account on the Enterprise Server installation. */
  profileName?: Maybe<Scalars["String"]>;
  /** The date and time when the user account was created on the Enterprise Server installation. */
  remoteCreatedAt: Scalars["DateTime"];
  /** The ID of the user account on the Enterprise Server installation. */
  remoteUserId: Scalars["Int"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** A user account on an Enterprise Server installation. */
export type EnterpriseServerUserAccountEmailsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<EnterpriseServerUserAccountEmailOrder>;
};

/** The connection type for EnterpriseServerUserAccount. */
export type EnterpriseServerUserAccountConnection = {
  __typename?: "EnterpriseServerUserAccountConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccount>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type EnterpriseServerUserAccountEdge = {
  __typename?: "EnterpriseServerUserAccountEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<EnterpriseServerUserAccount>;
};

/** An email belonging to a user account on an Enterprise Server installation. */
export type EnterpriseServerUserAccountEmail = Node & {
  __typename?: "EnterpriseServerUserAccountEmail";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The email address. */
  email: Scalars["String"];
  id: Scalars["ID"];
  /** Indicates whether this is the primary email of the associated user account. */
  isPrimary: Scalars["Boolean"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The user account to which the email belongs. */
  userAccount: EnterpriseServerUserAccount;
};

/** The connection type for EnterpriseServerUserAccountEmail. */
export type EnterpriseServerUserAccountEmailConnection = {
  __typename?: "EnterpriseServerUserAccountEmailConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountEmailEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccountEmail>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type EnterpriseServerUserAccountEmailEdge = {
  __typename?: "EnterpriseServerUserAccountEmailEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<EnterpriseServerUserAccountEmail>;
};

/** Ordering options for Enterprise Server user account email connections. */
export type EnterpriseServerUserAccountEmailOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order emails by. */
  field: EnterpriseServerUserAccountEmailOrderField;
};

/** Properties by which Enterprise Server user account email connections can be ordered. */
export enum EnterpriseServerUserAccountEmailOrderField {
  /** Order emails by email */
  Email = "EMAIL",
}

/** Ordering options for Enterprise Server user account connections. */
export type EnterpriseServerUserAccountOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order user accounts by. */
  field: EnterpriseServerUserAccountOrderField;
};

/** Properties by which Enterprise Server user account connections can be ordered. */
export enum EnterpriseServerUserAccountOrderField {
  /** Order user accounts by login */
  Login = "LOGIN",
  /** Order user accounts by creation time on the Enterprise Server installation */
  RemoteCreatedAt = "REMOTE_CREATED_AT",
}

/** A user accounts upload from an Enterprise Server installation. */
export type EnterpriseServerUserAccountsUpload = Node & {
  __typename?: "EnterpriseServerUserAccountsUpload";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The enterprise to which this upload belongs. */
  enterprise: Enterprise;
  /** The Enterprise Server installation for which this upload was generated. */
  enterpriseServerInstallation: EnterpriseServerInstallation;
  id: Scalars["ID"];
  /** The name of the file uploaded. */
  name: Scalars["String"];
  /** The synchronization state of the upload */
  syncState: EnterpriseServerUserAccountsUploadSyncState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** The connection type for EnterpriseServerUserAccountsUpload. */
export type EnterpriseServerUserAccountsUploadConnection = {
  __typename?: "EnterpriseServerUserAccountsUploadConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountsUploadEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccountsUpload>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type EnterpriseServerUserAccountsUploadEdge = {
  __typename?: "EnterpriseServerUserAccountsUploadEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<EnterpriseServerUserAccountsUpload>;
};

/** Ordering options for Enterprise Server user accounts upload connections. */
export type EnterpriseServerUserAccountsUploadOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order user accounts uploads by. */
  field: EnterpriseServerUserAccountsUploadOrderField;
};

/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
export enum EnterpriseServerUserAccountsUploadOrderField {
  /** Order user accounts uploads by creation time */
  CreatedAt = "CREATED_AT",
}

/** Synchronization state of the Enterprise Server user accounts upload */
export enum EnterpriseServerUserAccountsUploadSyncState {
  /** The synchronization of the upload failed. */
  Failure = "FAILURE",
  /** The synchronization of the upload is pending. */
  Pending = "PENDING",
  /** The synchronization of the upload succeeded. */
  Success = "SUCCESS",
}

/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export type EnterpriseUserAccount = Actor &
  Node & {
    __typename?: "EnterpriseUserAccount";
    /** A URL pointing to the enterprise user account's public avatar. */
    avatarUrl: Scalars["URI"];
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** The enterprise in which this user account exists. */
    enterprise: Enterprise;
    id: Scalars["ID"];
    /** An identifier for the enterprise user account, a login or email address */
    login: Scalars["String"];
    /** The name of the enterprise user account */
    name?: Maybe<Scalars["String"]>;
    /** A list of enterprise organizations this user is a member of. */
    organizations: EnterpriseOrganizationMembershipConnection;
    /** The HTTP path for this user. */
    resourcePath: Scalars["URI"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this user. */
    url: Scalars["URI"];
    /** The user within the enterprise. */
    user?: Maybe<User>;
  };

/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export type EnterpriseUserAccountAvatarUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export type EnterpriseUserAccountOrganizationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<OrganizationOrder>;
  query?: InputMaybe<Scalars["String"]>;
  role?: InputMaybe<EnterpriseUserAccountMembershipRole>;
};

/** The connection type for EnterpriseUserAccount. */
export type EnterpriseUserAccountConnection = {
  __typename?: "EnterpriseUserAccountConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnterpriseUserAccountEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<EnterpriseUserAccount>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type EnterpriseUserAccountEdge = {
  __typename?: "EnterpriseUserAccountEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<EnterpriseUserAccount>;
};

/** The possible roles for enterprise membership. */
export enum EnterpriseUserAccountMembershipRole {
  /** The user is a member of the enterprise membership. */
  Member = "MEMBER",
  /** The user is an owner of the enterprise membership. */
  Owner = "OWNER",
}

/** The possible GitHub Enterprise deployments where this user can exist. */
export enum EnterpriseUserDeployment {
  /** The user is part of a GitHub Enterprise Cloud deployment. */
  Cloud = "CLOUD",
  /** The user is part of a GitHub Enterprise Server deployment. */
  Server = "SERVER",
}

/** An environment. */
export type Environment = Node & {
  __typename?: "Environment";
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** The name of the environment */
  name: Scalars["String"];
  /** The protection rules defined for this environment */
  protectionRules: DeploymentProtectionRuleConnection;
};

/** An environment. */
export type EnvironmentProtectionRulesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for Environment. */
export type EnvironmentConnection = {
  __typename?: "EnvironmentConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EnvironmentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Environment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type EnvironmentEdge = {
  __typename?: "EnvironmentEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Environment>;
};

/** An external identity provisioned by SAML SSO or SCIM. */
export type ExternalIdentity = Node & {
  __typename?: "ExternalIdentity";
  /** The GUID for this identity */
  guid: Scalars["String"];
  id: Scalars["ID"];
  /** Organization invitation for this SCIM-provisioned external identity */
  organizationInvitation?: Maybe<OrganizationInvitation>;
  /** SAML Identity attributes */
  samlIdentity?: Maybe<ExternalIdentitySamlAttributes>;
  /** SCIM Identity attributes */
  scimIdentity?: Maybe<ExternalIdentityScimAttributes>;
  /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
  user?: Maybe<User>;
};

/** The connection type for ExternalIdentity. */
export type ExternalIdentityConnection = {
  __typename?: "ExternalIdentityConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ExternalIdentityEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ExternalIdentity>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ExternalIdentityEdge = {
  __typename?: "ExternalIdentityEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ExternalIdentity>;
};

/** SAML attributes for the External Identity */
export type ExternalIdentitySamlAttributes = {
  __typename?: "ExternalIdentitySamlAttributes";
  /** The emails associated with the SAML identity */
  emails?: Maybe<Array<UserEmailMetadata>>;
  /** Family name of the SAML identity */
  familyName?: Maybe<Scalars["String"]>;
  /** Given name of the SAML identity */
  givenName?: Maybe<Scalars["String"]>;
  /** The groups linked to this identity in IDP */
  groups?: Maybe<Array<Scalars["String"]>>;
  /** The NameID of the SAML identity */
  nameId?: Maybe<Scalars["String"]>;
  /** The userName of the SAML identity */
  username?: Maybe<Scalars["String"]>;
};

/** SCIM attributes for the External Identity */
export type ExternalIdentityScimAttributes = {
  __typename?: "ExternalIdentityScimAttributes";
  /** The emails associated with the SCIM identity */
  emails?: Maybe<Array<UserEmailMetadata>>;
  /** Family name of the SCIM identity */
  familyName?: Maybe<Scalars["String"]>;
  /** Given name of the SCIM identity */
  givenName?: Maybe<Scalars["String"]>;
  /** The groups linked to this identity in IDP */
  groups?: Maybe<Array<Scalars["String"]>>;
  /** The userName of the SCIM identity */
  username?: Maybe<Scalars["String"]>;
};

/** A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced. */
export type FileAddition = {
  /** The base64 encoded contents of the file */
  contents: Scalars["Base64String"];
  /** The path in the repository where the file will be located */
  path: Scalars["String"];
};

/**
 * A description of a set of changes to a file tree to be made as part of
 * a git commit, modeled as zero or more file `additions` and zero or more
 * file `deletions`.
 *
 * Both fields are optional; omitting both will produce a commit with no
 * file changes.
 *
 * `deletions` and `additions` describe changes to files identified
 * by their path in the git tree using unix-style path separators, i.e.
 * `/`.  The root of a git tree is an empty string, so paths are not
 * slash-prefixed.
 *
 * `path` values must be unique across all `additions` and `deletions`
 * provided.  Any duplication will result in a validation error.
 *
 * ### Encoding
 *
 * File contents must be provided in full for each `FileAddition`.
 *
 * The `contents` of a `FileAddition` must be encoded using RFC 4648
 * compliant base64, i.e. correct padding is required and no characters
 * outside the standard alphabet may be used.  Invalid base64
 * encoding will be rejected with a validation error.
 *
 * The encoded contents may be binary.
 *
 * For text files, no assumptions are made about the character encoding of
 * the file contents (after base64 decoding).  No charset transcoding or
 * line-ending normalization will be performed; it is the client's
 * responsibility to manage the character encoding of files they provide.
 * However, for maximum compatibility we recommend using UTF-8 encoding
 * and ensuring that all files in a repository use a consistent
 * line-ending convention (`\n` or `\r\n`), and that all files end
 * with a newline.
 *
 * ### Modeling file changes
 *
 * Each of the the five types of conceptual changes that can be made in a
 * git commit can be described using the `FileChanges` type as follows:
 *
 * 1. New file addition: create file `hello world\n` at path `docs/README.txt`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 * 2. Existing file modification: change existing `docs/README.txt` to have new
 *    content `new content here\n`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("new content here\n")
 *            }
 *          ]
 *        }
 *
 * 3. Existing file deletion: remove existing file `docs/README.txt`.
 *    Note that the path is required to exist -- specifying a
 *    path that does not exist on the given branch will abort the
 *    commit and return an error.
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt"
 *            }
 *          ]
 *        }
 *
 *
 * 4. File rename with no changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to the same content at
 *    `newdocs/README.txt`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 *
 * 5. File rename with changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to a file at path
 *    `newdocs/README.txt` with content `new contents\n`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("new contents\n")
 *            }
 *          ]
 *        }
 *
 */
export type FileChanges = {
  /** File to add or change. */
  additions?: InputMaybe<Array<FileAddition>>;
  /** Files to delete. */
  deletions?: InputMaybe<Array<FileDeletion>>;
};

/** A command to delete the file at the given path as part of a commit. */
export type FileDeletion = {
  /** The path to delete */
  path: Scalars["String"];
};

/** The possible viewed states of a file . */
export enum FileViewedState {
  /** The file has new changes since last viewed. */
  Dismissed = "DISMISSED",
  /** The file has not been marked as viewed. */
  Unviewed = "UNVIEWED",
  /** The file has been marked as viewed. */
  Viewed = "VIEWED",
}

/** Autogenerated input type of FollowUser */
export type FollowUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the user to follow. */
  userId: Scalars["ID"];
};

/** Autogenerated return type of FollowUser */
export type FollowUserPayload = {
  __typename?: "FollowUserPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The user that was followed. */
  user?: Maybe<User>;
};

/** The connection type for User. */
export type FollowerConnection = {
  __typename?: "FollowerConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** The connection type for User. */
export type FollowingConnection = {
  __typename?: "FollowingConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** A funding platform link for a repository. */
export type FundingLink = {
  __typename?: "FundingLink";
  /** The funding platform this link is for. */
  platform: FundingPlatform;
  /** The configured URL for this funding link. */
  url: Scalars["URI"];
};

/** The possible funding platforms for repository funding links. */
export enum FundingPlatform {
  /** Community Bridge funding platform. */
  CommunityBridge = "COMMUNITY_BRIDGE",
  /** Custom funding platform. */
  Custom = "CUSTOM",
  /** GitHub funding platform. */
  Github = "GITHUB",
  /** IssueHunt funding platform. */
  Issuehunt = "ISSUEHUNT",
  /** Ko-fi funding platform. */
  KoFi = "KO_FI",
  /** LFX Crowdfunding funding platform. */
  LfxCrowdfunding = "LFX_CROWDFUNDING",
  /** Liberapay funding platform. */
  Liberapay = "LIBERAPAY",
  /** Open Collective funding platform. */
  OpenCollective = "OPEN_COLLECTIVE",
  /** Otechie funding platform. */
  Otechie = "OTECHIE",
  /** Patreon funding platform. */
  Patreon = "PATREON",
  /** Tidelift funding platform. */
  Tidelift = "TIDELIFT",
}

/** A generic hovercard context with a message and icon */
export type GenericHovercardContext = HovercardContext & {
  __typename?: "GenericHovercardContext";
  /** A string describing this context */
  message: Scalars["String"];
  /** An octicon to accompany this context */
  octicon: Scalars["String"];
};

/** A Gist. */
export type Gist = Node &
  Starrable &
  UniformResourceLocatable & {
    __typename?: "Gist";
    /** A list of comments associated with the gist */
    comments: GistCommentConnection;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** The gist description. */
    description?: Maybe<Scalars["String"]>;
    /** The files in this gist. */
    files?: Maybe<Array<Maybe<GistFile>>>;
    /** A list of forks associated with the gist */
    forks: GistConnection;
    id: Scalars["ID"];
    /** Identifies if the gist is a fork. */
    isFork: Scalars["Boolean"];
    /** Whether the gist is public or not. */
    isPublic: Scalars["Boolean"];
    /** The gist name. */
    name: Scalars["String"];
    /** The gist owner. */
    owner?: Maybe<RepositoryOwner>;
    /** Identifies when the gist was last pushed to. */
    pushedAt?: Maybe<Scalars["DateTime"]>;
    /** The HTML path to this resource. */
    resourcePath: Scalars["URI"];
    /**
     * Returns a count of how many stargazers there are on this object
     *
     */
    stargazerCount: Scalars["Int"];
    /** A list of users who have starred this starrable. */
    stargazers: StargazerConnection;
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this Gist. */
    url: Scalars["URI"];
    /** Returns a boolean indicating whether the viewing user has starred this starrable. */
    viewerHasStarred: Scalars["Boolean"];
  };

/** A Gist. */
export type GistCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A Gist. */
export type GistFilesArgs = {
  limit?: InputMaybe<Scalars["Int"]>;
  oid?: InputMaybe<Scalars["GitObjectID"]>;
};

/** A Gist. */
export type GistForksArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<GistOrder>;
};

/** A Gist. */
export type GistStargazersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<StarOrder>;
};

/** Represents a comment on an Gist. */
export type GistComment = Comment &
  Deletable &
  Minimizable &
  Node &
  Updatable &
  UpdatableComment & {
    __typename?: "GistComment";
    /** The actor who authored the comment. */
    author?: Maybe<Actor>;
    /** Author's association with the gist. */
    authorAssociation: CommentAuthorAssociation;
    /** Identifies the comment body. */
    body: Scalars["String"];
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** The body rendered to text. */
    bodyText: Scalars["String"];
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The actor who edited the comment. */
    editor?: Maybe<Actor>;
    /** The associated gist. */
    gist: Gist;
    id: Scalars["ID"];
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"];
    /** Returns whether or not a comment has been minimized. */
    isMinimized: Scalars["Boolean"];
    /** The moment the editor made the last edit */
    lastEditedAt?: Maybe<Scalars["DateTime"]>;
    /** Returns why the comment was minimized. */
    minimizedReason?: Maybe<Scalars["String"]>;
    /** Identifies when the comment was published at. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** A list of edits to this content. */
    userContentEdits?: Maybe<UserContentEditConnection>;
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"];
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize: Scalars["Boolean"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"];
  };

/** Represents a comment on an Gist. */
export type GistCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for GistComment. */
export type GistCommentConnection = {
  __typename?: "GistCommentConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GistCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<GistComment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type GistCommentEdge = {
  __typename?: "GistCommentEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<GistComment>;
};

/** The connection type for Gist. */
export type GistConnection = {
  __typename?: "GistConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GistEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gist>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type GistEdge = {
  __typename?: "GistEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Gist>;
};

/** A file in a gist. */
export type GistFile = {
  __typename?: "GistFile";
  /** The file name encoded to remove characters that are invalid in URL paths. */
  encodedName?: Maybe<Scalars["String"]>;
  /** The gist file encoding. */
  encoding?: Maybe<Scalars["String"]>;
  /** The file extension from the file name. */
  extension?: Maybe<Scalars["String"]>;
  /** Indicates if this file is an image. */
  isImage: Scalars["Boolean"];
  /** Whether the file's contents were truncated. */
  isTruncated: Scalars["Boolean"];
  /** The programming language this file is written in. */
  language?: Maybe<Language>;
  /** The gist file name. */
  name?: Maybe<Scalars["String"]>;
  /** The gist file size in bytes. */
  size?: Maybe<Scalars["Int"]>;
  /** UTF8 text data or null if the file is binary */
  text?: Maybe<Scalars["String"]>;
};

/** A file in a gist. */
export type GistFileTextArgs = {
  truncate?: InputMaybe<Scalars["Int"]>;
};

/** Ordering options for gist connections */
export type GistOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order repositories by. */
  field: GistOrderField;
};

/** Properties by which gist connections can be ordered. */
export enum GistOrderField {
  /** Order gists by creation time */
  CreatedAt = "CREATED_AT",
  /** Order gists by push time */
  PushedAt = "PUSHED_AT",
  /** Order gists by update time */
  UpdatedAt = "UPDATED_AT",
}

/** The privacy of a Gist */
export enum GistPrivacy {
  /** Gists that are public and secret */
  All = "ALL",
  /** Public */
  Public = "PUBLIC",
  /** Secret */
  Secret = "SECRET",
}

/** Represents an actor in a Git commit (ie. an author or committer). */
export type GitActor = {
  __typename?: "GitActor";
  /** A URL pointing to the author's public avatar. */
  avatarUrl: Scalars["URI"];
  /** The timestamp of the Git action (authoring or committing). */
  date?: Maybe<Scalars["GitTimestamp"]>;
  /** The email in the Git commit. */
  email?: Maybe<Scalars["String"]>;
  /** The name in the Git commit. */
  name?: Maybe<Scalars["String"]>;
  /** The GitHub user corresponding to the email field. Null if no such user exists. */
  user?: Maybe<User>;
};

/** Represents an actor in a Git commit (ie. an author or committer). */
export type GitActorAvatarUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for GitActor. */
export type GitActorConnection = {
  __typename?: "GitActorConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GitActorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<GitActor>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type GitActorEdge = {
  __typename?: "GitActorEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<GitActor>;
};

/** Represents information about the GitHub instance. */
export type GitHubMetadata = {
  __typename?: "GitHubMetadata";
  /** Returns a String that's a SHA of `github-services` */
  gitHubServicesSha: Scalars["GitObjectID"];
  /** IP addresses that users connect to for git operations */
  gitIpAddresses?: Maybe<Array<Scalars["String"]>>;
  /** IP addresses that service hooks are sent from */
  hookIpAddresses?: Maybe<Array<Scalars["String"]>>;
  /** IP addresses that the importer connects from */
  importerIpAddresses?: Maybe<Array<Scalars["String"]>>;
  /** Whether or not users are verified */
  isPasswordAuthenticationVerifiable: Scalars["Boolean"];
  /** IP addresses for GitHub Pages' A records */
  pagesIpAddresses?: Maybe<Array<Scalars["String"]>>;
};

/** Represents a Git object. */
export type GitObject = {
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: Scalars["String"];
  /** The HTTP path for this Git object */
  commitResourcePath: Scalars["URI"];
  /** The HTTP URL for this Git object */
  commitUrl: Scalars["URI"];
  id: Scalars["ID"];
  /** The Git object ID */
  oid: Scalars["GitObjectID"];
  /** The Repository the Git object belongs to */
  repository: Repository;
};

/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
export type GitSignature = {
  /** Email used to sign this object. */
  email: Scalars["String"];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars["Boolean"];
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars["String"];
  /** ASCII-armored signature header from object. */
  signature: Scalars["String"];
  /** GitHub user corresponding to the email signing this commit. */
  signer?: Maybe<User>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars["Boolean"];
};

/** The state of a Git signature. */
export enum GitSignatureState {
  /** The signing certificate or its chain could not be verified */
  BadCert = "BAD_CERT",
  /** Invalid email used for signing */
  BadEmail = "BAD_EMAIL",
  /** Signing key expired */
  ExpiredKey = "EXPIRED_KEY",
  /** Internal error - the GPG verification service misbehaved */
  GpgverifyError = "GPGVERIFY_ERROR",
  /** Internal error - the GPG verification service is unavailable at the moment */
  GpgverifyUnavailable = "GPGVERIFY_UNAVAILABLE",
  /** Invalid signature */
  Invalid = "INVALID",
  /** Malformed signature */
  MalformedSig = "MALFORMED_SIG",
  /** The usage flags for the key that signed this don't allow signing */
  NotSigningKey = "NOT_SIGNING_KEY",
  /** Email used for signing not known to GitHub */
  NoUser = "NO_USER",
  /** Valid signature, though certificate revocation check failed */
  OcspError = "OCSP_ERROR",
  /** Valid signature, pending certificate revocation checking */
  OcspPending = "OCSP_PENDING",
  /** One or more certificates in chain has been revoked */
  OcspRevoked = "OCSP_REVOKED",
  /** Key used for signing not known to GitHub */
  UnknownKey = "UNKNOWN_KEY",
  /** Unknown signature type */
  UnknownSigType = "UNKNOWN_SIG_TYPE",
  /** Unsigned */
  Unsigned = "UNSIGNED",
  /** Email used for signing unverified on GitHub */
  UnverifiedEmail = "UNVERIFIED_EMAIL",
  /** Valid signature and verified by GitHub */
  Valid = "VALID",
}

/** Represents a GPG signature on a Commit or Tag. */
export type GpgSignature = GitSignature & {
  __typename?: "GpgSignature";
  /** Email used to sign this object. */
  email: Scalars["String"];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars["Boolean"];
  /** Hex-encoded ID of the key that signed this object. */
  keyId?: Maybe<Scalars["String"]>;
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars["String"];
  /** ASCII-armored signature header from object. */
  signature: Scalars["String"];
  /** GitHub user corresponding to the email signing this commit. */
  signer?: Maybe<User>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars["Boolean"];
};

/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */
export type GrantEnterpriseOrganizationsMigratorRoleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: Scalars["ID"];
  /** The login of the user to grant the migrator role */
  login: Scalars["String"];
};

/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
export type GrantEnterpriseOrganizationsMigratorRolePayload = {
  __typename?: "GrantEnterpriseOrganizationsMigratorRolePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The organizations that had the migrator role applied to for the given user. */
  organizations?: Maybe<OrganizationConnection>;
};

/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
export type GrantEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Autogenerated input type of GrantMigratorRole */
export type GrantMigratorRoleInput = {
  /** The user login or Team slug to grant the migrator role. */
  actor: Scalars["String"];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: ActorType;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization that the user/team belongs to. */
  organizationId: Scalars["ID"];
};

/** Autogenerated return type of GrantMigratorRole */
export type GrantMigratorRolePayload = {
  __typename?: "GrantMigratorRolePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Did the operation succeed? */
  success?: Maybe<Scalars["Boolean"]>;
};

/** Represents a 'head_ref_deleted' event on a given pull request. */
export type HeadRefDeletedEvent = Node & {
  __typename?: "HeadRefDeletedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the Ref associated with the `head_ref_deleted` event. */
  headRef?: Maybe<Ref>;
  /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
  headRefName: Scalars["String"];
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
};

/** Represents a 'head_ref_force_pushed' event on a given pull request. */
export type HeadRefForcePushedEvent = Node & {
  __typename?: "HeadRefForcePushedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
  afterCommit?: Maybe<Commit>;
  /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
  beforeCommit?: Maybe<Commit>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
  ref?: Maybe<Ref>;
};

/** Represents a 'head_ref_restored' event on a given pull request. */
export type HeadRefRestoredEvent = Node & {
  __typename?: "HeadRefRestoredEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
};

/** Detail needed to display a hovercard for a user */
export type Hovercard = {
  __typename?: "Hovercard";
  /** Each of the contexts for this hovercard */
  contexts: Array<HovercardContext>;
};

/** An individual line of a hovercard */
export type HovercardContext = {
  /** A string describing this context */
  message: Scalars["String"];
  /** An octicon to accompany this context */
  octicon: Scalars["String"];
};

/** The possible states in which authentication can be configured with an identity provider. */
export enum IdentityProviderConfigurationState {
  /** Authentication with an identity provider is configured but not enforced. */
  Configured = "CONFIGURED",
  /** Authentication with an identity provider is configured and enforced. */
  Enforced = "ENFORCED",
  /** Authentication with an identity provider is not configured. */
  Unconfigured = "UNCONFIGURED",
}

/** Autogenerated input type of InviteEnterpriseAdmin */
export type InviteEnterpriseAdminInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The email of the person to invite as an administrator. */
  email?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise to which you want to invite an administrator. */
  enterpriseId: Scalars["ID"];
  /** The login of a user to invite as an administrator. */
  invitee?: InputMaybe<Scalars["String"]>;
  /** The role of the administrator. */
  role?: InputMaybe<EnterpriseAdministratorRole>;
};

/** Autogenerated return type of InviteEnterpriseAdmin */
export type InviteEnterpriseAdminPayload = {
  __typename?: "InviteEnterpriseAdminPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The created enterprise administrator invitation. */
  invitation?: Maybe<EnterpriseAdministratorInvitation>;
};

/** The possible values for the IP allow list enabled setting. */
export enum IpAllowListEnabledSettingValue {
  /** The setting is disabled for the owner. */
  Disabled = "DISABLED",
  /** The setting is enabled for the owner. */
  Enabled = "ENABLED",
}

/** An IP address or range of addresses that is allowed to access an owner's resources. */
export type IpAllowListEntry = Node & {
  __typename?: "IpAllowListEntry";
  /** A single IP address or range of IP addresses in CIDR notation. */
  allowListValue: Scalars["String"];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Whether the entry is currently active. */
  isActive: Scalars["Boolean"];
  /** The name of the IP allow list entry. */
  name?: Maybe<Scalars["String"]>;
  /** The owner of the IP allow list entry. */
  owner: IpAllowListOwner;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** The connection type for IpAllowListEntry. */
export type IpAllowListEntryConnection = {
  __typename?: "IpAllowListEntryConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<IpAllowListEntryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<IpAllowListEntry>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type IpAllowListEntryEdge = {
  __typename?: "IpAllowListEntryEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<IpAllowListEntry>;
};

/** Ordering options for IP allow list entry connections. */
export type IpAllowListEntryOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order IP allow list entries by. */
  field: IpAllowListEntryOrderField;
};

/** Properties by which IP allow list entry connections can be ordered. */
export enum IpAllowListEntryOrderField {
  /** Order IP allow list entries by the allow list value. */
  AllowListValue = "ALLOW_LIST_VALUE",
  /** Order IP allow list entries by creation time. */
  CreatedAt = "CREATED_AT",
}

/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */
export enum IpAllowListForInstalledAppsEnabledSettingValue {
  /** The setting is disabled for the owner. */
  Disabled = "DISABLED",
  /** The setting is enabled for the owner. */
  Enabled = "ENABLED",
}

/** Types that can own an IP allow list. */
export type IpAllowListOwner = App | Enterprise | Organization;

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Issue = Assignable &
  Closable &
  Comment &
  Labelable &
  Lockable &
  Node &
  ProjectNextOwner &
  Reactable &
  RepositoryNode &
  Subscribable &
  UniformResourceLocatable &
  Updatable &
  UpdatableComment & {
    __typename?: "Issue";
    /** Reason that the conversation was locked. */
    activeLockReason?: Maybe<LockReason>;
    /** A list of Users assigned to this object. */
    assignees: UserConnection;
    /** The actor who authored the comment. */
    author?: Maybe<Actor>;
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation;
    /** Identifies the body of the issue. */
    body: Scalars["String"];
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** The http path for this issue body */
    bodyResourcePath: Scalars["URI"];
    /** Identifies the body of the issue rendered to text. */
    bodyText: Scalars["String"];
    /** The http URL for this issue body */
    bodyUrl: Scalars["URI"];
    /** `true` if the object is closed (definition of closed may depend on type) */
    closed: Scalars["Boolean"];
    /** Identifies the date and time when the object was closed. */
    closedAt?: Maybe<Scalars["DateTime"]>;
    /** A list of comments associated with the Issue. */
    comments: IssueCommentConnection;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The actor who edited the comment. */
    editor?: Maybe<Actor>;
    /** The hovercard information for this issue */
    hovercard: Hovercard;
    id: Scalars["ID"];
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"];
    /** Indicates whether or not this issue is currently pinned to the repository issues list */
    isPinned?: Maybe<Scalars["Boolean"]>;
    /** Is this issue read by the viewer */
    isReadByViewer?: Maybe<Scalars["Boolean"]>;
    /** A list of labels associated with the object. */
    labels?: Maybe<LabelConnection>;
    /** The moment the editor made the last edit */
    lastEditedAt?: Maybe<Scalars["DateTime"]>;
    /** `true` if the object is locked */
    locked: Scalars["Boolean"];
    /** Identifies the milestone associated with the issue. */
    milestone?: Maybe<Milestone>;
    /** Identifies the issue number. */
    number: Scalars["Int"];
    /** A list of Users that are participating in the Issue conversation. */
    participants: UserConnection;
    /** List of project cards associated with this issue. */
    projectCards: ProjectCardConnection;
    /** Find a project by project (beta) number. */
    projectNext?: Maybe<ProjectNext>;
    /** List of project (beta) items associated with this issue. */
    projectNextItems: ProjectNextItemConnection;
    /** A list of projects (beta) under the owner. */
    projectsNext: ProjectNextConnection;
    /** Identifies when the comment was published at. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: Maybe<Array<ReactionGroup>>;
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection;
    /** The repository associated with this node. */
    repository: Repository;
    /** The HTTP path for this issue */
    resourcePath: Scalars["URI"];
    /** Identifies the state of the issue. */
    state: IssueState;
    /**
     * A list of events, comments, commits, etc. associated with the issue.
     * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
     */
    timeline: IssueTimelineConnection;
    /** A list of events, comments, commits, etc. associated with the issue. */
    timelineItems: IssueTimelineItemsConnection;
    /** Identifies the issue title. */
    title: Scalars["String"];
    /** Identifies the issue title rendered to HTML. */
    titleHTML: Scalars["String"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this issue */
    url: Scalars["URI"];
    /** A list of edits to this content. */
    userContentEdits?: Maybe<UserContentEditConnection>;
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"];
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"];
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: Maybe<SubscriptionState>;
  };

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueAssigneesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueCommentOrder>;
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueHovercardArgs = {
  includeNotificationContexts?: InputMaybe<Scalars["Boolean"]>;
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueLabelsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<LabelOrder>;
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueParticipantsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueProjectCardsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueProjectNextArgs = {
  number: Scalars["Int"];
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueProjectNextItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  includeArchived?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueProjectsNextArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query?: InputMaybe<Scalars["String"]>;
  sortBy?: InputMaybe<ProjectNextOrderField>;
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueTimelineArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  since?: InputMaybe<Scalars["DateTime"]>;
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueTimelineItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  itemTypes?: InputMaybe<Array<IssueTimelineItemsItemType>>;
  last?: InputMaybe<Scalars["Int"]>;
  since?: InputMaybe<Scalars["DateTime"]>;
  skip?: InputMaybe<Scalars["Int"]>;
};

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type IssueUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Represents a comment on an Issue. */
export type IssueComment = Comment &
  Deletable &
  Minimizable &
  Node &
  Reactable &
  RepositoryNode &
  Updatable &
  UpdatableComment & {
    __typename?: "IssueComment";
    /** The actor who authored the comment. */
    author?: Maybe<Actor>;
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation;
    /** The body as Markdown. */
    body: Scalars["String"];
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** The body rendered to text. */
    bodyText: Scalars["String"];
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The actor who edited the comment. */
    editor?: Maybe<Actor>;
    id: Scalars["ID"];
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"];
    /** Returns whether or not a comment has been minimized. */
    isMinimized: Scalars["Boolean"];
    /** Identifies the issue associated with the comment. */
    issue: Issue;
    /** The moment the editor made the last edit */
    lastEditedAt?: Maybe<Scalars["DateTime"]>;
    /** Returns why the comment was minimized. */
    minimizedReason?: Maybe<Scalars["String"]>;
    /** Identifies when the comment was published at. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * Returns the pull request associated with the comment, if this comment was made on a
     * pull request.
     *
     */
    pullRequest?: Maybe<PullRequest>;
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: Maybe<Array<ReactionGroup>>;
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection;
    /** The repository associated with this node. */
    repository: Repository;
    /** The HTTP path for this issue comment */
    resourcePath: Scalars["URI"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this issue comment */
    url: Scalars["URI"];
    /** A list of edits to this content. */
    userContentEdits?: Maybe<UserContentEditConnection>;
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"];
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize: Scalars["Boolean"];
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"];
  };

/** Represents a comment on an Issue. */
export type IssueCommentReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** Represents a comment on an Issue. */
export type IssueCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for IssueComment. */
export type IssueCommentConnection = {
  __typename?: "IssueCommentConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<IssueCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<IssueComment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type IssueCommentEdge = {
  __typename?: "IssueCommentEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<IssueComment>;
};

/** Ways in which lists of issue comments can be ordered upon return. */
export type IssueCommentOrder = {
  /** The direction in which to order issue comments by the specified field. */
  direction: OrderDirection;
  /** The field in which to order issue comments by. */
  field: IssueCommentOrderField;
};

/** Properties by which issue comment connections can be ordered. */
export enum IssueCommentOrderField {
  /** Order issue comments by update time */
  UpdatedAt = "UPDATED_AT",
}

/** The connection type for Issue. */
export type IssueConnection = {
  __typename?: "IssueConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<IssueEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Issue>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** This aggregates issues opened by a user within one repository. */
export type IssueContributionsByRepository = {
  __typename?: "IssueContributionsByRepository";
  /** The issue contributions. */
  contributions: CreatedIssueContributionConnection;
  /** The repository in which the issues were opened. */
  repository: Repository;
};

/** This aggregates issues opened by a user within one repository. */
export type IssueContributionsByRepositoryContributionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ContributionOrder>;
};

/** An edge in a connection. */
export type IssueEdge = {
  __typename?: "IssueEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Issue>;
};

/** Ways in which to filter lists of issues. */
export type IssueFilters = {
  /** List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user. */
  assignee?: InputMaybe<Scalars["String"]>;
  /** List issues created by given name. */
  createdBy?: InputMaybe<Scalars["String"]>;
  /** List issues where the list of label names exist on the issue. */
  labels?: InputMaybe<Array<Scalars["String"]>>;
  /** List issues where the given name is mentioned in the issue. */
  mentioned?: InputMaybe<Scalars["String"]>;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestone?: InputMaybe<Scalars["String"]>;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestoneNumber?: InputMaybe<Scalars["String"]>;
  /** List issues that have been updated at or after the given date. */
  since?: InputMaybe<Scalars["DateTime"]>;
  /** List issues filtered by the list of states given. */
  states?: InputMaybe<Array<IssueState>>;
  /** List issues subscribed to by viewer. */
  viewerSubscribed?: InputMaybe<Scalars["Boolean"]>;
};

/** Used for return value of Repository.issueOrPullRequest. */
export type IssueOrPullRequest = Issue | PullRequest;

/** Ways in which lists of issues can be ordered upon return. */
export type IssueOrder = {
  /** The direction in which to order issues by the specified field. */
  direction: OrderDirection;
  /** The field in which to order issues by. */
  field: IssueOrderField;
};

/** Properties by which issue connections can be ordered. */
export enum IssueOrderField {
  /** Order issues by comment count */
  Comments = "COMMENTS",
  /** Order issues by creation time */
  CreatedAt = "CREATED_AT",
  /** Order issues by update time */
  UpdatedAt = "UPDATED_AT",
}

/** The possible states of an issue. */
export enum IssueState {
  /** An issue that has been closed */
  Closed = "CLOSED",
  /** An issue that is still open */
  Open = "OPEN",
}

/** A repository issue template. */
export type IssueTemplate = {
  __typename?: "IssueTemplate";
  /** The template purpose. */
  about?: Maybe<Scalars["String"]>;
  /** The suggested issue body. */
  body?: Maybe<Scalars["String"]>;
  /** The template name. */
  name: Scalars["String"];
  /** The suggested issue title. */
  title?: Maybe<Scalars["String"]>;
};

/** The connection type for IssueTimelineItem. */
export type IssueTimelineConnection = {
  __typename?: "IssueTimelineConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<IssueTimelineItemEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<IssueTimelineItem>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An item in an issue timeline */
export type IssueTimelineItem =
  | AssignedEvent
  | ClosedEvent
  | Commit
  | CrossReferencedEvent
  | DemilestonedEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MilestonedEvent
  | ReferencedEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnsubscribedEvent
  | UserBlockedEvent;

/** An edge in a connection. */
export type IssueTimelineItemEdge = {
  __typename?: "IssueTimelineItemEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<IssueTimelineItem>;
};

/** An item in an issue timeline */
export type IssueTimelineItems =
  | AddedToProjectEvent
  | AssignedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DisconnectedEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | ReferencedEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent;

/** The connection type for IssueTimelineItems. */
export type IssueTimelineItemsConnection = {
  __typename?: "IssueTimelineItemsConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<IssueTimelineItemsEdge>>>;
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount: Scalars["Int"];
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<IssueTimelineItems>>>;
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount: Scalars["Int"];
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** An edge in a connection. */
export type IssueTimelineItemsEdge = {
  __typename?: "IssueTimelineItemsEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<IssueTimelineItems>;
};

/** The possible item types found in a timeline. */
export enum IssueTimelineItemsItemType {
  /** Represents a 'added_to_project' event on a given issue or pull request. */
  AddedToProjectEvent = "ADDED_TO_PROJECT_EVENT",
  /** Represents an 'assigned' event on any assignable object. */
  AssignedEvent = "ASSIGNED_EVENT",
  /** Represents a 'closed' event on any `Closable`. */
  ClosedEvent = "CLOSED_EVENT",
  /** Represents a 'comment_deleted' event on a given issue or pull request. */
  CommentDeletedEvent = "COMMENT_DELETED_EVENT",
  /** Represents a 'connected' event on a given issue or pull request. */
  ConnectedEvent = "CONNECTED_EVENT",
  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
  ConvertedNoteToIssueEvent = "CONVERTED_NOTE_TO_ISSUE_EVENT",
  /** Represents a 'converted_to_discussion' event on a given issue. */
  ConvertedToDiscussionEvent = "CONVERTED_TO_DISCUSSION_EVENT",
  /** Represents a mention made by one issue or pull request to another. */
  CrossReferencedEvent = "CROSS_REFERENCED_EVENT",
  /** Represents a 'demilestoned' event on a given issue or pull request. */
  DemilestonedEvent = "DEMILESTONED_EVENT",
  /** Represents a 'disconnected' event on a given issue or pull request. */
  DisconnectedEvent = "DISCONNECTED_EVENT",
  /** Represents a comment on an Issue. */
  IssueComment = "ISSUE_COMMENT",
  /** Represents a 'labeled' event on a given issue or pull request. */
  LabeledEvent = "LABELED_EVENT",
  /** Represents a 'locked' event on a given issue or pull request. */
  LockedEvent = "LOCKED_EVENT",
  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
  MarkedAsDuplicateEvent = "MARKED_AS_DUPLICATE_EVENT",
  /** Represents a 'mentioned' event on a given issue or pull request. */
  MentionedEvent = "MENTIONED_EVENT",
  /** Represents a 'milestoned' event on a given issue or pull request. */
  MilestonedEvent = "MILESTONED_EVENT",
  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
  MovedColumnsInProjectEvent = "MOVED_COLUMNS_IN_PROJECT_EVENT",
  /** Represents a 'pinned' event on a given issue or pull request. */
  PinnedEvent = "PINNED_EVENT",
  /** Represents a 'referenced' event on a given `ReferencedSubject`. */
  ReferencedEvent = "REFERENCED_EVENT",
  /** Represents a 'removed_from_project' event on a given issue or pull request. */
  RemovedFromProjectEvent = "REMOVED_FROM_PROJECT_EVENT",
  /** Represents a 'renamed' event on a given issue or pull request */
  RenamedTitleEvent = "RENAMED_TITLE_EVENT",
  /** Represents a 'reopened' event on any `Closable`. */
  ReopenedEvent = "REOPENED_EVENT",
  /** Represents a 'subscribed' event on a given `Subscribable`. */
  SubscribedEvent = "SUBSCRIBED_EVENT",
  /** Represents a 'transferred' event on a given issue or pull request. */
  TransferredEvent = "TRANSFERRED_EVENT",
  /** Represents an 'unassigned' event on any assignable object. */
  UnassignedEvent = "UNASSIGNED_EVENT",
  /** Represents an 'unlabeled' event on a given issue or pull request. */
  UnlabeledEvent = "UNLABELED_EVENT",
  /** Represents an 'unlocked' event on a given issue or pull request. */
  UnlockedEvent = "UNLOCKED_EVENT",
  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
  UnmarkedAsDuplicateEvent = "UNMARKED_AS_DUPLICATE_EVENT",
  /** Represents an 'unpinned' event on a given issue or pull request. */
  UnpinnedEvent = "UNPINNED_EVENT",
  /** Represents an 'unsubscribed' event on a given `Subscribable`. */
  UnsubscribedEvent = "UNSUBSCRIBED_EVENT",
  /** Represents a 'user_blocked' event on a given user. */
  UserBlockedEvent = "USER_BLOCKED_EVENT",
}

/** Represents a user signing up for a GitHub account. */
export type JoinedGitHubContribution = Contribution & {
  __typename?: "JoinedGitHubContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars["Boolean"];
  /** When this contribution was made. */
  occurredAt: Scalars["DateTime"];
  /** The HTTP path for this contribution. */
  resourcePath: Scalars["URI"];
  /** The HTTP URL for this contribution. */
  url: Scalars["URI"];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
};

/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export type Label = Node & {
  __typename?: "Label";
  /** Identifies the label color. */
  color: Scalars["String"];
  /** Identifies the date and time when the label was created. */
  createdAt?: Maybe<Scalars["DateTime"]>;
  /** A brief description of this label. */
  description?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  /** Indicates whether or not this is a default label. */
  isDefault: Scalars["Boolean"];
  /** A list of issues associated with this label. */
  issues: IssueConnection;
  /** Identifies the label name. */
  name: Scalars["String"];
  /** A list of pull requests associated with this label. */
  pullRequests: PullRequestConnection;
  /** The repository associated with this label. */
  repository: Repository;
  /** The HTTP path for this label. */
  resourcePath: Scalars["URI"];
  /** Identifies the date and time when the label was last updated. */
  updatedAt?: Maybe<Scalars["DateTime"]>;
  /** The HTTP URL for this label. */
  url: Scalars["URI"];
};

/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export type LabelIssuesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  filterBy?: InputMaybe<IssueFilters>;
  first?: InputMaybe<Scalars["Int"]>;
  labels?: InputMaybe<Array<Scalars["String"]>>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueOrder>;
  states?: InputMaybe<Array<IssueState>>;
};

/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export type LabelPullRequestsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  baseRefName?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  headRefName?: InputMaybe<Scalars["String"]>;
  labels?: InputMaybe<Array<Scalars["String"]>>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueOrder>;
  states?: InputMaybe<Array<PullRequestState>>;
};

/** The connection type for Label. */
export type LabelConnection = {
  __typename?: "LabelConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<LabelEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Label>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type LabelEdge = {
  __typename?: "LabelEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Label>;
};

/** Ways in which lists of labels can be ordered upon return. */
export type LabelOrder = {
  /** The direction in which to order labels by the specified field. */
  direction: OrderDirection;
  /** The field in which to order labels by. */
  field: LabelOrderField;
};

/** Properties by which label connections can be ordered. */
export enum LabelOrderField {
  /** Order labels by creation time */
  CreatedAt = "CREATED_AT",
  /** Order labels by name  */
  Name = "NAME",
}

/** An object that can have labels assigned to it. */
export type Labelable = {
  /** A list of labels associated with the object. */
  labels?: Maybe<LabelConnection>;
};

/** An object that can have labels assigned to it. */
export type LabelableLabelsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<LabelOrder>;
};

/** Represents a 'labeled' event on a given issue or pull request. */
export type LabeledEvent = Node & {
  __typename?: "LabeledEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Identifies the label associated with the 'labeled' event. */
  label: Label;
  /** Identifies the `Labelable` associated with the event. */
  labelable: Labelable;
};

/** Represents a given language found in repositories. */
export type Language = Node & {
  __typename?: "Language";
  /** The color defined for the current language. */
  color?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  /** The name of the current language. */
  name: Scalars["String"];
};

/** A list of languages associated with the parent. */
export type LanguageConnection = {
  __typename?: "LanguageConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<LanguageEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Language>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
  /** The total size in bytes of files written in that language. */
  totalSize: Scalars["Int"];
};

/** Represents the language of a repository. */
export type LanguageEdge = {
  __typename?: "LanguageEdge";
  cursor: Scalars["String"];
  node: Language;
  /** The number of bytes of code written in the language. */
  size: Scalars["Int"];
};

/** Ordering options for language connections. */
export type LanguageOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order languages by. */
  field: LanguageOrderField;
};

/** Properties by which language connections can be ordered. */
export enum LanguageOrderField {
  /** Order languages by the size of all files containing the language */
  Size = "SIZE",
}

/** A repository's open source license */
export type License = Node & {
  __typename?: "License";
  /** The full text of the license */
  body: Scalars["String"];
  /** The conditions set by the license */
  conditions: Array<Maybe<LicenseRule>>;
  /** A human-readable description of the license */
  description?: Maybe<Scalars["String"]>;
  /** Whether the license should be featured */
  featured: Scalars["Boolean"];
  /** Whether the license should be displayed in license pickers */
  hidden: Scalars["Boolean"];
  id: Scalars["ID"];
  /** Instructions on how to implement the license */
  implementation?: Maybe<Scalars["String"]>;
  /** The lowercased SPDX ID of the license */
  key: Scalars["String"];
  /** The limitations set by the license */
  limitations: Array<Maybe<LicenseRule>>;
  /** The license full name specified by <https://spdx.org/licenses> */
  name: Scalars["String"];
  /** Customary short name if applicable (e.g, GPLv3) */
  nickname?: Maybe<Scalars["String"]>;
  /** The permissions set by the license */
  permissions: Array<Maybe<LicenseRule>>;
  /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
  pseudoLicense: Scalars["Boolean"];
  /** Short identifier specified by <https://spdx.org/licenses> */
  spdxId?: Maybe<Scalars["String"]>;
  /** URL to the license on <https://choosealicense.com> */
  url?: Maybe<Scalars["URI"]>;
};

/** Describes a License's conditions, permissions, and limitations */
export type LicenseRule = {
  __typename?: "LicenseRule";
  /** A description of the rule */
  description: Scalars["String"];
  /** The machine-readable rule key */
  key: Scalars["String"];
  /** The human-readable rule label */
  label: Scalars["String"];
};

/** Autogenerated input type of LinkRepositoryToProject */
export type LinkRepositoryToProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Project to link to a Repository */
  projectId: Scalars["ID"];
  /** The ID of the Repository to link to a Project. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of LinkRepositoryToProject */
export type LinkRepositoryToProjectPayload = {
  __typename?: "LinkRepositoryToProjectPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The linked Project. */
  project?: Maybe<Project>;
  /** The linked Repository. */
  repository?: Maybe<Repository>;
};

/** Autogenerated input type of LockLockable */
export type LockLockableInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A reason for why the item will be locked. */
  lockReason?: InputMaybe<LockReason>;
  /** ID of the item to be locked. */
  lockableId: Scalars["ID"];
};

/** Autogenerated return type of LockLockable */
export type LockLockablePayload = {
  __typename?: "LockLockablePayload";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The item that was locked. */
  lockedRecord?: Maybe<Lockable>;
};

/** The possible reasons that an issue or pull request was locked. */
export enum LockReason {
  /** The issue or pull request was locked because the conversation was off-topic. */
  OffTopic = "OFF_TOPIC",
  /** The issue or pull request was locked because the conversation was resolved. */
  Resolved = "RESOLVED",
  /** The issue or pull request was locked because the conversation was spam. */
  Spam = "SPAM",
  /** The issue or pull request was locked because the conversation was too heated. */
  TooHeated = "TOO_HEATED",
}

/** An object that can be locked. */
export type Lockable = {
  /** Reason that the conversation was locked. */
  activeLockReason?: Maybe<LockReason>;
  /** `true` if the object is locked */
  locked: Scalars["Boolean"];
};

/** Represents a 'locked' event on a given issue or pull request. */
export type LockedEvent = Node & {
  __typename?: "LockedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Reason that the conversation was locked (optional). */
  lockReason?: Maybe<LockReason>;
  /** Object that was locked. */
  lockable: Lockable;
};

/** A placeholder user for attribution of imported data on GitHub. */
export type Mannequin = Actor &
  Node &
  UniformResourceLocatable & {
    __typename?: "Mannequin";
    /** A URL pointing to the GitHub App's public avatar. */
    avatarUrl: Scalars["URI"];
    /** The user that has claimed the data attributed to this mannequin. */
    claimant?: Maybe<User>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The mannequin's email on the source instance. */
    email?: Maybe<Scalars["String"]>;
    id: Scalars["ID"];
    /** The username of the actor. */
    login: Scalars["String"];
    /** The HTML path to this resource. */
    resourcePath: Scalars["URI"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The URL to this resource. */
    url: Scalars["URI"];
  };

/** A placeholder user for attribution of imported data on GitHub. */
export type MannequinAvatarUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** Autogenerated input type of MarkDiscussionCommentAsAnswer */
export type MarkDiscussionCommentAsAnswerInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion comment to mark as an answer. */
  id: Scalars["ID"];
};

/** Autogenerated return type of MarkDiscussionCommentAsAnswer */
export type MarkDiscussionCommentAsAnswerPayload = {
  __typename?: "MarkDiscussionCommentAsAnswerPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The discussion that includes the chosen comment. */
  discussion?: Maybe<Discussion>;
};

/** Autogenerated input type of MarkFileAsViewed */
export type MarkFileAsViewedInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The path of the file to mark as viewed */
  path: Scalars["String"];
  /** The Node ID of the pull request. */
  pullRequestId: Scalars["ID"];
};

/** Autogenerated return type of MarkFileAsViewed */
export type MarkFileAsViewedPayload = {
  __typename?: "MarkFileAsViewedPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated pull request. */
  pullRequest?: Maybe<PullRequest>;
};

/** Autogenerated input type of MarkPullRequestReadyForReview */
export type MarkPullRequestReadyForReviewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the pull request to be marked as ready for review. */
  pullRequestId: Scalars["ID"];
};

/** Autogenerated return type of MarkPullRequestReadyForReview */
export type MarkPullRequestReadyForReviewPayload = {
  __typename?: "MarkPullRequestReadyForReviewPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The pull request that is ready for review. */
  pullRequest?: Maybe<PullRequest>;
};

/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
export type MarkedAsDuplicateEvent = Node & {
  __typename?: "MarkedAsDuplicateEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical?: Maybe<IssueOrPullRequest>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate?: Maybe<IssueOrPullRequest>;
  id: Scalars["ID"];
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository: Scalars["Boolean"];
};

/** A public description of a Marketplace category. */
export type MarketplaceCategory = Node & {
  __typename?: "MarketplaceCategory";
  /** The category's description. */
  description?: Maybe<Scalars["String"]>;
  /** The technical description of how apps listed in this category work with GitHub. */
  howItWorks?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  /** The category's name. */
  name: Scalars["String"];
  /** How many Marketplace listings have this as their primary category. */
  primaryListingCount: Scalars["Int"];
  /** The HTTP path for this Marketplace category. */
  resourcePath: Scalars["URI"];
  /** How many Marketplace listings have this as their secondary category. */
  secondaryListingCount: Scalars["Int"];
  /** The short name of the category used in its URL. */
  slug: Scalars["String"];
  /** The HTTP URL for this Marketplace category. */
  url: Scalars["URI"];
};

/** A listing in the GitHub integration marketplace. */
export type MarketplaceListing = Node & {
  __typename?: "MarketplaceListing";
  /** The GitHub App this listing represents. */
  app?: Maybe<App>;
  /** URL to the listing owner's company site. */
  companyUrl?: Maybe<Scalars["URI"]>;
  /** The HTTP path for configuring access to the listing's integration or OAuth app */
  configurationResourcePath: Scalars["URI"];
  /** The HTTP URL for configuring access to the listing's integration or OAuth app */
  configurationUrl: Scalars["URI"];
  /** URL to the listing's documentation. */
  documentationUrl?: Maybe<Scalars["URI"]>;
  /** The listing's detailed description. */
  extendedDescription?: Maybe<Scalars["String"]>;
  /** The listing's detailed description rendered to HTML. */
  extendedDescriptionHTML: Scalars["HTML"];
  /** The listing's introductory description. */
  fullDescription: Scalars["String"];
  /** The listing's introductory description rendered to HTML. */
  fullDescriptionHTML: Scalars["HTML"];
  /** Does this listing have any plans with a free trial? */
  hasPublishedFreeTrialPlans: Scalars["Boolean"];
  /** Does this listing have a terms of service link? */
  hasTermsOfService: Scalars["Boolean"];
  /** Whether the creator of the app is a verified org */
  hasVerifiedOwner: Scalars["Boolean"];
  /** A technical description of how this app works with GitHub. */
  howItWorks?: Maybe<Scalars["String"]>;
  /** The listing's technical description rendered to HTML. */
  howItWorksHTML: Scalars["HTML"];
  id: Scalars["ID"];
  /** URL to install the product to the viewer's account or organization. */
  installationUrl?: Maybe<Scalars["URI"]>;
  /** Whether this listing's app has been installed for the current viewer */
  installedForViewer: Scalars["Boolean"];
  /** Whether this listing has been removed from the Marketplace. */
  isArchived: Scalars["Boolean"];
  /** Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace. */
  isDraft: Scalars["Boolean"];
  /** Whether the product this listing represents is available as part of a paid plan. */
  isPaid: Scalars["Boolean"];
  /** Whether this listing has been approved for display in the Marketplace. */
  isPublic: Scalars["Boolean"];
  /** Whether this listing has been rejected by GitHub for display in the Marketplace. */
  isRejected: Scalars["Boolean"];
  /** Whether this listing has been approved for unverified display in the Marketplace. */
  isUnverified: Scalars["Boolean"];
  /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
  isUnverifiedPending: Scalars["Boolean"];
  /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromDraft: Scalars["Boolean"];
  /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromUnverified: Scalars["Boolean"];
  /** Whether this listing has been approved for verified display in the Marketplace. */
  isVerified: Scalars["Boolean"];
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor: Scalars["String"];
  /** URL for the listing's logo image. */
  logoUrl?: Maybe<Scalars["URI"]>;
  /** The listing's full name. */
  name: Scalars["String"];
  /** The listing's very short description without a trailing period or ampersands. */
  normalizedShortDescription: Scalars["String"];
  /** URL to the listing's detailed pricing. */
  pricingUrl?: Maybe<Scalars["URI"]>;
  /** The category that best describes the listing. */
  primaryCategory: MarketplaceCategory;
  /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
  privacyPolicyUrl: Scalars["URI"];
  /** The HTTP path for the Marketplace listing. */
  resourcePath: Scalars["URI"];
  /** The URLs for the listing's screenshots. */
  screenshotUrls: Array<Maybe<Scalars["String"]>>;
  /** An alternate category that describes the listing. */
  secondaryCategory?: Maybe<MarketplaceCategory>;
  /** The listing's very short description. */
  shortDescription: Scalars["String"];
  /** The short name of the listing used in its URL. */
  slug: Scalars["String"];
  /** URL to the listing's status page. */
  statusUrl?: Maybe<Scalars["URI"]>;
  /** An email address for support for this listing's app. */
  supportEmail?: Maybe<Scalars["String"]>;
  /** Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL. */
  supportUrl: Scalars["URI"];
  /** URL to the listing's terms of service. */
  termsOfServiceUrl?: Maybe<Scalars["URI"]>;
  /** The HTTP URL for the Marketplace listing. */
  url: Scalars["URI"];
  /** Can the current viewer add plans for this Marketplace listing. */
  viewerCanAddPlans: Scalars["Boolean"];
  /** Can the current viewer approve this Marketplace listing. */
  viewerCanApprove: Scalars["Boolean"];
  /** Can the current viewer delist this Marketplace listing. */
  viewerCanDelist: Scalars["Boolean"];
  /** Can the current viewer edit this Marketplace listing. */
  viewerCanEdit: Scalars["Boolean"];
  /**
   * Can the current viewer edit the primary and secondary category of this
   * Marketplace listing.
   *
   */
  viewerCanEditCategories: Scalars["Boolean"];
  /** Can the current viewer edit the plans for this Marketplace listing. */
  viewerCanEditPlans: Scalars["Boolean"];
  /**
   * Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again.
   *
   */
  viewerCanRedraft: Scalars["Boolean"];
  /**
   * Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely.
   *
   */
  viewerCanReject: Scalars["Boolean"];
  /**
   * Can the current viewer request this listing be reviewed for display in
   * the Marketplace as verified.
   *
   */
  viewerCanRequestApproval: Scalars["Boolean"];
  /**
   * Indicates whether the current user has an active subscription to this Marketplace listing.
   *
   */
  viewerHasPurchased: Scalars["Boolean"];
  /**
   * Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns.
   *
   */
  viewerHasPurchasedForAllOrganizations: Scalars["Boolean"];
  /**
   * Does the current viewer role allow them to administer this Marketplace listing.
   *
   */
  viewerIsListingAdmin: Scalars["Boolean"];
};

/** A listing in the GitHub integration marketplace. */
export type MarketplaceListingLogoUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** Look up Marketplace Listings */
export type MarketplaceListingConnection = {
  __typename?: "MarketplaceListingConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MarketplaceListingEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<MarketplaceListing>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type MarketplaceListingEdge = {
  __typename?: "MarketplaceListingEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<MarketplaceListing>;
};

/** Entities that have members who can set status messages. */
export type MemberStatusable = {
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses: UserStatusConnection;
};

/** Entities that have members who can set status messages. */
export type MemberStatusableMemberStatusesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<UserStatusOrder>;
};

/** Audit log entry for a members_can_delete_repos.clear event. */
export type MembersCanDeleteReposClearAuditEntry = AuditEntry &
  EnterpriseAuditEntryData &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "MembersCanDeleteReposClearAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: Maybe<Scalars["URI"]>;
    /** The slug of the enterprise. */
    enterpriseSlug?: Maybe<Scalars["String"]>;
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: Maybe<Scalars["URI"]>;
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a members_can_delete_repos.disable event. */
export type MembersCanDeleteReposDisableAuditEntry = AuditEntry &
  EnterpriseAuditEntryData &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "MembersCanDeleteReposDisableAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: Maybe<Scalars["URI"]>;
    /** The slug of the enterprise. */
    enterpriseSlug?: Maybe<Scalars["String"]>;
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: Maybe<Scalars["URI"]>;
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a members_can_delete_repos.enable event. */
export type MembersCanDeleteReposEnableAuditEntry = AuditEntry &
  EnterpriseAuditEntryData &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "MembersCanDeleteReposEnableAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: Maybe<Scalars["URI"]>;
    /** The slug of the enterprise. */
    enterpriseSlug?: Maybe<Scalars["String"]>;
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: Maybe<Scalars["URI"]>;
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Represents a 'mentioned' event on a given issue or pull request. */
export type MentionedEvent = Node & {
  __typename?: "MentionedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
};

/** Autogenerated input type of MergeBranch */
export type MergeBranchInput = {
  /** The email address to associate with this commit. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** The name of the base branch that the provided head will be merged into. */
  base: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Message to use for the merge commit. If omitted, a default will be used. */
  commitMessage?: InputMaybe<Scalars["String"]>;
  /** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
  head: Scalars["String"];
  /** The Node ID of the Repository containing the base branch that will be modified. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of MergeBranch */
export type MergeBranchPayload = {
  __typename?: "MergeBranchPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The resulting merge Commit. */
  mergeCommit?: Maybe<Commit>;
};

/** Autogenerated input type of MergePullRequest */
export type MergePullRequestInput = {
  /** The email address to associate with this merge. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Commit body to use for the merge commit; if omitted, a default message will be used */
  commitBody?: InputMaybe<Scalars["String"]>;
  /** Commit headline to use for the merge commit; if omitted, a default message will be used. */
  commitHeadline?: InputMaybe<Scalars["String"]>;
  /** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
  expectedHeadOid?: InputMaybe<Scalars["GitObjectID"]>;
  /** The merge method to use. If omitted, defaults to 'MERGE' */
  mergeMethod?: InputMaybe<PullRequestMergeMethod>;
  /** ID of the pull request to be merged. */
  pullRequestId: Scalars["ID"];
};

/** Autogenerated return type of MergePullRequest */
export type MergePullRequestPayload = {
  __typename?: "MergePullRequestPayload";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The pull request that was merged. */
  pullRequest?: Maybe<PullRequest>;
};

/** Whether or not a PullRequest can be merged. */
export enum MergeableState {
  /** The pull request cannot be merged due to merge conflicts. */
  Conflicting = "CONFLICTING",
  /** The pull request can be merged. */
  Mergeable = "MERGEABLE",
  /** The mergeability of the pull request is still being calculated. */
  Unknown = "UNKNOWN",
}

/** Represents a 'merged' event on a given pull request. */
export type MergedEvent = Node &
  UniformResourceLocatable & {
    __typename?: "MergedEvent";
    /** Identifies the actor who performed the event. */
    actor?: Maybe<Actor>;
    /** Identifies the commit associated with the `merge` event. */
    commit?: Maybe<Commit>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    id: Scalars["ID"];
    /** Identifies the Ref associated with the `merge` event. */
    mergeRef?: Maybe<Ref>;
    /** Identifies the name of the Ref associated with the `merge` event. */
    mergeRefName: Scalars["String"];
    /** PullRequest referenced by event. */
    pullRequest: PullRequest;
    /** The HTTP path for this merged event. */
    resourcePath: Scalars["URI"];
    /** The HTTP URL for this merged event. */
    url: Scalars["URI"];
  };

/** Represents an Octoshift migration. */
export type Migration = {
  /** The Octoshift migration flag to continue on error. */
  continueOnError: Scalars["Boolean"];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The reason the migration failed. */
  failureReason?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  /** The Octoshift migration source. */
  migrationSource: MigrationSource;
  /** The Octoshift migration source URL. */
  sourceUrl: Scalars["URI"];
  /** The Octoshift migration state. */
  state: MigrationState;
};

/** An Octoshift migration source. */
export type MigrationSource = Node & {
  __typename?: "MigrationSource";
  id: Scalars["ID"];
  /** The Octoshift migration source name. */
  name: Scalars["String"];
  /** The Octoshift migration source type. */
  type: MigrationSourceType;
  /** The Octoshift migration source URL. */
  url: Scalars["URI"];
};

/** Represents the different Octoshift migration sources. */
export enum MigrationSourceType {
  /** An Azure DevOps migration source. */
  AzureDevops = "AZURE_DEVOPS",
  /** A Bitbucket Server migration source. */
  BitbucketServer = "BITBUCKET_SERVER",
  /** A GitHub migration source. */
  Github = "GITHUB",
  /** A GitHub Migration API source. */
  GithubArchive = "GITHUB_ARCHIVE",
  /** A GitLab migration source. */
  Gitlab = "GITLAB",
}

/** The Octoshift migration state. */
export enum MigrationState {
  /** The Octoshift migration has failed. */
  Failed = "FAILED",
  /** The Octoshift migration is in progress. */
  InProgress = "IN_PROGRESS",
  /** The Octoshift migration has not started. */
  NotStarted = "NOT_STARTED",
  /** The Octoshift migration has been queued. */
  Queued = "QUEUED",
  /** The Octoshift migration has succeeded. */
  Succeeded = "SUCCEEDED",
}

/** Represents a Milestone object on a given repository. */
export type Milestone = Closable &
  Node &
  UniformResourceLocatable & {
    __typename?: "Milestone";
    /** `true` if the object is closed (definition of closed may depend on type) */
    closed: Scalars["Boolean"];
    /** Identifies the date and time when the object was closed. */
    closedAt?: Maybe<Scalars["DateTime"]>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Identifies the actor who created the milestone. */
    creator?: Maybe<Actor>;
    /** Identifies the description of the milestone. */
    description?: Maybe<Scalars["String"]>;
    /** Identifies the due date of the milestone. */
    dueOn?: Maybe<Scalars["DateTime"]>;
    id: Scalars["ID"];
    /** A list of issues associated with the milestone. */
    issues: IssueConnection;
    /** Identifies the number of the milestone. */
    number: Scalars["Int"];
    /** Identifies the percentage complete for the milestone */
    progressPercentage: Scalars["Float"];
    /** A list of pull requests associated with the milestone. */
    pullRequests: PullRequestConnection;
    /** The repository associated with this milestone. */
    repository: Repository;
    /** The HTTP path for this milestone */
    resourcePath: Scalars["URI"];
    /** Identifies the state of the milestone. */
    state: MilestoneState;
    /** Identifies the title of the milestone. */
    title: Scalars["String"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this milestone */
    url: Scalars["URI"];
  };

/** Represents a Milestone object on a given repository. */
export type MilestoneIssuesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  filterBy?: InputMaybe<IssueFilters>;
  first?: InputMaybe<Scalars["Int"]>;
  labels?: InputMaybe<Array<Scalars["String"]>>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueOrder>;
  states?: InputMaybe<Array<IssueState>>;
};

/** Represents a Milestone object on a given repository. */
export type MilestonePullRequestsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  baseRefName?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  headRefName?: InputMaybe<Scalars["String"]>;
  labels?: InputMaybe<Array<Scalars["String"]>>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueOrder>;
  states?: InputMaybe<Array<PullRequestState>>;
};

/** The connection type for Milestone. */
export type MilestoneConnection = {
  __typename?: "MilestoneConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MilestoneEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Milestone>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type MilestoneEdge = {
  __typename?: "MilestoneEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Milestone>;
};

/** Types that can be inside a Milestone. */
export type MilestoneItem = Issue | PullRequest;

/** Ordering options for milestone connections. */
export type MilestoneOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order milestones by. */
  field: MilestoneOrderField;
};

/** Properties by which milestone connections can be ordered. */
export enum MilestoneOrderField {
  /** Order milestones by when they were created. */
  CreatedAt = "CREATED_AT",
  /** Order milestones by when they are due. */
  DueDate = "DUE_DATE",
  /** Order milestones by their number. */
  Number = "NUMBER",
  /** Order milestones by when they were last updated. */
  UpdatedAt = "UPDATED_AT",
}

/** The possible states of a milestone. */
export enum MilestoneState {
  /** A milestone that has been closed. */
  Closed = "CLOSED",
  /** A milestone that is still open. */
  Open = "OPEN",
}

/** Represents a 'milestoned' event on a given issue or pull request. */
export type MilestonedEvent = Node & {
  __typename?: "MilestonedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Identifies the milestone title associated with the 'milestoned' event. */
  milestoneTitle: Scalars["String"];
  /** Object referenced by event. */
  subject: MilestoneItem;
};

/** Entities that can be minimized. */
export type Minimizable = {
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars["Boolean"];
  /** Returns why the comment was minimized. */
  minimizedReason?: Maybe<Scalars["String"]>;
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars["Boolean"];
};

/** Autogenerated input type of MinimizeComment */
export type MinimizeCommentInput = {
  /** The classification of comment */
  classifier: ReportedContentClassifiers;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars["ID"];
};

/** Autogenerated return type of MinimizeComment */
export type MinimizeCommentPayload = {
  __typename?: "MinimizeCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The comment that was minimized. */
  minimizedComment?: Maybe<Minimizable>;
};

/** Autogenerated input type of MoveProjectCard */
export type MoveProjectCardInput = {
  /** Place the new card after the card with this id. Pass null to place it at the top. */
  afterCardId?: InputMaybe<Scalars["ID"]>;
  /** The id of the card to move. */
  cardId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the column to move it into. */
  columnId: Scalars["ID"];
};

/** Autogenerated return type of MoveProjectCard */
export type MoveProjectCardPayload = {
  __typename?: "MoveProjectCardPayload";
  /** The new edge of the moved card. */
  cardEdge?: Maybe<ProjectCardEdge>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of MoveProjectColumn */
export type MoveProjectColumnInput = {
  /** Place the new column after the column with this id. Pass null to place it at the front. */
  afterColumnId?: InputMaybe<Scalars["ID"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the column to move. */
  columnId: Scalars["ID"];
};

/** Autogenerated return type of MoveProjectColumn */
export type MoveProjectColumnPayload = {
  __typename?: "MoveProjectColumnPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new edge of the moved column. */
  columnEdge?: Maybe<ProjectColumnEdge>;
};

/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
export type MovedColumnsInProjectEvent = Node & {
  __typename?: "MovedColumnsInProjectEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
};

/** The root query for implementing GraphQL mutations. */
export type Mutation = {
  __typename?: "Mutation";
  /** Clear all of a customer's queued migrations */
  abortQueuedMigrations?: Maybe<AbortQueuedMigrationsPayload>;
  /** Accepts a pending invitation for a user to become an administrator of an enterprise. */
  acceptEnterpriseAdministratorInvitation?: Maybe<AcceptEnterpriseAdministratorInvitationPayload>;
  /** Applies a suggested topic to the repository. */
  acceptTopicSuggestion?: Maybe<AcceptTopicSuggestionPayload>;
  /** Adds assignees to an assignable object. */
  addAssigneesToAssignable?: Maybe<AddAssigneesToAssignablePayload>;
  /** Adds a comment to an Issue or Pull Request. */
  addComment?: Maybe<AddCommentPayload>;
  /** Adds a comment to a Discussion, possibly as a reply to another comment. */
  addDiscussionComment?: Maybe<AddDiscussionCommentPayload>;
  /** Adds a support entitlement to an enterprise member. */
  addEnterpriseSupportEntitlement?: Maybe<AddEnterpriseSupportEntitlementPayload>;
  /** Adds labels to a labelable object. */
  addLabelsToLabelable?: Maybe<AddLabelsToLabelablePayload>;
  /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
  addProjectCard?: Maybe<AddProjectCardPayload>;
  /** Adds a column to a Project. */
  addProjectColumn?: Maybe<AddProjectColumnPayload>;
  /** Adds an existing item (Issue or PullRequest) to a Project. */
  addProjectNextItem?: Maybe<AddProjectNextItemPayload>;
  /** Adds a review to a Pull Request. */
  addPullRequestReview?: Maybe<AddPullRequestReviewPayload>;
  /** Adds a comment to a review. */
  addPullRequestReviewComment?: Maybe<AddPullRequestReviewCommentPayload>;
  /** Adds a new thread to a pending Pull Request Review. */
  addPullRequestReviewThread?: Maybe<AddPullRequestReviewThreadPayload>;
  /** Adds a reaction to a subject. */
  addReaction?: Maybe<AddReactionPayload>;
  /** Adds a star to a Starrable. */
  addStar?: Maybe<AddStarPayload>;
  /** Add an upvote to a discussion or discussion comment. */
  addUpvote?: Maybe<AddUpvotePayload>;
  /** Adds a verifiable domain to an owning account. */
  addVerifiableDomain?: Maybe<AddVerifiableDomainPayload>;
  /** Approve all pending deployments under one or more environments */
  approveDeployments?: Maybe<ApproveDeploymentsPayload>;
  /** Approve a verifiable domain for notification delivery. */
  approveVerifiableDomain?: Maybe<ApproveVerifiableDomainPayload>;
  /** Marks a repository as archived. */
  archiveRepository?: Maybe<ArchiveRepositoryPayload>;
  /** Cancels a pending invitation for an administrator to join an enterprise. */
  cancelEnterpriseAdminInvitation?: Maybe<CancelEnterpriseAdminInvitationPayload>;
  /** Cancel an active sponsorship. */
  cancelSponsorship?: Maybe<CancelSponsorshipPayload>;
  /** Update your status on GitHub. */
  changeUserStatus?: Maybe<ChangeUserStatusPayload>;
  /** Clears all labels from a labelable object. */
  clearLabelsFromLabelable?: Maybe<ClearLabelsFromLabelablePayload>;
  /** Creates a new project by cloning configuration from an existing project. */
  cloneProject?: Maybe<CloneProjectPayload>;
  /** Create a new repository with the same files and directory structure as a template repository. */
  cloneTemplateRepository?: Maybe<CloneTemplateRepositoryPayload>;
  /** Close an issue. */
  closeIssue?: Maybe<CloseIssuePayload>;
  /** Close a pull request. */
  closePullRequest?: Maybe<ClosePullRequestPayload>;
  /** Convert a project note card to one associated with a newly created issue. */
  convertProjectCardNoteToIssue?: Maybe<ConvertProjectCardNoteToIssuePayload>;
  /** Converts a pull request to draft */
  convertPullRequestToDraft?: Maybe<ConvertPullRequestToDraftPayload>;
  /** Create a new branch protection rule */
  createBranchProtectionRule?: Maybe<CreateBranchProtectionRulePayload>;
  /** Create a check run. */
  createCheckRun?: Maybe<CreateCheckRunPayload>;
  /** Create a check suite */
  createCheckSuite?: Maybe<CreateCheckSuitePayload>;
  /**
   * Appends a commit to the given branch as the authenticated user.
   *
   * This mutation creates a commit whose parent is the HEAD of the provided
   * branch and also updates that branch to point to the new commit.
   * It can be thought of as similar to `git commit`.
   *
   * ### Locating a Branch
   *
   * Commits are appended to a `branch` of type `Ref`.
   * This must refer to a git branch (i.e.  the fully qualified path must
   * begin with `refs/heads/`, although including this prefix is optional.
   *
   * Callers may specify the `branch` to commit to either by its global node
   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
   * more details see the documentation for `CommittableBranch`.
   *
   * ### Describing Changes
   *
   * `fileChanges` are specified as a `FilesChanges` object describing
   * `FileAdditions` and `FileDeletions`.
   *
   * Please see the documentation for `FileChanges` for more information on
   * how to use this argument to describe any set of file changes.
   *
   * ### Authorship
   *
   * Similar to the web commit interface, this mutation does not support
   * specifying the author or committer of the commit and will not add
   * support for this in the future.
   *
   * A commit created by a successful execution of this mutation will be
   * authored by the owner of the credential which authenticates the API
   * request.  The committer will be identical to that of commits authored
   * using the web interface.
   *
   * If you need full control over author and committer information, please
   * use the Git Database REST API instead.
   *
   * ### Commit Signing
   *
   * Commits made using this mutation are automatically signed by GitHub if
   * supported and will be marked as verified in the user interface.
   *
   */
  createCommitOnBranch?: Maybe<CreateCommitOnBranchPayload>;
  /** Create a discussion. */
  createDiscussion?: Maybe<CreateDiscussionPayload>;
  /** Creates an organization as part of an enterprise account. */
  createEnterpriseOrganization?: Maybe<CreateEnterpriseOrganizationPayload>;
  /** Creates an environment or simply returns it if already exists. */
  createEnvironment?: Maybe<CreateEnvironmentPayload>;
  /** Creates a new IP allow list entry. */
  createIpAllowListEntry?: Maybe<CreateIpAllowListEntryPayload>;
  /** Creates a new issue. */
  createIssue?: Maybe<CreateIssuePayload>;
  /** Creates an Octoshift migration source. */
  createMigrationSource?: Maybe<CreateMigrationSourcePayload>;
  /** Creates a new project. */
  createProject?: Maybe<CreateProjectPayload>;
  /** Create a new pull request */
  createPullRequest?: Maybe<CreatePullRequestPayload>;
  /** Create a new Git Ref. */
  createRef?: Maybe<CreateRefPayload>;
  /** Create a new repository. */
  createRepository?: Maybe<CreateRepositoryPayload>;
  /** Create a new payment tier for your GitHub Sponsors profile. */
  createSponsorsTier?: Maybe<CreateSponsorsTierPayload>;
  /** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */
  createSponsorship?: Maybe<CreateSponsorshipPayload>;
  /** Creates a new team discussion. */
  createTeamDiscussion?: Maybe<CreateTeamDiscussionPayload>;
  /** Creates a new team discussion comment. */
  createTeamDiscussionComment?: Maybe<CreateTeamDiscussionCommentPayload>;
  /** Rejects a suggested topic for the repository. */
  declineTopicSuggestion?: Maybe<DeclineTopicSuggestionPayload>;
  /** Delete a branch protection rule */
  deleteBranchProtectionRule?: Maybe<DeleteBranchProtectionRulePayload>;
  /** Deletes a deployment. */
  deleteDeployment?: Maybe<DeleteDeploymentPayload>;
  /** Delete a discussion and all of its replies. */
  deleteDiscussion?: Maybe<DeleteDiscussionPayload>;
  /** Delete a discussion comment. If it has replies, wipe it instead. */
  deleteDiscussionComment?: Maybe<DeleteDiscussionCommentPayload>;
  /** Deletes an environment */
  deleteEnvironment?: Maybe<DeleteEnvironmentPayload>;
  /** Deletes an IP allow list entry. */
  deleteIpAllowListEntry?: Maybe<DeleteIpAllowListEntryPayload>;
  /** Deletes an Issue object. */
  deleteIssue?: Maybe<DeleteIssuePayload>;
  /** Deletes an IssueComment object. */
  deleteIssueComment?: Maybe<DeleteIssueCommentPayload>;
  /** Deletes a project. */
  deleteProject?: Maybe<DeleteProjectPayload>;
  /** Deletes a project card. */
  deleteProjectCard?: Maybe<DeleteProjectCardPayload>;
  /** Deletes a project column. */
  deleteProjectColumn?: Maybe<DeleteProjectColumnPayload>;
  /** Deletes an item from a Project. */
  deleteProjectNextItem?: Maybe<DeleteProjectNextItemPayload>;
  /** Deletes a pull request review. */
  deletePullRequestReview?: Maybe<DeletePullRequestReviewPayload>;
  /** Deletes a pull request review comment. */
  deletePullRequestReviewComment?: Maybe<DeletePullRequestReviewCommentPayload>;
  /** Delete a Git Ref. */
  deleteRef?: Maybe<DeleteRefPayload>;
  /** Deletes a team discussion. */
  deleteTeamDiscussion?: Maybe<DeleteTeamDiscussionPayload>;
  /** Deletes a team discussion comment. */
  deleteTeamDiscussionComment?: Maybe<DeleteTeamDiscussionCommentPayload>;
  /** Deletes a verifiable domain. */
  deleteVerifiableDomain?: Maybe<DeleteVerifiableDomainPayload>;
  /** Disable auto merge on the given pull request */
  disablePullRequestAutoMerge?: Maybe<DisablePullRequestAutoMergePayload>;
  /** Dismisses an approved or rejected pull request review. */
  dismissPullRequestReview?: Maybe<DismissPullRequestReviewPayload>;
  /** Dismisses the Dependabot alert. */
  dismissRepositoryVulnerabilityAlert?: Maybe<DismissRepositoryVulnerabilityAlertPayload>;
  /** Enable the default auto-merge on a pull request. */
  enablePullRequestAutoMerge?: Maybe<EnablePullRequestAutoMergePayload>;
  /** Follow a user. */
  followUser?: Maybe<FollowUserPayload>;
  /** Grant the migrator role to a user for all organizations under an enterprise account. */
  grantEnterpriseOrganizationsMigratorRole?: Maybe<GrantEnterpriseOrganizationsMigratorRolePayload>;
  /** Grant the migrator role to a user or a team. */
  grantMigratorRole?: Maybe<GrantMigratorRolePayload>;
  /** Invite someone to become an administrator of the enterprise. */
  inviteEnterpriseAdmin?: Maybe<InviteEnterpriseAdminPayload>;
  /** Creates a repository link for a project. */
  linkRepositoryToProject?: Maybe<LinkRepositoryToProjectPayload>;
  /** Lock a lockable object */
  lockLockable?: Maybe<LockLockablePayload>;
  /** Mark a discussion comment as the chosen answer for discussions in an answerable category. */
  markDiscussionCommentAsAnswer?: Maybe<MarkDiscussionCommentAsAnswerPayload>;
  /** Mark a pull request file as viewed */
  markFileAsViewed?: Maybe<MarkFileAsViewedPayload>;
  /** Marks a pull request ready for review. */
  markPullRequestReadyForReview?: Maybe<MarkPullRequestReadyForReviewPayload>;
  /** Merge a head into a branch. */
  mergeBranch?: Maybe<MergeBranchPayload>;
  /** Merge a pull request. */
  mergePullRequest?: Maybe<MergePullRequestPayload>;
  /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
  minimizeComment?: Maybe<MinimizeCommentPayload>;
  /** Moves a project card to another place. */
  moveProjectCard?: Maybe<MoveProjectCardPayload>;
  /** Moves a project column to another place. */
  moveProjectColumn?: Maybe<MoveProjectColumnPayload>;
  /** Pin an issue to a repository */
  pinIssue?: Maybe<PinIssuePayload>;
  /** Regenerates the identity provider recovery codes for an enterprise */
  regenerateEnterpriseIdentityProviderRecoveryCodes?: Maybe<RegenerateEnterpriseIdentityProviderRecoveryCodesPayload>;
  /** Regenerates a verifiable domain's verification token. */
  regenerateVerifiableDomainToken?: Maybe<RegenerateVerifiableDomainTokenPayload>;
  /** Reject all pending deployments under one or more environments */
  rejectDeployments?: Maybe<RejectDeploymentsPayload>;
  /** Removes assignees from an assignable object. */
  removeAssigneesFromAssignable?: Maybe<RemoveAssigneesFromAssignablePayload>;
  /** Removes an administrator from the enterprise. */
  removeEnterpriseAdmin?: Maybe<RemoveEnterpriseAdminPayload>;
  /** Removes the identity provider from an enterprise */
  removeEnterpriseIdentityProvider?: Maybe<RemoveEnterpriseIdentityProviderPayload>;
  /** Removes an organization from the enterprise */
  removeEnterpriseOrganization?: Maybe<RemoveEnterpriseOrganizationPayload>;
  /** Removes a support entitlement from an enterprise member. */
  removeEnterpriseSupportEntitlement?: Maybe<RemoveEnterpriseSupportEntitlementPayload>;
  /** Removes labels from a Labelable object. */
  removeLabelsFromLabelable?: Maybe<RemoveLabelsFromLabelablePayload>;
  /** Removes outside collaborator from all repositories in an organization. */
  removeOutsideCollaborator?: Maybe<RemoveOutsideCollaboratorPayload>;
  /** Removes a reaction from a subject. */
  removeReaction?: Maybe<RemoveReactionPayload>;
  /** Removes a star from a Starrable. */
  removeStar?: Maybe<RemoveStarPayload>;
  /** Remove an upvote to a discussion or discussion comment. */
  removeUpvote?: Maybe<RemoveUpvotePayload>;
  /** Reopen a issue. */
  reopenIssue?: Maybe<ReopenIssuePayload>;
  /** Reopen a pull request. */
  reopenPullRequest?: Maybe<ReopenPullRequestPayload>;
  /** Set review requests on a pull request. */
  requestReviews?: Maybe<RequestReviewsPayload>;
  /** Rerequests an existing check suite. */
  rerequestCheckSuite?: Maybe<RerequestCheckSuitePayload>;
  /** Marks a review thread as resolved. */
  resolveReviewThread?: Maybe<ResolveReviewThreadPayload>;
  /** Revoke the migrator role to a user for all organizations under an enterprise account. */
  revokeEnterpriseOrganizationsMigratorRole?: Maybe<RevokeEnterpriseOrganizationsMigratorRolePayload>;
  /** Revoke the migrator role from a user or a team. */
  revokeMigratorRole?: Maybe<RevokeMigratorRolePayload>;
  /** Creates or updates the identity provider for an enterprise. */
  setEnterpriseIdentityProvider?: Maybe<SetEnterpriseIdentityProviderPayload>;
  /** Set an organization level interaction limit for an organization's public repositories. */
  setOrganizationInteractionLimit?: Maybe<SetOrganizationInteractionLimitPayload>;
  /** Sets an interaction limit setting for a repository. */
  setRepositoryInteractionLimit?: Maybe<SetRepositoryInteractionLimitPayload>;
  /** Set a user level interaction limit for an user's public repositories. */
  setUserInteractionLimit?: Maybe<SetUserInteractionLimitPayload>;
  /** Start a repository migration. */
  startRepositoryMigration?: Maybe<StartRepositoryMigrationPayload>;
  /** Submits a pending pull request review. */
  submitPullRequestReview?: Maybe<SubmitPullRequestReviewPayload>;
  /** Transfer an issue to a different repository */
  transferIssue?: Maybe<TransferIssuePayload>;
  /** Unarchives a repository. */
  unarchiveRepository?: Maybe<UnarchiveRepositoryPayload>;
  /** Unfollow a user. */
  unfollowUser?: Maybe<UnfollowUserPayload>;
  /** Deletes a repository link from a project. */
  unlinkRepositoryFromProject?: Maybe<UnlinkRepositoryFromProjectPayload>;
  /** Unlock a lockable object */
  unlockLockable?: Maybe<UnlockLockablePayload>;
  /** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */
  unmarkDiscussionCommentAsAnswer?: Maybe<UnmarkDiscussionCommentAsAnswerPayload>;
  /** Unmark a pull request file as viewed */
  unmarkFileAsViewed?: Maybe<UnmarkFileAsViewedPayload>;
  /** Unmark an issue as a duplicate of another issue. */
  unmarkIssueAsDuplicate?: Maybe<UnmarkIssueAsDuplicatePayload>;
  /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
  unminimizeComment?: Maybe<UnminimizeCommentPayload>;
  /** Unpin a pinned issue from a repository */
  unpinIssue?: Maybe<UnpinIssuePayload>;
  /** Marks a review thread as unresolved. */
  unresolveReviewThread?: Maybe<UnresolveReviewThreadPayload>;
  /** Create a new branch protection rule */
  updateBranchProtectionRule?: Maybe<UpdateBranchProtectionRulePayload>;
  /** Update a check run */
  updateCheckRun?: Maybe<UpdateCheckRunPayload>;
  /** Modifies the settings of an existing check suite */
  updateCheckSuitePreferences?: Maybe<UpdateCheckSuitePreferencesPayload>;
  /** Update a discussion */
  updateDiscussion?: Maybe<UpdateDiscussionPayload>;
  /** Update the contents of a comment on a Discussion */
  updateDiscussionComment?: Maybe<UpdateDiscussionCommentPayload>;
  /** Updates the role of an enterprise administrator. */
  updateEnterpriseAdministratorRole?: Maybe<UpdateEnterpriseAdministratorRolePayload>;
  /** Sets whether private repository forks are enabled for an enterprise. */
  updateEnterpriseAllowPrivateRepositoryForkingSetting?: Maybe<UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload>;
  /** Sets the base repository permission for organizations in an enterprise. */
  updateEnterpriseDefaultRepositoryPermissionSetting?: Maybe<UpdateEnterpriseDefaultRepositoryPermissionSettingPayload>;
  /** Sets whether organization members with admin permissions on a repository can change repository visibility. */
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: Maybe<UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload>;
  /** Sets the members can create repositories setting for an enterprise. */
  updateEnterpriseMembersCanCreateRepositoriesSetting?: Maybe<UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload>;
  /** Sets the members can delete issues setting for an enterprise. */
  updateEnterpriseMembersCanDeleteIssuesSetting?: Maybe<UpdateEnterpriseMembersCanDeleteIssuesSettingPayload>;
  /** Sets the members can delete repositories setting for an enterprise. */
  updateEnterpriseMembersCanDeleteRepositoriesSetting?: Maybe<UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload>;
  /** Sets whether members can invite collaborators are enabled for an enterprise. */
  updateEnterpriseMembersCanInviteCollaboratorsSetting?: Maybe<UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload>;
  /** Sets whether or not an organization admin can make purchases. */
  updateEnterpriseMembersCanMakePurchasesSetting?: Maybe<UpdateEnterpriseMembersCanMakePurchasesSettingPayload>;
  /** Sets the members can update protected branches setting for an enterprise. */
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: Maybe<UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload>;
  /** Sets the members can view dependency insights for an enterprise. */
  updateEnterpriseMembersCanViewDependencyInsightsSetting?: Maybe<UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload>;
  /** Sets whether organization projects are enabled for an enterprise. */
  updateEnterpriseOrganizationProjectsSetting?: Maybe<UpdateEnterpriseOrganizationProjectsSettingPayload>;
  /** Updates the role of an enterprise owner with an organization. */
  updateEnterpriseOwnerOrganizationRole?: Maybe<UpdateEnterpriseOwnerOrganizationRolePayload>;
  /** Updates an enterprise's profile. */
  updateEnterpriseProfile?: Maybe<UpdateEnterpriseProfilePayload>;
  /** Sets whether repository projects are enabled for a enterprise. */
  updateEnterpriseRepositoryProjectsSetting?: Maybe<UpdateEnterpriseRepositoryProjectsSettingPayload>;
  /** Sets whether team discussions are enabled for an enterprise. */
  updateEnterpriseTeamDiscussionsSetting?: Maybe<UpdateEnterpriseTeamDiscussionsSettingPayload>;
  /** Sets whether two factor authentication is required for all users in an enterprise. */
  updateEnterpriseTwoFactorAuthenticationRequiredSetting?: Maybe<UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload>;
  /** Updates an environment. */
  updateEnvironment?: Maybe<UpdateEnvironmentPayload>;
  /** Sets whether an IP allow list is enabled on an owner. */
  updateIpAllowListEnabledSetting?: Maybe<UpdateIpAllowListEnabledSettingPayload>;
  /** Updates an IP allow list entry. */
  updateIpAllowListEntry?: Maybe<UpdateIpAllowListEntryPayload>;
  /** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */
  updateIpAllowListForInstalledAppsEnabledSetting?: Maybe<UpdateIpAllowListForInstalledAppsEnabledSettingPayload>;
  /** Updates an Issue. */
  updateIssue?: Maybe<UpdateIssuePayload>;
  /** Updates an IssueComment object. */
  updateIssueComment?: Maybe<UpdateIssueCommentPayload>;
  /** Update the setting to restrict notifications to only verified or approved domains available to an owner. */
  updateNotificationRestrictionSetting?: Maybe<UpdateNotificationRestrictionSettingPayload>;
  /** Sets whether private repository forks are enabled for an organization. */
  updateOrganizationAllowPrivateRepositoryForkingSetting?: Maybe<UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload>;
  /** Updates an existing project. */
  updateProject?: Maybe<UpdateProjectPayload>;
  /** Updates an existing project card. */
  updateProjectCard?: Maybe<UpdateProjectCardPayload>;
  /** Updates an existing project column. */
  updateProjectColumn?: Maybe<UpdateProjectColumnPayload>;
  /** Updates an existing project (beta). */
  updateProjectNext?: Maybe<UpdateProjectNextPayload>;
  /** Updates a field of an item from a Project. */
  updateProjectNextItemField?: Maybe<UpdateProjectNextItemFieldPayload>;
  /** Update a pull request */
  updatePullRequest?: Maybe<UpdatePullRequestPayload>;
  /** Merge HEAD from upstream branch into pull request branch */
  updatePullRequestBranch?: Maybe<UpdatePullRequestBranchPayload>;
  /** Updates the body of a pull request review. */
  updatePullRequestReview?: Maybe<UpdatePullRequestReviewPayload>;
  /** Updates a pull request review comment. */
  updatePullRequestReviewComment?: Maybe<UpdatePullRequestReviewCommentPayload>;
  /** Update a Git Ref. */
  updateRef?: Maybe<UpdateRefPayload>;
  /** Update information about a repository. */
  updateRepository?: Maybe<UpdateRepositoryPayload>;
  /** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */
  updateSponsorshipPreferences?: Maybe<UpdateSponsorshipPreferencesPayload>;
  /** Updates the state for subscribable subjects. */
  updateSubscription?: Maybe<UpdateSubscriptionPayload>;
  /** Updates a team discussion. */
  updateTeamDiscussion?: Maybe<UpdateTeamDiscussionPayload>;
  /** Updates a discussion comment. */
  updateTeamDiscussionComment?: Maybe<UpdateTeamDiscussionCommentPayload>;
  /** Replaces the repository's topics with the given topics. */
  updateTopics?: Maybe<UpdateTopicsPayload>;
  /** Verify that a verifiable domain has the expected DNS record. */
  verifyVerifiableDomain?: Maybe<VerifyVerifiableDomainPayload>;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAbortQueuedMigrationsArgs = {
  input: AbortQueuedMigrationsInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAcceptEnterpriseAdministratorInvitationArgs = {
  input: AcceptEnterpriseAdministratorInvitationInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAcceptTopicSuggestionArgs = {
  input: AcceptTopicSuggestionInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddAssigneesToAssignableArgs = {
  input: AddAssigneesToAssignableInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddCommentArgs = {
  input: AddCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddDiscussionCommentArgs = {
  input: AddDiscussionCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddEnterpriseSupportEntitlementArgs = {
  input: AddEnterpriseSupportEntitlementInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddLabelsToLabelableArgs = {
  input: AddLabelsToLabelableInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddProjectCardArgs = {
  input: AddProjectCardInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddProjectColumnArgs = {
  input: AddProjectColumnInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddProjectNextItemArgs = {
  input: AddProjectNextItemInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddPullRequestReviewArgs = {
  input: AddPullRequestReviewInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddPullRequestReviewCommentArgs = {
  input: AddPullRequestReviewCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddPullRequestReviewThreadArgs = {
  input: AddPullRequestReviewThreadInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddReactionArgs = {
  input: AddReactionInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddStarArgs = {
  input: AddStarInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddUpvoteArgs = {
  input: AddUpvoteInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationAddVerifiableDomainArgs = {
  input: AddVerifiableDomainInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationApproveDeploymentsArgs = {
  input: ApproveDeploymentsInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationApproveVerifiableDomainArgs = {
  input: ApproveVerifiableDomainInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationArchiveRepositoryArgs = {
  input: ArchiveRepositoryInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCancelEnterpriseAdminInvitationArgs = {
  input: CancelEnterpriseAdminInvitationInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCancelSponsorshipArgs = {
  input: CancelSponsorshipInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationChangeUserStatusArgs = {
  input: ChangeUserStatusInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationClearLabelsFromLabelableArgs = {
  input: ClearLabelsFromLabelableInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCloneProjectArgs = {
  input: CloneProjectInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCloneTemplateRepositoryArgs = {
  input: CloneTemplateRepositoryInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCloseIssueArgs = {
  input: CloseIssueInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationClosePullRequestArgs = {
  input: ClosePullRequestInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationConvertProjectCardNoteToIssueArgs = {
  input: ConvertProjectCardNoteToIssueInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationConvertPullRequestToDraftArgs = {
  input: ConvertPullRequestToDraftInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateBranchProtectionRuleArgs = {
  input: CreateBranchProtectionRuleInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateCheckRunArgs = {
  input: CreateCheckRunInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateCheckSuiteArgs = {
  input: CreateCheckSuiteInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateCommitOnBranchArgs = {
  input: CreateCommitOnBranchInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateDiscussionArgs = {
  input: CreateDiscussionInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateEnterpriseOrganizationArgs = {
  input: CreateEnterpriseOrganizationInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateEnvironmentArgs = {
  input: CreateEnvironmentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateIpAllowListEntryArgs = {
  input: CreateIpAllowListEntryInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateIssueArgs = {
  input: CreateIssueInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateMigrationSourceArgs = {
  input: CreateMigrationSourceInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateProjectArgs = {
  input: CreateProjectInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreatePullRequestArgs = {
  input: CreatePullRequestInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateRefArgs = {
  input: CreateRefInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateRepositoryArgs = {
  input: CreateRepositoryInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateSponsorsTierArgs = {
  input: CreateSponsorsTierInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateSponsorshipArgs = {
  input: CreateSponsorshipInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateTeamDiscussionArgs = {
  input: CreateTeamDiscussionInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationCreateTeamDiscussionCommentArgs = {
  input: CreateTeamDiscussionCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeclineTopicSuggestionArgs = {
  input: DeclineTopicSuggestionInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteBranchProtectionRuleArgs = {
  input: DeleteBranchProtectionRuleInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteDeploymentArgs = {
  input: DeleteDeploymentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteDiscussionArgs = {
  input: DeleteDiscussionInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteDiscussionCommentArgs = {
  input: DeleteDiscussionCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteEnvironmentArgs = {
  input: DeleteEnvironmentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteIpAllowListEntryArgs = {
  input: DeleteIpAllowListEntryInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteIssueArgs = {
  input: DeleteIssueInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteIssueCommentArgs = {
  input: DeleteIssueCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteProjectArgs = {
  input: DeleteProjectInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteProjectCardArgs = {
  input: DeleteProjectCardInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteProjectColumnArgs = {
  input: DeleteProjectColumnInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteProjectNextItemArgs = {
  input: DeleteProjectNextItemInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeletePullRequestReviewArgs = {
  input: DeletePullRequestReviewInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeletePullRequestReviewCommentArgs = {
  input: DeletePullRequestReviewCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteRefArgs = {
  input: DeleteRefInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteTeamDiscussionArgs = {
  input: DeleteTeamDiscussionInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteTeamDiscussionCommentArgs = {
  input: DeleteTeamDiscussionCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDeleteVerifiableDomainArgs = {
  input: DeleteVerifiableDomainInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDisablePullRequestAutoMergeArgs = {
  input: DisablePullRequestAutoMergeInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDismissPullRequestReviewArgs = {
  input: DismissPullRequestReviewInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationDismissRepositoryVulnerabilityAlertArgs = {
  input: DismissRepositoryVulnerabilityAlertInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationEnablePullRequestAutoMergeArgs = {
  input: EnablePullRequestAutoMergeInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationFollowUserArgs = {
  input: FollowUserInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationGrantEnterpriseOrganizationsMigratorRoleArgs = {
  input: GrantEnterpriseOrganizationsMigratorRoleInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationGrantMigratorRoleArgs = {
  input: GrantMigratorRoleInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationInviteEnterpriseAdminArgs = {
  input: InviteEnterpriseAdminInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationLinkRepositoryToProjectArgs = {
  input: LinkRepositoryToProjectInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationLockLockableArgs = {
  input: LockLockableInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationMarkDiscussionCommentAsAnswerArgs = {
  input: MarkDiscussionCommentAsAnswerInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationMarkFileAsViewedArgs = {
  input: MarkFileAsViewedInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationMarkPullRequestReadyForReviewArgs = {
  input: MarkPullRequestReadyForReviewInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationMergeBranchArgs = {
  input: MergeBranchInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationMergePullRequestArgs = {
  input: MergePullRequestInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationMinimizeCommentArgs = {
  input: MinimizeCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationMoveProjectCardArgs = {
  input: MoveProjectCardInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationMoveProjectColumnArgs = {
  input: MoveProjectColumnInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationPinIssueArgs = {
  input: PinIssueInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRegenerateEnterpriseIdentityProviderRecoveryCodesArgs = {
  input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRegenerateVerifiableDomainTokenArgs = {
  input: RegenerateVerifiableDomainTokenInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRejectDeploymentsArgs = {
  input: RejectDeploymentsInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRemoveAssigneesFromAssignableArgs = {
  input: RemoveAssigneesFromAssignableInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRemoveEnterpriseAdminArgs = {
  input: RemoveEnterpriseAdminInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRemoveEnterpriseIdentityProviderArgs = {
  input: RemoveEnterpriseIdentityProviderInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRemoveEnterpriseOrganizationArgs = {
  input: RemoveEnterpriseOrganizationInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRemoveEnterpriseSupportEntitlementArgs = {
  input: RemoveEnterpriseSupportEntitlementInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRemoveLabelsFromLabelableArgs = {
  input: RemoveLabelsFromLabelableInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRemoveOutsideCollaboratorArgs = {
  input: RemoveOutsideCollaboratorInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRemoveReactionArgs = {
  input: RemoveReactionInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRemoveStarArgs = {
  input: RemoveStarInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRemoveUpvoteArgs = {
  input: RemoveUpvoteInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationReopenIssueArgs = {
  input: ReopenIssueInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationReopenPullRequestArgs = {
  input: ReopenPullRequestInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRequestReviewsArgs = {
  input: RequestReviewsInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRerequestCheckSuiteArgs = {
  input: RerequestCheckSuiteInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationResolveReviewThreadArgs = {
  input: ResolveReviewThreadInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRevokeEnterpriseOrganizationsMigratorRoleArgs = {
  input: RevokeEnterpriseOrganizationsMigratorRoleInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationRevokeMigratorRoleArgs = {
  input: RevokeMigratorRoleInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationSetEnterpriseIdentityProviderArgs = {
  input: SetEnterpriseIdentityProviderInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationSetOrganizationInteractionLimitArgs = {
  input: SetOrganizationInteractionLimitInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationSetRepositoryInteractionLimitArgs = {
  input: SetRepositoryInteractionLimitInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationSetUserInteractionLimitArgs = {
  input: SetUserInteractionLimitInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationStartRepositoryMigrationArgs = {
  input: StartRepositoryMigrationInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationSubmitPullRequestReviewArgs = {
  input: SubmitPullRequestReviewInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationTransferIssueArgs = {
  input: TransferIssueInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUnarchiveRepositoryArgs = {
  input: UnarchiveRepositoryInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUnfollowUserArgs = {
  input: UnfollowUserInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUnlinkRepositoryFromProjectArgs = {
  input: UnlinkRepositoryFromProjectInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUnlockLockableArgs = {
  input: UnlockLockableInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUnmarkDiscussionCommentAsAnswerArgs = {
  input: UnmarkDiscussionCommentAsAnswerInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUnmarkFileAsViewedArgs = {
  input: UnmarkFileAsViewedInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUnmarkIssueAsDuplicateArgs = {
  input: UnmarkIssueAsDuplicateInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUnminimizeCommentArgs = {
  input: UnminimizeCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUnpinIssueArgs = {
  input: UnpinIssueInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUnresolveReviewThreadArgs = {
  input: UnresolveReviewThreadInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateBranchProtectionRuleArgs = {
  input: UpdateBranchProtectionRuleInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateCheckRunArgs = {
  input: UpdateCheckRunInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateCheckSuitePreferencesArgs = {
  input: UpdateCheckSuitePreferencesInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateDiscussionArgs = {
  input: UpdateDiscussionInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateDiscussionCommentArgs = {
  input: UpdateDiscussionCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseAdministratorRoleArgs = {
  input: UpdateEnterpriseAdministratorRoleInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs = {
  input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseDefaultRepositoryPermissionSettingArgs = {
  input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs =
  {
    input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;
  };

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseMembersCanCreateRepositoriesSettingArgs = {
  input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseMembersCanDeleteIssuesSettingArgs = {
  input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs = {
  input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs = {
  input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseMembersCanMakePurchasesSettingArgs = {
  input: UpdateEnterpriseMembersCanMakePurchasesSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs =
  {
    input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;
  };

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs =
  {
    input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;
  };

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseOrganizationProjectsSettingArgs = {
  input: UpdateEnterpriseOrganizationProjectsSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseOwnerOrganizationRoleArgs = {
  input: UpdateEnterpriseOwnerOrganizationRoleInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseProfileArgs = {
  input: UpdateEnterpriseProfileInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseRepositoryProjectsSettingArgs = {
  input: UpdateEnterpriseRepositoryProjectsSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseTeamDiscussionsSettingArgs = {
  input: UpdateEnterpriseTeamDiscussionsSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs =
  {
    input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;
  };

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateEnvironmentArgs = {
  input: UpdateEnvironmentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateIpAllowListEnabledSettingArgs = {
  input: UpdateIpAllowListEnabledSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateIpAllowListEntryArgs = {
  input: UpdateIpAllowListEntryInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateIpAllowListForInstalledAppsEnabledSettingArgs = {
  input: UpdateIpAllowListForInstalledAppsEnabledSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateIssueArgs = {
  input: UpdateIssueInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateIssueCommentArgs = {
  input: UpdateIssueCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateNotificationRestrictionSettingArgs = {
  input: UpdateNotificationRestrictionSettingInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateOrganizationAllowPrivateRepositoryForkingSettingArgs =
  {
    input: UpdateOrganizationAllowPrivateRepositoryForkingSettingInput;
  };

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateProjectArgs = {
  input: UpdateProjectInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateProjectCardArgs = {
  input: UpdateProjectCardInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateProjectColumnArgs = {
  input: UpdateProjectColumnInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateProjectNextArgs = {
  input: UpdateProjectNextInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateProjectNextItemFieldArgs = {
  input: UpdateProjectNextItemFieldInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdatePullRequestArgs = {
  input: UpdatePullRequestInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdatePullRequestBranchArgs = {
  input: UpdatePullRequestBranchInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdatePullRequestReviewArgs = {
  input: UpdatePullRequestReviewInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdatePullRequestReviewCommentArgs = {
  input: UpdatePullRequestReviewCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateRefArgs = {
  input: UpdateRefInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateRepositoryArgs = {
  input: UpdateRepositoryInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateSponsorshipPreferencesArgs = {
  input: UpdateSponsorshipPreferencesInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateSubscriptionArgs = {
  input: UpdateSubscriptionInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateTeamDiscussionArgs = {
  input: UpdateTeamDiscussionInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateTeamDiscussionCommentArgs = {
  input: UpdateTeamDiscussionCommentInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationUpdateTopicsArgs = {
  input: UpdateTopicsInput;
};

/** The root query for implementing GraphQL mutations. */
export type MutationVerifyVerifiableDomainArgs = {
  input: VerifyVerifiableDomainInput;
};

/** An object with an ID. */
export type Node = {
  /** ID of the object. */
  id: Scalars["ID"];
};

/** The possible values for the notification restriction setting. */
export enum NotificationRestrictionSettingValue {
  /** The setting is disabled for the owner. */
  Disabled = "DISABLED",
  /** The setting is enabled for the owner. */
  Enabled = "ENABLED",
}

/** An OIDC identity provider configured to provision identities for an enterprise. */
export type OidcProvider = Node & {
  __typename?: "OIDCProvider";
  /** The enterprise this identity provider belongs to. */
  enterprise?: Maybe<Enterprise>;
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities: ExternalIdentityConnection;
  id: Scalars["ID"];
  /** The OIDC identity provider type */
  providerType: OidcProviderType;
  /** The id of the tenant this provider is attached to */
  tenantId: Scalars["String"];
};

/** An OIDC identity provider configured to provision identities for an enterprise. */
export type OidcProviderExternalIdentitiesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  login?: InputMaybe<Scalars["String"]>;
  membersOnly?: InputMaybe<Scalars["Boolean"]>;
  userName?: InputMaybe<Scalars["String"]>;
};

/** The OIDC identity provider type */
export enum OidcProviderType {
  /** Azure Active Directory */
  Aad = "AAD",
}

/** Metadata for an audit entry with action oauth_application.* */
export type OauthApplicationAuditEntryData = {
  /** The name of the OAuth Application. */
  oauthApplicationName?: Maybe<Scalars["String"]>;
  /** The HTTP path for the OAuth Application */
  oauthApplicationResourcePath?: Maybe<Scalars["URI"]>;
  /** The HTTP URL for the OAuth Application */
  oauthApplicationUrl?: Maybe<Scalars["URI"]>;
};

/** Audit log entry for a oauth_application.create event. */
export type OauthApplicationCreateAuditEntry = AuditEntry &
  Node &
  OauthApplicationAuditEntryData &
  OrganizationAuditEntryData & {
    __typename?: "OauthApplicationCreateAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The application URL of the OAuth Application. */
    applicationUrl?: Maybe<Scalars["URI"]>;
    /** The callback URL of the OAuth Application. */
    callbackUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The name of the OAuth Application. */
    oauthApplicationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl?: Maybe<Scalars["URI"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The rate limit of the OAuth Application. */
    rateLimit?: Maybe<Scalars["Int"]>;
    /** The state of the OAuth Application. */
    state?: Maybe<OauthApplicationCreateAuditEntryState>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The state of an OAuth Application when it was created. */
export enum OauthApplicationCreateAuditEntryState {
  /** The OAuth Application was active and allowed to have OAuth Accesses. */
  Active = "ACTIVE",
  /** The OAuth Application was in the process of being deleted. */
  PendingDeletion = "PENDING_DELETION",
  /** The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns. */
  Suspended = "SUSPENDED",
}

/** The corresponding operation type for the action */
export enum OperationType {
  /** An existing resource was accessed */
  Access = "ACCESS",
  /** A resource performed an authentication event */
  Authentication = "AUTHENTICATION",
  /** A new resource was created */
  Create = "CREATE",
  /** An existing resource was modified */
  Modify = "MODIFY",
  /** An existing resource was removed */
  Remove = "REMOVE",
  /** An existing resource was restored */
  Restore = "RESTORE",
  /** An existing resource was transferred between multiple resources */
  Transfer = "TRANSFER",
}

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = "ASC",
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = "DESC",
}

/** Audit log entry for a org.add_billing_manager */
export type OrgAddBillingManagerAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgAddBillingManagerAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The email address used to invite a billing manager for the organization. */
    invitationEmail?: Maybe<Scalars["String"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.add_member */
export type OrgAddMemberAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgAddMemberAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The permission level of the member added to the organization. */
    permission?: Maybe<OrgAddMemberAuditEntryPermission>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The permissions available to members on an Organization. */
export enum OrgAddMemberAuditEntryPermission {
  /** Can read, clone, push, and add collaborators to repositories. */
  Admin = "ADMIN",
  /** Can read and clone repositories. */
  Read = "READ",
}

/** Audit log entry for a org.block_user */
export type OrgBlockUserAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgBlockUserAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The blocked user. */
    blockedUser?: Maybe<User>;
    /** The username of the blocked user. */
    blockedUserName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the blocked user. */
    blockedUserResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the blocked user. */
    blockedUserUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.config.disable_collaborators_only event. */
export type OrgConfigDisableCollaboratorsOnlyAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgConfigDisableCollaboratorsOnlyAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.config.enable_collaborators_only event. */
export type OrgConfigEnableCollaboratorsOnlyAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgConfigEnableCollaboratorsOnlyAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.create event. */
export type OrgCreateAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgCreateAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The billing plan for the Organization. */
    billingPlan?: Maybe<OrgCreateAuditEntryBillingPlan>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The billing plans available for organizations. */
export enum OrgCreateAuditEntryBillingPlan {
  /** Team Plan */
  Business = "BUSINESS",
  /** Enterprise Cloud Plan */
  BusinessPlus = "BUSINESS_PLUS",
  /** Free Plan */
  Free = "FREE",
  /** Tiered Per Seat Plan */
  TieredPerSeat = "TIERED_PER_SEAT",
  /** Legacy Unlimited Plan */
  Unlimited = "UNLIMITED",
}

/** Audit log entry for a org.disable_oauth_app_restrictions event. */
export type OrgDisableOauthAppRestrictionsAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgDisableOauthAppRestrictionsAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.disable_saml event. */
export type OrgDisableSamlAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgDisableSamlAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The SAML provider's digest algorithm URL. */
    digestMethodUrl?: Maybe<Scalars["URI"]>;
    id: Scalars["ID"];
    /** The SAML provider's issuer URL. */
    issuerUrl?: Maybe<Scalars["URI"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The SAML provider's signature algorithm URL. */
    signatureMethodUrl?: Maybe<Scalars["URI"]>;
    /** The SAML provider's single sign-on URL. */
    singleSignOnUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.disable_two_factor_requirement event. */
export type OrgDisableTwoFactorRequirementAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgDisableTwoFactorRequirementAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.enable_oauth_app_restrictions event. */
export type OrgEnableOauthAppRestrictionsAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgEnableOauthAppRestrictionsAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.enable_saml event. */
export type OrgEnableSamlAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgEnableSamlAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The SAML provider's digest algorithm URL. */
    digestMethodUrl?: Maybe<Scalars["URI"]>;
    id: Scalars["ID"];
    /** The SAML provider's issuer URL. */
    issuerUrl?: Maybe<Scalars["URI"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The SAML provider's signature algorithm URL. */
    signatureMethodUrl?: Maybe<Scalars["URI"]>;
    /** The SAML provider's single sign-on URL. */
    singleSignOnUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.enable_two_factor_requirement event. */
export type OrgEnableTwoFactorRequirementAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgEnableTwoFactorRequirementAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Ordering options for an organization's enterprise owner connections. */
export type OrgEnterpriseOwnerOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order enterprise owners by. */
  field: OrgEnterpriseOwnerOrderField;
};

/** Properties by which enterprise owners can be ordered. */
export enum OrgEnterpriseOwnerOrderField {
  /** Order enterprise owners by login. */
  Login = "LOGIN",
}

/** Audit log entry for a org.invite_member event. */
export type OrgInviteMemberAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgInviteMemberAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The email address of the organization invitation. */
    email?: Maybe<Scalars["String"]>;
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The organization invitation. */
    organizationInvitation?: Maybe<OrganizationInvitation>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.invite_to_business event. */
export type OrgInviteToBusinessAuditEntry = AuditEntry &
  EnterpriseAuditEntryData &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgInviteToBusinessAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: Maybe<Scalars["URI"]>;
    /** The slug of the enterprise. */
    enterpriseSlug?: Maybe<Scalars["String"]>;
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: Maybe<Scalars["URI"]>;
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.oauth_app_access_approved event. */
export type OrgOauthAppAccessApprovedAuditEntry = AuditEntry &
  Node &
  OauthApplicationAuditEntryData &
  OrganizationAuditEntryData & {
    __typename?: "OrgOauthAppAccessApprovedAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The name of the OAuth Application. */
    oauthApplicationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl?: Maybe<Scalars["URI"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.oauth_app_access_denied event. */
export type OrgOauthAppAccessDeniedAuditEntry = AuditEntry &
  Node &
  OauthApplicationAuditEntryData &
  OrganizationAuditEntryData & {
    __typename?: "OrgOauthAppAccessDeniedAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The name of the OAuth Application. */
    oauthApplicationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl?: Maybe<Scalars["URI"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.oauth_app_access_requested event. */
export type OrgOauthAppAccessRequestedAuditEntry = AuditEntry &
  Node &
  OauthApplicationAuditEntryData &
  OrganizationAuditEntryData & {
    __typename?: "OrgOauthAppAccessRequestedAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The name of the OAuth Application. */
    oauthApplicationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl?: Maybe<Scalars["URI"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.remove_billing_manager event. */
export type OrgRemoveBillingManagerAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgRemoveBillingManagerAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The reason for the billing manager being removed. */
    reason?: Maybe<OrgRemoveBillingManagerAuditEntryReason>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The reason a billing manager was removed from an Organization. */
export enum OrgRemoveBillingManagerAuditEntryReason {
  /** SAML external identity missing */
  SamlExternalIdentityMissing = "SAML_EXTERNAL_IDENTITY_MISSING",
  /** SAML SSO enforcement requires an external identity */
  SamlSsoEnforcementRequiresExternalIdentity = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY",
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TwoFactorRequirementNonCompliance = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",
}

/** Audit log entry for a org.remove_member event. */
export type OrgRemoveMemberAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgRemoveMemberAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The types of membership the member has with the organization. */
    membershipTypes?: Maybe<Array<OrgRemoveMemberAuditEntryMembershipType>>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The reason for the member being removed. */
    reason?: Maybe<OrgRemoveMemberAuditEntryReason>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The type of membership a user has with an Organization. */
export enum OrgRemoveMemberAuditEntryMembershipType {
  /** Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories. */
  Admin = "ADMIN",
  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
  BillingManager = "BILLING_MANAGER",
  /** A direct member is a user that is a member of the Organization. */
  DirectMember = "DIRECT_MEMBER",
  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
  OutsideCollaborator = "OUTSIDE_COLLABORATOR",
  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization. */
  Unaffiliated = "UNAFFILIATED",
}

/** The reason a member was removed from an Organization. */
export enum OrgRemoveMemberAuditEntryReason {
  /** SAML external identity missing */
  SamlExternalIdentityMissing = "SAML_EXTERNAL_IDENTITY_MISSING",
  /** SAML SSO enforcement requires an external identity */
  SamlSsoEnforcementRequiresExternalIdentity = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY",
  /** User was removed from organization during account recovery */
  TwoFactorAccountRecovery = "TWO_FACTOR_ACCOUNT_RECOVERY",
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TwoFactorRequirementNonCompliance = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",
  /** User account has been deleted */
  UserAccountDeleted = "USER_ACCOUNT_DELETED",
}

/** Audit log entry for a org.remove_outside_collaborator event. */
export type OrgRemoveOutsideCollaboratorAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgRemoveOutsideCollaboratorAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The types of membership the outside collaborator has with the organization. */
    membershipTypes?: Maybe<
      Array<OrgRemoveOutsideCollaboratorAuditEntryMembershipType>
    >;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The reason for the outside collaborator being removed from the Organization. */
    reason?: Maybe<OrgRemoveOutsideCollaboratorAuditEntryReason>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The type of membership a user has with an Organization. */
export enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
  BillingManager = "BILLING_MANAGER",
  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
  OutsideCollaborator = "OUTSIDE_COLLABORATOR",
  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization. */
  Unaffiliated = "UNAFFILIATED",
}

/** The reason an outside collaborator was removed from an Organization. */
export enum OrgRemoveOutsideCollaboratorAuditEntryReason {
  /** SAML external identity missing */
  SamlExternalIdentityMissing = "SAML_EXTERNAL_IDENTITY_MISSING",
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TwoFactorRequirementNonCompliance = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",
}

/** Audit log entry for a org.restore_member event. */
export type OrgRestoreMemberAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgRestoreMemberAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The number of custom email routings for the restored member. */
    restoredCustomEmailRoutingsCount?: Maybe<Scalars["Int"]>;
    /** The number of issue assignments for the restored member. */
    restoredIssueAssignmentsCount?: Maybe<Scalars["Int"]>;
    /** Restored organization membership objects. */
    restoredMemberships?: Maybe<Array<OrgRestoreMemberAuditEntryMembership>>;
    /** The number of restored memberships. */
    restoredMembershipsCount?: Maybe<Scalars["Int"]>;
    /** The number of repositories of the restored member. */
    restoredRepositoriesCount?: Maybe<Scalars["Int"]>;
    /** The number of starred repositories for the restored member. */
    restoredRepositoryStarsCount?: Maybe<Scalars["Int"]>;
    /** The number of watched repositories for the restored member. */
    restoredRepositoryWatchesCount?: Maybe<Scalars["Int"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Types of memberships that can be restored for an Organization member. */
export type OrgRestoreMemberAuditEntryMembership =
  | OrgRestoreMemberMembershipOrganizationAuditEntryData
  | OrgRestoreMemberMembershipRepositoryAuditEntryData
  | OrgRestoreMemberMembershipTeamAuditEntryData;

/** Metadata for an organization membership for org.restore_member actions */
export type OrgRestoreMemberMembershipOrganizationAuditEntryData =
  OrganizationAuditEntryData & {
    __typename?: "OrgRestoreMemberMembershipOrganizationAuditEntryData";
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
  };

/** Metadata for a repository membership for org.restore_member actions */
export type OrgRestoreMemberMembershipRepositoryAuditEntryData =
  RepositoryAuditEntryData & {
    __typename?: "OrgRestoreMemberMembershipRepositoryAuditEntryData";
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
  };

/** Metadata for a team membership for org.restore_member actions */
export type OrgRestoreMemberMembershipTeamAuditEntryData =
  TeamAuditEntryData & {
    __typename?: "OrgRestoreMemberMembershipTeamAuditEntryData";
    /** The team associated with the action */
    team?: Maybe<Team>;
    /** The name of the team */
    teamName?: Maybe<Scalars["String"]>;
    /** The HTTP path for this team */
    teamResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for this team */
    teamUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.unblock_user */
export type OrgUnblockUserAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgUnblockUserAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The user being unblocked by the organization. */
    blockedUser?: Maybe<User>;
    /** The username of the blocked user. */
    blockedUserName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the blocked user. */
    blockedUserResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the blocked user. */
    blockedUserUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a org.update_default_repository_permission */
export type OrgUpdateDefaultRepositoryPermissionAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgUpdateDefaultRepositoryPermissionAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The new base repository permission level for the organization. */
    permission?: Maybe<OrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;
    /** The former base repository permission level for the organization. */
    permissionWas?: Maybe<OrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The default permission a repository can have in an Organization. */
export enum OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  /** Can read, clone, push, and add collaborators to repositories. */
  Admin = "ADMIN",
  /** No default permission value. */
  None = "NONE",
  /** Can read and clone repositories. */
  Read = "READ",
  /** Can read, clone and push to repositories. */
  Write = "WRITE",
}

/** Audit log entry for a org.update_member event. */
export type OrgUpdateMemberAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgUpdateMemberAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The new member permission level for the organization. */
    permission?: Maybe<OrgUpdateMemberAuditEntryPermission>;
    /** The former member permission level for the organization. */
    permissionWas?: Maybe<OrgUpdateMemberAuditEntryPermission>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The permissions available to members on an Organization. */
export enum OrgUpdateMemberAuditEntryPermission {
  /** Can read, clone, push, and add collaborators to repositories. */
  Admin = "ADMIN",
  /** Can read and clone repositories. */
  Read = "READ",
}

/** Audit log entry for a org.update_member_repository_creation_permission event. */
export type OrgUpdateMemberRepositoryCreationPermissionAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "OrgUpdateMemberRepositoryCreationPermissionAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** Can members create repositories in the organization. */
    canCreateRepositories?: Maybe<Scalars["Boolean"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
    /** The permission for visibility level of repositories for this organization. */
    visibility?: Maybe<OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility>;
  };

/** The permissions available for repository creation on an Organization. */
export enum OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  /** All organization members are restricted from creating any repositories. */
  All = "ALL",
  /** All organization members are restricted from creating internal repositories. */
  Internal = "INTERNAL",
  /** All organization members are allowed to create any repositories. */
  None = "NONE",
  /** All organization members are restricted from creating private repositories. */
  Private = "PRIVATE",
  /** All organization members are restricted from creating private or internal repositories. */
  PrivateInternal = "PRIVATE_INTERNAL",
  /** All organization members are restricted from creating public repositories. */
  Public = "PUBLIC",
  /** All organization members are restricted from creating public or internal repositories. */
  PublicInternal = "PUBLIC_INTERNAL",
  /** All organization members are restricted from creating public or private repositories. */
  PublicPrivate = "PUBLIC_PRIVATE",
}

/** Audit log entry for a org.update_member_repository_invitation_permission event. */
export type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry =
  AuditEntry &
    Node &
    OrganizationAuditEntryData & {
      __typename?: "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry";
      /** The action name */
      action: Scalars["String"];
      /** The user who initiated the action */
      actor?: Maybe<AuditEntryActor>;
      /** The IP address of the actor */
      actorIp?: Maybe<Scalars["String"]>;
      /** A readable representation of the actor's location */
      actorLocation?: Maybe<ActorLocation>;
      /** The username of the user who initiated the action */
      actorLogin?: Maybe<Scalars["String"]>;
      /** The HTTP path for the actor. */
      actorResourcePath?: Maybe<Scalars["URI"]>;
      /** The HTTP URL for the actor. */
      actorUrl?: Maybe<Scalars["URI"]>;
      /** Can outside collaborators be invited to repositories in the organization. */
      canInviteOutsideCollaboratorsToRepositories?: Maybe<Scalars["Boolean"]>;
      /** The time the action was initiated */
      createdAt: Scalars["PreciseDateTime"];
      id: Scalars["ID"];
      /** The corresponding operation type for the action */
      operationType?: Maybe<OperationType>;
      /** The Organization associated with the Audit Entry. */
      organization?: Maybe<Organization>;
      /** The name of the Organization. */
      organizationName?: Maybe<Scalars["String"]>;
      /** The HTTP path for the organization */
      organizationResourcePath?: Maybe<Scalars["URI"]>;
      /** The HTTP URL for the organization */
      organizationUrl?: Maybe<Scalars["URI"]>;
      /** The user affected by the action */
      user?: Maybe<User>;
      /** For actions involving two users, the actor is the initiator and the user is the affected user. */
      userLogin?: Maybe<Scalars["String"]>;
      /** The HTTP path for the user. */
      userResourcePath?: Maybe<Scalars["URI"]>;
      /** The HTTP URL for the user. */
      userUrl?: Maybe<Scalars["URI"]>;
    };

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Organization = Actor &
  MemberStatusable &
  Node &
  PackageOwner &
  ProfileOwner &
  ProjectNextOwner &
  ProjectOwner &
  RepositoryDiscussionAuthor &
  RepositoryDiscussionCommentAuthor &
  RepositoryOwner &
  Sponsorable &
  UniformResourceLocatable & {
    __typename?: "Organization";
    /** Determine if this repository owner has any items that can be pinned to their profile. */
    anyPinnableItems: Scalars["Boolean"];
    /** Audit log entries of the organization */
    auditLog: OrganizationAuditEntryConnection;
    /** A URL pointing to the organization's public avatar. */
    avatarUrl: Scalars["URI"];
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The organization's public profile description. */
    description?: Maybe<Scalars["String"]>;
    /** The organization's public profile description rendered to HTML. */
    descriptionHTML?: Maybe<Scalars["String"]>;
    /** A list of domains owned by the organization. */
    domains?: Maybe<VerifiableDomainConnection>;
    /** The organization's public email. */
    email?: Maybe<Scalars["String"]>;
    /** A list of owners of the organization's enterprise account. */
    enterpriseOwners: OrganizationEnterpriseOwnerConnection;
    /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
    estimatedNextSponsorsPayoutInCents: Scalars["Int"];
    /** True if this user/organization has a GitHub Sponsors listing. */
    hasSponsorsListing: Scalars["Boolean"];
    id: Scalars["ID"];
    /** The interaction ability settings for this organization. */
    interactionAbility?: Maybe<RepositoryInteractionAbility>;
    /** The setting value for whether the organization has an IP allow list enabled. */
    ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;
    /** The IP addresses that are allowed to access resources owned by the organization. */
    ipAllowListEntries: IpAllowListEntryConnection;
    /** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */
    ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue;
    /** Check if the given account is sponsoring this user/organization. */
    isSponsoredBy: Scalars["Boolean"];
    /** True if the viewer is sponsored by this user/organization. */
    isSponsoringViewer: Scalars["Boolean"];
    /** Whether the organization has verified its profile email and website. */
    isVerified: Scalars["Boolean"];
    /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
    itemShowcase: ProfileItemShowcase;
    /** The organization's public profile location. */
    location?: Maybe<Scalars["String"]>;
    /** The organization's login name. */
    login: Scalars["String"];
    /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
    memberStatuses: UserStatusConnection;
    /** Members can fork private repositories in this organization */
    membersCanForkPrivateRepositories: Scalars["Boolean"];
    /** A list of users who are members of this organization. */
    membersWithRole: OrganizationMemberConnection;
    /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
    monthlyEstimatedSponsorsIncomeInCents: Scalars["Int"];
    /** The organization's public profile name. */
    name?: Maybe<Scalars["String"]>;
    /** The HTTP path creating a new team */
    newTeamResourcePath: Scalars["URI"];
    /** The HTTP URL creating a new team */
    newTeamUrl: Scalars["URI"];
    /** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */
    notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue;
    /** The billing email for the organization. */
    organizationBillingEmail?: Maybe<Scalars["String"]>;
    /** A list of packages under the owner. */
    packages: PackageConnection;
    /** A list of users who have been invited to join this organization. */
    pendingMembers: UserConnection;
    /** A list of repositories and gists this profile owner can pin to their profile. */
    pinnableItems: PinnableItemConnection;
    /** A list of repositories and gists this profile owner has pinned to their profile */
    pinnedItems: PinnableItemConnection;
    /** Returns how many more items this profile owner can pin to their profile. */
    pinnedItemsRemaining: Scalars["Int"];
    /** Find project by number. */
    project?: Maybe<Project>;
    /** Find a project by project (beta) number. */
    projectNext?: Maybe<ProjectNext>;
    /** A list of projects under the owner. */
    projects: ProjectConnection;
    /** A list of projects (beta) under the owner. */
    projectsNext: ProjectNextConnection;
    /** The HTTP path listing organization's projects */
    projectsResourcePath: Scalars["URI"];
    /** The HTTP URL listing organization's projects */
    projectsUrl: Scalars["URI"];
    /** A list of repositories that the user owns. */
    repositories: RepositoryConnection;
    /** Find Repository. */
    repository?: Maybe<Repository>;
    /** Discussion comments this user has authored. */
    repositoryDiscussionComments: DiscussionCommentConnection;
    /** Discussions this user has started. */
    repositoryDiscussions: DiscussionConnection;
    /** A list of all repository migrations for this organization. */
    repositoryMigrations: RepositoryMigrationConnection;
    /** When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication. */
    requiresTwoFactorAuthentication?: Maybe<Scalars["Boolean"]>;
    /** The HTTP path for this organization. */
    resourcePath: Scalars["URI"];
    /** The Organization's SAML identity providers */
    samlIdentityProvider?: Maybe<OrganizationIdentityProvider>;
    /** List of users and organizations this entity is sponsoring. */
    sponsoring: SponsorConnection;
    /** List of sponsors for this user or organization. */
    sponsors: SponsorConnection;
    /** Events involving this sponsorable, such as new sponsorships. */
    sponsorsActivities: SponsorsActivityConnection;
    /** The GitHub Sponsors listing for this user or organization. */
    sponsorsListing?: Maybe<SponsorsListing>;
    /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
    sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;
    /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */
    sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;
    /** List of sponsorship updates sent from this sponsorable to sponsors. */
    sponsorshipNewsletters: SponsorshipNewsletterConnection;
    /** This object's sponsorships as the maintainer. */
    sponsorshipsAsMaintainer: SponsorshipConnection;
    /** This object's sponsorships as the sponsor. */
    sponsorshipsAsSponsor: SponsorshipConnection;
    /** Find an organization's team by its slug. */
    team?: Maybe<Team>;
    /** A list of teams in this organization. */
    teams: TeamConnection;
    /** The HTTP path listing organization's teams */
    teamsResourcePath: Scalars["URI"];
    /** The HTTP URL listing organization's teams */
    teamsUrl: Scalars["URI"];
    /** The organization's Twitter username. */
    twitterUsername?: Maybe<Scalars["String"]>;
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this organization. */
    url: Scalars["URI"];
    /** Organization is adminable by the viewer. */
    viewerCanAdminister: Scalars["Boolean"];
    /** Can the viewer pin repositories and gists to the profile? */
    viewerCanChangePinnedItems: Scalars["Boolean"];
    /** Can the current viewer create new projects on this owner. */
    viewerCanCreateProjects: Scalars["Boolean"];
    /** Viewer can create repositories on this organization */
    viewerCanCreateRepositories: Scalars["Boolean"];
    /** Viewer can create teams on this organization. */
    viewerCanCreateTeams: Scalars["Boolean"];
    /** Whether or not the viewer is able to sponsor this user/organization. */
    viewerCanSponsor: Scalars["Boolean"];
    /** Viewer is an active member of this organization. */
    viewerIsAMember: Scalars["Boolean"];
    /** True if the viewer is sponsoring this user/organization. */
    viewerIsSponsoring: Scalars["Boolean"];
    /** The organization's public profile URL. */
    websiteUrl?: Maybe<Scalars["URI"]>;
  };

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationAnyPinnableItemsArgs = {
  type?: InputMaybe<PinnableItemType>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationAuditLogArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<AuditLogOrder>;
  query?: InputMaybe<Scalars["String"]>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationAvatarUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationDomainsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  isApproved?: InputMaybe<Scalars["Boolean"]>;
  isVerified?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<VerifiableDomainOrder>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationEnterpriseOwnersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<OrgEnterpriseOwnerOrder>;
  organizationRole?: InputMaybe<RoleInOrganization>;
  query?: InputMaybe<Scalars["String"]>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationIpAllowListEntriesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IpAllowListEntryOrder>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationIsSponsoredByArgs = {
  accountLogin: Scalars["String"];
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationMemberStatusesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<UserStatusOrder>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationMembersWithRoleArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationPackagesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  names?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  orderBy?: InputMaybe<PackageOrder>;
  packageType?: InputMaybe<PackageType>;
  repositoryId?: InputMaybe<Scalars["ID"]>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationPendingMembersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationPinnableItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  types?: InputMaybe<Array<PinnableItemType>>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationPinnedItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  types?: InputMaybe<Array<PinnableItemType>>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationProjectArgs = {
  number: Scalars["Int"];
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationProjectNextArgs = {
  number: Scalars["Int"];
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationProjectsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ProjectOrder>;
  search?: InputMaybe<Scalars["String"]>;
  states?: InputMaybe<Array<ProjectState>>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationProjectsNextArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query?: InputMaybe<Scalars["String"]>;
  sortBy?: InputMaybe<ProjectNextOrderField>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationRepositoriesArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  isFork?: InputMaybe<Scalars["Boolean"]>;
  isLocked?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  privacy?: InputMaybe<RepositoryPrivacy>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationRepositoryArgs = {
  followRenames?: InputMaybe<Scalars["Boolean"]>;
  name: Scalars["String"];
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationRepositoryDiscussionCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  onlyAnswers?: InputMaybe<Scalars["Boolean"]>;
  repositoryId?: InputMaybe<Scalars["ID"]>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationRepositoryDiscussionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  answered?: InputMaybe<Scalars["Boolean"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<DiscussionOrder>;
  repositoryId?: InputMaybe<Scalars["ID"]>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationRepositoryMigrationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<RepositoryMigrationOrder>;
  state?: InputMaybe<MigrationState>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationSponsoringArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorOrder>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationSponsorsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorOrder>;
  tierId?: InputMaybe<Scalars["ID"]>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationSponsorsActivitiesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorsActivityOrder>;
  period?: InputMaybe<SponsorsActivityPeriod>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationSponsorshipNewslettersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationSponsorshipsAsMaintainerArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  includePrivate?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorshipOrder>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationSponsorshipsAsSponsorArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorshipOrder>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationTeamArgs = {
  slug: Scalars["String"];
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type OrganizationTeamsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  ldapMapped?: InputMaybe<Scalars["Boolean"]>;
  orderBy?: InputMaybe<TeamOrder>;
  privacy?: InputMaybe<TeamPrivacy>;
  query?: InputMaybe<Scalars["String"]>;
  role?: InputMaybe<TeamRole>;
  rootTeamsOnly?: InputMaybe<Scalars["Boolean"]>;
  userLogins?: InputMaybe<Array<Scalars["String"]>>;
};

/** An audit entry in an organization audit log. */
export type OrganizationAuditEntry =
  | MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry;

/** The connection type for OrganizationAuditEntry. */
export type OrganizationAuditEntryConnection = {
  __typename?: "OrganizationAuditEntryConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<OrganizationAuditEntryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<OrganizationAuditEntry>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Metadata for an audit entry with action org.* */
export type OrganizationAuditEntryData = {
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars["String"]>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars["URI"]>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars["URI"]>;
};

/** An edge in a connection. */
export type OrganizationAuditEntryEdge = {
  __typename?: "OrganizationAuditEntryEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<OrganizationAuditEntry>;
};

/** A list of organizations managed by an enterprise. */
export type OrganizationConnection = {
  __typename?: "OrganizationConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<OrganizationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Organization>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type OrganizationEdge = {
  __typename?: "OrganizationEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Organization>;
};

/** The connection type for User. */
export type OrganizationEnterpriseOwnerConnection = {
  __typename?: "OrganizationEnterpriseOwnerConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<OrganizationEnterpriseOwnerEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An enterprise owner in the context of an organization that is part of the enterprise. */
export type OrganizationEnterpriseOwnerEdge = {
  __typename?: "OrganizationEnterpriseOwnerEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
  /** The role of the owner with respect to the organization. */
  organizationRole: RoleInOrganization;
};

/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
export type OrganizationIdentityProvider = Node & {
  __typename?: "OrganizationIdentityProvider";
  /** The digest algorithm used to sign SAML requests for the Identity Provider. */
  digestMethod?: Maybe<Scalars["URI"]>;
  /** External Identities provisioned by this Identity Provider */
  externalIdentities: ExternalIdentityConnection;
  id: Scalars["ID"];
  /** The x509 certificate used by the Identity Provider to sign assertions and responses. */
  idpCertificate?: Maybe<Scalars["X509Certificate"]>;
  /** The Issuer Entity ID for the SAML Identity Provider */
  issuer?: Maybe<Scalars["String"]>;
  /** Organization this Identity Provider belongs to */
  organization?: Maybe<Organization>;
  /** The signature algorithm used to sign SAML requests for the Identity Provider. */
  signatureMethod?: Maybe<Scalars["URI"]>;
  /** The URL endpoint for the Identity Provider's SAML SSO. */
  ssoUrl?: Maybe<Scalars["URI"]>;
};

/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
export type OrganizationIdentityProviderExternalIdentitiesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  login?: InputMaybe<Scalars["String"]>;
  membersOnly?: InputMaybe<Scalars["Boolean"]>;
  userName?: InputMaybe<Scalars["String"]>;
};

/** An Invitation for a user to an organization. */
export type OrganizationInvitation = Node & {
  __typename?: "OrganizationInvitation";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The email address of the user invited to the organization. */
  email?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  /** The type of invitation that was sent (e.g. email, user). */
  invitationType: OrganizationInvitationType;
  /** The user who was invited to the organization. */
  invitee?: Maybe<User>;
  /** The user who created the invitation. */
  inviter: User;
  /** The organization the invite is for */
  organization: Organization;
  /** The user's pending role in the organization (e.g. member, owner). */
  role: OrganizationInvitationRole;
};

/** The connection type for OrganizationInvitation. */
export type OrganizationInvitationConnection = {
  __typename?: "OrganizationInvitationConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<OrganizationInvitationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type OrganizationInvitationEdge = {
  __typename?: "OrganizationInvitationEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<OrganizationInvitation>;
};

/** The possible organization invitation roles. */
export enum OrganizationInvitationRole {
  /** The user is invited to be an admin of the organization. */
  Admin = "ADMIN",
  /** The user is invited to be a billing manager of the organization. */
  BillingManager = "BILLING_MANAGER",
  /** The user is invited to be a direct member of the organization. */
  DirectMember = "DIRECT_MEMBER",
  /** The user's previous role will be reinstated. */
  Reinstate = "REINSTATE",
}

/** The possible organization invitation types. */
export enum OrganizationInvitationType {
  /** The invitation was to an email address. */
  Email = "EMAIL",
  /** The invitation was to an existing user. */
  User = "USER",
}

/** The connection type for User. */
export type OrganizationMemberConnection = {
  __typename?: "OrganizationMemberConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<OrganizationMemberEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Represents a user within an organization. */
export type OrganizationMemberEdge = {
  __typename?: "OrganizationMemberEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
  hasTwoFactorEnabled?: Maybe<Scalars["Boolean"]>;
  /** The item at the end of the edge. */
  node?: Maybe<User>;
  /** The role this user has in the organization. */
  role?: Maybe<OrganizationMemberRole>;
};

/** The possible roles within an organization for its members. */
export enum OrganizationMemberRole {
  /** The user is an administrator of the organization. */
  Admin = "ADMIN",
  /** The user is a member of the organization. */
  Member = "MEMBER",
}

/** The possible values for the members can create repositories setting on an organization. */
export enum OrganizationMembersCanCreateRepositoriesSettingValue {
  /** Members will be able to create public and private repositories. */
  All = "ALL",
  /** Members will not be able to create public or private repositories. */
  Disabled = "DISABLED",
  /** Members will be able to create only internal repositories. */
  Internal = "INTERNAL",
  /** Members will be able to create only private repositories. */
  Private = "PRIVATE",
}

/** Ordering options for organization connections. */
export type OrganizationOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order organizations by. */
  field: OrganizationOrderField;
};

/** Properties by which organization connections can be ordered. */
export enum OrganizationOrderField {
  /** Order organizations by creation time */
  CreatedAt = "CREATED_AT",
  /** Order organizations by login */
  Login = "LOGIN",
}

/** An organization teams hovercard context */
export type OrganizationTeamsHovercardContext = HovercardContext & {
  __typename?: "OrganizationTeamsHovercardContext";
  /** A string describing this context */
  message: Scalars["String"];
  /** An octicon to accompany this context */
  octicon: Scalars["String"];
  /** Teams in this organization the user is a member of that are relevant */
  relevantTeams: TeamConnection;
  /** The path for the full team list for this user */
  teamsResourcePath: Scalars["URI"];
  /** The URL for the full team list for this user */
  teamsUrl: Scalars["URI"];
  /** The total number of teams the user is on in the organization */
  totalTeamCount: Scalars["Int"];
};

/** An organization teams hovercard context */
export type OrganizationTeamsHovercardContextRelevantTeamsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** An organization list hovercard context */
export type OrganizationsHovercardContext = HovercardContext & {
  __typename?: "OrganizationsHovercardContext";
  /** A string describing this context */
  message: Scalars["String"];
  /** An octicon to accompany this context */
  octicon: Scalars["String"];
  /** Organizations this user is a member of that are relevant */
  relevantOrganizations: OrganizationConnection;
  /** The total number of organizations this user is in */
  totalOrganizationCount: Scalars["Int"];
};

/** An organization list hovercard context */
export type OrganizationsHovercardContextRelevantOrganizationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Information for an uploaded package. */
export type Package = Node & {
  __typename?: "Package";
  id: Scalars["ID"];
  /** Find the latest version for the package. */
  latestVersion?: Maybe<PackageVersion>;
  /** Identifies the name of the package. */
  name: Scalars["String"];
  /** Identifies the type of the package. */
  packageType: PackageType;
  /** The repository this package belongs to. */
  repository?: Maybe<Repository>;
  /** Statistics about package activity. */
  statistics?: Maybe<PackageStatistics>;
  /** Find package version by version string. */
  version?: Maybe<PackageVersion>;
  /** list of versions for this package */
  versions: PackageVersionConnection;
};

/** Information for an uploaded package. */
export type PackageVersionArgs = {
  version: Scalars["String"];
};

/** Information for an uploaded package. */
export type PackageVersionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<PackageVersionOrder>;
};

/** The connection type for Package. */
export type PackageConnection = {
  __typename?: "PackageConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PackageEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Package>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PackageEdge = {
  __typename?: "PackageEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Package>;
};

/** A file in a package version. */
export type PackageFile = Node & {
  __typename?: "PackageFile";
  id: Scalars["ID"];
  /** MD5 hash of the file. */
  md5?: Maybe<Scalars["String"]>;
  /** Name of the file. */
  name: Scalars["String"];
  /** The package version this file belongs to. */
  packageVersion?: Maybe<PackageVersion>;
  /** SHA1 hash of the file. */
  sha1?: Maybe<Scalars["String"]>;
  /** SHA256 hash of the file. */
  sha256?: Maybe<Scalars["String"]>;
  /** Size of the file in bytes. */
  size?: Maybe<Scalars["Int"]>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** URL to download the asset. */
  url?: Maybe<Scalars["URI"]>;
};

/** The connection type for PackageFile. */
export type PackageFileConnection = {
  __typename?: "PackageFileConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PackageFileEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PackageFile>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PackageFileEdge = {
  __typename?: "PackageFileEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PackageFile>;
};

/** Ways in which lists of package files can be ordered upon return. */
export type PackageFileOrder = {
  /** The direction in which to order package files by the specified field. */
  direction?: InputMaybe<OrderDirection>;
  /** The field in which to order package files by. */
  field?: InputMaybe<PackageFileOrderField>;
};

/** Properties by which package file connections can be ordered. */
export enum PackageFileOrderField {
  /** Order package files by creation time */
  CreatedAt = "CREATED_AT",
}

/** Ways in which lists of packages can be ordered upon return. */
export type PackageOrder = {
  /** The direction in which to order packages by the specified field. */
  direction?: InputMaybe<OrderDirection>;
  /** The field in which to order packages by. */
  field?: InputMaybe<PackageOrderField>;
};

/** Properties by which package connections can be ordered. */
export enum PackageOrderField {
  /** Order packages by creation time */
  CreatedAt = "CREATED_AT",
}

/** Represents an owner of a package. */
export type PackageOwner = {
  id: Scalars["ID"];
  /** A list of packages under the owner. */
  packages: PackageConnection;
};

/** Represents an owner of a package. */
export type PackageOwnerPackagesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  names?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  orderBy?: InputMaybe<PackageOrder>;
  packageType?: InputMaybe<PackageType>;
  repositoryId?: InputMaybe<Scalars["ID"]>;
};

/** Represents a object that contains package activity statistics such as downloads. */
export type PackageStatistics = {
  __typename?: "PackageStatistics";
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount: Scalars["Int"];
};

/** A version tag contains the mapping between a tag name and a version. */
export type PackageTag = Node & {
  __typename?: "PackageTag";
  id: Scalars["ID"];
  /** Identifies the tag name of the version. */
  name: Scalars["String"];
  /** Version that the tag is associated with. */
  version?: Maybe<PackageVersion>;
};

/** The possible types of a package. */
export enum PackageType {
  /** A debian package. */
  Debian = "DEBIAN",
  /** A docker image. */
  Docker = "DOCKER",
  /** A maven package. */
  Maven = "MAVEN",
  /** An npm package. */
  Npm = "NPM",
  /** A nuget package. */
  Nuget = "NUGET",
  /** A python package. */
  Pypi = "PYPI",
  /** A rubygems package. */
  Rubygems = "RUBYGEMS",
}

/** Information about a specific package version. */
export type PackageVersion = Node & {
  __typename?: "PackageVersion";
  /** List of files associated with this package version */
  files: PackageFileConnection;
  id: Scalars["ID"];
  /** The package associated with this version. */
  package?: Maybe<Package>;
  /** The platform this version was built for. */
  platform?: Maybe<Scalars["String"]>;
  /** Whether or not this version is a pre-release. */
  preRelease: Scalars["Boolean"];
  /** The README of this package version. */
  readme?: Maybe<Scalars["String"]>;
  /** The release associated with this package version. */
  release?: Maybe<Release>;
  /** Statistics about package activity. */
  statistics?: Maybe<PackageVersionStatistics>;
  /** The package version summary. */
  summary?: Maybe<Scalars["String"]>;
  /** The version string. */
  version: Scalars["String"];
};

/** Information about a specific package version. */
export type PackageVersionFilesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<PackageFileOrder>;
};

/** The connection type for PackageVersion. */
export type PackageVersionConnection = {
  __typename?: "PackageVersionConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PackageVersionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PackageVersion>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PackageVersionEdge = {
  __typename?: "PackageVersionEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PackageVersion>;
};

/** Ways in which lists of package versions can be ordered upon return. */
export type PackageVersionOrder = {
  /** The direction in which to order package versions by the specified field. */
  direction?: InputMaybe<OrderDirection>;
  /** The field in which to order package versions by. */
  field?: InputMaybe<PackageVersionOrderField>;
};

/** Properties by which package version connections can be ordered. */
export enum PackageVersionOrderField {
  /** Order package versions by creation time */
  CreatedAt = "CREATED_AT",
}

/** Represents a object that contains package version activity statistics such as downloads. */
export type PackageVersionStatistics = {
  __typename?: "PackageVersionStatistics";
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount: Scalars["Int"];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: "PageInfo";
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars["String"]>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars["Boolean"];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars["Boolean"];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars["String"]>;
};

/** Types that can grant permissions on a repository to a user */
export type PermissionGranter = Organization | Repository | Team;

/** A level of permission and source for a user's access to a repository. */
export type PermissionSource = {
  __typename?: "PermissionSource";
  /** The organization the repository belongs to. */
  organization: Organization;
  /** The level of access this source has granted to the user. */
  permission: DefaultRepositoryPermissionField;
  /** The source of this permission. */
  source: PermissionGranter;
};

/** Autogenerated input type of PinIssue */
export type PinIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the issue to be pinned */
  issueId: Scalars["ID"];
};

/** Autogenerated return type of PinIssue */
export type PinIssuePayload = {
  __typename?: "PinIssuePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The issue that was pinned */
  issue?: Maybe<Issue>;
};

/** Types that can be pinned to a profile page. */
export type PinnableItem = Gist | Repository;

/** The connection type for PinnableItem. */
export type PinnableItemConnection = {
  __typename?: "PinnableItemConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PinnableItemEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PinnableItem>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PinnableItemEdge = {
  __typename?: "PinnableItemEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PinnableItem>;
};

/** Represents items that can be pinned to a profile page or dashboard. */
export enum PinnableItemType {
  /** A gist. */
  Gist = "GIST",
  /** An issue. */
  Issue = "ISSUE",
  /** An organization. */
  Organization = "ORGANIZATION",
  /** A project. */
  Project = "PROJECT",
  /** A pull request. */
  PullRequest = "PULL_REQUEST",
  /** A repository. */
  Repository = "REPOSITORY",
  /** A team. */
  Team = "TEAM",
  /** A user. */
  User = "USER",
}

/** A Pinned Discussion is a discussion pinned to a repository's index page. */
export type PinnedDiscussion = Node &
  RepositoryNode & {
    __typename?: "PinnedDiscussion";
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The discussion that was pinned. */
    discussion: Discussion;
    /** Color stops of the chosen gradient */
    gradientStopColors: Array<Scalars["String"]>;
    id: Scalars["ID"];
    /** Background texture pattern */
    pattern: PinnedDiscussionPattern;
    /** The actor that pinned this discussion. */
    pinnedBy: Actor;
    /** Preconfigured background gradient option */
    preconfiguredGradient?: Maybe<PinnedDiscussionGradient>;
    /** The repository associated with this node. */
    repository: Repository;
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
  };

/** The connection type for PinnedDiscussion. */
export type PinnedDiscussionConnection = {
  __typename?: "PinnedDiscussionConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PinnedDiscussionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PinnedDiscussion>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PinnedDiscussionEdge = {
  __typename?: "PinnedDiscussionEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PinnedDiscussion>;
};

/** Preconfigured gradients that may be used to style discussions pinned within a repository. */
export enum PinnedDiscussionGradient {
  /** A gradient of blue to mint */
  BlueMint = "BLUE_MINT",
  /** A gradient of blue to purple */
  BluePurple = "BLUE_PURPLE",
  /** A gradient of pink to blue */
  PinkBlue = "PINK_BLUE",
  /** A gradient of purple to coral */
  PurpleCoral = "PURPLE_CORAL",
  /** A gradient of red to orange */
  RedOrange = "RED_ORANGE",
}

/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */
export enum PinnedDiscussionPattern {
  /** An upward-facing chevron pattern */
  ChevronUp = "CHEVRON_UP",
  /** A hollow dot pattern */
  Dot = "DOT",
  /** A solid dot pattern */
  DotFill = "DOT_FILL",
  /** A heart pattern */
  HeartFill = "HEART_FILL",
  /** A plus sign pattern */
  Plus = "PLUS",
  /** A lightning bolt pattern */
  Zap = "ZAP",
}

/** Represents a 'pinned' event on a given issue or pull request. */
export type PinnedEvent = Node & {
  __typename?: "PinnedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Identifies the issue associated with the event. */
  issue: Issue;
};

/** A Pinned Issue is a issue pinned to a repository's index page. */
export type PinnedIssue = Node & {
  __typename?: "PinnedIssue";
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** The issue that was pinned. */
  issue: Issue;
  /** The actor that pinned this issue. */
  pinnedBy: Actor;
  /** The repository that this issue was pinned to. */
  repository: Repository;
};

/** The connection type for PinnedIssue. */
export type PinnedIssueConnection = {
  __typename?: "PinnedIssueConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PinnedIssueEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PinnedIssue>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PinnedIssueEdge = {
  __typename?: "PinnedIssueEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PinnedIssue>;
};

/** Audit log entry for a private_repository_forking.disable event. */
export type PrivateRepositoryForkingDisableAuditEntry = AuditEntry &
  EnterpriseAuditEntryData &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "PrivateRepositoryForkingDisableAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: Maybe<Scalars["URI"]>;
    /** The slug of the enterprise. */
    enterpriseSlug?: Maybe<Scalars["String"]>;
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: Maybe<Scalars["URI"]>;
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a private_repository_forking.enable event. */
export type PrivateRepositoryForkingEnableAuditEntry = AuditEntry &
  EnterpriseAuditEntryData &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "PrivateRepositoryForkingEnableAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: Maybe<Scalars["URI"]>;
    /** The slug of the enterprise. */
    enterpriseSlug?: Maybe<Scalars["String"]>;
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: Maybe<Scalars["URI"]>;
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own. */
export type ProfileItemShowcase = {
  __typename?: "ProfileItemShowcase";
  /** Whether or not the owner has pinned any repositories or gists. */
  hasPinnedItems: Scalars["Boolean"];
  /** The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned. */
  items: PinnableItemConnection;
};

/** A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own. */
export type ProfileItemShowcaseItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Represents any entity on GitHub that has a profile page. */
export type ProfileOwner = {
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems: Scalars["Boolean"];
  /** The public profile email. */
  email?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  itemShowcase: ProfileItemShowcase;
  /** The public profile location. */
  location?: Maybe<Scalars["String"]>;
  /** The username used to login. */
  login: Scalars["String"];
  /** The public profile name. */
  name?: Maybe<Scalars["String"]>;
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems: PinnableItemConnection;
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems: PinnableItemConnection;
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining: Scalars["Int"];
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems: Scalars["Boolean"];
  /** The public profile website URL. */
  websiteUrl?: Maybe<Scalars["URI"]>;
};

/** Represents any entity on GitHub that has a profile page. */
export type ProfileOwnerAnyPinnableItemsArgs = {
  type?: InputMaybe<PinnableItemType>;
};

/** Represents any entity on GitHub that has a profile page. */
export type ProfileOwnerPinnableItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  types?: InputMaybe<Array<PinnableItemType>>;
};

/** Represents any entity on GitHub that has a profile page. */
export type ProfileOwnerPinnedItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  types?: InputMaybe<Array<PinnableItemType>>;
};

/** Projects manage issues, pull requests and notes within a project owner. */
export type Project = Closable &
  Node &
  Updatable & {
    __typename?: "Project";
    /** The project's description body. */
    body?: Maybe<Scalars["String"]>;
    /** The projects description body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** `true` if the object is closed (definition of closed may depend on type) */
    closed: Scalars["Boolean"];
    /** Identifies the date and time when the object was closed. */
    closedAt?: Maybe<Scalars["DateTime"]>;
    /** List of columns in the project */
    columns: ProjectColumnConnection;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** The actor who originally created the project. */
    creator?: Maybe<Actor>;
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    id: Scalars["ID"];
    /** The project's name. */
    name: Scalars["String"];
    /** The project's number. */
    number: Scalars["Int"];
    /** The project's owner. Currently limited to repositories, organizations, and users. */
    owner: ProjectOwner;
    /** List of pending cards in this project */
    pendingCards: ProjectCardConnection;
    /** Project progress details. */
    progress: ProjectProgress;
    /** The HTTP path for this project */
    resourcePath: Scalars["URI"];
    /** Whether the project is open or closed. */
    state: ProjectState;
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this project */
    url: Scalars["URI"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
  };

/** Projects manage issues, pull requests and notes within a project owner. */
export type ProjectColumnsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Projects manage issues, pull requests and notes within a project owner. */
export type ProjectPendingCardsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A card in a project. */
export type ProjectCard = Node & {
  __typename?: "ProjectCard";
  /**
   * The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future.
   *
   */
  column?: Maybe<ProjectColumn>;
  /** The card content item */
  content?: Maybe<ProjectCardItem>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The actor who created this card */
  creator?: Maybe<Actor>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** Whether the card is archived */
  isArchived: Scalars["Boolean"];
  /** The card note */
  note?: Maybe<Scalars["String"]>;
  /** The project that contains this card. */
  project: Project;
  /** The HTTP path for this card */
  resourcePath: Scalars["URI"];
  /** The state of ProjectCard */
  state?: Maybe<ProjectCardState>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The HTTP URL for this card */
  url: Scalars["URI"];
};

/** The possible archived states of a project card. */
export enum ProjectCardArchivedState {
  /** A project card that is archived */
  Archived = "ARCHIVED",
  /** A project card that is not archived */
  NotArchived = "NOT_ARCHIVED",
}

/** The connection type for ProjectCard. */
export type ProjectCardConnection = {
  __typename?: "ProjectCardConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectCardEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ProjectCard>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ProjectCardEdge = {
  __typename?: "ProjectCardEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectCard>;
};

/** Types that can be inside Project Cards. */
export type ProjectCardItem = Issue | PullRequest;

/** Various content states of a ProjectCard */
export enum ProjectCardState {
  /** The card has content only. */
  ContentOnly = "CONTENT_ONLY",
  /** The card has a note only. */
  NoteOnly = "NOTE_ONLY",
  /** The card is redacted. */
  Redacted = "REDACTED",
}

/** A column inside a project. */
export type ProjectColumn = Node & {
  __typename?: "ProjectColumn";
  /** List of cards in the column */
  cards: ProjectCardConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** The project column's name. */
  name: Scalars["String"];
  /** The project that contains this column. */
  project: Project;
  /** The semantic purpose of the column */
  purpose?: Maybe<ProjectColumnPurpose>;
  /** The HTTP path for this project column */
  resourcePath: Scalars["URI"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The HTTP URL for this project column */
  url: Scalars["URI"];
};

/** A column inside a project. */
export type ProjectColumnCardsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for ProjectColumn. */
export type ProjectColumnConnection = {
  __typename?: "ProjectColumnConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectColumnEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ProjectColumn>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ProjectColumnEdge = {
  __typename?: "ProjectColumnEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectColumn>;
};

/** The semantic purpose of the column - todo, in progress, or done. */
export enum ProjectColumnPurpose {
  /** The column contains cards which are complete */
  Done = "DONE",
  /** The column contains cards which are currently being worked on */
  InProgress = "IN_PROGRESS",
  /** The column contains cards still to be worked on */
  Todo = "TODO",
}

/** A list of projects associated with the owner. */
export type ProjectConnection = {
  __typename?: "ProjectConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Project>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ProjectEdge = {
  __typename?: "ProjectEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Project>;
};

/** The type of a project item. */
export enum ProjectItemType {
  /** Draft Issue */
  DraftIssue = "DRAFT_ISSUE",
  /** Issue */
  Issue = "ISSUE",
  /** Pull Request */
  PullRequest = "PULL_REQUEST",
  /** Redacted Item */
  Redacted = "REDACTED",
}

/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type ProjectNext = Closable &
  Node &
  Updatable & {
    __typename?: "ProjectNext";
    /** Returns true if the project is closed. */
    closed: Scalars["Boolean"];
    /** Identifies the date and time when the object was closed. */
    closedAt?: Maybe<Scalars["DateTime"]>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** The actor who originally created the project. */
    creator?: Maybe<Actor>;
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The project's description. */
    description?: Maybe<Scalars["String"]>;
    /** List of fields in the project */
    fields: ProjectNextFieldConnection;
    id: Scalars["ID"];
    /** List of items in the project */
    items: ProjectNextItemConnection;
    /** The project's number. */
    number: Scalars["Int"];
    /** The project's owner. Currently limited to organizations and users. */
    owner: ProjectNextOwner;
    /** Returns true if the project is public. */
    public: Scalars["Boolean"];
    /** The repositories the project is linked to. */
    repositories: RepositoryConnection;
    /** The HTTP path for this project */
    resourcePath: Scalars["URI"];
    /** The project's short description. */
    shortDescription?: Maybe<Scalars["String"]>;
    /** The project's name. */
    title?: Maybe<Scalars["String"]>;
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this project */
    url: Scalars["URI"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** List of views in the project */
    views: ProjectViewConnection;
  };

/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type ProjectNextFieldsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type ProjectNextItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type ProjectNextRepositoriesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type ProjectNextViewsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for ProjectNext. */
export type ProjectNextConnection = {
  __typename?: "ProjectNextConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectNextEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ProjectNext>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ProjectNextEdge = {
  __typename?: "ProjectNextEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectNext>;
};

/** A field inside a project. */
export type ProjectNextField = Node &
  ProjectNextFieldCommon & {
    __typename?: "ProjectNextField";
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** The field's type. */
    dataType: ProjectNextFieldType;
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    id: Scalars["ID"];
    /** The project field's name. */
    name: Scalars["String"];
    /** The project that contains this field. */
    project: ProjectNext;
    /** The field's settings. */
    settings?: Maybe<Scalars["String"]>;
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
  };

/** Common fields across different field types */
export type ProjectNextFieldCommon = {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The field's type. */
  dataType: ProjectNextFieldType;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** The project field's name. */
  name: Scalars["String"];
  /** The project that contains this field. */
  project: ProjectNext;
  /** The field's settings. */
  settings?: Maybe<Scalars["String"]>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** The connection type for ProjectNextField. */
export type ProjectNextFieldConnection = {
  __typename?: "ProjectNextFieldConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectNextFieldEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ProjectNextField>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ProjectNextFieldEdge = {
  __typename?: "ProjectNextFieldEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectNextField>;
};

/** The type of a project next field. */
export enum ProjectNextFieldType {
  /** Assignees */
  Assignees = "ASSIGNEES",
  /** Date */
  Date = "DATE",
  /** Iteration */
  Iteration = "ITERATION",
  /** Labels */
  Labels = "LABELS",
  /** Linked Pull Requests */
  LinkedPullRequests = "LINKED_PULL_REQUESTS",
  /** Milestone */
  Milestone = "MILESTONE",
  /** Number */
  Number = "NUMBER",
  /** Repository */
  Repository = "REPOSITORY",
  /** Reviewers */
  Reviewers = "REVIEWERS",
  /** Single Select */
  SingleSelect = "SINGLE_SELECT",
  /** Text */
  Text = "TEXT",
  /** Title */
  Title = "TITLE",
  /** Tracks */
  Tracks = "TRACKS",
}

/** An item within a new Project. */
export type ProjectNextItem = Node & {
  __typename?: "ProjectNextItem";
  /** The content of the referenced draft issue, issue, or pull request */
  content?: Maybe<ProjectNextItemContent>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The actor who created the item. */
  creator?: Maybe<Actor>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** List of field values */
  fieldValues: ProjectNextItemFieldValueConnection;
  id: Scalars["ID"];
  /** Whether the item is archived. */
  isArchived: Scalars["Boolean"];
  /** The project that contains this item. */
  project: ProjectNext;
  /** The title of the item */
  title?: Maybe<Scalars["String"]>;
  /** The type of the item. */
  type: ProjectItemType;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** An item within a new Project. */
export type ProjectNextItemFieldValuesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for ProjectNextItem. */
export type ProjectNextItemConnection = {
  __typename?: "ProjectNextItemConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectNextItemEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ProjectNextItem>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Types that can be inside Project Items. */
export type ProjectNextItemContent = DraftIssue | Issue | PullRequest;

/** An edge in a connection. */
export type ProjectNextItemEdge = {
  __typename?: "ProjectNextItemEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectNextItem>;
};

/** An value of a field in an item of a new Project. */
export type ProjectNextItemFieldValue = Node & {
  __typename?: "ProjectNextItemFieldValue";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The actor who created the item. */
  creator?: Maybe<Actor>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** The project field that contains this value. */
  projectField: ProjectNextField;
  /** The project item that contains this value. */
  projectItem: ProjectNextItem;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The value of a field */
  value?: Maybe<Scalars["String"]>;
};

/** The connection type for ProjectNextItemFieldValue. */
export type ProjectNextItemFieldValueConnection = {
  __typename?: "ProjectNextItemFieldValueConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectNextItemFieldValueEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ProjectNextItemFieldValue>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ProjectNextItemFieldValueEdge = {
  __typename?: "ProjectNextItemFieldValueEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectNextItemFieldValue>;
};

/** Properties by which the return project can be ordered. */
export enum ProjectNextOrderField {
  /** The project's date and time of creation */
  CreatedAt = "CREATED_AT",
  /** The project's number */
  Number = "NUMBER",
  /** The project's title */
  Title = "TITLE",
  /** The project's date and time of update */
  UpdatedAt = "UPDATED_AT",
}

/** Represents an owner of a project (beta). */
export type ProjectNextOwner = {
  id: Scalars["ID"];
  /** Find a project by project (beta) number. */
  projectNext?: Maybe<ProjectNext>;
  /** A list of projects (beta) under the owner. */
  projectsNext: ProjectNextConnection;
};

/** Represents an owner of a project (beta). */
export type ProjectNextOwnerProjectNextArgs = {
  number: Scalars["Int"];
};

/** Represents an owner of a project (beta). */
export type ProjectNextOwnerProjectsNextArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query?: InputMaybe<Scalars["String"]>;
  sortBy?: InputMaybe<ProjectNextOrderField>;
};

/** Ways in which lists of projects can be ordered upon return. */
export type ProjectOrder = {
  /** The direction in which to order projects by the specified field. */
  direction: OrderDirection;
  /** The field in which to order projects by. */
  field: ProjectOrderField;
};

/** Properties by which project connections can be ordered. */
export enum ProjectOrderField {
  /** Order projects by creation time */
  CreatedAt = "CREATED_AT",
  /** Order projects by name */
  Name = "NAME",
  /** Order projects by update time */
  UpdatedAt = "UPDATED_AT",
}

/** Represents an owner of a Project. */
export type ProjectOwner = {
  id: Scalars["ID"];
  /** Find project by number. */
  project?: Maybe<Project>;
  /** A list of projects under the owner. */
  projects: ProjectConnection;
  /** The HTTP path listing owners projects */
  projectsResourcePath: Scalars["URI"];
  /** The HTTP URL listing owners projects */
  projectsUrl: Scalars["URI"];
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: Scalars["Boolean"];
};

/** Represents an owner of a Project. */
export type ProjectOwnerProjectArgs = {
  number: Scalars["Int"];
};

/** Represents an owner of a Project. */
export type ProjectOwnerProjectsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ProjectOrder>;
  search?: InputMaybe<Scalars["String"]>;
  states?: InputMaybe<Array<ProjectState>>;
};

/** Project progress stats. */
export type ProjectProgress = {
  __typename?: "ProjectProgress";
  /** The number of done cards. */
  doneCount: Scalars["Int"];
  /** The percentage of done cards. */
  donePercentage: Scalars["Float"];
  /** Whether progress tracking is enabled and cards with purpose exist for this project */
  enabled: Scalars["Boolean"];
  /** The number of in-progress cards. */
  inProgressCount: Scalars["Int"];
  /** The percentage of in-progress cards. */
  inProgressPercentage: Scalars["Float"];
  /** The number of to do cards. */
  todoCount: Scalars["Int"];
  /** The percentage of to do cards. */
  todoPercentage: Scalars["Float"];
};

/** State of the project; either 'open' or 'closed' */
export enum ProjectState {
  /** The project is closed. */
  Closed = "CLOSED",
  /** The project is open. */
  Open = "OPEN",
}

/** GitHub-provided templates for Projects */
export enum ProjectTemplate {
  /** Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns. */
  AutomatedKanbanV2 = "AUTOMATED_KANBAN_V2",
  /** Create a board with triggers to automatically move cards across columns with review automation. */
  AutomatedReviewsKanban = "AUTOMATED_REVIEWS_KANBAN",
  /** Create a board with columns for To do, In progress and Done. */
  BasicKanban = "BASIC_KANBAN",
  /** Create a board to triage and prioritize bugs with To do, priority, and Done columns. */
  BugTriage = "BUG_TRIAGE",
}

/** A view within a Project. */
export type ProjectView = Node & {
  __typename?: "ProjectView";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** The project view's filter. */
  filter?: Maybe<Scalars["String"]>;
  /** The view's group-by field. */
  groupBy?: Maybe<Array<Scalars["Int"]>>;
  id: Scalars["ID"];
  /** The project view's layout. */
  layout: ProjectViewLayout;
  /** The project view's name. */
  name: Scalars["String"];
  /** The project view's number. */
  number: Scalars["Int"];
  /** The project that contains this view. */
  project: ProjectNext;
  /** The view's sort-by config. */
  sortBy?: Maybe<Array<SortBy>>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The view's vertical-group-by field. */
  verticalGroupBy?: Maybe<Array<Scalars["Int"]>>;
  /** The view's visible fields. */
  visibleFields?: Maybe<Array<Scalars["Int"]>>;
};

/** The connection type for ProjectView. */
export type ProjectViewConnection = {
  __typename?: "ProjectViewConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectViewEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ProjectView>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ProjectViewEdge = {
  __typename?: "ProjectViewEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectView>;
};

/** The layout of a project view. */
export enum ProjectViewLayout {
  /** Board layout */
  BoardLayout = "BOARD_LAYOUT",
  /** Table layout */
  TableLayout = "TABLE_LAYOUT",
}

/** A user's public key. */
export type PublicKey = Node & {
  __typename?: "PublicKey";
  /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
  accessedAt?: Maybe<Scalars["DateTime"]>;
  /** Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */
  createdAt?: Maybe<Scalars["DateTime"]>;
  /** The fingerprint for this PublicKey. */
  fingerprint: Scalars["String"];
  id: Scalars["ID"];
  /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
  isReadOnly?: Maybe<Scalars["Boolean"]>;
  /** The public key string. */
  key: Scalars["String"];
  /** Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user. */
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

/** The connection type for PublicKey. */
export type PublicKeyConnection = {
  __typename?: "PublicKeyConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PublicKeyEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PublicKey>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PublicKeyEdge = {
  __typename?: "PublicKeyEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PublicKey>;
};

/** A repository pull request. */
export type PullRequest = Assignable &
  Closable &
  Comment &
  Labelable &
  Lockable &
  Node &
  ProjectNextOwner &
  Reactable &
  RepositoryNode &
  Subscribable &
  UniformResourceLocatable &
  Updatable &
  UpdatableComment & {
    __typename?: "PullRequest";
    /** Reason that the conversation was locked. */
    activeLockReason?: Maybe<LockReason>;
    /** The number of additions in this pull request. */
    additions: Scalars["Int"];
    /** A list of Users assigned to this object. */
    assignees: UserConnection;
    /** The actor who authored the comment. */
    author?: Maybe<Actor>;
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation;
    /** Returns the auto-merge request object if one exists for this pull request. */
    autoMergeRequest?: Maybe<AutoMergeRequest>;
    /** Identifies the base Ref associated with the pull request. */
    baseRef?: Maybe<Ref>;
    /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
    baseRefName: Scalars["String"];
    /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
    baseRefOid: Scalars["GitObjectID"];
    /** The repository associated with this pull request's base Ref. */
    baseRepository?: Maybe<Repository>;
    /** The body as Markdown. */
    body: Scalars["String"];
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** The body rendered to text. */
    bodyText: Scalars["String"];
    /** The number of changed files in this pull request. */
    changedFiles: Scalars["Int"];
    /** The HTTP path for the checks of this pull request. */
    checksResourcePath: Scalars["URI"];
    /** The HTTP URL for the checks of this pull request. */
    checksUrl: Scalars["URI"];
    /** `true` if the pull request is closed */
    closed: Scalars["Boolean"];
    /** Identifies the date and time when the object was closed. */
    closedAt?: Maybe<Scalars["DateTime"]>;
    /** List of issues that were may be closed by this pull request */
    closingIssuesReferences?: Maybe<IssueConnection>;
    /** A list of comments associated with the pull request. */
    comments: IssueCommentConnection;
    /** A list of commits present in this pull request's head branch not present in the base branch. */
    commits: PullRequestCommitConnection;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The number of deletions in this pull request. */
    deletions: Scalars["Int"];
    /** The actor who edited this pull request's body. */
    editor?: Maybe<Actor>;
    /** Lists the files changed within this pull request. */
    files?: Maybe<PullRequestChangedFileConnection>;
    /** Identifies the head Ref associated with the pull request. */
    headRef?: Maybe<Ref>;
    /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
    headRefName: Scalars["String"];
    /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
    headRefOid: Scalars["GitObjectID"];
    /** The repository associated with this pull request's head Ref. */
    headRepository?: Maybe<Repository>;
    /** The owner of the repository associated with this pull request's head Ref. */
    headRepositoryOwner?: Maybe<RepositoryOwner>;
    /** The hovercard information for this issue */
    hovercard: Hovercard;
    id: Scalars["ID"];
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"];
    /** The head and base repositories are different. */
    isCrossRepository: Scalars["Boolean"];
    /** Identifies if the pull request is a draft. */
    isDraft: Scalars["Boolean"];
    /** Is this pull request read by the viewer */
    isReadByViewer?: Maybe<Scalars["Boolean"]>;
    /** A list of labels associated with the object. */
    labels?: Maybe<LabelConnection>;
    /** The moment the editor made the last edit */
    lastEditedAt?: Maybe<Scalars["DateTime"]>;
    /** A list of latest reviews per user associated with the pull request. */
    latestOpinionatedReviews?: Maybe<PullRequestReviewConnection>;
    /** A list of latest reviews per user associated with the pull request that are not also pending review. */
    latestReviews?: Maybe<PullRequestReviewConnection>;
    /** `true` if the pull request is locked */
    locked: Scalars["Boolean"];
    /** Indicates whether maintainers can modify the pull request. */
    maintainerCanModify: Scalars["Boolean"];
    /** The commit that was created when this pull request was merged. */
    mergeCommit?: Maybe<Commit>;
    /** Whether or not the pull request can be merged based on the existence of merge conflicts. */
    mergeable: MergeableState;
    /** Whether or not the pull request was merged. */
    merged: Scalars["Boolean"];
    /** The date and time that the pull request was merged. */
    mergedAt?: Maybe<Scalars["DateTime"]>;
    /** The actor who merged the pull request. */
    mergedBy?: Maybe<Actor>;
    /** Identifies the milestone associated with the pull request. */
    milestone?: Maybe<Milestone>;
    /** Identifies the pull request number. */
    number: Scalars["Int"];
    /** A list of Users that are participating in the Pull Request conversation. */
    participants: UserConnection;
    /** The permalink to the pull request. */
    permalink: Scalars["URI"];
    /** The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request. */
    potentialMergeCommit?: Maybe<Commit>;
    /** List of project cards associated with this pull request. */
    projectCards: ProjectCardConnection;
    /** Find a project by project (beta) number. */
    projectNext?: Maybe<ProjectNext>;
    /** List of project (beta) items associated with this pull request. */
    projectNextItems: ProjectNextItemConnection;
    /** A list of projects (beta) under the owner. */
    projectsNext: ProjectNextConnection;
    /** Identifies when the comment was published at. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: Maybe<Array<ReactionGroup>>;
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection;
    /** The repository associated with this node. */
    repository: Repository;
    /** The HTTP path for this pull request. */
    resourcePath: Scalars["URI"];
    /** The HTTP path for reverting this pull request. */
    revertResourcePath: Scalars["URI"];
    /** The HTTP URL for reverting this pull request. */
    revertUrl: Scalars["URI"];
    /** The current status of this pull request with respect to code review. */
    reviewDecision?: Maybe<PullRequestReviewDecision>;
    /** A list of review requests associated with the pull request. */
    reviewRequests?: Maybe<ReviewRequestConnection>;
    /** The list of all review threads for this pull request. */
    reviewThreads: PullRequestReviewThreadConnection;
    /** A list of reviews associated with the pull request. */
    reviews?: Maybe<PullRequestReviewConnection>;
    /** Identifies the state of the pull request. */
    state: PullRequestState;
    /** A list of reviewer suggestions based on commit history and past review comments. */
    suggestedReviewers: Array<Maybe<SuggestedReviewer>>;
    /**
     * A list of events, comments, commits, etc. associated with the pull request.
     * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
     */
    timeline: PullRequestTimelineConnection;
    /** A list of events, comments, commits, etc. associated with the pull request. */
    timelineItems: PullRequestTimelineItemsConnection;
    /** Identifies the pull request title. */
    title: Scalars["String"];
    /** Identifies the pull request title rendered to HTML. */
    titleHTML: Scalars["HTML"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this pull request. */
    url: Scalars["URI"];
    /** A list of edits to this content. */
    userContentEdits?: Maybe<UserContentEditConnection>;
    /** Whether or not the viewer can apply suggestion. */
    viewerCanApplySuggestion: Scalars["Boolean"];
    /** Check if the viewer can restore the deleted head ref. */
    viewerCanDeleteHeadRef: Scalars["Boolean"];
    /** Whether or not the viewer can disable auto-merge */
    viewerCanDisableAutoMerge: Scalars["Boolean"];
    /** Whether or not the viewer can enable auto-merge */
    viewerCanEnableAutoMerge: Scalars["Boolean"];
    /** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */
    viewerCanMergeAsAdmin: Scalars["Boolean"];
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"];
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"];
    /** The latest review given from the viewer. */
    viewerLatestReview?: Maybe<PullRequestReview>;
    /** The person who has requested the viewer for review on this pull request. */
    viewerLatestReviewRequest?: Maybe<ReviewRequest>;
    /** The merge body text for the viewer and method. */
    viewerMergeBodyText: Scalars["String"];
    /** The merge headline text for the viewer and method. */
    viewerMergeHeadlineText: Scalars["String"];
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: Maybe<SubscriptionState>;
  };

/** A repository pull request. */
export type PullRequestAssigneesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository pull request. */
export type PullRequestClosingIssuesReferencesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueOrder>;
  userLinkedOnly?: InputMaybe<Scalars["Boolean"]>;
};

/** A repository pull request. */
export type PullRequestCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueCommentOrder>;
};

/** A repository pull request. */
export type PullRequestCommitsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository pull request. */
export type PullRequestFilesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository pull request. */
export type PullRequestHovercardArgs = {
  includeNotificationContexts?: InputMaybe<Scalars["Boolean"]>;
};

/** A repository pull request. */
export type PullRequestLabelsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<LabelOrder>;
};

/** A repository pull request. */
export type PullRequestLatestOpinionatedReviewsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  writersOnly?: InputMaybe<Scalars["Boolean"]>;
};

/** A repository pull request. */
export type PullRequestLatestReviewsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository pull request. */
export type PullRequestParticipantsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository pull request. */
export type PullRequestProjectCardsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository pull request. */
export type PullRequestProjectNextArgs = {
  number: Scalars["Int"];
};

/** A repository pull request. */
export type PullRequestProjectNextItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  includeArchived?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository pull request. */
export type PullRequestProjectsNextArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query?: InputMaybe<Scalars["String"]>;
  sortBy?: InputMaybe<ProjectNextOrderField>;
};

/** A repository pull request. */
export type PullRequestReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** A repository pull request. */
export type PullRequestReviewRequestsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository pull request. */
export type PullRequestReviewThreadsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository pull request. */
export type PullRequestReviewsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  author?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  states?: InputMaybe<Array<PullRequestReviewState>>;
};

/** A repository pull request. */
export type PullRequestTimelineArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  since?: InputMaybe<Scalars["DateTime"]>;
};

/** A repository pull request. */
export type PullRequestTimelineItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  itemTypes?: InputMaybe<Array<PullRequestTimelineItemsItemType>>;
  last?: InputMaybe<Scalars["Int"]>;
  since?: InputMaybe<Scalars["DateTime"]>;
  skip?: InputMaybe<Scalars["Int"]>;
};

/** A repository pull request. */
export type PullRequestUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository pull request. */
export type PullRequestViewerMergeBodyTextArgs = {
  mergeType?: InputMaybe<PullRequestMergeMethod>;
};

/** A repository pull request. */
export type PullRequestViewerMergeHeadlineTextArgs = {
  mergeType?: InputMaybe<PullRequestMergeMethod>;
};

/** A file changed in a pull request. */
export type PullRequestChangedFile = {
  __typename?: "PullRequestChangedFile";
  /** The number of additions to the file. */
  additions: Scalars["Int"];
  /** The number of deletions to the file. */
  deletions: Scalars["Int"];
  /** The path of the file. */
  path: Scalars["String"];
  /** The state of the file for the viewer. */
  viewerViewedState: FileViewedState;
};

/** The connection type for PullRequestChangedFile. */
export type PullRequestChangedFileConnection = {
  __typename?: "PullRequestChangedFileConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PullRequestChangedFileEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PullRequestChangedFile>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PullRequestChangedFileEdge = {
  __typename?: "PullRequestChangedFileEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PullRequestChangedFile>;
};

/** Represents a Git commit part of a pull request. */
export type PullRequestCommit = Node &
  UniformResourceLocatable & {
    __typename?: "PullRequestCommit";
    /** The Git commit object */
    commit: Commit;
    id: Scalars["ID"];
    /** The pull request this commit belongs to */
    pullRequest: PullRequest;
    /** The HTTP path for this pull request commit */
    resourcePath: Scalars["URI"];
    /** The HTTP URL for this pull request commit */
    url: Scalars["URI"];
  };

/** Represents a commit comment thread part of a pull request. */
export type PullRequestCommitCommentThread = Node &
  RepositoryNode & {
    __typename?: "PullRequestCommitCommentThread";
    /** The comments that exist in this thread. */
    comments: CommitCommentConnection;
    /** The commit the comments were made on. */
    commit: Commit;
    id: Scalars["ID"];
    /** The file the comments were made on. */
    path?: Maybe<Scalars["String"]>;
    /** The position in the diff for the commit that the comment was made on. */
    position?: Maybe<Scalars["Int"]>;
    /** The pull request this commit comment thread belongs to */
    pullRequest: PullRequest;
    /** The repository associated with this node. */
    repository: Repository;
  };

/** Represents a commit comment thread part of a pull request. */
export type PullRequestCommitCommentThreadCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for PullRequestCommit. */
export type PullRequestCommitConnection = {
  __typename?: "PullRequestCommitConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PullRequestCommitEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PullRequestCommit>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PullRequestCommitEdge = {
  __typename?: "PullRequestCommitEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PullRequestCommit>;
};

/** The connection type for PullRequest. */
export type PullRequestConnection = {
  __typename?: "PullRequestConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PullRequestEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PullRequest>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** This aggregates pull requests opened by a user within one repository. */
export type PullRequestContributionsByRepository = {
  __typename?: "PullRequestContributionsByRepository";
  /** The pull request contributions. */
  contributions: CreatedPullRequestContributionConnection;
  /** The repository in which the pull requests were opened. */
  repository: Repository;
};

/** This aggregates pull requests opened by a user within one repository. */
export type PullRequestContributionsByRepositoryContributionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ContributionOrder>;
};

/** An edge in a connection. */
export type PullRequestEdge = {
  __typename?: "PullRequestEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PullRequest>;
};

/** Represents available types of methods to use when merging a pull request. */
export enum PullRequestMergeMethod {
  /** Add all commits from the head branch to the base branch with a merge commit. */
  Merge = "MERGE",
  /** Add all commits from the head branch onto the base branch individually. */
  Rebase = "REBASE",
  /** Combine all commits from the head branch into a single commit in the base branch. */
  Squash = "SQUASH",
}

/** Ways in which lists of issues can be ordered upon return. */
export type PullRequestOrder = {
  /** The direction in which to order pull requests by the specified field. */
  direction: OrderDirection;
  /** The field in which to order pull requests by. */
  field: PullRequestOrderField;
};

/** Properties by which pull_requests connections can be ordered. */
export enum PullRequestOrderField {
  /** Order pull_requests by creation time */
  CreatedAt = "CREATED_AT",
  /** Order pull_requests by update time */
  UpdatedAt = "UPDATED_AT",
}

/** A review object for a given pull request. */
export type PullRequestReview = Comment &
  Deletable &
  Node &
  Reactable &
  RepositoryNode &
  Updatable &
  UpdatableComment & {
    __typename?: "PullRequestReview";
    /** The actor who authored the comment. */
    author?: Maybe<Actor>;
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation;
    /** Indicates whether the author of this review has push access to the repository. */
    authorCanPushToRepository: Scalars["Boolean"];
    /** Identifies the pull request review body. */
    body: Scalars["String"];
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** The body of this review rendered as plain text. */
    bodyText: Scalars["String"];
    /** A list of review comments for the current pull request review. */
    comments: PullRequestReviewCommentConnection;
    /** Identifies the commit associated with this pull request review. */
    commit?: Maybe<Commit>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The actor who edited the comment. */
    editor?: Maybe<Actor>;
    id: Scalars["ID"];
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"];
    /** The moment the editor made the last edit */
    lastEditedAt?: Maybe<Scalars["DateTime"]>;
    /** A list of teams that this review was made on behalf of. */
    onBehalfOf: TeamConnection;
    /** Identifies when the comment was published at. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /** Identifies the pull request associated with this pull request review. */
    pullRequest: PullRequest;
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: Maybe<Array<ReactionGroup>>;
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection;
    /** The repository associated with this node. */
    repository: Repository;
    /** The HTTP path permalink for this PullRequestReview. */
    resourcePath: Scalars["URI"];
    /** Identifies the current state of the pull request review. */
    state: PullRequestReviewState;
    /** Identifies when the Pull Request Review was submitted */
    submittedAt?: Maybe<Scalars["DateTime"]>;
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL permalink for this PullRequestReview. */
    url: Scalars["URI"];
    /** A list of edits to this content. */
    userContentEdits?: Maybe<UserContentEditConnection>;
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"];
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"];
  };

/** A review object for a given pull request. */
export type PullRequestReviewCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A review object for a given pull request. */
export type PullRequestReviewOnBehalfOfArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A review object for a given pull request. */
export type PullRequestReviewReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** A review object for a given pull request. */
export type PullRequestReviewUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A review comment associated with a given repository pull request. */
export type PullRequestReviewComment = Comment &
  Deletable &
  Minimizable &
  Node &
  Reactable &
  RepositoryNode &
  Updatable &
  UpdatableComment & {
    __typename?: "PullRequestReviewComment";
    /** The actor who authored the comment. */
    author?: Maybe<Actor>;
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation;
    /** The comment body of this review comment. */
    body: Scalars["String"];
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** The comment body of this review comment rendered as plain text. */
    bodyText: Scalars["String"];
    /** Identifies the commit associated with the comment. */
    commit?: Maybe<Commit>;
    /** Identifies when the comment was created. */
    createdAt: Scalars["DateTime"];
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The diff hunk to which the comment applies. */
    diffHunk: Scalars["String"];
    /** Identifies when the comment was created in a draft state. */
    draftedAt: Scalars["DateTime"];
    /** The actor who edited the comment. */
    editor?: Maybe<Actor>;
    id: Scalars["ID"];
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"];
    /** Returns whether or not a comment has been minimized. */
    isMinimized: Scalars["Boolean"];
    /** The moment the editor made the last edit */
    lastEditedAt?: Maybe<Scalars["DateTime"]>;
    /** Returns why the comment was minimized. */
    minimizedReason?: Maybe<Scalars["String"]>;
    /** Identifies the original commit associated with the comment. */
    originalCommit?: Maybe<Commit>;
    /** The original line index in the diff to which the comment applies. */
    originalPosition: Scalars["Int"];
    /** Identifies when the comment body is outdated */
    outdated: Scalars["Boolean"];
    /** The path to which the comment applies. */
    path: Scalars["String"];
    /** The line index in the diff to which the comment applies. */
    position?: Maybe<Scalars["Int"]>;
    /** Identifies when the comment was published at. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /** The pull request associated with this review comment. */
    pullRequest: PullRequest;
    /** The pull request review associated with this review comment. */
    pullRequestReview?: Maybe<PullRequestReview>;
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: Maybe<Array<ReactionGroup>>;
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection;
    /** The comment this is a reply to. */
    replyTo?: Maybe<PullRequestReviewComment>;
    /** The repository associated with this node. */
    repository: Repository;
    /** The HTTP path permalink for this review comment. */
    resourcePath: Scalars["URI"];
    /** Identifies the state of the comment. */
    state: PullRequestReviewCommentState;
    /** Identifies when the comment was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL permalink for this review comment. */
    url: Scalars["URI"];
    /** A list of edits to this content. */
    userContentEdits?: Maybe<UserContentEditConnection>;
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"];
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize: Scalars["Boolean"];
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"];
  };

/** A review comment associated with a given repository pull request. */
export type PullRequestReviewCommentReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** A review comment associated with a given repository pull request. */
export type PullRequestReviewCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for PullRequestReviewComment. */
export type PullRequestReviewCommentConnection = {
  __typename?: "PullRequestReviewCommentConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PullRequestReviewCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PullRequestReviewComment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PullRequestReviewCommentEdge = {
  __typename?: "PullRequestReviewCommentEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PullRequestReviewComment>;
};

/** The possible states of a pull request review comment. */
export enum PullRequestReviewCommentState {
  /** A comment that is part of a pending review */
  Pending = "PENDING",
  /** A comment that is part of a submitted review */
  Submitted = "SUBMITTED",
}

/** The connection type for PullRequestReview. */
export type PullRequestReviewConnection = {
  __typename?: "PullRequestReviewConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PullRequestReviewEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PullRequestReview>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** This aggregates pull request reviews made by a user within one repository. */
export type PullRequestReviewContributionsByRepository = {
  __typename?: "PullRequestReviewContributionsByRepository";
  /** The pull request review contributions. */
  contributions: CreatedPullRequestReviewContributionConnection;
  /** The repository in which the pull request reviews were made. */
  repository: Repository;
};

/** This aggregates pull request reviews made by a user within one repository. */
export type PullRequestReviewContributionsByRepositoryContributionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ContributionOrder>;
};

/** The review status of a pull request. */
export enum PullRequestReviewDecision {
  /** The pull request has received an approving review. */
  Approved = "APPROVED",
  /** Changes have been requested on the pull request. */
  ChangesRequested = "CHANGES_REQUESTED",
  /** A review is required before the pull request can be merged. */
  ReviewRequired = "REVIEW_REQUIRED",
}

/** An edge in a connection. */
export type PullRequestReviewEdge = {
  __typename?: "PullRequestReviewEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PullRequestReview>;
};

/** The possible events to perform on a pull request review. */
export enum PullRequestReviewEvent {
  /** Submit feedback and approve merging these changes. */
  Approve = "APPROVE",
  /** Submit general feedback without explicit approval. */
  Comment = "COMMENT",
  /** Dismiss review so it now longer effects merging. */
  Dismiss = "DISMISS",
  /** Submit feedback that must be addressed before merging. */
  RequestChanges = "REQUEST_CHANGES",
}

/** The possible states of a pull request review. */
export enum PullRequestReviewState {
  /** A review allowing the pull request to merge. */
  Approved = "APPROVED",
  /** A review blocking the pull request from merging. */
  ChangesRequested = "CHANGES_REQUESTED",
  /** An informational review. */
  Commented = "COMMENTED",
  /** A review that has been dismissed. */
  Dismissed = "DISMISSED",
  /** A review that has not yet been submitted. */
  Pending = "PENDING",
}

/** A threaded list of comments for a given pull request. */
export type PullRequestReviewThread = Node & {
  __typename?: "PullRequestReviewThread";
  /** A list of pull request comments associated with the thread. */
  comments: PullRequestReviewCommentConnection;
  /** The side of the diff on which this thread was placed. */
  diffSide: DiffSide;
  id: Scalars["ID"];
  /** Whether or not the thread has been collapsed (resolved) */
  isCollapsed: Scalars["Boolean"];
  /** Indicates whether this thread was outdated by newer changes. */
  isOutdated: Scalars["Boolean"];
  /** Whether this thread has been resolved */
  isResolved: Scalars["Boolean"];
  /** The line in the file to which this thread refers */
  line?: Maybe<Scalars["Int"]>;
  /** The original line in the file to which this thread refers. */
  originalLine?: Maybe<Scalars["Int"]>;
  /** The original start line in the file to which this thread refers (multi-line only). */
  originalStartLine?: Maybe<Scalars["Int"]>;
  /** Identifies the file path of this thread. */
  path: Scalars["String"];
  /** Identifies the pull request associated with this thread. */
  pullRequest: PullRequest;
  /** Identifies the repository associated with this thread. */
  repository: Repository;
  /** The user who resolved this thread */
  resolvedBy?: Maybe<User>;
  /** The side of the diff that the first line of the thread starts on (multi-line only) */
  startDiffSide?: Maybe<DiffSide>;
  /** The start line in the file to which this thread refers (multi-line only) */
  startLine?: Maybe<Scalars["Int"]>;
  /** Indicates whether the current viewer can reply to this thread. */
  viewerCanReply: Scalars["Boolean"];
  /** Whether or not the viewer can resolve this thread */
  viewerCanResolve: Scalars["Boolean"];
  /** Whether or not the viewer can unresolve this thread */
  viewerCanUnresolve: Scalars["Boolean"];
};

/** A threaded list of comments for a given pull request. */
export type PullRequestReviewThreadCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  skip?: InputMaybe<Scalars["Int"]>;
};

/** Review comment threads for a pull request review. */
export type PullRequestReviewThreadConnection = {
  __typename?: "PullRequestReviewThreadConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PullRequestReviewThreadEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PullRequestReviewThread>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PullRequestReviewThreadEdge = {
  __typename?: "PullRequestReviewThreadEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PullRequestReviewThread>;
};

/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
export type PullRequestRevisionMarker = {
  __typename?: "PullRequestRevisionMarker";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The last commit the viewer has seen. */
  lastSeenCommit: Commit;
  /** The pull request to which the marker belongs. */
  pullRequest: PullRequest;
};

/** The possible states of a pull request. */
export enum PullRequestState {
  /** A pull request that has been closed without being merged. */
  Closed = "CLOSED",
  /** A pull request that has been closed by being merged. */
  Merged = "MERGED",
  /** A pull request that is still open. */
  Open = "OPEN",
}

/** A repository pull request template. */
export type PullRequestTemplate = {
  __typename?: "PullRequestTemplate";
  /** The body of the template */
  body?: Maybe<Scalars["String"]>;
  /** The filename of the template */
  filename?: Maybe<Scalars["String"]>;
  /** The repository the template belongs to */
  repository: Repository;
};

/** The connection type for PullRequestTimelineItem. */
export type PullRequestTimelineConnection = {
  __typename?: "PullRequestTimelineConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PullRequestTimelineItemEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PullRequestTimelineItem>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An item in a pull request timeline */
export type PullRequestTimelineItem =
  | AssignedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | Commit
  | CommitCommentThread
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MergedEvent
  | MilestonedEvent
  | PullRequestReview
  | PullRequestReviewComment
  | PullRequestReviewThread
  | ReferencedEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnsubscribedEvent
  | UserBlockedEvent;

/** An edge in a connection. */
export type PullRequestTimelineItemEdge = {
  __typename?: "PullRequestTimelineItemEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PullRequestTimelineItem>;
};

/** An item in a pull request timeline */
export type PullRequestTimelineItems =
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent;

/** The connection type for PullRequestTimelineItems. */
export type PullRequestTimelineItemsConnection = {
  __typename?: "PullRequestTimelineItemsConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PullRequestTimelineItemsEdge>>>;
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount: Scalars["Int"];
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PullRequestTimelineItems>>>;
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount: Scalars["Int"];
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** An edge in a connection. */
export type PullRequestTimelineItemsEdge = {
  __typename?: "PullRequestTimelineItemsEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PullRequestTimelineItems>;
};

/** The possible item types found in a timeline. */
export enum PullRequestTimelineItemsItemType {
  /** Represents an 'added_to_merge_queue' event on a given pull request. */
  AddedToMergeQueueEvent = "ADDED_TO_MERGE_QUEUE_EVENT",
  /** Represents a 'added_to_project' event on a given issue or pull request. */
  AddedToProjectEvent = "ADDED_TO_PROJECT_EVENT",
  /** Represents an 'assigned' event on any assignable object. */
  AssignedEvent = "ASSIGNED_EVENT",
  /** Represents a 'automatic_base_change_failed' event on a given pull request. */
  AutomaticBaseChangeFailedEvent = "AUTOMATIC_BASE_CHANGE_FAILED_EVENT",
  /** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
  AutomaticBaseChangeSucceededEvent = "AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT",
  /** Represents a 'auto_merge_disabled' event on a given pull request. */
  AutoMergeDisabledEvent = "AUTO_MERGE_DISABLED_EVENT",
  /** Represents a 'auto_merge_enabled' event on a given pull request. */
  AutoMergeEnabledEvent = "AUTO_MERGE_ENABLED_EVENT",
  /** Represents a 'auto_rebase_enabled' event on a given pull request. */
  AutoRebaseEnabledEvent = "AUTO_REBASE_ENABLED_EVENT",
  /** Represents a 'auto_squash_enabled' event on a given pull request. */
  AutoSquashEnabledEvent = "AUTO_SQUASH_ENABLED_EVENT",
  /** Represents a 'base_ref_changed' event on a given issue or pull request. */
  BaseRefChangedEvent = "BASE_REF_CHANGED_EVENT",
  /** Represents a 'base_ref_deleted' event on a given pull request. */
  BaseRefDeletedEvent = "BASE_REF_DELETED_EVENT",
  /** Represents a 'base_ref_force_pushed' event on a given pull request. */
  BaseRefForcePushedEvent = "BASE_REF_FORCE_PUSHED_EVENT",
  /** Represents a 'closed' event on any `Closable`. */
  ClosedEvent = "CLOSED_EVENT",
  /** Represents a 'comment_deleted' event on a given issue or pull request. */
  CommentDeletedEvent = "COMMENT_DELETED_EVENT",
  /** Represents a 'connected' event on a given issue or pull request. */
  ConnectedEvent = "CONNECTED_EVENT",
  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
  ConvertedNoteToIssueEvent = "CONVERTED_NOTE_TO_ISSUE_EVENT",
  /** Represents a 'converted_to_discussion' event on a given issue. */
  ConvertedToDiscussionEvent = "CONVERTED_TO_DISCUSSION_EVENT",
  /** Represents a 'convert_to_draft' event on a given pull request. */
  ConvertToDraftEvent = "CONVERT_TO_DRAFT_EVENT",
  /** Represents a mention made by one issue or pull request to another. */
  CrossReferencedEvent = "CROSS_REFERENCED_EVENT",
  /** Represents a 'demilestoned' event on a given issue or pull request. */
  DemilestonedEvent = "DEMILESTONED_EVENT",
  /** Represents a 'deployed' event on a given pull request. */
  DeployedEvent = "DEPLOYED_EVENT",
  /** Represents a 'deployment_environment_changed' event on a given pull request. */
  DeploymentEnvironmentChangedEvent = "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT",
  /** Represents a 'disconnected' event on a given issue or pull request. */
  DisconnectedEvent = "DISCONNECTED_EVENT",
  /** Represents a 'head_ref_deleted' event on a given pull request. */
  HeadRefDeletedEvent = "HEAD_REF_DELETED_EVENT",
  /** Represents a 'head_ref_force_pushed' event on a given pull request. */
  HeadRefForcePushedEvent = "HEAD_REF_FORCE_PUSHED_EVENT",
  /** Represents a 'head_ref_restored' event on a given pull request. */
  HeadRefRestoredEvent = "HEAD_REF_RESTORED_EVENT",
  /** Represents a comment on an Issue. */
  IssueComment = "ISSUE_COMMENT",
  /** Represents a 'labeled' event on a given issue or pull request. */
  LabeledEvent = "LABELED_EVENT",
  /** Represents a 'locked' event on a given issue or pull request. */
  LockedEvent = "LOCKED_EVENT",
  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
  MarkedAsDuplicateEvent = "MARKED_AS_DUPLICATE_EVENT",
  /** Represents a 'mentioned' event on a given issue or pull request. */
  MentionedEvent = "MENTIONED_EVENT",
  /** Represents a 'merged' event on a given pull request. */
  MergedEvent = "MERGED_EVENT",
  /** Represents a 'milestoned' event on a given issue or pull request. */
  MilestonedEvent = "MILESTONED_EVENT",
  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
  MovedColumnsInProjectEvent = "MOVED_COLUMNS_IN_PROJECT_EVENT",
  /** Represents a 'pinned' event on a given issue or pull request. */
  PinnedEvent = "PINNED_EVENT",
  /** Represents a Git commit part of a pull request. */
  PullRequestCommit = "PULL_REQUEST_COMMIT",
  /** Represents a commit comment thread part of a pull request. */
  PullRequestCommitCommentThread = "PULL_REQUEST_COMMIT_COMMENT_THREAD",
  /** A review object for a given pull request. */
  PullRequestReview = "PULL_REQUEST_REVIEW",
  /** A threaded list of comments for a given pull request. */
  PullRequestReviewThread = "PULL_REQUEST_REVIEW_THREAD",
  /** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
  PullRequestRevisionMarker = "PULL_REQUEST_REVISION_MARKER",
  /** Represents a 'ready_for_review' event on a given pull request. */
  ReadyForReviewEvent = "READY_FOR_REVIEW_EVENT",
  /** Represents a 'referenced' event on a given `ReferencedSubject`. */
  ReferencedEvent = "REFERENCED_EVENT",
  /** Represents a 'removed_from_merge_queue' event on a given pull request. */
  RemovedFromMergeQueueEvent = "REMOVED_FROM_MERGE_QUEUE_EVENT",
  /** Represents a 'removed_from_project' event on a given issue or pull request. */
  RemovedFromProjectEvent = "REMOVED_FROM_PROJECT_EVENT",
  /** Represents a 'renamed' event on a given issue or pull request */
  RenamedTitleEvent = "RENAMED_TITLE_EVENT",
  /** Represents a 'reopened' event on any `Closable`. */
  ReopenedEvent = "REOPENED_EVENT",
  /** Represents a 'review_dismissed' event on a given issue or pull request. */
  ReviewDismissedEvent = "REVIEW_DISMISSED_EVENT",
  /** Represents an 'review_requested' event on a given pull request. */
  ReviewRequestedEvent = "REVIEW_REQUESTED_EVENT",
  /** Represents an 'review_request_removed' event on a given pull request. */
  ReviewRequestRemovedEvent = "REVIEW_REQUEST_REMOVED_EVENT",
  /** Represents a 'subscribed' event on a given `Subscribable`. */
  SubscribedEvent = "SUBSCRIBED_EVENT",
  /** Represents a 'transferred' event on a given issue or pull request. */
  TransferredEvent = "TRANSFERRED_EVENT",
  /** Represents an 'unassigned' event on any assignable object. */
  UnassignedEvent = "UNASSIGNED_EVENT",
  /** Represents an 'unlabeled' event on a given issue or pull request. */
  UnlabeledEvent = "UNLABELED_EVENT",
  /** Represents an 'unlocked' event on a given issue or pull request. */
  UnlockedEvent = "UNLOCKED_EVENT",
  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
  UnmarkedAsDuplicateEvent = "UNMARKED_AS_DUPLICATE_EVENT",
  /** Represents an 'unpinned' event on a given issue or pull request. */
  UnpinnedEvent = "UNPINNED_EVENT",
  /** Represents an 'unsubscribed' event on a given `Subscribable`. */
  UnsubscribedEvent = "UNSUBSCRIBED_EVENT",
  /** Represents a 'user_blocked' event on a given user. */
  UserBlockedEvent = "USER_BLOCKED_EVENT",
}

/** The possible target states when updating a pull request. */
export enum PullRequestUpdateState {
  /** A pull request that has been closed without being merged. */
  Closed = "CLOSED",
  /** A pull request that is still open. */
  Open = "OPEN",
}

/** A Git push. */
export type Push = Node & {
  __typename?: "Push";
  id: Scalars["ID"];
  /** The SHA after the push */
  nextSha?: Maybe<Scalars["GitObjectID"]>;
  /** The permalink for this push. */
  permalink: Scalars["URI"];
  /** The SHA before the push */
  previousSha?: Maybe<Scalars["GitObjectID"]>;
  /** The actor who pushed */
  pusher: Actor;
  /** The repository that was pushed to */
  repository: Repository;
};

/** A team, user or app who has the ability to push to a protected branch. */
export type PushAllowance = Node & {
  __typename?: "PushAllowance";
  /** The actor that can push. */
  actor?: Maybe<PushAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  id: Scalars["ID"];
};

/** Types that can be an actor. */
export type PushAllowanceActor = App | Team | User;

/** The connection type for PushAllowance. */
export type PushAllowanceConnection = {
  __typename?: "PushAllowanceConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PushAllowanceEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<PushAllowance>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type PushAllowanceEdge = {
  __typename?: "PushAllowanceEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<PushAllowance>;
};

/** The query root of GitHub's GraphQL interface. */
export type Query = {
  __typename?: "Query";
  /** Look up a code of conduct by its key */
  codeOfConduct?: Maybe<CodeOfConduct>;
  /** Look up a code of conduct by its key */
  codesOfConduct?: Maybe<Array<Maybe<CodeOfConduct>>>;
  /** Look up an enterprise by URL slug. */
  enterprise?: Maybe<Enterprise>;
  /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
  enterpriseAdministratorInvitation?: Maybe<EnterpriseAdministratorInvitation>;
  /** Look up a pending enterprise administrator invitation by invitation token. */
  enterpriseAdministratorInvitationByToken?: Maybe<EnterpriseAdministratorInvitation>;
  /** Look up an open source license by its key */
  license?: Maybe<License>;
  /** Return a list of known open source licenses */
  licenses: Array<Maybe<License>>;
  /** Get alphabetically sorted list of Marketplace categories */
  marketplaceCategories: Array<MarketplaceCategory>;
  /** Look up a Marketplace category by its slug. */
  marketplaceCategory?: Maybe<MarketplaceCategory>;
  /** Look up a single Marketplace listing */
  marketplaceListing?: Maybe<MarketplaceListing>;
  /** Look up Marketplace listings */
  marketplaceListings: MarketplaceListingConnection;
  /** Return information about the GitHub instance */
  meta: GitHubMetadata;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>;
  /** Lookup a organization by login. */
  organization?: Maybe<Organization>;
  /** The client's rate limit information. */
  rateLimit?: Maybe<RateLimit>;
  /** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */
  relay: Query;
  /** Lookup a given repository by the owner and repository name. */
  repository?: Maybe<Repository>;
  /** Lookup a repository owner (ie. either a User or an Organization) by login. */
  repositoryOwner?: Maybe<RepositoryOwner>;
  /** Lookup resource by a URL. */
  resource?: Maybe<UniformResourceLocatable>;
  /** Perform a search across resources. */
  search: SearchResultItemConnection;
  /** GitHub Security Advisories */
  securityAdvisories: SecurityAdvisoryConnection;
  /** Fetch a Security Advisory by its GHSA ID */
  securityAdvisory?: Maybe<SecurityAdvisory>;
  /** Software Vulnerabilities documented by GitHub Security Advisories */
  securityVulnerabilities: SecurityVulnerabilityConnection;
  /** Users and organizations who can be sponsored via GitHub Sponsors. */
  sponsorables: SponsorableItemConnection;
  /** Look up a topic by name. */
  topic?: Maybe<Topic>;
  /** Lookup a user by login. */
  user?: Maybe<User>;
  /** The currently authenticated user. */
  viewer: User;
};

/** The query root of GitHub's GraphQL interface. */
export type QueryCodeOfConductArgs = {
  key: Scalars["String"];
};

/** The query root of GitHub's GraphQL interface. */
export type QueryEnterpriseArgs = {
  invitationToken?: InputMaybe<Scalars["String"]>;
  slug: Scalars["String"];
};

/** The query root of GitHub's GraphQL interface. */
export type QueryEnterpriseAdministratorInvitationArgs = {
  enterpriseSlug: Scalars["String"];
  role: EnterpriseAdministratorRole;
  userLogin: Scalars["String"];
};

/** The query root of GitHub's GraphQL interface. */
export type QueryEnterpriseAdministratorInvitationByTokenArgs = {
  invitationToken: Scalars["String"];
};

/** The query root of GitHub's GraphQL interface. */
export type QueryLicenseArgs = {
  key: Scalars["String"];
};

/** The query root of GitHub's GraphQL interface. */
export type QueryMarketplaceCategoriesArgs = {
  excludeEmpty?: InputMaybe<Scalars["Boolean"]>;
  excludeSubcategories?: InputMaybe<Scalars["Boolean"]>;
  includeCategories?: InputMaybe<Array<Scalars["String"]>>;
};

/** The query root of GitHub's GraphQL interface. */
export type QueryMarketplaceCategoryArgs = {
  slug: Scalars["String"];
  useTopicAliases?: InputMaybe<Scalars["Boolean"]>;
};

/** The query root of GitHub's GraphQL interface. */
export type QueryMarketplaceListingArgs = {
  slug: Scalars["String"];
};

/** The query root of GitHub's GraphQL interface. */
export type QueryMarketplaceListingsArgs = {
  adminId?: InputMaybe<Scalars["ID"]>;
  after?: InputMaybe<Scalars["String"]>;
  allStates?: InputMaybe<Scalars["Boolean"]>;
  before?: InputMaybe<Scalars["String"]>;
  categorySlug?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  organizationId?: InputMaybe<Scalars["ID"]>;
  primaryCategoryOnly?: InputMaybe<Scalars["Boolean"]>;
  slugs?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  useTopicAliases?: InputMaybe<Scalars["Boolean"]>;
  viewerCanAdmin?: InputMaybe<Scalars["Boolean"]>;
  withFreeTrialsOnly?: InputMaybe<Scalars["Boolean"]>;
};

/** The query root of GitHub's GraphQL interface. */
export type QueryNodeArgs = {
  id: Scalars["ID"];
};

/** The query root of GitHub's GraphQL interface. */
export type QueryNodesArgs = {
  ids: Array<Scalars["ID"]>;
};

/** The query root of GitHub's GraphQL interface. */
export type QueryOrganizationArgs = {
  login: Scalars["String"];
};

/** The query root of GitHub's GraphQL interface. */
export type QueryRateLimitArgs = {
  dryRun?: InputMaybe<Scalars["Boolean"]>;
};

/** The query root of GitHub's GraphQL interface. */
export type QueryRepositoryArgs = {
  followRenames?: InputMaybe<Scalars["Boolean"]>;
  name: Scalars["String"];
  owner: Scalars["String"];
};

/** The query root of GitHub's GraphQL interface. */
export type QueryRepositoryOwnerArgs = {
  login: Scalars["String"];
};

/** The query root of GitHub's GraphQL interface. */
export type QueryResourceArgs = {
  url: Scalars["URI"];
};

/** The query root of GitHub's GraphQL interface. */
export type QuerySearchArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query: Scalars["String"];
  type: SearchType;
};

/** The query root of GitHub's GraphQL interface. */
export type QuerySecurityAdvisoriesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  identifier?: InputMaybe<SecurityAdvisoryIdentifierFilter>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SecurityAdvisoryOrder>;
  publishedSince?: InputMaybe<Scalars["DateTime"]>;
  updatedSince?: InputMaybe<Scalars["DateTime"]>;
};

/** The query root of GitHub's GraphQL interface. */
export type QuerySecurityAdvisoryArgs = {
  ghsaId: Scalars["String"];
};

/** The query root of GitHub's GraphQL interface. */
export type QuerySecurityVulnerabilitiesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  ecosystem?: InputMaybe<SecurityAdvisoryEcosystem>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SecurityVulnerabilityOrder>;
  package?: InputMaybe<Scalars["String"]>;
  severities?: InputMaybe<Array<SecurityAdvisorySeverity>>;
};

/** The query root of GitHub's GraphQL interface. */
export type QuerySponsorablesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  dependencyEcosystem?: InputMaybe<SecurityAdvisoryEcosystem>;
  ecosystem?: InputMaybe<DependencyGraphEcosystem>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  onlyDependencies?: InputMaybe<Scalars["Boolean"]>;
  orderBy?: InputMaybe<SponsorableOrder>;
  orgLoginForDependencies?: InputMaybe<Scalars["String"]>;
};

/** The query root of GitHub's GraphQL interface. */
export type QueryTopicArgs = {
  name: Scalars["String"];
};

/** The query root of GitHub's GraphQL interface. */
export type QueryUserArgs = {
  login: Scalars["String"];
};

/** Represents the client's rate limit. */
export type RateLimit = {
  __typename?: "RateLimit";
  /** The point cost for the current query counting against the rate limit. */
  cost: Scalars["Int"];
  /** The maximum number of points the client is permitted to consume in a 60 minute window. */
  limit: Scalars["Int"];
  /** The maximum number of nodes this query may return */
  nodeCount: Scalars["Int"];
  /** The number of points remaining in the current rate limit window. */
  remaining: Scalars["Int"];
  /** The time at which the current rate limit window resets in UTC epoch seconds. */
  resetAt: Scalars["DateTime"];
  /** The number of points used in the current rate limit window. */
  used: Scalars["Int"];
};

/** Represents a subject that can be reacted on. */
export type Reactable = {
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /** Can user react to this subject */
  viewerCanReact: Scalars["Boolean"];
};

/** Represents a subject that can be reacted on. */
export type ReactableReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** The connection type for User. */
export type ReactingUserConnection = {
  __typename?: "ReactingUserConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ReactingUserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Represents a user that's made a reaction. */
export type ReactingUserEdge = {
  __typename?: "ReactingUserEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  node: User;
  /** The moment when the user made the reaction. */
  reactedAt: Scalars["DateTime"];
};

/** An emoji reaction to a particular piece of content. */
export type Reaction = Node & {
  __typename?: "Reaction";
  /** Identifies the emoji reaction. */
  content: ReactionContent;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** The reactable piece of content */
  reactable: Reactable;
  /** Identifies the user who created this reaction. */
  user?: Maybe<User>;
};

/** A list of reactions that have been left on the subject. */
export type ReactionConnection = {
  __typename?: "ReactionConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ReactionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Reaction>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted: Scalars["Boolean"];
};

/** Emojis that can be attached to Issues, Pull Requests and Comments. */
export enum ReactionContent {
  /** Represents the `:confused:` emoji. */
  Confused = "CONFUSED",
  /** Represents the `:eyes:` emoji. */
  Eyes = "EYES",
  /** Represents the `:heart:` emoji. */
  Heart = "HEART",
  /** Represents the `:hooray:` emoji. */
  Hooray = "HOORAY",
  /** Represents the `:laugh:` emoji. */
  Laugh = "LAUGH",
  /** Represents the `:rocket:` emoji. */
  Rocket = "ROCKET",
  /** Represents the `:-1:` emoji. */
  ThumbsDown = "THUMBS_DOWN",
  /** Represents the `:+1:` emoji. */
  ThumbsUp = "THUMBS_UP",
}

/** An edge in a connection. */
export type ReactionEdge = {
  __typename?: "ReactionEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Reaction>;
};

/** A group of emoji reactions to a particular piece of content. */
export type ReactionGroup = {
  __typename?: "ReactionGroup";
  /** Identifies the emoji reaction. */
  content: ReactionContent;
  /** Identifies when the reaction was created. */
  createdAt?: Maybe<Scalars["DateTime"]>;
  /** Reactors to the reaction subject with the emotion represented by this reaction group. */
  reactors: ReactorConnection;
  /** The subject that was reacted to. */
  subject: Reactable;
  /**
   * Users who have reacted to the reaction subject with the emotion represented by this reaction group
   * @deprecated Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC.
   */
  users: ReactingUserConnection;
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted: Scalars["Boolean"];
};

/** A group of emoji reactions to a particular piece of content. */
export type ReactionGroupReactorsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A group of emoji reactions to a particular piece of content. */
export type ReactionGroupUsersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Ways in which lists of reactions can be ordered upon return. */
export type ReactionOrder = {
  /** The direction in which to order reactions by the specified field. */
  direction: OrderDirection;
  /** The field in which to order reactions by. */
  field: ReactionOrderField;
};

/** A list of fields that reactions can be ordered by. */
export enum ReactionOrderField {
  /** Allows ordering a list of reactions by when they were created. */
  CreatedAt = "CREATED_AT",
}

/** Types that can be assigned to reactions. */
export type Reactor = Bot | Mannequin | Organization | User;

/** The connection type for Reactor. */
export type ReactorConnection = {
  __typename?: "ReactorConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ReactorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Reactor>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Represents an author of a reaction. */
export type ReactorEdge = {
  __typename?: "ReactorEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The author of the reaction. */
  node: Reactor;
  /** The moment when the user made the reaction. */
  reactedAt: Scalars["DateTime"];
};

/** Represents a 'ready_for_review' event on a given pull request. */
export type ReadyForReviewEvent = Node &
  UniformResourceLocatable & {
    __typename?: "ReadyForReviewEvent";
    /** Identifies the actor who performed the event. */
    actor?: Maybe<Actor>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    id: Scalars["ID"];
    /** PullRequest referenced by event. */
    pullRequest: PullRequest;
    /** The HTTP path for this ready for review event. */
    resourcePath: Scalars["URI"];
    /** The HTTP URL for this ready for review event. */
    url: Scalars["URI"];
  };

/** Represents a Git reference. */
export type Ref = Node & {
  __typename?: "Ref";
  /** A list of pull requests with this ref as the head ref. */
  associatedPullRequests: PullRequestConnection;
  /** Branch protection rules for this ref */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  id: Scalars["ID"];
  /** The ref name. */
  name: Scalars["String"];
  /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
  prefix: Scalars["String"];
  /** Branch protection rules that are viewable by non-admins */
  refUpdateRule?: Maybe<RefUpdateRule>;
  /** The repository the ref belongs to. */
  repository: Repository;
  /** The object the ref points to. Returns null when object does not exist. */
  target?: Maybe<GitObject>;
};

/** Represents a Git reference. */
export type RefAssociatedPullRequestsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  baseRefName?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  headRefName?: InputMaybe<Scalars["String"]>;
  labels?: InputMaybe<Array<Scalars["String"]>>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueOrder>;
  states?: InputMaybe<Array<PullRequestState>>;
};

/** The connection type for Ref. */
export type RefConnection = {
  __typename?: "RefConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RefEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Ref>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type RefEdge = {
  __typename?: "RefEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Ref>;
};

/** Ways in which lists of git refs can be ordered upon return. */
export type RefOrder = {
  /** The direction in which to order refs by the specified field. */
  direction: OrderDirection;
  /** The field in which to order refs by. */
  field: RefOrderField;
};

/** Properties by which ref connections can be ordered. */
export enum RefOrderField {
  /** Order refs by their alphanumeric name */
  Alphabetical = "ALPHABETICAL",
  /** Order refs by underlying commit date if the ref prefix is refs/tags/ */
  TagCommitDate = "TAG_COMMIT_DATE",
}

/** A ref update rules for a viewer. */
export type RefUpdateRule = {
  __typename?: "RefUpdateRule";
  /** Can this branch be deleted. */
  allowsDeletions: Scalars["Boolean"];
  /** Are force pushes allowed on this branch. */
  allowsForcePushes: Scalars["Boolean"];
  /** Identifies the protection rule pattern. */
  pattern: Scalars["String"];
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Maybe<Scalars["Int"]>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: Maybe<Array<Maybe<Scalars["String"]>>>;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews: Scalars["Boolean"];
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution: Scalars["Boolean"];
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory: Scalars["Boolean"];
  /** Are commits required to be signed. */
  requiresSignatures: Scalars["Boolean"];
  /** Is the viewer allowed to dismiss reviews. */
  viewerAllowedToDismissReviews: Scalars["Boolean"];
  /** Can the viewer push to the branch */
  viewerCanPush: Scalars["Boolean"];
};

/** Represents a 'referenced' event on a given `ReferencedSubject`. */
export type ReferencedEvent = Node & {
  __typename?: "ReferencedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the commit associated with the 'referenced' event. */
  commit?: Maybe<Commit>;
  /** Identifies the repository associated with the 'referenced' event. */
  commitRepository: Repository;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Reference originated in a different repository. */
  isCrossRepository: Scalars["Boolean"];
  /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
  isDirectReference: Scalars["Boolean"];
  /** Object referenced by event. */
  subject: ReferencedSubject;
};

/** Any referencable object */
export type ReferencedSubject = Issue | PullRequest;

/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export type RegenerateEnterpriseIdentityProviderRecoveryCodesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: Scalars["ID"];
};

/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload = {
  __typename?: "RegenerateEnterpriseIdentityProviderRecoveryCodesPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The identity provider for the enterprise. */
  identityProvider?: Maybe<EnterpriseIdentityProvider>;
};

/** Autogenerated input type of RegenerateVerifiableDomainToken */
export type RegenerateVerifiableDomainTokenInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the verifiable domain to regenerate the verification token of. */
  id: Scalars["ID"];
};

/** Autogenerated return type of RegenerateVerifiableDomainToken */
export type RegenerateVerifiableDomainTokenPayload = {
  __typename?: "RegenerateVerifiableDomainTokenPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The verification token that was generated. */
  verificationToken?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of RejectDeployments */
export type RejectDeploymentsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Optional comment for rejecting deployments */
  comment?: InputMaybe<Scalars["String"]>;
  /** The ids of environments to reject deployments */
  environmentIds: Array<Scalars["ID"]>;
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: Scalars["ID"];
};

/** Autogenerated return type of RejectDeployments */
export type RejectDeploymentsPayload = {
  __typename?: "RejectDeploymentsPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The affected deployments. */
  deployments?: Maybe<Array<Deployment>>;
};

/** A release contains the content for a release. */
export type Release = Node &
  Reactable &
  UniformResourceLocatable & {
    __typename?: "Release";
    /** The author of the release */
    author?: Maybe<User>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The description of the release. */
    description?: Maybe<Scalars["String"]>;
    /** The description of this release rendered to HTML. */
    descriptionHTML?: Maybe<Scalars["HTML"]>;
    id: Scalars["ID"];
    /** Whether or not the release is a draft */
    isDraft: Scalars["Boolean"];
    /** Whether or not the release is the latest releast */
    isLatest: Scalars["Boolean"];
    /** Whether or not the release is a prerelease */
    isPrerelease: Scalars["Boolean"];
    /** A list of users mentioned in the release description */
    mentions?: Maybe<UserConnection>;
    /** The title of the release. */
    name?: Maybe<Scalars["String"]>;
    /** Identifies the date and time when the release was created. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: Maybe<Array<ReactionGroup>>;
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection;
    /** List of releases assets which are dependent on this release. */
    releaseAssets: ReleaseAssetConnection;
    /** The repository that the release belongs to. */
    repository: Repository;
    /** The HTTP path for this issue */
    resourcePath: Scalars["URI"];
    /** A description of the release, rendered to HTML without any links in it. */
    shortDescriptionHTML?: Maybe<Scalars["HTML"]>;
    /** The Git tag the release points to */
    tag?: Maybe<Ref>;
    /** The tag commit for this release. */
    tagCommit?: Maybe<Commit>;
    /** The name of the release's Git tag */
    tagName: Scalars["String"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this issue */
    url: Scalars["URI"];
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"];
  };

/** A release contains the content for a release. */
export type ReleaseMentionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A release contains the content for a release. */
export type ReleaseReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** A release contains the content for a release. */
export type ReleaseReleaseAssetsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  name?: InputMaybe<Scalars["String"]>;
};

/** A release contains the content for a release. */
export type ReleaseShortDescriptionHtmlArgs = {
  limit?: InputMaybe<Scalars["Int"]>;
};

/** A release asset contains the content for a release asset. */
export type ReleaseAsset = Node & {
  __typename?: "ReleaseAsset";
  /** The asset's content-type */
  contentType: Scalars["String"];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The number of times this asset was downloaded */
  downloadCount: Scalars["Int"];
  /** Identifies the URL where you can download the release asset via the browser. */
  downloadUrl: Scalars["URI"];
  id: Scalars["ID"];
  /** Identifies the title of the release asset. */
  name: Scalars["String"];
  /** Release that the asset is associated with */
  release?: Maybe<Release>;
  /** The size (in bytes) of the asset */
  size: Scalars["Int"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The user that performed the upload */
  uploadedBy: User;
  /** Identifies the URL of the release asset. */
  url: Scalars["URI"];
};

/** The connection type for ReleaseAsset. */
export type ReleaseAssetConnection = {
  __typename?: "ReleaseAssetConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ReleaseAssetEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ReleaseAsset>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ReleaseAssetEdge = {
  __typename?: "ReleaseAssetEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ReleaseAsset>;
};

/** The connection type for Release. */
export type ReleaseConnection = {
  __typename?: "ReleaseConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ReleaseEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Release>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ReleaseEdge = {
  __typename?: "ReleaseEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Release>;
};

/** Ways in which lists of releases can be ordered upon return. */
export type ReleaseOrder = {
  /** The direction in which to order releases by the specified field. */
  direction: OrderDirection;
  /** The field in which to order releases by. */
  field: ReleaseOrderField;
};

/** Properties by which release connections can be ordered. */
export enum ReleaseOrderField {
  /** Order releases by creation time */
  CreatedAt = "CREATED_AT",
  /** Order releases alphabetically by name */
  Name = "NAME",
}

/** Autogenerated input type of RemoveAssigneesFromAssignable */
export type RemoveAssigneesFromAssignableInput = {
  /** The id of the assignable object to remove assignees from. */
  assignableId: Scalars["ID"];
  /** The id of users to remove as assignees. */
  assigneeIds: Array<Scalars["ID"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of RemoveAssigneesFromAssignable */
export type RemoveAssigneesFromAssignablePayload = {
  __typename?: "RemoveAssigneesFromAssignablePayload";
  /** The item that was unassigned. */
  assignable?: Maybe<Assignable>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of RemoveEnterpriseAdmin */
export type RemoveEnterpriseAdminInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Enterprise ID from which to remove the administrator. */
  enterpriseId: Scalars["ID"];
  /** The login of the user to remove as an administrator. */
  login: Scalars["String"];
};

/** Autogenerated return type of RemoveEnterpriseAdmin */
export type RemoveEnterpriseAdminPayload = {
  __typename?: "RemoveEnterpriseAdminPayload";
  /** The user who was removed as an administrator. */
  admin?: Maybe<User>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated enterprise. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of removing an administrator. */
  message?: Maybe<Scalars["String"]>;
  /** The viewer performing the mutation. */
  viewer?: Maybe<User>;
};

/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
export type RemoveEnterpriseIdentityProviderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise from which to remove the identity provider. */
  enterpriseId: Scalars["ID"];
};

/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
export type RemoveEnterpriseIdentityProviderPayload = {
  __typename?: "RemoveEnterpriseIdentityProviderPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The identity provider that was removed from the enterprise. */
  identityProvider?: Maybe<EnterpriseIdentityProvider>;
};

/** Autogenerated input type of RemoveEnterpriseOrganization */
export type RemoveEnterpriseOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise from which the organization should be removed. */
  enterpriseId: Scalars["ID"];
  /** The ID of the organization to remove from the enterprise. */
  organizationId: Scalars["ID"];
};

/** Autogenerated return type of RemoveEnterpriseOrganization */
export type RemoveEnterpriseOrganizationPayload = {
  __typename?: "RemoveEnterpriseOrganizationPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated enterprise. */
  enterprise?: Maybe<Enterprise>;
  /** The organization that was removed from the enterprise. */
  organization?: Maybe<Organization>;
  /** The viewer performing the mutation. */
  viewer?: Maybe<User>;
};

/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */
export type RemoveEnterpriseSupportEntitlementInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars["ID"];
  /** The login of a member who will lose the support entitlement. */
  login: Scalars["String"];
};

/** Autogenerated return type of RemoveEnterpriseSupportEntitlement */
export type RemoveEnterpriseSupportEntitlementPayload = {
  __typename?: "RemoveEnterpriseSupportEntitlementPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** A message confirming the result of removing the support entitlement. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of RemoveLabelsFromLabelable */
export type RemoveLabelsFromLabelableInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ids of labels to remove. */
  labelIds: Array<Scalars["ID"]>;
  /** The id of the Labelable to remove labels from. */
  labelableId: Scalars["ID"];
};

/** Autogenerated return type of RemoveLabelsFromLabelable */
export type RemoveLabelsFromLabelablePayload = {
  __typename?: "RemoveLabelsFromLabelablePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The Labelable the labels were removed from. */
  labelable?: Maybe<Labelable>;
};

/** Autogenerated input type of RemoveOutsideCollaborator */
export type RemoveOutsideCollaboratorInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization to remove the outside collaborator from. */
  organizationId: Scalars["ID"];
  /** The ID of the outside collaborator to remove. */
  userId: Scalars["ID"];
};

/** Autogenerated return type of RemoveOutsideCollaborator */
export type RemoveOutsideCollaboratorPayload = {
  __typename?: "RemoveOutsideCollaboratorPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The user that was removed as an outside collaborator. */
  removedUser?: Maybe<User>;
};

/** Autogenerated input type of RemoveReaction */
export type RemoveReactionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the emoji reaction to remove. */
  content: ReactionContent;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars["ID"];
};

/** Autogenerated return type of RemoveReaction */
export type RemoveReactionPayload = {
  __typename?: "RemoveReactionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The reaction object. */
  reaction?: Maybe<Reaction>;
  /** The reactable subject. */
  subject?: Maybe<Reactable>;
};

/** Autogenerated input type of RemoveStar */
export type RemoveStarInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Starrable ID to unstar. */
  starrableId: Scalars["ID"];
};

/** Autogenerated return type of RemoveStar */
export type RemoveStarPayload = {
  __typename?: "RemoveStarPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The starrable. */
  starrable?: Maybe<Starrable>;
};

/** Autogenerated input type of RemoveUpvote */
export type RemoveUpvoteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion or comment to remove upvote. */
  subjectId: Scalars["ID"];
};

/** Autogenerated return type of RemoveUpvote */
export type RemoveUpvotePayload = {
  __typename?: "RemoveUpvotePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The votable subject. */
  subject?: Maybe<Votable>;
};

/** Represents a 'removed_from_project' event on a given issue or pull request. */
export type RemovedFromProjectEvent = Node & {
  __typename?: "RemovedFromProjectEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
};

/** Represents a 'renamed' event on a given issue or pull request */
export type RenamedTitleEvent = Node & {
  __typename?: "RenamedTitleEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the current title of the issue or pull request. */
  currentTitle: Scalars["String"];
  id: Scalars["ID"];
  /** Identifies the previous title of the issue or pull request. */
  previousTitle: Scalars["String"];
  /** Subject that was renamed. */
  subject: RenamedTitleSubject;
};

/** An object which has a renamable title */
export type RenamedTitleSubject = Issue | PullRequest;

/** Autogenerated input type of ReopenIssue */
export type ReopenIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the issue to be opened. */
  issueId: Scalars["ID"];
};

/** Autogenerated return type of ReopenIssue */
export type ReopenIssuePayload = {
  __typename?: "ReopenIssuePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The issue that was opened. */
  issue?: Maybe<Issue>;
};

/** Autogenerated input type of ReopenPullRequest */
export type ReopenPullRequestInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the pull request to be reopened. */
  pullRequestId: Scalars["ID"];
};

/** Autogenerated return type of ReopenPullRequest */
export type ReopenPullRequestPayload = {
  __typename?: "ReopenPullRequestPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The pull request that was reopened. */
  pullRequest?: Maybe<PullRequest>;
};

/** Represents a 'reopened' event on any `Closable`. */
export type ReopenedEvent = Node & {
  __typename?: "ReopenedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Object that was reopened. */
  closable: Closable;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
};

/** Audit log entry for a repo.access event. */
export type RepoAccessAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoAccessAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
    /** The visibility of the repository */
    visibility?: Maybe<RepoAccessAuditEntryVisibility>;
  };

/** The privacy of a repository */
export enum RepoAccessAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  Private = "PRIVATE",
  /** The repository is visible to everyone. */
  Public = "PUBLIC",
}

/** Audit log entry for a repo.add_member event. */
export type RepoAddMemberAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoAddMemberAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
    /** The visibility of the repository */
    visibility?: Maybe<RepoAddMemberAuditEntryVisibility>;
  };

/** The privacy of a repository */
export enum RepoAddMemberAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  Private = "PRIVATE",
  /** The repository is visible to everyone. */
  Public = "PUBLIC",
}

/** Audit log entry for a repo.add_topic event. */
export type RepoAddTopicAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData &
  TopicAuditEntryData & {
    __typename?: "RepoAddTopicAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The name of the topic added to the repository */
    topic?: Maybe<Topic>;
    /** The name of the topic added to the repository */
    topicName?: Maybe<Scalars["String"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repo.archived event. */
export type RepoArchivedAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoArchivedAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
    /** The visibility of the repository */
    visibility?: Maybe<RepoArchivedAuditEntryVisibility>;
  };

/** The privacy of a repository */
export enum RepoArchivedAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  Private = "PRIVATE",
  /** The repository is visible to everyone. */
  Public = "PUBLIC",
}

/** Audit log entry for a repo.change_merge_setting event. */
export type RepoChangeMergeSettingAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoChangeMergeSettingAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** Whether the change was to enable (true) or disable (false) the merge type */
    isEnabled?: Maybe<Scalars["Boolean"]>;
    /** The merge method affected by the change */
    mergeType?: Maybe<RepoChangeMergeSettingAuditEntryMergeType>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The merge options available for pull requests to this repository. */
export enum RepoChangeMergeSettingAuditEntryMergeType {
  /** The pull request is added to the base branch in a merge commit. */
  Merge = "MERGE",
  /** Commits from the pull request are added onto the base branch individually without a merge commit. */
  Rebase = "REBASE",
  /** The pull request's commits are squashed into a single commit before they are merged to the base branch. */
  Squash = "SQUASH",
}

/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
export type RepoConfigDisableAnonymousGitAccessAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoConfigDisableAnonymousGitAccessAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repo.config.disable_collaborators_only event. */
export type RepoConfigDisableCollaboratorsOnlyAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoConfigDisableCollaboratorsOnlyAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repo.config.disable_contributors_only event. */
export type RepoConfigDisableContributorsOnlyAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoConfigDisableContributorsOnlyAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
export type RepoConfigDisableSockpuppetDisallowedAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoConfigDisableSockpuppetDisallowedAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
export type RepoConfigEnableAnonymousGitAccessAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoConfigEnableAnonymousGitAccessAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repo.config.enable_collaborators_only event. */
export type RepoConfigEnableCollaboratorsOnlyAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoConfigEnableCollaboratorsOnlyAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repo.config.enable_contributors_only event. */
export type RepoConfigEnableContributorsOnlyAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoConfigEnableContributorsOnlyAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
export type RepoConfigEnableSockpuppetDisallowedAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoConfigEnableSockpuppetDisallowedAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
export type RepoConfigLockAnonymousGitAccessAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoConfigLockAnonymousGitAccessAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
export type RepoConfigUnlockAnonymousGitAccessAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoConfigUnlockAnonymousGitAccessAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repo.create event. */
export type RepoCreateAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoCreateAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The name of the parent repository for this forked repository. */
    forkParentName?: Maybe<Scalars["String"]>;
    /** The name of the root repository for this network. */
    forkSourceName?: Maybe<Scalars["String"]>;
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
    /** The visibility of the repository */
    visibility?: Maybe<RepoCreateAuditEntryVisibility>;
  };

/** The privacy of a repository */
export enum RepoCreateAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  Private = "PRIVATE",
  /** The repository is visible to everyone. */
  Public = "PUBLIC",
}

/** Audit log entry for a repo.destroy event. */
export type RepoDestroyAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoDestroyAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
    /** The visibility of the repository */
    visibility?: Maybe<RepoDestroyAuditEntryVisibility>;
  };

/** The privacy of a repository */
export enum RepoDestroyAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  Private = "PRIVATE",
  /** The repository is visible to everyone. */
  Public = "PUBLIC",
}

/** Audit log entry for a repo.remove_member event. */
export type RepoRemoveMemberAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData & {
    __typename?: "RepoRemoveMemberAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
    /** The visibility of the repository */
    visibility?: Maybe<RepoRemoveMemberAuditEntryVisibility>;
  };

/** The privacy of a repository */
export enum RepoRemoveMemberAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  Private = "PRIVATE",
  /** The repository is visible to everyone. */
  Public = "PUBLIC",
}

/** Audit log entry for a repo.remove_topic event. */
export type RepoRemoveTopicAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData &
  TopicAuditEntryData & {
    __typename?: "RepoRemoveTopicAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The name of the topic added to the repository */
    topic?: Maybe<Topic>;
    /** The name of the topic added to the repository */
    topicName?: Maybe<Scalars["String"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The reasons a piece of content can be reported or minimized. */
export enum ReportedContentClassifiers {
  /** An abusive or harassing piece of content */
  Abuse = "ABUSE",
  /** A duplicated piece of content */
  Duplicate = "DUPLICATE",
  /** An irrelevant piece of content */
  OffTopic = "OFF_TOPIC",
  /** An outdated piece of content */
  Outdated = "OUTDATED",
  /** The content has been resolved */
  Resolved = "RESOLVED",
  /** A spammy piece of content */
  Spam = "SPAM",
}

/** A repository contains the content for a project. */
export type Repository = Node &
  PackageOwner &
  ProjectOwner &
  RepositoryInfo &
  Starrable &
  Subscribable &
  UniformResourceLocatable & {
    __typename?: "Repository";
    /** A list of users that can be assigned to issues in this repository. */
    assignableUsers: UserConnection;
    /** Whether or not Auto-merge can be enabled on pull requests in this repository. */
    autoMergeAllowed: Scalars["Boolean"];
    /** A list of branch protection rules for this repository. */
    branchProtectionRules: BranchProtectionRuleConnection;
    /** Returns the code of conduct for this repository */
    codeOfConduct?: Maybe<CodeOfConduct>;
    /** Information extracted from the repository's `CODEOWNERS` file. */
    codeowners?: Maybe<RepositoryCodeowners>;
    /** A list of collaborators associated with the repository. */
    collaborators?: Maybe<RepositoryCollaboratorConnection>;
    /** A list of commit comments associated with the repository. */
    commitComments: CommitCommentConnection;
    /** Returns a list of contact links associated to the repository */
    contactLinks?: Maybe<Array<RepositoryContactLink>>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The Ref associated with the repository's default branch. */
    defaultBranchRef?: Maybe<Ref>;
    /** Whether or not branches are automatically deleted when merged in this repository. */
    deleteBranchOnMerge: Scalars["Boolean"];
    /** A list of deploy keys that are on this repository. */
    deployKeys: DeployKeyConnection;
    /** Deployments associated with the repository */
    deployments: DeploymentConnection;
    /** The description of the repository. */
    description?: Maybe<Scalars["String"]>;
    /** The description of the repository rendered to HTML. */
    descriptionHTML: Scalars["HTML"];
    /** Returns a single discussion from the current repository by number. */
    discussion?: Maybe<Discussion>;
    /** A list of discussion categories that are available in the repository. */
    discussionCategories: DiscussionCategoryConnection;
    /** A list of discussions that have been opened in the repository. */
    discussions: DiscussionConnection;
    /** The number of kilobytes this repository occupies on disk. */
    diskUsage?: Maybe<Scalars["Int"]>;
    /** Returns a single active environment from the current repository by name. */
    environment?: Maybe<Environment>;
    /** A list of environments that are in this repository. */
    environments: EnvironmentConnection;
    /** Returns how many forks there are of this repository in the whole network. */
    forkCount: Scalars["Int"];
    /** Whether this repository allows forks. */
    forkingAllowed: Scalars["Boolean"];
    /** A list of direct forked repositories. */
    forks: RepositoryConnection;
    /** The funding links for this repository */
    fundingLinks: Array<FundingLink>;
    /** Indicates if the repository has issues feature enabled. */
    hasIssuesEnabled: Scalars["Boolean"];
    /** Indicates if the repository has the Projects feature enabled. */
    hasProjectsEnabled: Scalars["Boolean"];
    /** Indicates if the repository has wiki feature enabled. */
    hasWikiEnabled: Scalars["Boolean"];
    /** The repository's URL. */
    homepageUrl?: Maybe<Scalars["URI"]>;
    id: Scalars["ID"];
    /** The interaction ability settings for this repository. */
    interactionAbility?: Maybe<RepositoryInteractionAbility>;
    /** Indicates if the repository is unmaintained. */
    isArchived: Scalars["Boolean"];
    /** Returns true if blank issue creation is allowed */
    isBlankIssuesEnabled: Scalars["Boolean"];
    /** Returns whether or not this repository disabled. */
    isDisabled: Scalars["Boolean"];
    /** Returns whether or not this repository is empty. */
    isEmpty: Scalars["Boolean"];
    /** Identifies if the repository is a fork. */
    isFork: Scalars["Boolean"];
    /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
    isInOrganization: Scalars["Boolean"];
    /** Indicates if the repository has been locked or not. */
    isLocked: Scalars["Boolean"];
    /** Identifies if the repository is a mirror. */
    isMirror: Scalars["Boolean"];
    /** Identifies if the repository is private or internal. */
    isPrivate: Scalars["Boolean"];
    /** Returns true if this repository has a security policy */
    isSecurityPolicyEnabled?: Maybe<Scalars["Boolean"]>;
    /** Identifies if the repository is a template that can be used to generate new repositories. */
    isTemplate: Scalars["Boolean"];
    /** Is this repository a user configuration repository? */
    isUserConfigurationRepository: Scalars["Boolean"];
    /** Returns a single issue from the current repository by number. */
    issue?: Maybe<Issue>;
    /** Returns a single issue-like object from the current repository by number. */
    issueOrPullRequest?: Maybe<IssueOrPullRequest>;
    /** Returns a list of issue templates associated to the repository */
    issueTemplates?: Maybe<Array<IssueTemplate>>;
    /** A list of issues that have been opened in the repository. */
    issues: IssueConnection;
    /** Returns a single label by name */
    label?: Maybe<Label>;
    /** A list of labels associated with the repository. */
    labels?: Maybe<LabelConnection>;
    /** A list containing a breakdown of the language composition of the repository. */
    languages?: Maybe<LanguageConnection>;
    /** Get the latest release for the repository if one exists. */
    latestRelease?: Maybe<Release>;
    /** The license associated with the repository */
    licenseInfo?: Maybe<License>;
    /** The reason the repository has been locked. */
    lockReason?: Maybe<RepositoryLockReason>;
    /** A list of Users that can be mentioned in the context of the repository. */
    mentionableUsers: UserConnection;
    /** Whether or not PRs are merged with a merge commit on this repository. */
    mergeCommitAllowed: Scalars["Boolean"];
    /** Returns a single milestone from the current repository by number. */
    milestone?: Maybe<Milestone>;
    /** A list of milestones associated with the repository. */
    milestones?: Maybe<MilestoneConnection>;
    /** The repository's original mirror URL. */
    mirrorUrl?: Maybe<Scalars["URI"]>;
    /** The name of the repository. */
    name: Scalars["String"];
    /** The repository's name with owner. */
    nameWithOwner: Scalars["String"];
    /** A Git object in the repository */
    object?: Maybe<GitObject>;
    /** The image used to represent this repository in Open Graph data. */
    openGraphImageUrl: Scalars["URI"];
    /** The User owner of the repository. */
    owner: RepositoryOwner;
    /** A list of packages under the owner. */
    packages: PackageConnection;
    /** The repository parent, if this is a fork. */
    parent?: Maybe<Repository>;
    /** A list of discussions that have been pinned in this repository. */
    pinnedDiscussions: PinnedDiscussionConnection;
    /** A list of pinned issues for this repository. */
    pinnedIssues?: Maybe<PinnedIssueConnection>;
    /** The primary language of the repository's code. */
    primaryLanguage?: Maybe<Language>;
    /** Find project by number. */
    project?: Maybe<Project>;
    /** Finds and returns the Project (beta) according to the provided Project (beta) number. */
    projectNext?: Maybe<ProjectNext>;
    /** A list of projects under the owner. */
    projects: ProjectConnection;
    /** List of projects (beta) linked to this repository. */
    projectsNext: ProjectNextConnection;
    /** The HTTP path listing the repository's projects */
    projectsResourcePath: Scalars["URI"];
    /** The HTTP URL listing the repository's projects */
    projectsUrl: Scalars["URI"];
    /** Returns a single pull request from the current repository by number. */
    pullRequest?: Maybe<PullRequest>;
    /** Returns a list of pull request templates associated to the repository */
    pullRequestTemplates?: Maybe<Array<PullRequestTemplate>>;
    /** A list of pull requests that have been opened in the repository. */
    pullRequests: PullRequestConnection;
    /** Identifies when the repository was last pushed to. */
    pushedAt?: Maybe<Scalars["DateTime"]>;
    /** Whether or not rebase-merging is enabled on this repository. */
    rebaseMergeAllowed: Scalars["Boolean"];
    /** Fetch a given ref from the repository */
    ref?: Maybe<Ref>;
    /** Fetch a list of refs from the repository */
    refs?: Maybe<RefConnection>;
    /** Lookup a single release given various criteria. */
    release?: Maybe<Release>;
    /** List of releases which are dependent on this repository. */
    releases: ReleaseConnection;
    /** A list of applied repository-topic associations for this repository. */
    repositoryTopics: RepositoryTopicConnection;
    /** The HTTP path for this repository */
    resourcePath: Scalars["URI"];
    /** The security policy URL. */
    securityPolicyUrl?: Maybe<Scalars["URI"]>;
    /** A description of the repository, rendered to HTML without any links in it. */
    shortDescriptionHTML: Scalars["HTML"];
    /** Whether or not squash-merging is enabled on this repository. */
    squashMergeAllowed: Scalars["Boolean"];
    /** The SSH URL to clone this repository */
    sshUrl: Scalars["GitSSHRemote"];
    /**
     * Returns a count of how many stargazers there are on this object
     *
     */
    stargazerCount: Scalars["Int"];
    /** A list of users who have starred this starrable. */
    stargazers: StargazerConnection;
    /** Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. */
    submodules: SubmoduleConnection;
    /** Temporary authentication token for cloning this repository. */
    tempCloneToken?: Maybe<Scalars["String"]>;
    /** The repository from which this repository was generated, if any. */
    templateRepository?: Maybe<Repository>;
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this repository */
    url: Scalars["URI"];
    /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
    usesCustomOpenGraphImage: Scalars["Boolean"];
    /** Indicates whether the viewer has admin permissions on this repository. */
    viewerCanAdminister: Scalars["Boolean"];
    /** Can the current viewer create new projects on this owner. */
    viewerCanCreateProjects: Scalars["Boolean"];
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"];
    /** Indicates whether the viewer can update the topics of this repository. */
    viewerCanUpdateTopics: Scalars["Boolean"];
    /** The last commit email for the viewer. */
    viewerDefaultCommitEmail?: Maybe<Scalars["String"]>;
    /** The last used merge method by the viewer or the default for the repository. */
    viewerDefaultMergeMethod: PullRequestMergeMethod;
    /** Returns a boolean indicating whether the viewing user has starred this starrable. */
    viewerHasStarred: Scalars["Boolean"];
    /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
    viewerPermission?: Maybe<RepositoryPermission>;
    /** A list of emails this viewer can commit with. */
    viewerPossibleCommitEmails?: Maybe<Array<Scalars["String"]>>;
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: Maybe<SubscriptionState>;
    /** Indicates the repository's visibility level. */
    visibility: RepositoryVisibility;
    /** A list of vulnerability alerts that are on this repository. */
    vulnerabilityAlerts?: Maybe<RepositoryVulnerabilityAlertConnection>;
    /** A list of users watching the repository. */
    watchers: UserConnection;
  };

/** A repository contains the content for a project. */
export type RepositoryAssignableUsersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query?: InputMaybe<Scalars["String"]>;
};

/** A repository contains the content for a project. */
export type RepositoryBranchProtectionRulesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository contains the content for a project. */
export type RepositoryCodeownersArgs = {
  refName?: InputMaybe<Scalars["String"]>;
};

/** A repository contains the content for a project. */
export type RepositoryCollaboratorsArgs = {
  affiliation?: InputMaybe<CollaboratorAffiliation>;
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query?: InputMaybe<Scalars["String"]>;
};

/** A repository contains the content for a project. */
export type RepositoryCommitCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository contains the content for a project. */
export type RepositoryDeployKeysArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository contains the content for a project. */
export type RepositoryDeploymentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  environments?: InputMaybe<Array<Scalars["String"]>>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<DeploymentOrder>;
};

/** A repository contains the content for a project. */
export type RepositoryDiscussionArgs = {
  number: Scalars["Int"];
};

/** A repository contains the content for a project. */
export type RepositoryDiscussionCategoriesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  filterByAssignable?: InputMaybe<Scalars["Boolean"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository contains the content for a project. */
export type RepositoryDiscussionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  categoryId?: InputMaybe<Scalars["ID"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<DiscussionOrder>;
};

/** A repository contains the content for a project. */
export type RepositoryEnvironmentArgs = {
  name: Scalars["String"];
};

/** A repository contains the content for a project. */
export type RepositoryEnvironmentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository contains the content for a project. */
export type RepositoryForksArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  isLocked?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  privacy?: InputMaybe<RepositoryPrivacy>;
};

/** A repository contains the content for a project. */
export type RepositoryIssueArgs = {
  number: Scalars["Int"];
};

/** A repository contains the content for a project. */
export type RepositoryIssueOrPullRequestArgs = {
  number: Scalars["Int"];
};

/** A repository contains the content for a project. */
export type RepositoryIssuesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  filterBy?: InputMaybe<IssueFilters>;
  first?: InputMaybe<Scalars["Int"]>;
  labels?: InputMaybe<Array<Scalars["String"]>>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueOrder>;
  states?: InputMaybe<Array<IssueState>>;
};

/** A repository contains the content for a project. */
export type RepositoryLabelArgs = {
  name: Scalars["String"];
};

/** A repository contains the content for a project. */
export type RepositoryLabelsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<LabelOrder>;
  query?: InputMaybe<Scalars["String"]>;
};

/** A repository contains the content for a project. */
export type RepositoryLanguagesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<LanguageOrder>;
};

/** A repository contains the content for a project. */
export type RepositoryMentionableUsersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query?: InputMaybe<Scalars["String"]>;
};

/** A repository contains the content for a project. */
export type RepositoryMilestoneArgs = {
  number: Scalars["Int"];
};

/** A repository contains the content for a project. */
export type RepositoryMilestonesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<MilestoneOrder>;
  query?: InputMaybe<Scalars["String"]>;
  states?: InputMaybe<Array<MilestoneState>>;
};

/** A repository contains the content for a project. */
export type RepositoryObjectArgs = {
  expression?: InputMaybe<Scalars["String"]>;
  oid?: InputMaybe<Scalars["GitObjectID"]>;
};

/** A repository contains the content for a project. */
export type RepositoryPackagesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  names?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  orderBy?: InputMaybe<PackageOrder>;
  packageType?: InputMaybe<PackageType>;
  repositoryId?: InputMaybe<Scalars["ID"]>;
};

/** A repository contains the content for a project. */
export type RepositoryPinnedDiscussionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository contains the content for a project. */
export type RepositoryPinnedIssuesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository contains the content for a project. */
export type RepositoryProjectArgs = {
  number: Scalars["Int"];
};

/** A repository contains the content for a project. */
export type RepositoryProjectNextArgs = {
  number: Scalars["Int"];
};

/** A repository contains the content for a project. */
export type RepositoryProjectsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ProjectOrder>;
  search?: InputMaybe<Scalars["String"]>;
  states?: InputMaybe<Array<ProjectState>>;
};

/** A repository contains the content for a project. */
export type RepositoryProjectsNextArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query?: InputMaybe<Scalars["String"]>;
  sortBy?: InputMaybe<ProjectNextOrderField>;
};

/** A repository contains the content for a project. */
export type RepositoryPullRequestArgs = {
  number: Scalars["Int"];
};

/** A repository contains the content for a project. */
export type RepositoryPullRequestsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  baseRefName?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  headRefName?: InputMaybe<Scalars["String"]>;
  labels?: InputMaybe<Array<Scalars["String"]>>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueOrder>;
  states?: InputMaybe<Array<PullRequestState>>;
};

/** A repository contains the content for a project. */
export type RepositoryRefArgs = {
  qualifiedName: Scalars["String"];
};

/** A repository contains the content for a project. */
export type RepositoryRefsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  direction?: InputMaybe<OrderDirection>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<RefOrder>;
  query?: InputMaybe<Scalars["String"]>;
  refPrefix: Scalars["String"];
};

/** A repository contains the content for a project. */
export type RepositoryReleaseArgs = {
  tagName: Scalars["String"];
};

/** A repository contains the content for a project. */
export type RepositoryReleasesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReleaseOrder>;
};

/** A repository contains the content for a project. */
export type RepositoryRepositoryTopicsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository contains the content for a project. */
export type RepositoryShortDescriptionHtmlArgs = {
  limit?: InputMaybe<Scalars["Int"]>;
};

/** A repository contains the content for a project. */
export type RepositoryStargazersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<StarOrder>;
};

/** A repository contains the content for a project. */
export type RepositorySubmodulesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A repository contains the content for a project. */
export type RepositoryVulnerabilityAlertsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  states?: InputMaybe<Array<RepositoryVulnerabilityAlertState>>;
};

/** A repository contains the content for a project. */
export type RepositoryWatchersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The affiliation of a user to a repository */
export enum RepositoryAffiliation {
  /** Repositories that the user has been added to as a collaborator. */
  Collaborator = "COLLABORATOR",
  /** Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */
  OrganizationMember = "ORGANIZATION_MEMBER",
  /** Repositories that are owned by the authenticated user. */
  Owner = "OWNER",
}

/** Metadata for an audit entry with action repo.* */
export type RepositoryAuditEntryData = {
  /** The repository associated with the action */
  repository?: Maybe<Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars["String"]>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars["URI"]>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars["URI"]>;
};

/** Information extracted from a repository's `CODEOWNERS` file. */
export type RepositoryCodeowners = {
  __typename?: "RepositoryCodeowners";
  /** Any problems that were encountered while parsing the `CODEOWNERS` file. */
  errors: Array<RepositoryCodeownersError>;
};

/** An error in a `CODEOWNERS` file. */
export type RepositoryCodeownersError = {
  __typename?: "RepositoryCodeownersError";
  /** The column number where the error occurs. */
  column: Scalars["Int"];
  /** A short string describing the type of error. */
  kind: Scalars["String"];
  /** The line number where the error occurs. */
  line: Scalars["Int"];
  /** A complete description of the error, combining information from other fields. */
  message: Scalars["String"];
  /** The path to the file when the error occurs. */
  path: Scalars["String"];
  /** The content of the line where the error occurs. */
  source: Scalars["String"];
  /** A suggestion of how to fix the error. */
  suggestion?: Maybe<Scalars["String"]>;
};

/** The connection type for User. */
export type RepositoryCollaboratorConnection = {
  __typename?: "RepositoryCollaboratorConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RepositoryCollaboratorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Represents a user who is a collaborator of a repository. */
export type RepositoryCollaboratorEdge = {
  __typename?: "RepositoryCollaboratorEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  node: User;
  /** The permission the user has on the repository. */
  permission: RepositoryPermission;
  /** A list of sources for the user's access to the repository. */
  permissionSources?: Maybe<Array<PermissionSource>>;
};

/** A list of repositories owned by the subject. */
export type RepositoryConnection = {
  __typename?: "RepositoryConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RepositoryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Repository>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
  /** The total size in kilobytes of all repositories in the connection. */
  totalDiskUsage: Scalars["Int"];
};

/** A repository contact link. */
export type RepositoryContactLink = {
  __typename?: "RepositoryContactLink";
  /** The contact link purpose. */
  about: Scalars["String"];
  /** The contact link name. */
  name: Scalars["String"];
  /** The contact link URL. */
  url: Scalars["URI"];
};

/** The reason a repository is listed as 'contributed'. */
export enum RepositoryContributionType {
  /** Created a commit */
  Commit = "COMMIT",
  /** Created an issue */
  Issue = "ISSUE",
  /** Created a pull request */
  PullRequest = "PULL_REQUEST",
  /** Reviewed a pull request */
  PullRequestReview = "PULL_REQUEST_REVIEW",
  /** Created the repository */
  Repository = "REPOSITORY",
}

/** Represents an author of discussions in repositories. */
export type RepositoryDiscussionAuthor = {
  /** Discussions this user has started. */
  repositoryDiscussions: DiscussionConnection;
};

/** Represents an author of discussions in repositories. */
export type RepositoryDiscussionAuthorRepositoryDiscussionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  answered?: InputMaybe<Scalars["Boolean"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<DiscussionOrder>;
  repositoryId?: InputMaybe<Scalars["ID"]>;
};

/** Represents an author of discussion comments in repositories. */
export type RepositoryDiscussionCommentAuthor = {
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments: DiscussionCommentConnection;
};

/** Represents an author of discussion comments in repositories. */
export type RepositoryDiscussionCommentAuthorRepositoryDiscussionCommentsArgs =
  {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    last?: InputMaybe<Scalars["Int"]>;
    onlyAnswers?: InputMaybe<Scalars["Boolean"]>;
    repositoryId?: InputMaybe<Scalars["ID"]>;
  };

/** An edge in a connection. */
export type RepositoryEdge = {
  __typename?: "RepositoryEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Repository>;
};

/** A subset of repository info. */
export type RepositoryInfo = {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The description of the repository. */
  description?: Maybe<Scalars["String"]>;
  /** The description of the repository rendered to HTML. */
  descriptionHTML: Scalars["HTML"];
  /** Returns how many forks there are of this repository in the whole network. */
  forkCount: Scalars["Int"];
  /** Indicates if the repository has issues feature enabled. */
  hasIssuesEnabled: Scalars["Boolean"];
  /** Indicates if the repository has the Projects feature enabled. */
  hasProjectsEnabled: Scalars["Boolean"];
  /** Indicates if the repository has wiki feature enabled. */
  hasWikiEnabled: Scalars["Boolean"];
  /** The repository's URL. */
  homepageUrl?: Maybe<Scalars["URI"]>;
  /** Indicates if the repository is unmaintained. */
  isArchived: Scalars["Boolean"];
  /** Identifies if the repository is a fork. */
  isFork: Scalars["Boolean"];
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  isInOrganization: Scalars["Boolean"];
  /** Indicates if the repository has been locked or not. */
  isLocked: Scalars["Boolean"];
  /** Identifies if the repository is a mirror. */
  isMirror: Scalars["Boolean"];
  /** Identifies if the repository is private or internal. */
  isPrivate: Scalars["Boolean"];
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  isTemplate: Scalars["Boolean"];
  /** The license associated with the repository */
  licenseInfo?: Maybe<License>;
  /** The reason the repository has been locked. */
  lockReason?: Maybe<RepositoryLockReason>;
  /** The repository's original mirror URL. */
  mirrorUrl?: Maybe<Scalars["URI"]>;
  /** The name of the repository. */
  name: Scalars["String"];
  /** The repository's name with owner. */
  nameWithOwner: Scalars["String"];
  /** The image used to represent this repository in Open Graph data. */
  openGraphImageUrl: Scalars["URI"];
  /** The User owner of the repository. */
  owner: RepositoryOwner;
  /** Identifies when the repository was last pushed to. */
  pushedAt?: Maybe<Scalars["DateTime"]>;
  /** The HTTP path for this repository */
  resourcePath: Scalars["URI"];
  /** A description of the repository, rendered to HTML without any links in it. */
  shortDescriptionHTML: Scalars["HTML"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The HTTP URL for this repository */
  url: Scalars["URI"];
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  usesCustomOpenGraphImage: Scalars["Boolean"];
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility;
};

/** A subset of repository info. */
export type RepositoryInfoShortDescriptionHtmlArgs = {
  limit?: InputMaybe<Scalars["Int"]>;
};

/** Repository interaction limit that applies to this object. */
export type RepositoryInteractionAbility = {
  __typename?: "RepositoryInteractionAbility";
  /** The time the currently active limit expires. */
  expiresAt?: Maybe<Scalars["DateTime"]>;
  /** The current limit that is enabled on this object. */
  limit: RepositoryInteractionLimit;
  /** The origin of the currently active interaction limit. */
  origin: RepositoryInteractionLimitOrigin;
};

/** A repository interaction limit. */
export enum RepositoryInteractionLimit {
  /** Users that are not collaborators will not be able to interact with the repository. */
  CollaboratorsOnly = "COLLABORATORS_ONLY",
  /** Users that have not previously committed to a repository’s default branch will be unable to interact with the repository. */
  ContributorsOnly = "CONTRIBUTORS_ONLY",
  /** Users that have recently created their account will be unable to interact with the repository. */
  ExistingUsers = "EXISTING_USERS",
  /** No interaction limits are enabled. */
  NoLimit = "NO_LIMIT",
}

/** The length for a repository interaction limit to be enabled for. */
export enum RepositoryInteractionLimitExpiry {
  /** The interaction limit will expire after 1 day. */
  OneDay = "ONE_DAY",
  /** The interaction limit will expire after 1 month. */
  OneMonth = "ONE_MONTH",
  /** The interaction limit will expire after 1 week. */
  OneWeek = "ONE_WEEK",
  /** The interaction limit will expire after 6 months. */
  SixMonths = "SIX_MONTHS",
  /** The interaction limit will expire after 3 days. */
  ThreeDays = "THREE_DAYS",
}

/** Indicates where an interaction limit is configured. */
export enum RepositoryInteractionLimitOrigin {
  /** A limit that is configured at the organization level. */
  Organization = "ORGANIZATION",
  /** A limit that is configured at the repository level. */
  Repository = "REPOSITORY",
  /** A limit that is configured at the user-wide level. */
  User = "USER",
}

/** An invitation for a user to be added to a repository. */
export type RepositoryInvitation = Node & {
  __typename?: "RepositoryInvitation";
  /** The email address that received the invitation. */
  email?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  /** The user who received the invitation. */
  invitee?: Maybe<User>;
  /** The user who created the invitation. */
  inviter: User;
  /** The permalink for this repository invitation. */
  permalink: Scalars["URI"];
  /** The permission granted on this repository by this invitation. */
  permission: RepositoryPermission;
  /** The Repository the user is invited to. */
  repository?: Maybe<RepositoryInfo>;
};

/** A list of repository invitations. */
export type RepositoryInvitationConnection = {
  __typename?: "RepositoryInvitationConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RepositoryInvitationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<RepositoryInvitation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type RepositoryInvitationEdge = {
  __typename?: "RepositoryInvitationEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<RepositoryInvitation>;
};

/** Ordering options for repository invitation connections. */
export type RepositoryInvitationOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order repository invitations by. */
  field: RepositoryInvitationOrderField;
};

/** Properties by which repository invitation connections can be ordered. */
export enum RepositoryInvitationOrderField {
  /** Order repository invitations by creation time */
  CreatedAt = "CREATED_AT",
}

/** The possible reasons a given repository could be in a locked state. */
export enum RepositoryLockReason {
  /** The repository is locked due to a billing related reason. */
  Billing = "BILLING",
  /** The repository is locked due to a migration. */
  Migrating = "MIGRATING",
  /** The repository is locked due to a move. */
  Moving = "MOVING",
  /** The repository is locked due to a rename. */
  Rename = "RENAME",
}

/** An Octoshift repository migration. */
export type RepositoryMigration = Migration &
  Node & {
    __typename?: "RepositoryMigration";
    /** The Octoshift migration flag to continue on error. */
    continueOnError: Scalars["Boolean"];
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** The reason the migration failed. */
    failureReason?: Maybe<Scalars["String"]>;
    id: Scalars["ID"];
    /** The Octoshift migration source. */
    migrationSource: MigrationSource;
    /** The Octoshift migration source URL. */
    sourceUrl: Scalars["URI"];
    /** The Octoshift migration state. */
    state: MigrationState;
  };

/** The connection type for RepositoryMigration. */
export type RepositoryMigrationConnection = {
  __typename?: "RepositoryMigrationConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RepositoryMigrationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<RepositoryMigration>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Represents a repository migration. */
export type RepositoryMigrationEdge = {
  __typename?: "RepositoryMigrationEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<RepositoryMigration>;
};

/** Ordering options for repository migrations. */
export type RepositoryMigrationOrder = {
  /** The ordering direction. */
  direction: RepositoryMigrationOrderDirection;
  /** The field to order repository migrations by. */
  field: RepositoryMigrationOrderField;
};

/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */
export enum RepositoryMigrationOrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = "ASC",
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = "DESC",
}

/** Properties by which repository migrations can be ordered. */
export enum RepositoryMigrationOrderField {
  /** Order mannequins why when they were created. */
  CreatedAt = "CREATED_AT",
}

/** Represents a object that belongs to a repository. */
export type RepositoryNode = {
  /** The repository associated with this node. */
  repository: Repository;
};

/** Ordering options for repository connections */
export type RepositoryOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order repositories by. */
  field: RepositoryOrderField;
};

/** Properties by which repository connections can be ordered. */
export enum RepositoryOrderField {
  /** Order repositories by creation time */
  CreatedAt = "CREATED_AT",
  /** Order repositories by name */
  Name = "NAME",
  /** Order repositories by push time */
  PushedAt = "PUSHED_AT",
  /** Order repositories by number of stargazers */
  Stargazers = "STARGAZERS",
  /** Order repositories by update time */
  UpdatedAt = "UPDATED_AT",
}

/** Represents an owner of a Repository. */
export type RepositoryOwner = {
  /** A URL pointing to the owner's public avatar. */
  avatarUrl: Scalars["URI"];
  id: Scalars["ID"];
  /** The username used to login. */
  login: Scalars["String"];
  /** A list of repositories that the user owns. */
  repositories: RepositoryConnection;
  /** Find Repository. */
  repository?: Maybe<Repository>;
  /** The HTTP URL for the owner. */
  resourcePath: Scalars["URI"];
  /** The HTTP URL for the owner. */
  url: Scalars["URI"];
};

/** Represents an owner of a Repository. */
export type RepositoryOwnerAvatarUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** Represents an owner of a Repository. */
export type RepositoryOwnerRepositoriesArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  isFork?: InputMaybe<Scalars["Boolean"]>;
  isLocked?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  privacy?: InputMaybe<RepositoryPrivacy>;
};

/** Represents an owner of a Repository. */
export type RepositoryOwnerRepositoryArgs = {
  followRenames?: InputMaybe<Scalars["Boolean"]>;
  name: Scalars["String"];
};

/** The access level to a repository */
export enum RepositoryPermission {
  /** Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators */
  Admin = "ADMIN",
  /** Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings */
  Maintain = "MAINTAIN",
  /** Can read and clone this repository. Can also open and comment on issues and pull requests */
  Read = "READ",
  /** Can read and clone this repository. Can also manage issues and pull requests */
  Triage = "TRIAGE",
  /** Can read, clone, and push to this repository. Can also manage issues and pull requests */
  Write = "WRITE",
}

/** The privacy of a repository */
export enum RepositoryPrivacy {
  /** Private */
  Private = "PRIVATE",
  /** Public */
  Public = "PUBLIC",
}

/** A repository-topic connects a repository to a topic. */
export type RepositoryTopic = Node &
  UniformResourceLocatable & {
    __typename?: "RepositoryTopic";
    id: Scalars["ID"];
    /** The HTTP path for this repository-topic. */
    resourcePath: Scalars["URI"];
    /** The topic. */
    topic: Topic;
    /** The HTTP URL for this repository-topic. */
    url: Scalars["URI"];
  };

/** The connection type for RepositoryTopic. */
export type RepositoryTopicConnection = {
  __typename?: "RepositoryTopicConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RepositoryTopicEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<RepositoryTopic>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type RepositoryTopicEdge = {
  __typename?: "RepositoryTopicEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<RepositoryTopic>;
};

/** The repository's visibility level. */
export enum RepositoryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  Private = "PRIVATE",
  /** The repository is visible to everyone. */
  Public = "PUBLIC",
}

/** Audit log entry for a repository_visibility_change.disable event. */
export type RepositoryVisibilityChangeDisableAuditEntry = AuditEntry &
  EnterpriseAuditEntryData &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "RepositoryVisibilityChangeDisableAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: Maybe<Scalars["URI"]>;
    /** The slug of the enterprise. */
    enterpriseSlug?: Maybe<Scalars["String"]>;
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: Maybe<Scalars["URI"]>;
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a repository_visibility_change.enable event. */
export type RepositoryVisibilityChangeEnableAuditEntry = AuditEntry &
  EnterpriseAuditEntryData &
  Node &
  OrganizationAuditEntryData & {
    __typename?: "RepositoryVisibilityChangeEnableAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: Maybe<Scalars["URI"]>;
    /** The slug of the enterprise. */
    enterpriseSlug?: Maybe<Scalars["String"]>;
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: Maybe<Scalars["URI"]>;
    id: Scalars["ID"];
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */
export type RepositoryVulnerabilityAlert = Node &
  RepositoryNode & {
    __typename?: "RepositoryVulnerabilityAlert";
    /** When was the alert created? */
    createdAt: Scalars["DateTime"];
    /** The associated Dependabot update */
    dependabotUpdate?: Maybe<DependabotUpdate>;
    /** The reason the alert was dismissed */
    dismissReason?: Maybe<Scalars["String"]>;
    /** When was the alert dismissed? */
    dismissedAt?: Maybe<Scalars["DateTime"]>;
    /** The user who dismissed the alert */
    dismisser?: Maybe<User>;
    /** The reason the alert was marked as fixed. */
    fixReason?: Maybe<Scalars["String"]>;
    /** When was the alert fixed? */
    fixedAt?: Maybe<Scalars["DateTime"]>;
    id: Scalars["ID"];
    /** Identifies the alert number. */
    number: Scalars["Int"];
    /** The associated repository */
    repository: Repository;
    /** The associated security advisory */
    securityAdvisory?: Maybe<SecurityAdvisory>;
    /** The associated security vulnerability */
    securityVulnerability?: Maybe<SecurityVulnerability>;
    /** Identifies the state of the alert. */
    state: RepositoryVulnerabilityAlertState;
    /** The vulnerable manifest filename */
    vulnerableManifestFilename: Scalars["String"];
    /** The vulnerable manifest path */
    vulnerableManifestPath: Scalars["String"];
    /** The vulnerable requirements */
    vulnerableRequirements?: Maybe<Scalars["String"]>;
  };

/** The connection type for RepositoryVulnerabilityAlert. */
export type RepositoryVulnerabilityAlertConnection = {
  __typename?: "RepositoryVulnerabilityAlertConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RepositoryVulnerabilityAlertEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<RepositoryVulnerabilityAlert>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type RepositoryVulnerabilityAlertEdge = {
  __typename?: "RepositoryVulnerabilityAlertEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<RepositoryVulnerabilityAlert>;
};

/** The possible states of an alert */
export enum RepositoryVulnerabilityAlertState {
  /** An alert that has been manually closed by a user. */
  Dismissed = "DISMISSED",
  /** An alert that has been resolved by a code change. */
  Fixed = "FIXED",
  /** An alert that is still open. */
  Open = "OPEN",
}

/** Autogenerated input type of RequestReviews */
export type RequestReviewsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the pull request to modify. */
  pullRequestId: Scalars["ID"];
  /** The Node IDs of the team to request. */
  teamIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** Add users to the set rather than replace. */
  union?: InputMaybe<Scalars["Boolean"]>;
  /** The Node IDs of the user to request. */
  userIds?: InputMaybe<Array<Scalars["ID"]>>;
};

/** Autogenerated return type of RequestReviews */
export type RequestReviewsPayload = {
  __typename?: "RequestReviewsPayload";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The pull request that is getting requests. */
  pullRequest?: Maybe<PullRequest>;
  /** The edge from the pull request to the requested reviewers. */
  requestedReviewersEdge?: Maybe<UserEdge>;
};

/** The possible states that can be requested when creating a check run. */
export enum RequestableCheckStatusState {
  /** The check suite or run has been completed. */
  Completed = "COMPLETED",
  /** The check suite or run is in progress. */
  InProgress = "IN_PROGRESS",
  /** The check suite or run is in pending state. */
  Pending = "PENDING",
  /** The check suite or run has been queued. */
  Queued = "QUEUED",
  /** The check suite or run is in waiting state. */
  Waiting = "WAITING",
}

/** Types that can be requested reviewers. */
export type RequestedReviewer = Mannequin | Team | User;

/** Represents a type that can be required by a pull request for merging. */
export type RequirableByPullRequest = {
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired: Scalars["Boolean"];
};

/** Represents a type that can be required by a pull request for merging. */
export type RequirableByPullRequestIsRequiredArgs = {
  pullRequestId?: InputMaybe<Scalars["ID"]>;
  pullRequestNumber?: InputMaybe<Scalars["Int"]>;
};

/** Represents a required status check for a protected branch, but not any specific run of that check. */
export type RequiredStatusCheckDescription = {
  __typename?: "RequiredStatusCheckDescription";
  /** The App that must provide this status in order for it to be accepted. */
  app?: Maybe<App>;
  /** The name of this status. */
  context: Scalars["String"];
};

/** Specifies the attributes for a new or updated required status check. */
export type RequiredStatusCheckInput = {
  /** The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use "any" to allow any app to set the status. */
  appId?: InputMaybe<Scalars["ID"]>;
  /** Status check context that must pass for commits to be accepted to the matching branch. */
  context: Scalars["String"];
};

/** Autogenerated input type of RerequestCheckSuite */
export type RerequestCheckSuiteInput = {
  /** The Node ID of the check suite. */
  checkSuiteId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of RerequestCheckSuite */
export type RerequestCheckSuitePayload = {
  __typename?: "RerequestCheckSuitePayload";
  /** The requested check suite. */
  checkSuite?: Maybe<CheckSuite>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of ResolveReviewThread */
export type ResolveReviewThreadInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the thread to resolve */
  threadId: Scalars["ID"];
};

/** Autogenerated return type of ResolveReviewThread */
export type ResolveReviewThreadPayload = {
  __typename?: "ResolveReviewThreadPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The thread to resolve. */
  thread?: Maybe<PullRequestReviewThread>;
};

/** Represents a private contribution a user made on GitHub. */
export type RestrictedContribution = Contribution & {
  __typename?: "RestrictedContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars["Boolean"];
  /** When this contribution was made. */
  occurredAt: Scalars["DateTime"];
  /** The HTTP path for this contribution. */
  resourcePath: Scalars["URI"];
  /** The HTTP URL for this contribution. */
  url: Scalars["URI"];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
};

/** A team or user who has the ability to dismiss a review on a protected branch. */
export type ReviewDismissalAllowance = Node & {
  __typename?: "ReviewDismissalAllowance";
  /** The actor that can dismiss. */
  actor?: Maybe<ReviewDismissalAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  id: Scalars["ID"];
};

/** Types that can be an actor. */
export type ReviewDismissalAllowanceActor = Team | User;

/** The connection type for ReviewDismissalAllowance. */
export type ReviewDismissalAllowanceConnection = {
  __typename?: "ReviewDismissalAllowanceConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ReviewDismissalAllowanceEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ReviewDismissalAllowance>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ReviewDismissalAllowanceEdge = {
  __typename?: "ReviewDismissalAllowanceEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ReviewDismissalAllowance>;
};

/** Represents a 'review_dismissed' event on a given issue or pull request. */
export type ReviewDismissedEvent = Node &
  UniformResourceLocatable & {
    __typename?: "ReviewDismissedEvent";
    /** Identifies the actor who performed the event. */
    actor?: Maybe<Actor>;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** Identifies the optional message associated with the 'review_dismissed' event. */
    dismissalMessage?: Maybe<Scalars["String"]>;
    /** Identifies the optional message associated with the event, rendered to HTML. */
    dismissalMessageHTML?: Maybe<Scalars["String"]>;
    id: Scalars["ID"];
    /** Identifies the previous state of the review with the 'review_dismissed' event. */
    previousReviewState: PullRequestReviewState;
    /** PullRequest referenced by event. */
    pullRequest: PullRequest;
    /** Identifies the commit which caused the review to become stale. */
    pullRequestCommit?: Maybe<PullRequestCommit>;
    /** The HTTP path for this review dismissed event. */
    resourcePath: Scalars["URI"];
    /** Identifies the review associated with the 'review_dismissed' event. */
    review?: Maybe<PullRequestReview>;
    /** The HTTP URL for this review dismissed event. */
    url: Scalars["URI"];
  };

/** A request for a user to review a pull request. */
export type ReviewRequest = Node & {
  __typename?: "ReviewRequest";
  /** Whether this request was created for a code owner */
  asCodeOwner: Scalars["Boolean"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** Identifies the pull request associated with this review request. */
  pullRequest: PullRequest;
  /** The reviewer that is requested. */
  requestedReviewer?: Maybe<RequestedReviewer>;
};

/** The connection type for ReviewRequest. */
export type ReviewRequestConnection = {
  __typename?: "ReviewRequestConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ReviewRequestEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ReviewRequest>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ReviewRequestEdge = {
  __typename?: "ReviewRequestEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ReviewRequest>;
};

/** Represents an 'review_request_removed' event on a given pull request. */
export type ReviewRequestRemovedEvent = Node & {
  __typename?: "ReviewRequestRemovedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** Identifies the reviewer whose review request was removed. */
  requestedReviewer?: Maybe<RequestedReviewer>;
};

/** Represents an 'review_requested' event on a given pull request. */
export type ReviewRequestedEvent = Node & {
  __typename?: "ReviewRequestedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** Identifies the reviewer whose review was requested. */
  requestedReviewer?: Maybe<RequestedReviewer>;
};

/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 *
 */
export type ReviewStatusHovercardContext = HovercardContext & {
  __typename?: "ReviewStatusHovercardContext";
  /** A string describing this context */
  message: Scalars["String"];
  /** An octicon to accompany this context */
  octicon: Scalars["String"];
  /** The current status of the pull request with respect to code review. */
  reviewDecision?: Maybe<PullRequestReviewDecision>;
};

/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */
export type RevokeEnterpriseOrganizationsMigratorRoleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: Scalars["ID"];
  /** The login of the user to revoke the migrator role */
  login: Scalars["String"];
};

/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
export type RevokeEnterpriseOrganizationsMigratorRolePayload = {
  __typename?: "RevokeEnterpriseOrganizationsMigratorRolePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The organizations that had the migrator role revoked for the given user. */
  organizations?: Maybe<OrganizationConnection>;
};

/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
export type RevokeEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs =
  {
    after?: InputMaybe<Scalars["String"]>;
    before?: InputMaybe<Scalars["String"]>;
    first?: InputMaybe<Scalars["Int"]>;
    last?: InputMaybe<Scalars["Int"]>;
  };

/** Autogenerated input type of RevokeMigratorRole */
export type RevokeMigratorRoleInput = {
  /** The user login or Team slug to revoke the migrator role from. */
  actor: Scalars["String"];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: ActorType;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization that the user/team belongs to. */
  organizationId: Scalars["ID"];
};

/** Autogenerated return type of RevokeMigratorRole */
export type RevokeMigratorRolePayload = {
  __typename?: "RevokeMigratorRolePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Did the operation succeed? */
  success?: Maybe<Scalars["Boolean"]>;
};

/** Possible roles a user may have in relation to an organization. */
export enum RoleInOrganization {
  /** A user who is a direct member of the organization. */
  DirectMember = "DIRECT_MEMBER",
  /** A user with full administrative access to the organization. */
  Owner = "OWNER",
  /** A user who is unaffiliated with the organization. */
  Unaffiliated = "UNAFFILIATED",
}

/** The possible digest algorithms used to sign SAML requests for an identity provider. */
export enum SamlDigestAlgorithm {
  /** SHA1 */
  Sha1 = "SHA1",
  /** SHA256 */
  Sha256 = "SHA256",
  /** SHA384 */
  Sha384 = "SHA384",
  /** SHA512 */
  Sha512 = "SHA512",
}

/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
export enum SamlSignatureAlgorithm {
  /** RSA-SHA1 */
  RsaSha1 = "RSA_SHA1",
  /** RSA-SHA256 */
  RsaSha256 = "RSA_SHA256",
  /** RSA-SHA384 */
  RsaSha384 = "RSA_SHA384",
  /** RSA-SHA512 */
  RsaSha512 = "RSA_SHA512",
}

/** A Saved Reply is text a user can use to reply quickly. */
export type SavedReply = Node & {
  __typename?: "SavedReply";
  /** The body of the saved reply. */
  body: Scalars["String"];
  /** The saved reply body rendered to HTML. */
  bodyHTML: Scalars["HTML"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** The title of the saved reply. */
  title: Scalars["String"];
  /** The user that saved this reply. */
  user?: Maybe<Actor>;
};

/** The connection type for SavedReply. */
export type SavedReplyConnection = {
  __typename?: "SavedReplyConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SavedReplyEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SavedReply>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type SavedReplyEdge = {
  __typename?: "SavedReplyEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<SavedReply>;
};

/** Ordering options for saved reply connections. */
export type SavedReplyOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order saved replies by. */
  field: SavedReplyOrderField;
};

/** Properties by which saved reply connections can be ordered. */
export enum SavedReplyOrderField {
  /** Order saved reply by when they were updated. */
  UpdatedAt = "UPDATED_AT",
}

/** The results of a search. */
export type SearchResultItem =
  | App
  | Discussion
  | Issue
  | MarketplaceListing
  | Organization
  | PullRequest
  | Repository
  | User;

/** A list of results that matched against a search query. */
export type SearchResultItemConnection = {
  __typename?: "SearchResultItemConnection";
  /** The number of pieces of code that matched the search query. */
  codeCount: Scalars["Int"];
  /** The number of discussions that matched the search query. */
  discussionCount: Scalars["Int"];
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SearchResultItemEdge>>>;
  /** The number of issues that matched the search query. */
  issueCount: Scalars["Int"];
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SearchResultItem>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The number of repositories that matched the search query. */
  repositoryCount: Scalars["Int"];
  /** The number of users that matched the search query. */
  userCount: Scalars["Int"];
  /** The number of wiki pages that matched the search query. */
  wikiCount: Scalars["Int"];
};

/** An edge in a connection. */
export type SearchResultItemEdge = {
  __typename?: "SearchResultItemEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<SearchResultItem>;
  /** Text matches on the result found. */
  textMatches?: Maybe<Array<Maybe<TextMatch>>>;
};

/** Represents the individual results of a search. */
export enum SearchType {
  /** Returns matching discussions in repositories. */
  Discussion = "DISCUSSION",
  /** Returns results matching issues in repositories. */
  Issue = "ISSUE",
  /** Returns results matching repositories. */
  Repository = "REPOSITORY",
  /** Returns results matching users and organizations on GitHub. */
  User = "USER",
}

/** A GitHub Security Advisory */
export type SecurityAdvisory = Node & {
  __typename?: "SecurityAdvisory";
  /** The CVSS associated with this advisory */
  cvss: Cvss;
  /** CWEs associated with this Advisory */
  cwes: CweConnection;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** This is a long plaintext description of the advisory */
  description: Scalars["String"];
  /** The GitHub Security Advisory ID */
  ghsaId: Scalars["String"];
  id: Scalars["ID"];
  /** A list of identifiers for this advisory */
  identifiers: Array<SecurityAdvisoryIdentifier>;
  /** The permalink for the advisory's dependabot alerts page */
  notificationsPermalink?: Maybe<Scalars["URI"]>;
  /** The organization that originated the advisory */
  origin: Scalars["String"];
  /** The permalink for the advisory */
  permalink?: Maybe<Scalars["URI"]>;
  /** When the advisory was published */
  publishedAt: Scalars["DateTime"];
  /** A list of references for this advisory */
  references: Array<SecurityAdvisoryReference>;
  /** The severity of the advisory */
  severity: SecurityAdvisorySeverity;
  /** A short plaintext summary of the advisory */
  summary: Scalars["String"];
  /** When the advisory was last updated */
  updatedAt: Scalars["DateTime"];
  /** Vulnerabilities associated with this Advisory */
  vulnerabilities: SecurityVulnerabilityConnection;
  /** When the advisory was withdrawn, if it has been withdrawn */
  withdrawnAt?: Maybe<Scalars["DateTime"]>;
};

/** A GitHub Security Advisory */
export type SecurityAdvisoryCwesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A GitHub Security Advisory */
export type SecurityAdvisoryVulnerabilitiesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  ecosystem?: InputMaybe<SecurityAdvisoryEcosystem>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SecurityVulnerabilityOrder>;
  package?: InputMaybe<Scalars["String"]>;
  severities?: InputMaybe<Array<SecurityAdvisorySeverity>>;
};

/** The connection type for SecurityAdvisory. */
export type SecurityAdvisoryConnection = {
  __typename?: "SecurityAdvisoryConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SecurityAdvisoryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SecurityAdvisory>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** The possible ecosystems of a security vulnerability's package. */
export enum SecurityAdvisoryEcosystem {
  /** PHP packages hosted at packagist.org */
  Composer = "COMPOSER",
  /** Go modules */
  Go = "GO",
  /** Java artifacts hosted at the Maven central repository */
  Maven = "MAVEN",
  /** JavaScript packages hosted at npmjs.com */
  Npm = "NPM",
  /** .NET packages hosted at the NuGet Gallery */
  Nuget = "NUGET",
  /** Python packages hosted at PyPI.org */
  Pip = "PIP",
  /** Ruby gems hosted at RubyGems.org */
  Rubygems = "RUBYGEMS",
  /** Rust crates */
  Rust = "RUST",
}

/** An edge in a connection. */
export type SecurityAdvisoryEdge = {
  __typename?: "SecurityAdvisoryEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<SecurityAdvisory>;
};

/** A GitHub Security Advisory Identifier */
export type SecurityAdvisoryIdentifier = {
  __typename?: "SecurityAdvisoryIdentifier";
  /** The identifier type, e.g. GHSA, CVE */
  type: Scalars["String"];
  /** The identifier */
  value: Scalars["String"];
};

/** An advisory identifier to filter results on. */
export type SecurityAdvisoryIdentifierFilter = {
  /** The identifier type. */
  type: SecurityAdvisoryIdentifierType;
  /** The identifier string. Supports exact or partial matching. */
  value: Scalars["String"];
};

/** Identifier formats available for advisories. */
export enum SecurityAdvisoryIdentifierType {
  /** Common Vulnerabilities and Exposures Identifier. */
  Cve = "CVE",
  /** GitHub Security Advisory ID. */
  Ghsa = "GHSA",
}

/** Ordering options for security advisory connections */
export type SecurityAdvisoryOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order security advisories by. */
  field: SecurityAdvisoryOrderField;
};

/** Properties by which security advisory connections can be ordered. */
export enum SecurityAdvisoryOrderField {
  /** Order advisories by publication time */
  PublishedAt = "PUBLISHED_AT",
  /** Order advisories by update time */
  UpdatedAt = "UPDATED_AT",
}

/** An individual package */
export type SecurityAdvisoryPackage = {
  __typename?: "SecurityAdvisoryPackage";
  /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
  ecosystem: SecurityAdvisoryEcosystem;
  /** The package name */
  name: Scalars["String"];
};

/** An individual package version */
export type SecurityAdvisoryPackageVersion = {
  __typename?: "SecurityAdvisoryPackageVersion";
  /** The package name or version */
  identifier: Scalars["String"];
};

/** A GitHub Security Advisory Reference */
export type SecurityAdvisoryReference = {
  __typename?: "SecurityAdvisoryReference";
  /** A publicly accessible reference */
  url: Scalars["URI"];
};

/** Severity of the vulnerability. */
export enum SecurityAdvisorySeverity {
  /** Critical. */
  Critical = "CRITICAL",
  /** High. */
  High = "HIGH",
  /** Low. */
  Low = "LOW",
  /** Moderate. */
  Moderate = "MODERATE",
}

/** An individual vulnerability within an Advisory */
export type SecurityVulnerability = {
  __typename?: "SecurityVulnerability";
  /** The Advisory associated with this Vulnerability */
  advisory: SecurityAdvisory;
  /** The first version containing a fix for the vulnerability */
  firstPatchedVersion?: Maybe<SecurityAdvisoryPackageVersion>;
  /** A description of the vulnerable package */
  package: SecurityAdvisoryPackage;
  /** The severity of the vulnerability within this package */
  severity: SecurityAdvisorySeverity;
  /** When the vulnerability was last updated */
  updatedAt: Scalars["DateTime"];
  /**
   * A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
   *
   */
  vulnerableVersionRange: Scalars["String"];
};

/** The connection type for SecurityVulnerability. */
export type SecurityVulnerabilityConnection = {
  __typename?: "SecurityVulnerabilityConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SecurityVulnerabilityEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SecurityVulnerability>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type SecurityVulnerabilityEdge = {
  __typename?: "SecurityVulnerabilityEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<SecurityVulnerability>;
};

/** Ordering options for security vulnerability connections */
export type SecurityVulnerabilityOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order security vulnerabilities by. */
  field: SecurityVulnerabilityOrderField;
};

/** Properties by which security vulnerability connections can be ordered. */
export enum SecurityVulnerabilityOrderField {
  /** Order vulnerability by update time */
  UpdatedAt = "UPDATED_AT",
}

/** Autogenerated input type of SetEnterpriseIdentityProvider */
export type SetEnterpriseIdentityProviderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod: SamlDigestAlgorithm;
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: Scalars["ID"];
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate: Scalars["String"];
  /** The Issuer Entity ID for the SAML identity provider */
  issuer?: InputMaybe<Scalars["String"]>;
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod: SamlSignatureAlgorithm;
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl: Scalars["URI"];
};

/** Autogenerated return type of SetEnterpriseIdentityProvider */
export type SetEnterpriseIdentityProviderPayload = {
  __typename?: "SetEnterpriseIdentityProviderPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The identity provider for the enterprise. */
  identityProvider?: Maybe<EnterpriseIdentityProvider>;
};

/** Autogenerated input type of SetOrganizationInteractionLimit */
export type SetOrganizationInteractionLimitInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** When this limit should expire. */
  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** The ID of the organization to set a limit for. */
  organizationId: Scalars["ID"];
};

/** Autogenerated return type of SetOrganizationInteractionLimit */
export type SetOrganizationInteractionLimitPayload = {
  __typename?: "SetOrganizationInteractionLimitPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The organization that the interaction limit was set for. */
  organization?: Maybe<Organization>;
};

/** Autogenerated input type of SetRepositoryInteractionLimit */
export type SetRepositoryInteractionLimitInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** When this limit should expire. */
  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** The ID of the repository to set a limit for. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of SetRepositoryInteractionLimit */
export type SetRepositoryInteractionLimitPayload = {
  __typename?: "SetRepositoryInteractionLimitPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The repository that the interaction limit was set for. */
  repository?: Maybe<Repository>;
};

/** Autogenerated input type of SetUserInteractionLimit */
export type SetUserInteractionLimitInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** When this limit should expire. */
  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** The ID of the user to set a limit for. */
  userId: Scalars["ID"];
};

/** Autogenerated return type of SetUserInteractionLimit */
export type SetUserInteractionLimitPayload = {
  __typename?: "SetUserInteractionLimitPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The user that the interaction limit was set for. */
  user?: Maybe<User>;
};

/** Represents an S/MIME signature on a Commit or Tag. */
export type SmimeSignature = GitSignature & {
  __typename?: "SmimeSignature";
  /** Email used to sign this object. */
  email: Scalars["String"];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars["Boolean"];
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars["String"];
  /** ASCII-armored signature header from object. */
  signature: Scalars["String"];
  /** GitHub user corresponding to the email signing this commit. */
  signer?: Maybe<User>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars["Boolean"];
};

/** Represents a sort by field and direction. */
export type SortBy = {
  __typename?: "SortBy";
  /** The direction of the sorting. Possible values are ASC and DESC. */
  direction: OrderDirection;
  /** The id of the field by which the column is sorted. */
  field: Scalars["Int"];
};

/** Entities that can sponsor others via GitHub Sponsors */
export type Sponsor = Organization | User;

/** The connection type for Sponsor. */
export type SponsorConnection = {
  __typename?: "SponsorConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SponsorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Sponsor>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */
export type SponsorEdge = {
  __typename?: "SponsorEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Sponsor>;
};

/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */
export type SponsorOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order sponsor entities by. */
  field: SponsorOrderField;
};

/** Properties by which sponsor connections can be ordered. */
export enum SponsorOrderField {
  /** Order sponsorable entities by login (username). */
  Login = "LOGIN",
  /** Order sponsors by their relevance to the viewer. */
  Relevance = "RELEVANCE",
}

/** Entities that can be sponsored through GitHub Sponsors */
export type Sponsorable = {
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents: Scalars["Int"];
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing: Scalars["Boolean"];
  /** Check if the given account is sponsoring this user/organization. */
  isSponsoredBy: Scalars["Boolean"];
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer: Scalars["Boolean"];
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents: Scalars["Int"];
  /** List of users and organizations this entity is sponsoring. */
  sponsoring: SponsorConnection;
  /** List of sponsors for this user or organization. */
  sponsors: SponsorConnection;
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities: SponsorsActivityConnection;
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: Maybe<SponsorsListing>;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
  sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */
  sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters: SponsorshipNewsletterConnection;
  /** This object's sponsorships as the maintainer. */
  sponsorshipsAsMaintainer: SponsorshipConnection;
  /** This object's sponsorships as the sponsor. */
  sponsorshipsAsSponsor: SponsorshipConnection;
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor: Scalars["Boolean"];
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring: Scalars["Boolean"];
};

/** Entities that can be sponsored through GitHub Sponsors */
export type SponsorableIsSponsoredByArgs = {
  accountLogin: Scalars["String"];
};

/** Entities that can be sponsored through GitHub Sponsors */
export type SponsorableSponsoringArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorOrder>;
};

/** Entities that can be sponsored through GitHub Sponsors */
export type SponsorableSponsorsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorOrder>;
  tierId?: InputMaybe<Scalars["ID"]>;
};

/** Entities that can be sponsored through GitHub Sponsors */
export type SponsorableSponsorsActivitiesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorsActivityOrder>;
  period?: InputMaybe<SponsorsActivityPeriod>;
};

/** Entities that can be sponsored through GitHub Sponsors */
export type SponsorableSponsorshipNewslettersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;
};

/** Entities that can be sponsored through GitHub Sponsors */
export type SponsorableSponsorshipsAsMaintainerArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  includePrivate?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorshipOrder>;
};

/** Entities that can be sponsored through GitHub Sponsors */
export type SponsorableSponsorshipsAsSponsorArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorshipOrder>;
};

/** Entities that can be sponsored via GitHub Sponsors */
export type SponsorableItem = Organization | User;

/** The connection type for SponsorableItem. */
export type SponsorableItemConnection = {
  __typename?: "SponsorableItemConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SponsorableItemEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SponsorableItem>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type SponsorableItemEdge = {
  __typename?: "SponsorableItemEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<SponsorableItem>;
};

/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */
export type SponsorableOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order sponsorable entities by. */
  field: SponsorableOrderField;
};

/** Properties by which sponsorable connections can be ordered. */
export enum SponsorableOrderField {
  /** Order sponsorable entities by login (username). */
  Login = "LOGIN",
}

/** An event related to sponsorship activity. */
export type SponsorsActivity = Node & {
  __typename?: "SponsorsActivity";
  /** What action this activity indicates took place. */
  action: SponsorsActivityAction;
  id: Scalars["ID"];
  /** The tier that the sponsorship used to use, for tier change events. */
  previousSponsorsTier?: Maybe<SponsorsTier>;
  /** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */
  sponsor?: Maybe<Sponsor>;
  /** The user or organization that is being sponsored, the maintainer. */
  sponsorable: Sponsorable;
  /** The associated sponsorship tier. */
  sponsorsTier?: Maybe<SponsorsTier>;
  /** The timestamp of this event. */
  timestamp?: Maybe<Scalars["DateTime"]>;
};

/** The possible actions that GitHub Sponsors activities can represent. */
export enum SponsorsActivityAction {
  /** The activity was cancelling a sponsorship. */
  CancelledSponsorship = "CANCELLED_SPONSORSHIP",
  /** The activity was starting a sponsorship. */
  NewSponsorship = "NEW_SPONSORSHIP",
  /** The activity was scheduling a downgrade or cancellation. */
  PendingChange = "PENDING_CHANGE",
  /** The activity was funds being refunded to the sponsor or GitHub. */
  Refund = "REFUND",
  /** The activity was disabling matching for a previously matched sponsorship. */
  SponsorMatchDisabled = "SPONSOR_MATCH_DISABLED",
  /** The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change. */
  TierChange = "TIER_CHANGE",
}

/** The connection type for SponsorsActivity. */
export type SponsorsActivityConnection = {
  __typename?: "SponsorsActivityConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SponsorsActivityEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SponsorsActivity>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type SponsorsActivityEdge = {
  __typename?: "SponsorsActivityEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<SponsorsActivity>;
};

/** Ordering options for GitHub Sponsors activity connections. */
export type SponsorsActivityOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order activity by. */
  field: SponsorsActivityOrderField;
};

/** Properties by which GitHub Sponsors activity connections can be ordered. */
export enum SponsorsActivityOrderField {
  /** Order activities by when they happened. */
  Timestamp = "TIMESTAMP",
}

/** The possible time periods for which Sponsors activities can be requested. */
export enum SponsorsActivityPeriod {
  /** Don't restrict the activity to any date range, include all activity. */
  All = "ALL",
  /** The previous calendar day. */
  Day = "DAY",
  /** The previous thirty days. */
  Month = "MONTH",
  /** The previous seven days. */
  Week = "WEEK",
}

/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */
export type SponsorsGoal = {
  __typename?: "SponsorsGoal";
  /** A description of the goal from the maintainer. */
  description?: Maybe<Scalars["String"]>;
  /** What the objective of this goal is. */
  kind: SponsorsGoalKind;
  /** The percentage representing how complete this goal is, between 0-100. */
  percentComplete: Scalars["Int"];
  /** What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals. */
  targetValue: Scalars["Int"];
  /** A brief summary of the kind and target value of this goal. */
  title: Scalars["String"];
};

/** The different kinds of goals a GitHub Sponsors member can have. */
export enum SponsorsGoalKind {
  /** The goal is about getting a certain amount in USD from sponsorships each month. */
  MonthlySponsorshipAmount = "MONTHLY_SPONSORSHIP_AMOUNT",
  /** The goal is about reaching a certain number of sponsors. */
  TotalSponsorsCount = "TOTAL_SPONSORS_COUNT",
}

/** A GitHub Sponsors listing. */
export type SponsorsListing = Node & {
  __typename?: "SponsorsListing";
  /** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */
  activeGoal?: Maybe<SponsorsGoal>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The full description of the listing. */
  fullDescription: Scalars["String"];
  /** The full description of the listing rendered to HTML. */
  fullDescriptionHTML: Scalars["HTML"];
  id: Scalars["ID"];
  /** Whether this listing is publicly visible. */
  isPublic: Scalars["Boolean"];
  /** The listing's full name. */
  name: Scalars["String"];
  /** A future date on which this listing is eligible to receive a payout. */
  nextPayoutDate?: Maybe<Scalars["Date"]>;
  /** The short description of the listing. */
  shortDescription: Scalars["String"];
  /** The short name of the listing. */
  slug: Scalars["String"];
  /** The entity this listing represents who can be sponsored on GitHub Sponsors. */
  sponsorable: Sponsorable;
  /** The published tiers for this GitHub Sponsors listing. */
  tiers?: Maybe<SponsorsTierConnection>;
};

/** A GitHub Sponsors listing. */
export type SponsorsListingTiersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorsTierOrder>;
};

/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
export type SponsorsTier = Node & {
  __typename?: "SponsorsTier";
  /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
  adminInfo?: Maybe<SponsorsTierAdminInfo>;
  /** Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over. */
  closestLesserValueTier?: Maybe<SponsorsTier>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The description of the tier. */
  description: Scalars["String"];
  /** The tier description rendered to HTML */
  descriptionHTML: Scalars["HTML"];
  id: Scalars["ID"];
  /** Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing. */
  isCustomAmount: Scalars["Boolean"];
  /** Whether this tier is only for use with one-time sponsorships. */
  isOneTime: Scalars["Boolean"];
  /** How much this tier costs per month in cents. */
  monthlyPriceInCents: Scalars["Int"];
  /** How much this tier costs per month in USD. */
  monthlyPriceInDollars: Scalars["Int"];
  /** The name of the tier. */
  name: Scalars["String"];
  /** The sponsors listing that this tier belongs to. */
  sponsorsListing: SponsorsListing;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export type SponsorsTierAdminInfo = {
  __typename?: "SponsorsTierAdminInfo";
  /** The sponsorships associated with this tier. */
  sponsorships: SponsorshipConnection;
};

/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export type SponsorsTierAdminInfoSponsorshipsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  includePrivate?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorshipOrder>;
};

/** The connection type for SponsorsTier. */
export type SponsorsTierConnection = {
  __typename?: "SponsorsTierConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SponsorsTierEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SponsorsTier>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type SponsorsTierEdge = {
  __typename?: "SponsorsTierEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<SponsorsTier>;
};

/** Ordering options for Sponsors tiers connections. */
export type SponsorsTierOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order tiers by. */
  field: SponsorsTierOrderField;
};

/** Properties by which Sponsors tiers connections can be ordered. */
export enum SponsorsTierOrderField {
  /** Order tiers by creation time. */
  CreatedAt = "CREATED_AT",
  /** Order tiers by their monthly price in cents */
  MonthlyPriceInCents = "MONTHLY_PRICE_IN_CENTS",
}

/** A sponsorship relationship between a sponsor and a maintainer */
export type Sponsorship = Node & {
  __typename?: "Sponsorship";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */
  isOneTimePayment: Scalars["Boolean"];
  /** Check if the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this. */
  isSponsorOptedIntoEmail?: Maybe<Scalars["Boolean"]>;
  /**
   * The entity that is being sponsored
   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
   */
  maintainer: User;
  /** The privacy level for this sponsorship. */
  privacyLevel: SponsorshipPrivacy;
  /**
   * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
   */
  sponsor?: Maybe<User>;
  /** The user or organization that is sponsoring, if you have permission to view them. */
  sponsorEntity?: Maybe<Sponsor>;
  /** The entity that is being sponsored */
  sponsorable: Sponsorable;
  /** The associated sponsorship tier */
  tier?: Maybe<SponsorsTier>;
  /** Identifies the date and time when the current tier was chosen for this sponsorship. */
  tierSelectedAt?: Maybe<Scalars["DateTime"]>;
};

/** The connection type for Sponsorship. */
export type SponsorshipConnection = {
  __typename?: "SponsorshipConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SponsorshipEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Sponsorship>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
  /** The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInCents: Scalars["Int"];
  /** The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInDollars: Scalars["Int"];
};

/** An edge in a connection. */
export type SponsorshipEdge = {
  __typename?: "SponsorshipEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Sponsorship>;
};

/** An update sent to sponsors of a user or organization on GitHub Sponsors. */
export type SponsorshipNewsletter = Node & {
  __typename?: "SponsorshipNewsletter";
  /** The contents of the newsletter, the message the sponsorable wanted to give. */
  body: Scalars["String"];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Indicates if the newsletter has been made available to sponsors. */
  isPublished: Scalars["Boolean"];
  /** The user or organization this newsletter is from. */
  sponsorable: Sponsorable;
  /** The subject of the newsletter, what it's about. */
  subject: Scalars["String"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** The connection type for SponsorshipNewsletter. */
export type SponsorshipNewsletterConnection = {
  __typename?: "SponsorshipNewsletterConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SponsorshipNewsletterEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SponsorshipNewsletter>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type SponsorshipNewsletterEdge = {
  __typename?: "SponsorshipNewsletterEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<SponsorshipNewsletter>;
};

/** Ordering options for sponsorship newsletter connections. */
export type SponsorshipNewsletterOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order sponsorship newsletters by. */
  field: SponsorshipNewsletterOrderField;
};

/** Properties by which sponsorship update connections can be ordered. */
export enum SponsorshipNewsletterOrderField {
  /** Order sponsorship newsletters by when they were created. */
  CreatedAt = "CREATED_AT",
}

/** Ordering options for sponsorship connections. */
export type SponsorshipOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order sponsorship by. */
  field: SponsorshipOrderField;
};

/** Properties by which sponsorship connections can be ordered. */
export enum SponsorshipOrderField {
  /** Order sponsorship by creation time. */
  CreatedAt = "CREATED_AT",
}

/** The privacy of a sponsorship */
export enum SponsorshipPrivacy {
  /** Private */
  Private = "PRIVATE",
  /** Public */
  Public = "PUBLIC",
}

/** Ways in which star connections can be ordered. */
export type StarOrder = {
  /** The direction in which to order nodes. */
  direction: OrderDirection;
  /** The field in which to order nodes by. */
  field: StarOrderField;
};

/** Properties by which star connections can be ordered. */
export enum StarOrderField {
  /** Allows ordering a list of stars by when they were created. */
  StarredAt = "STARRED_AT",
}

/** The connection type for User. */
export type StargazerConnection = {
  __typename?: "StargazerConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StargazerEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Represents a user that's starred a repository. */
export type StargazerEdge = {
  __typename?: "StargazerEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  node: User;
  /** Identifies when the item was starred. */
  starredAt: Scalars["DateTime"];
};

/** Things that can be starred. */
export type Starrable = {
  id: Scalars["ID"];
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount: Scalars["Int"];
  /** A list of users who have starred this starrable. */
  stargazers: StargazerConnection;
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: Scalars["Boolean"];
};

/** Things that can be starred. */
export type StarrableStargazersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<StarOrder>;
};

/** The connection type for Repository. */
export type StarredRepositoryConnection = {
  __typename?: "StarredRepositoryConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StarredRepositoryEdge>>>;
  /** Is the list of stars for this user truncated? This is true for users that have many stars. */
  isOverLimit: Scalars["Boolean"];
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Repository>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Represents a starred repository. */
export type StarredRepositoryEdge = {
  __typename?: "StarredRepositoryEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  node: Repository;
  /** Identifies when the item was starred. */
  starredAt: Scalars["DateTime"];
};

/** Autogenerated input type of StartRepositoryMigration */
export type StartRepositoryMigrationInput = {
  /** The Octoshift migration source access token. */
  accessToken?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether to continue the migration on error */
  continueOnError?: InputMaybe<Scalars["Boolean"]>;
  /** The signed URL to access the user-uploaded git archive */
  gitArchiveUrl?: InputMaybe<Scalars["String"]>;
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: InputMaybe<Scalars["String"]>;
  /** The signed URL to access the user-uploaded metadata archive */
  metadataArchiveUrl?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization that will own the imported repository. */
  ownerId: Scalars["ID"];
  /** The name of the imported repository. */
  repositoryName: Scalars["String"];
  /** The ID of the Octoshift migration source. */
  sourceId: Scalars["ID"];
  /** The Octoshift migration source repository URL. */
  sourceRepositoryUrl: Scalars["URI"];
};

/** Autogenerated return type of StartRepositoryMigration */
export type StartRepositoryMigrationPayload = {
  __typename?: "StartRepositoryMigrationPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The new Octoshift repository migration. */
  repositoryMigration?: Maybe<RepositoryMigration>;
};

/** Represents a commit status. */
export type Status = Node & {
  __typename?: "Status";
  /** A list of status contexts and check runs for this commit. */
  combinedContexts: StatusCheckRollupContextConnection;
  /** The commit this status is attached to. */
  commit?: Maybe<Commit>;
  /** Looks up an individual status context by context name. */
  context?: Maybe<StatusContext>;
  /** The individual status contexts for this commit. */
  contexts: Array<StatusContext>;
  id: Scalars["ID"];
  /** The combined commit status. */
  state: StatusState;
};

/** Represents a commit status. */
export type StatusCombinedContextsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Represents a commit status. */
export type StatusContextArgs = {
  name: Scalars["String"];
};

/** Represents the rollup for both the check runs and status for a commit. */
export type StatusCheckRollup = Node & {
  __typename?: "StatusCheckRollup";
  /** The commit the status and check runs are attached to. */
  commit?: Maybe<Commit>;
  /** A list of status contexts and check runs for this commit. */
  contexts: StatusCheckRollupContextConnection;
  id: Scalars["ID"];
  /** The combined status for the commit. */
  state: StatusState;
};

/** Represents the rollup for both the check runs and status for a commit. */
export type StatusCheckRollupContextsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** Types that can be inside a StatusCheckRollup context. */
export type StatusCheckRollupContext = CheckRun | StatusContext;

/** The connection type for StatusCheckRollupContext. */
export type StatusCheckRollupContextConnection = {
  __typename?: "StatusCheckRollupContextConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StatusCheckRollupContextEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<StatusCheckRollupContext>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type StatusCheckRollupContextEdge = {
  __typename?: "StatusCheckRollupContextEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<StatusCheckRollupContext>;
};

/** Represents an individual commit status context */
export type StatusContext = Node &
  RequirableByPullRequest & {
    __typename?: "StatusContext";
    /** The avatar of the OAuth application or the user that created the status */
    avatarUrl?: Maybe<Scalars["URI"]>;
    /** This commit this status context is attached to. */
    commit?: Maybe<Commit>;
    /** The name of this status context. */
    context: Scalars["String"];
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** The actor who created this status context. */
    creator?: Maybe<Actor>;
    /** The description for this status context. */
    description?: Maybe<Scalars["String"]>;
    id: Scalars["ID"];
    /** Whether this is required to pass before merging for a specific pull request. */
    isRequired: Scalars["Boolean"];
    /** The state of this status context. */
    state: StatusState;
    /** The URL for this status context. */
    targetUrl?: Maybe<Scalars["URI"]>;
  };

/** Represents an individual commit status context */
export type StatusContextAvatarUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** Represents an individual commit status context */
export type StatusContextIsRequiredArgs = {
  pullRequestId?: InputMaybe<Scalars["ID"]>;
  pullRequestNumber?: InputMaybe<Scalars["Int"]>;
};

/** The possible commit status states. */
export enum StatusState {
  /** Status is errored. */
  Error = "ERROR",
  /** Status is expected. */
  Expected = "EXPECTED",
  /** Status is failing. */
  Failure = "FAILURE",
  /** Status is pending. */
  Pending = "PENDING",
  /** Status is successful. */
  Success = "SUCCESS",
}

/** Autogenerated input type of SubmitPullRequestReview */
export type SubmitPullRequestReviewInput = {
  /** The text field to set on the Pull Request Review. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The event to send to the Pull Request Review. */
  event: PullRequestReviewEvent;
  /** The Pull Request ID to submit any pending reviews. */
  pullRequestId?: InputMaybe<Scalars["ID"]>;
  /** The Pull Request Review ID to submit. */
  pullRequestReviewId?: InputMaybe<Scalars["ID"]>;
};

/** Autogenerated return type of SubmitPullRequestReview */
export type SubmitPullRequestReviewPayload = {
  __typename?: "SubmitPullRequestReviewPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The submitted pull request review. */
  pullRequestReview?: Maybe<PullRequestReview>;
};

/** A pointer to a repository at a specific revision embedded inside another repository. */
export type Submodule = {
  __typename?: "Submodule";
  /** The branch of the upstream submodule for tracking updates */
  branch?: Maybe<Scalars["String"]>;
  /** The git URL of the submodule repository */
  gitUrl: Scalars["URI"];
  /** The name of the submodule in .gitmodules */
  name: Scalars["String"];
  /** The path in the superproject that this submodule is located in */
  path: Scalars["String"];
  /** The commit revision of the subproject repository being tracked by the submodule */
  subprojectCommitOid?: Maybe<Scalars["GitObjectID"]>;
};

/** The connection type for Submodule. */
export type SubmoduleConnection = {
  __typename?: "SubmoduleConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SubmoduleEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Submodule>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type SubmoduleEdge = {
  __typename?: "SubmoduleEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Submodule>;
};

/** Entities that can be subscribed to for web and email notifications. */
export type Subscribable = {
  id: Scalars["ID"];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars["Boolean"];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: Maybe<SubscriptionState>;
};

/** Represents a 'subscribed' event on a given `Subscribable`. */
export type SubscribedEvent = Node & {
  __typename?: "SubscribedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Object referenced by event. */
  subscribable: Subscribable;
};

/** The possible states of a subscription. */
export enum SubscriptionState {
  /** The User is never notified. */
  Ignored = "IGNORED",
  /** The User is notified of all conversations. */
  Subscribed = "SUBSCRIBED",
  /** The User is only notified when participating or @mentioned. */
  Unsubscribed = "UNSUBSCRIBED",
}

/** A suggestion to review a pull request based on a user's commit history and review comments. */
export type SuggestedReviewer = {
  __typename?: "SuggestedReviewer";
  /** Is this suggestion based on past commits? */
  isAuthor: Scalars["Boolean"];
  /** Is this suggestion based on past review comments? */
  isCommenter: Scalars["Boolean"];
  /** Identifies the user suggested to review the pull request. */
  reviewer: User;
};

/** Represents a Git tag. */
export type Tag = GitObject &
  Node & {
    __typename?: "Tag";
    /** An abbreviated version of the Git object ID */
    abbreviatedOid: Scalars["String"];
    /** The HTTP path for this Git object */
    commitResourcePath: Scalars["URI"];
    /** The HTTP URL for this Git object */
    commitUrl: Scalars["URI"];
    id: Scalars["ID"];
    /** The Git tag message. */
    message?: Maybe<Scalars["String"]>;
    /** The Git tag name. */
    name: Scalars["String"];
    /** The Git object ID */
    oid: Scalars["GitObjectID"];
    /** The Repository the Git object belongs to */
    repository: Repository;
    /** Details about the tag author. */
    tagger?: Maybe<GitActor>;
    /** The Git object the tag points to. */
    target: GitObject;
  };

/** A team of users in an organization. */
export type Team = MemberStatusable &
  Node &
  Subscribable & {
    __typename?: "Team";
    /** A list of teams that are ancestors of this team. */
    ancestors: TeamConnection;
    /** A URL pointing to the team's avatar. */
    avatarUrl?: Maybe<Scalars["URI"]>;
    /** List of child teams belonging to this team */
    childTeams: TeamConnection;
    /** The slug corresponding to the organization and team. */
    combinedSlug: Scalars["String"];
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The description of the team. */
    description?: Maybe<Scalars["String"]>;
    /** Find a team discussion by its number. */
    discussion?: Maybe<TeamDiscussion>;
    /** A list of team discussions. */
    discussions: TeamDiscussionConnection;
    /** The HTTP path for team discussions */
    discussionsResourcePath: Scalars["URI"];
    /** The HTTP URL for team discussions */
    discussionsUrl: Scalars["URI"];
    /** The HTTP path for editing this team */
    editTeamResourcePath: Scalars["URI"];
    /** The HTTP URL for editing this team */
    editTeamUrl: Scalars["URI"];
    id: Scalars["ID"];
    /** A list of pending invitations for users to this team */
    invitations?: Maybe<OrganizationInvitationConnection>;
    /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
    memberStatuses: UserStatusConnection;
    /** A list of users who are members of this team. */
    members: TeamMemberConnection;
    /** The HTTP path for the team' members */
    membersResourcePath: Scalars["URI"];
    /** The HTTP URL for the team' members */
    membersUrl: Scalars["URI"];
    /** The name of the team. */
    name: Scalars["String"];
    /** The HTTP path creating a new team */
    newTeamResourcePath: Scalars["URI"];
    /** The HTTP URL creating a new team */
    newTeamUrl: Scalars["URI"];
    /** The organization that owns this team. */
    organization: Organization;
    /** The parent team of the team. */
    parentTeam?: Maybe<Team>;
    /** The level of privacy the team has. */
    privacy: TeamPrivacy;
    /** A list of repositories this team has access to. */
    repositories: TeamRepositoryConnection;
    /** The HTTP path for this team's repositories */
    repositoriesResourcePath: Scalars["URI"];
    /** The HTTP URL for this team's repositories */
    repositoriesUrl: Scalars["URI"];
    /** The HTTP path for this team */
    resourcePath: Scalars["URI"];
    /** The slug corresponding to the team. */
    slug: Scalars["String"];
    /** The HTTP path for this team's teams */
    teamsResourcePath: Scalars["URI"];
    /** The HTTP URL for this team's teams */
    teamsUrl: Scalars["URI"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this team */
    url: Scalars["URI"];
    /** Team is adminable by the viewer. */
    viewerCanAdminister: Scalars["Boolean"];
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"];
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: Maybe<SubscriptionState>;
  };

/** A team of users in an organization. */
export type TeamAncestorsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A team of users in an organization. */
export type TeamAvatarUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** A team of users in an organization. */
export type TeamChildTeamsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  immediateOnly?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<TeamOrder>;
  userLogins?: InputMaybe<Array<Scalars["String"]>>;
};

/** A team of users in an organization. */
export type TeamDiscussionArgs = {
  number: Scalars["Int"];
};

/** A team of users in an organization. */
export type TeamDiscussionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  isPinned?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<TeamDiscussionOrder>;
};

/** A team of users in an organization. */
export type TeamInvitationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A team of users in an organization. */
export type TeamMemberStatusesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<UserStatusOrder>;
};

/** A team of users in an organization. */
export type TeamMembersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  membership?: InputMaybe<TeamMembershipType>;
  orderBy?: InputMaybe<TeamMemberOrder>;
  query?: InputMaybe<Scalars["String"]>;
  role?: InputMaybe<TeamMemberRole>;
};

/** A team of users in an organization. */
export type TeamRepositoriesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<TeamRepositoryOrder>;
  query?: InputMaybe<Scalars["String"]>;
};

/** Audit log entry for a team.add_member event. */
export type TeamAddMemberAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  TeamAuditEntryData & {
    __typename?: "TeamAddMemberAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped?: Maybe<Scalars["Boolean"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The team associated with the action */
    team?: Maybe<Team>;
    /** The name of the team */
    teamName?: Maybe<Scalars["String"]>;
    /** The HTTP path for this team */
    teamResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for this team */
    teamUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a team.add_repository event. */
export type TeamAddRepositoryAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData &
  TeamAuditEntryData & {
    __typename?: "TeamAddRepositoryAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped?: Maybe<Scalars["Boolean"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The team associated with the action */
    team?: Maybe<Team>;
    /** The name of the team */
    teamName?: Maybe<Scalars["String"]>;
    /** The HTTP path for this team */
    teamResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for this team */
    teamUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Metadata for an audit entry with action team.* */
export type TeamAuditEntryData = {
  /** The team associated with the action */
  team?: Maybe<Team>;
  /** The name of the team */
  teamName?: Maybe<Scalars["String"]>;
  /** The HTTP path for this team */
  teamResourcePath?: Maybe<Scalars["URI"]>;
  /** The HTTP URL for this team */
  teamUrl?: Maybe<Scalars["URI"]>;
};

/** Audit log entry for a team.change_parent_team event. */
export type TeamChangeParentTeamAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  TeamAuditEntryData & {
    __typename?: "TeamChangeParentTeamAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped?: Maybe<Scalars["Boolean"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The new parent team. */
    parentTeam?: Maybe<Team>;
    /** The name of the new parent team */
    parentTeamName?: Maybe<Scalars["String"]>;
    /** The name of the former parent team */
    parentTeamNameWas?: Maybe<Scalars["String"]>;
    /** The HTTP path for the parent team */
    parentTeamResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the parent team */
    parentTeamUrl?: Maybe<Scalars["URI"]>;
    /** The former parent team. */
    parentTeamWas?: Maybe<Team>;
    /** The HTTP path for the previous parent team */
    parentTeamWasResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the previous parent team */
    parentTeamWasUrl?: Maybe<Scalars["URI"]>;
    /** The team associated with the action */
    team?: Maybe<Team>;
    /** The name of the team */
    teamName?: Maybe<Scalars["String"]>;
    /** The HTTP path for this team */
    teamResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for this team */
    teamUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The connection type for Team. */
export type TeamConnection = {
  __typename?: "TeamConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TeamEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Team>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** A team discussion. */
export type TeamDiscussion = Comment &
  Deletable &
  Node &
  Reactable &
  Subscribable &
  UniformResourceLocatable &
  Updatable &
  UpdatableComment & {
    __typename?: "TeamDiscussion";
    /** The actor who authored the comment. */
    author?: Maybe<Actor>;
    /** Author's association with the discussion's team. */
    authorAssociation: CommentAuthorAssociation;
    /** The body as Markdown. */
    body: Scalars["String"];
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** The body rendered to text. */
    bodyText: Scalars["String"];
    /** Identifies the discussion body hash. */
    bodyVersion: Scalars["String"];
    /** A list of comments on this discussion. */
    comments: TeamDiscussionCommentConnection;
    /** The HTTP path for discussion comments */
    commentsResourcePath: Scalars["URI"];
    /** The HTTP URL for discussion comments */
    commentsUrl: Scalars["URI"];
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The actor who edited the comment. */
    editor?: Maybe<Actor>;
    id: Scalars["ID"];
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"];
    /** Whether or not the discussion is pinned. */
    isPinned: Scalars["Boolean"];
    /** Whether or not the discussion is only visible to team members and org admins. */
    isPrivate: Scalars["Boolean"];
    /** The moment the editor made the last edit */
    lastEditedAt?: Maybe<Scalars["DateTime"]>;
    /** Identifies the discussion within its team. */
    number: Scalars["Int"];
    /** Identifies when the comment was published at. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: Maybe<Array<ReactionGroup>>;
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection;
    /** The HTTP path for this discussion */
    resourcePath: Scalars["URI"];
    /** The team that defines the context of this discussion. */
    team: Team;
    /** The title of the discussion */
    title: Scalars["String"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this discussion */
    url: Scalars["URI"];
    /** A list of edits to this content. */
    userContentEdits?: Maybe<UserContentEditConnection>;
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"];
    /** Whether or not the current viewer can pin this discussion. */
    viewerCanPin: Scalars["Boolean"];
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"];
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"];
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: Maybe<SubscriptionState>;
  };

/** A team discussion. */
export type TeamDiscussionCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  fromComment?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<TeamDiscussionCommentOrder>;
};

/** A team discussion. */
export type TeamDiscussionReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** A team discussion. */
export type TeamDiscussionUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A comment on a team discussion. */
export type TeamDiscussionComment = Comment &
  Deletable &
  Node &
  Reactable &
  UniformResourceLocatable &
  Updatable &
  UpdatableComment & {
    __typename?: "TeamDiscussionComment";
    /** The actor who authored the comment. */
    author?: Maybe<Actor>;
    /** Author's association with the comment's team. */
    authorAssociation: CommentAuthorAssociation;
    /** The body as Markdown. */
    body: Scalars["String"];
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"];
    /** The body rendered to text. */
    bodyText: Scalars["String"];
    /** The current version of the body content. */
    bodyVersion: Scalars["String"];
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The discussion this comment is about. */
    discussion: TeamDiscussion;
    /** The actor who edited the comment. */
    editor?: Maybe<Actor>;
    id: Scalars["ID"];
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"];
    /** The moment the editor made the last edit */
    lastEditedAt?: Maybe<Scalars["DateTime"]>;
    /** Identifies the comment number. */
    number: Scalars["Int"];
    /** Identifies when the comment was published at. */
    publishedAt?: Maybe<Scalars["DateTime"]>;
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: Maybe<Array<ReactionGroup>>;
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection;
    /** The HTTP path for this comment */
    resourcePath: Scalars["URI"];
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this comment */
    url: Scalars["URI"];
    /** A list of edits to this content. */
    userContentEdits?: Maybe<UserContentEditConnection>;
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"];
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"];
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"];
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"];
  };

/** A comment on a team discussion. */
export type TeamDiscussionCommentReactionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<ReactionContent>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ReactionOrder>;
};

/** A comment on a team discussion. */
export type TeamDiscussionCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** The connection type for TeamDiscussionComment. */
export type TeamDiscussionCommentConnection = {
  __typename?: "TeamDiscussionCommentConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TeamDiscussionCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<TeamDiscussionComment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type TeamDiscussionCommentEdge = {
  __typename?: "TeamDiscussionCommentEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<TeamDiscussionComment>;
};

/** Ways in which team discussion comment connections can be ordered. */
export type TeamDiscussionCommentOrder = {
  /** The direction in which to order nodes. */
  direction: OrderDirection;
  /** The field by which to order nodes. */
  field: TeamDiscussionCommentOrderField;
};

/** Properties by which team discussion comment connections can be ordered. */
export enum TeamDiscussionCommentOrderField {
  /** Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering). */
  Number = "NUMBER",
}

/** The connection type for TeamDiscussion. */
export type TeamDiscussionConnection = {
  __typename?: "TeamDiscussionConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TeamDiscussionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<TeamDiscussion>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type TeamDiscussionEdge = {
  __typename?: "TeamDiscussionEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<TeamDiscussion>;
};

/** Ways in which team discussion connections can be ordered. */
export type TeamDiscussionOrder = {
  /** The direction in which to order nodes. */
  direction: OrderDirection;
  /** The field by which to order nodes. */
  field: TeamDiscussionOrderField;
};

/** Properties by which team discussion connections can be ordered. */
export enum TeamDiscussionOrderField {
  /** Allows chronological ordering of team discussions. */
  CreatedAt = "CREATED_AT",
}

/** An edge in a connection. */
export type TeamEdge = {
  __typename?: "TeamEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Team>;
};

/** The connection type for User. */
export type TeamMemberConnection = {
  __typename?: "TeamMemberConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TeamMemberEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Represents a user who is a member of a team. */
export type TeamMemberEdge = {
  __typename?: "TeamMemberEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The HTTP path to the organization's member access page. */
  memberAccessResourcePath: Scalars["URI"];
  /** The HTTP URL to the organization's member access page. */
  memberAccessUrl: Scalars["URI"];
  node: User;
  /** The role the member has on the team. */
  role: TeamMemberRole;
};

/** Ordering options for team member connections */
export type TeamMemberOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order team members by. */
  field: TeamMemberOrderField;
};

/** Properties by which team member connections can be ordered. */
export enum TeamMemberOrderField {
  /** Order team members by creation time */
  CreatedAt = "CREATED_AT",
  /** Order team members by login */
  Login = "LOGIN",
}

/** The possible team member roles; either 'maintainer' or 'member'. */
export enum TeamMemberRole {
  /** A team maintainer has permission to add and remove team members. */
  Maintainer = "MAINTAINER",
  /** A team member has no administrative permissions on the team. */
  Member = "MEMBER",
}

/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
export enum TeamMembershipType {
  /** Includes immediate and child team members for the team. */
  All = "ALL",
  /** Includes only child team members for the team. */
  ChildTeam = "CHILD_TEAM",
  /** Includes only immediate members of the team. */
  Immediate = "IMMEDIATE",
}

/** Ways in which team connections can be ordered. */
export type TeamOrder = {
  /** The direction in which to order nodes. */
  direction: OrderDirection;
  /** The field in which to order nodes by. */
  field: TeamOrderField;
};

/** Properties by which team connections can be ordered. */
export enum TeamOrderField {
  /** Allows ordering a list of teams by name. */
  Name = "NAME",
}

/** The possible team privacy values. */
export enum TeamPrivacy {
  /** A secret team can only be seen by its members. */
  Secret = "SECRET",
  /** A visible team can be seen and @mentioned by every member of the organization. */
  Visible = "VISIBLE",
}

/** Audit log entry for a team.remove_member event. */
export type TeamRemoveMemberAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  TeamAuditEntryData & {
    __typename?: "TeamRemoveMemberAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped?: Maybe<Scalars["Boolean"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The team associated with the action */
    team?: Maybe<Team>;
    /** The name of the team */
    teamName?: Maybe<Scalars["String"]>;
    /** The HTTP path for this team */
    teamResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for this team */
    teamUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** Audit log entry for a team.remove_repository event. */
export type TeamRemoveRepositoryAuditEntry = AuditEntry &
  Node &
  OrganizationAuditEntryData &
  RepositoryAuditEntryData &
  TeamAuditEntryData & {
    __typename?: "TeamRemoveRepositoryAuditEntry";
    /** The action name */
    action: Scalars["String"];
    /** The user who initiated the action */
    actor?: Maybe<AuditEntryActor>;
    /** The IP address of the actor */
    actorIp?: Maybe<Scalars["String"]>;
    /** A readable representation of the actor's location */
    actorLocation?: Maybe<ActorLocation>;
    /** The username of the user who initiated the action */
    actorLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the actor. */
    actorResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the actor. */
    actorUrl?: Maybe<Scalars["URI"]>;
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"];
    id: Scalars["ID"];
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped?: Maybe<Scalars["Boolean"]>;
    /** The corresponding operation type for the action */
    operationType?: Maybe<OperationType>;
    /** The Organization associated with the Audit Entry. */
    organization?: Maybe<Organization>;
    /** The name of the Organization. */
    organizationName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the organization */
    organizationResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the organization */
    organizationUrl?: Maybe<Scalars["URI"]>;
    /** The repository associated with the action */
    repository?: Maybe<Repository>;
    /** The name of the repository */
    repositoryName?: Maybe<Scalars["String"]>;
    /** The HTTP path for the repository */
    repositoryResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the repository */
    repositoryUrl?: Maybe<Scalars["URI"]>;
    /** The team associated with the action */
    team?: Maybe<Team>;
    /** The name of the team */
    teamName?: Maybe<Scalars["String"]>;
    /** The HTTP path for this team */
    teamResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for this team */
    teamUrl?: Maybe<Scalars["URI"]>;
    /** The user affected by the action */
    user?: Maybe<User>;
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: Maybe<Scalars["String"]>;
    /** The HTTP path for the user. */
    userResourcePath?: Maybe<Scalars["URI"]>;
    /** The HTTP URL for the user. */
    userUrl?: Maybe<Scalars["URI"]>;
  };

/** The connection type for Repository. */
export type TeamRepositoryConnection = {
  __typename?: "TeamRepositoryConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TeamRepositoryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Repository>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** Represents a team repository. */
export type TeamRepositoryEdge = {
  __typename?: "TeamRepositoryEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  node: Repository;
  /** The permission level the team has on the repository */
  permission: RepositoryPermission;
};

/** Ordering options for team repository connections */
export type TeamRepositoryOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order repositories by. */
  field: TeamRepositoryOrderField;
};

/** Properties by which team repository connections can be ordered. */
export enum TeamRepositoryOrderField {
  /** Order repositories by creation time */
  CreatedAt = "CREATED_AT",
  /** Order repositories by name */
  Name = "NAME",
  /** Order repositories by permission */
  Permission = "PERMISSION",
  /** Order repositories by push time */
  PushedAt = "PUSHED_AT",
  /** Order repositories by number of stargazers */
  Stargazers = "STARGAZERS",
  /** Order repositories by update time */
  UpdatedAt = "UPDATED_AT",
}

/** The role of a user on a team. */
export enum TeamRole {
  /** User has admin rights on the team. */
  Admin = "ADMIN",
  /** User is a member of the team. */
  Member = "MEMBER",
}

/** A text match within a search result. */
export type TextMatch = {
  __typename?: "TextMatch";
  /** The specific text fragment within the property matched on. */
  fragment: Scalars["String"];
  /** Highlights within the matched fragment. */
  highlights: Array<TextMatchHighlight>;
  /** The property matched on. */
  property: Scalars["String"];
};

/** Represents a single highlight in a search result match. */
export type TextMatchHighlight = {
  __typename?: "TextMatchHighlight";
  /** The indice in the fragment where the matched text begins. */
  beginIndice: Scalars["Int"];
  /** The indice in the fragment where the matched text ends. */
  endIndice: Scalars["Int"];
  /** The text matched. */
  text: Scalars["String"];
};

/** A topic aggregates entities that are related to a subject. */
export type Topic = Node &
  Starrable & {
    __typename?: "Topic";
    id: Scalars["ID"];
    /** The topic's name. */
    name: Scalars["String"];
    /**
     * A list of related topics, including aliases of this topic, sorted with the most relevant
     * first. Returns up to 10 Topics.
     *
     */
    relatedTopics: Array<Topic>;
    /** A list of repositories. */
    repositories: RepositoryConnection;
    /**
     * Returns a count of how many stargazers there are on this object
     *
     */
    stargazerCount: Scalars["Int"];
    /** A list of users who have starred this starrable. */
    stargazers: StargazerConnection;
    /** Returns a boolean indicating whether the viewing user has starred this starrable. */
    viewerHasStarred: Scalars["Boolean"];
  };

/** A topic aggregates entities that are related to a subject. */
export type TopicRelatedTopicsArgs = {
  first?: InputMaybe<Scalars["Int"]>;
};

/** A topic aggregates entities that are related to a subject. */
export type TopicRepositoriesArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  isLocked?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  privacy?: InputMaybe<RepositoryPrivacy>;
  sponsorableOnly?: InputMaybe<Scalars["Boolean"]>;
};

/** A topic aggregates entities that are related to a subject. */
export type TopicStargazersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<StarOrder>;
};

/** Metadata for an audit entry with a topic. */
export type TopicAuditEntryData = {
  /** The name of the topic added to the repository */
  topic?: Maybe<Topic>;
  /** The name of the topic added to the repository */
  topicName?: Maybe<Scalars["String"]>;
};

/** Reason that the suggested topic is declined. */
export enum TopicSuggestionDeclineReason {
  /** The suggested topic is not relevant to the repository. */
  NotRelevant = "NOT_RELEVANT",
  /** The viewer does not like the suggested topic. */
  PersonalPreference = "PERSONAL_PREFERENCE",
  /** The suggested topic is too general for the repository. */
  TooGeneral = "TOO_GENERAL",
  /** The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1). */
  TooSpecific = "TOO_SPECIFIC",
}

/** Autogenerated input type of TransferIssue */
export type TransferIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the issue to be transferred */
  issueId: Scalars["ID"];
  /** The Node ID of the repository the issue should be transferred to */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of TransferIssue */
export type TransferIssuePayload = {
  __typename?: "TransferIssuePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The issue that was transferred */
  issue?: Maybe<Issue>;
};

/** Represents a 'transferred' event on a given issue or pull request. */
export type TransferredEvent = Node & {
  __typename?: "TransferredEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The repository this came from */
  fromRepository?: Maybe<Repository>;
  id: Scalars["ID"];
  /** Identifies the issue associated with the event. */
  issue: Issue;
};

/** Represents a Git tree. */
export type Tree = GitObject &
  Node & {
    __typename?: "Tree";
    /** An abbreviated version of the Git object ID */
    abbreviatedOid: Scalars["String"];
    /** The HTTP path for this Git object */
    commitResourcePath: Scalars["URI"];
    /** The HTTP URL for this Git object */
    commitUrl: Scalars["URI"];
    /** A list of tree entries. */
    entries?: Maybe<Array<TreeEntry>>;
    id: Scalars["ID"];
    /** The Git object ID */
    oid: Scalars["GitObjectID"];
    /** The Repository the Git object belongs to */
    repository: Repository;
  };

/** Represents a Git tree entry. */
export type TreeEntry = {
  __typename?: "TreeEntry";
  /** The extension of the file */
  extension?: Maybe<Scalars["String"]>;
  /** Whether or not this tree entry is generated */
  isGenerated: Scalars["Boolean"];
  /** Entry file mode. */
  mode: Scalars["Int"];
  /** Entry file name. */
  name: Scalars["String"];
  /** Entry file object. */
  object?: Maybe<GitObject>;
  /** Entry file Git object ID. */
  oid: Scalars["GitObjectID"];
  /** The full path of the file. */
  path?: Maybe<Scalars["String"]>;
  /** The Repository the tree entry belongs to */
  repository: Repository;
  /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
  submodule?: Maybe<Submodule>;
  /** Entry file type. */
  type: Scalars["String"];
};

/** Autogenerated input type of UnarchiveRepository */
export type UnarchiveRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the repository to unarchive. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of UnarchiveRepository */
export type UnarchiveRepositoryPayload = {
  __typename?: "UnarchiveRepositoryPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The repository that was unarchived. */
  repository?: Maybe<Repository>;
};

/** Represents an 'unassigned' event on any assignable object. */
export type UnassignedEvent = Node & {
  __typename?: "UnassignedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the assignable associated with the event. */
  assignable: Assignable;
  /** Identifies the user or mannequin that was unassigned. */
  assignee?: Maybe<Assignee>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /**
   * Identifies the subject (user) who was unassigned.
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */
  user?: Maybe<User>;
};

/** Autogenerated input type of UnfollowUser */
export type UnfollowUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the user to unfollow. */
  userId: Scalars["ID"];
};

/** Autogenerated return type of UnfollowUser */
export type UnfollowUserPayload = {
  __typename?: "UnfollowUserPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The user that was unfollowed. */
  user?: Maybe<User>;
};

/** Represents a type that can be retrieved by a URL. */
export type UniformResourceLocatable = {
  /** The HTML path to this resource. */
  resourcePath: Scalars["URI"];
  /** The URL to this resource. */
  url: Scalars["URI"];
};

/** Represents an unknown signature on a Commit or Tag. */
export type UnknownSignature = GitSignature & {
  __typename?: "UnknownSignature";
  /** Email used to sign this object. */
  email: Scalars["String"];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars["Boolean"];
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars["String"];
  /** ASCII-armored signature header from object. */
  signature: Scalars["String"];
  /** GitHub user corresponding to the email signing this commit. */
  signer?: Maybe<User>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars["Boolean"];
};

/** Represents an 'unlabeled' event on a given issue or pull request. */
export type UnlabeledEvent = Node & {
  __typename?: "UnlabeledEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Identifies the label associated with the 'unlabeled' event. */
  label: Label;
  /** Identifies the `Labelable` associated with the event. */
  labelable: Labelable;
};

/** Autogenerated input type of UnlinkRepositoryFromProject */
export type UnlinkRepositoryFromProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Project linked to the Repository. */
  projectId: Scalars["ID"];
  /** The ID of the Repository linked to the Project. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of UnlinkRepositoryFromProject */
export type UnlinkRepositoryFromProjectPayload = {
  __typename?: "UnlinkRepositoryFromProjectPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The linked Project. */
  project?: Maybe<Project>;
  /** The linked Repository. */
  repository?: Maybe<Repository>;
};

/** Autogenerated input type of UnlockLockable */
export type UnlockLockableInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the item to be unlocked. */
  lockableId: Scalars["ID"];
};

/** Autogenerated return type of UnlockLockable */
export type UnlockLockablePayload = {
  __typename?: "UnlockLockablePayload";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The item that was unlocked. */
  unlockedRecord?: Maybe<Lockable>;
};

/** Represents an 'unlocked' event on a given issue or pull request. */
export type UnlockedEvent = Node & {
  __typename?: "UnlockedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Object that was unlocked. */
  lockable: Lockable;
};

/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */
export type UnmarkDiscussionCommentAsAnswerInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion comment to unmark as an answer. */
  id: Scalars["ID"];
};

/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer */
export type UnmarkDiscussionCommentAsAnswerPayload = {
  __typename?: "UnmarkDiscussionCommentAsAnswerPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The discussion that includes the comment. */
  discussion?: Maybe<Discussion>;
};

/** Autogenerated input type of UnmarkFileAsViewed */
export type UnmarkFileAsViewedInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The path of the file to mark as unviewed */
  path: Scalars["String"];
  /** The Node ID of the pull request. */
  pullRequestId: Scalars["ID"];
};

/** Autogenerated return type of UnmarkFileAsViewed */
export type UnmarkFileAsViewedPayload = {
  __typename?: "UnmarkFileAsViewedPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated pull request. */
  pullRequest?: Maybe<PullRequest>;
};

/** Autogenerated input type of UnmarkIssueAsDuplicate */
export type UnmarkIssueAsDuplicateInput = {
  /** ID of the issue or pull request currently considered canonical/authoritative/original. */
  canonicalId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the issue or pull request currently marked as a duplicate. */
  duplicateId: Scalars["ID"];
};

/** Autogenerated return type of UnmarkIssueAsDuplicate */
export type UnmarkIssueAsDuplicatePayload = {
  __typename?: "UnmarkIssueAsDuplicatePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The issue or pull request that was marked as a duplicate. */
  duplicate?: Maybe<IssueOrPullRequest>;
};

/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
export type UnmarkedAsDuplicateEvent = Node & {
  __typename?: "UnmarkedAsDuplicateEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical?: Maybe<IssueOrPullRequest>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate?: Maybe<IssueOrPullRequest>;
  id: Scalars["ID"];
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository: Scalars["Boolean"];
};

/** Autogenerated input type of UnminimizeComment */
export type UnminimizeCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars["ID"];
};

/** Autogenerated return type of UnminimizeComment */
export type UnminimizeCommentPayload = {
  __typename?: "UnminimizeCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The comment that was unminimized. */
  unminimizedComment?: Maybe<Minimizable>;
};

/** Autogenerated input type of UnpinIssue */
export type UnpinIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the issue to be unpinned */
  issueId: Scalars["ID"];
};

/** Autogenerated return type of UnpinIssue */
export type UnpinIssuePayload = {
  __typename?: "UnpinIssuePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The issue that was unpinned */
  issue?: Maybe<Issue>;
};

/** Represents an 'unpinned' event on a given issue or pull request. */
export type UnpinnedEvent = Node & {
  __typename?: "UnpinnedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Identifies the issue associated with the event. */
  issue: Issue;
};

/** Autogenerated input type of UnresolveReviewThread */
export type UnresolveReviewThreadInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the thread to unresolve */
  threadId: Scalars["ID"];
};

/** Autogenerated return type of UnresolveReviewThread */
export type UnresolveReviewThreadPayload = {
  __typename?: "UnresolveReviewThreadPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The thread to resolve. */
  thread?: Maybe<PullRequestReviewThread>;
};

/** Represents an 'unsubscribed' event on a given `Subscribable`. */
export type UnsubscribedEvent = Node & {
  __typename?: "UnsubscribedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** Object referenced by event. */
  subscribable: Subscribable;
};

/** Entities that can be updated. */
export type Updatable = {
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars["Boolean"];
};

/** Comments that can be updated. */
export type UpdatableComment = {
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
};

/** Autogenerated input type of UpdateBranchProtectionRule */
export type UpdateBranchProtectionRuleInput = {
  /** Can this branch be deleted. */
  allowsDeletions?: InputMaybe<Scalars["Boolean"]>;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: InputMaybe<Scalars["Boolean"]>;
  /** The global relay id of the branch protection rule to be updated. */
  branchProtectionRuleId: Scalars["ID"];
  /** A list of User or Team IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** A list of User or Team IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Can admins overwrite branch protection. */
  isAdminEnforced?: InputMaybe<Scalars["Boolean"]>;
  /** The glob-like pattern used to determine matching branches. */
  pattern?: InputMaybe<Scalars["String"]>;
  /** A list of User, Team or App IDs allowed to push to matching branches. */
  pushActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: InputMaybe<Scalars["Int"]>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: InputMaybe<Array<Scalars["String"]>>;
  /** The list of required status checks */
  requiredStatusChecks?: InputMaybe<Array<RequiredStatusCheckInput>>;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Are commits required to be signed. */
  requiresCommitSignatures?: InputMaybe<Scalars["Boolean"]>;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: InputMaybe<Scalars["Boolean"]>;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: InputMaybe<Scalars["Boolean"]>;
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: InputMaybe<Scalars["Boolean"]>;
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: InputMaybe<Scalars["Boolean"]>;
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: InputMaybe<Scalars["Boolean"]>;
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: InputMaybe<Scalars["Boolean"]>;
  /** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: InputMaybe<Array<Scalars["ID"]>>;
};

/** Autogenerated return type of UpdateBranchProtectionRule */
export type UpdateBranchProtectionRulePayload = {
  __typename?: "UpdateBranchProtectionRulePayload";
  /** The newly created BranchProtectionRule. */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateCheckRun */
export type UpdateCheckRunInput = {
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: InputMaybe<Array<CheckRunAction>>;
  /** The node of the check. */
  checkRunId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The time that the check run finished. */
  completedAt?: InputMaybe<Scalars["DateTime"]>;
  /** The final conclusion of the check. */
  conclusion?: InputMaybe<CheckConclusionState>;
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: InputMaybe<Scalars["URI"]>;
  /** A reference for the run on the integrator's system. */
  externalId?: InputMaybe<Scalars["String"]>;
  /** The name of the check. */
  name?: InputMaybe<Scalars["String"]>;
  /** Descriptive details about the run. */
  output?: InputMaybe<CheckRunOutput>;
  /** The node ID of the repository. */
  repositoryId: Scalars["ID"];
  /** The time that the check run began. */
  startedAt?: InputMaybe<Scalars["DateTime"]>;
  /** The current status. */
  status?: InputMaybe<RequestableCheckStatusState>;
};

/** Autogenerated return type of UpdateCheckRun */
export type UpdateCheckRunPayload = {
  __typename?: "UpdateCheckRunPayload";
  /** The updated check run. */
  checkRun?: Maybe<CheckRun>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateCheckSuitePreferences */
export type UpdateCheckSuitePreferencesInput = {
  /** The check suite preferences to modify. */
  autoTriggerPreferences: Array<CheckSuiteAutoTriggerPreference>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
};

/** Autogenerated return type of UpdateCheckSuitePreferences */
export type UpdateCheckSuitePreferencesPayload = {
  __typename?: "UpdateCheckSuitePreferencesPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated repository. */
  repository?: Maybe<Repository>;
};

/** Autogenerated input type of UpdateDiscussionComment */
export type UpdateDiscussionCommentInput = {
  /** The new contents of the comment body. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion comment to update. */
  commentId: Scalars["ID"];
};

/** Autogenerated return type of UpdateDiscussionComment */
export type UpdateDiscussionCommentPayload = {
  __typename?: "UpdateDiscussionCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The modified discussion comment. */
  comment?: Maybe<DiscussionComment>;
};

/** Autogenerated input type of UpdateDiscussion */
export type UpdateDiscussionInput = {
  /** The new contents of the discussion body. */
  body?: InputMaybe<Scalars["String"]>;
  /** The Node ID of a discussion category within the same repository to change this discussion to. */
  categoryId?: InputMaybe<Scalars["ID"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion to update. */
  discussionId: Scalars["ID"];
  /** The new discussion title. */
  title?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of UpdateDiscussion */
export type UpdateDiscussionPayload = {
  __typename?: "UpdateDiscussionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The modified discussion. */
  discussion?: Maybe<Discussion>;
};

/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
export type UpdateEnterpriseAdministratorRoleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars["ID"];
  /** The login of a administrator whose role is being changed. */
  login: Scalars["String"];
  /** The new role for the Enterprise administrator. */
  role: EnterpriseAdministratorRole;
};

/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
export type UpdateEnterpriseAdministratorRolePayload = {
  __typename?: "UpdateEnterpriseAdministratorRolePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** A message confirming the result of changing the administrator's role. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export type UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the allow private repository forking setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the allow private repository forking setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload = {
  __typename?: "UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated allow private repository forking setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the allow private repository forking setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export type UpdateEnterpriseDefaultRepositoryPermissionSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the base repository permission setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the base repository permission setting on the enterprise. */
  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload = {
  __typename?: "UpdateEnterpriseDefaultRepositoryPermissionSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated base repository permission setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the base repository permission setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can change repository visibility setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can change repository visibility setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload =
  {
    __typename?: "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload";
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: Maybe<Scalars["String"]>;
    /** The enterprise with the updated members can change repository visibility setting. */
    enterprise?: Maybe<Enterprise>;
    /** A message confirming the result of updating the members can change repository visibility setting. */
    message?: Maybe<Scalars["String"]>;
  };

/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export type UpdateEnterpriseMembersCanCreateRepositoriesSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can create repositories setting. */
  enterpriseId: Scalars["ID"];
  /** Allow members to create internal repositories. Defaults to current value. */
  membersCanCreateInternalRepositories?: InputMaybe<Scalars["Boolean"]>;
  /** Allow members to create private repositories. Defaults to current value. */
  membersCanCreatePrivateRepositories?: InputMaybe<Scalars["Boolean"]>;
  /** Allow members to create public repositories. Defaults to current value. */
  membersCanCreatePublicRepositories?: InputMaybe<Scalars["Boolean"]>;
  /** When false, allow member organizations to set their own repository creation member privileges. */
  membersCanCreateRepositoriesPolicyEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided. */
  settingValue?: InputMaybe<EnterpriseMembersCanCreateRepositoriesSettingValue>;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload = {
  __typename?: "UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated members can create repositories setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the members can create repositories setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export type UpdateEnterpriseMembersCanDeleteIssuesSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can delete issues setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can delete issues setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload = {
  __typename?: "UpdateEnterpriseMembersCanDeleteIssuesSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated members can delete issues setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the members can delete issues setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export type UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can delete repositories setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can delete repositories setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload = {
  __typename?: "UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated members can delete repositories setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the members can delete repositories setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export type UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can invite collaborators setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can invite collaborators setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload = {
  __typename?: "UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated members can invite collaborators setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the members can invite collaborators setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export type UpdateEnterpriseMembersCanMakePurchasesSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can make purchases setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can make purchases setting on the enterprise. */
  settingValue: EnterpriseMembersCanMakePurchasesSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export type UpdateEnterpriseMembersCanMakePurchasesSettingPayload = {
  __typename?: "UpdateEnterpriseMembersCanMakePurchasesSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated members can make purchases setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the members can make purchases setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can update protected branches setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can update protected branches setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload = {
  __typename?: "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated members can update protected branches setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the members can update protected branches setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export type UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can view dependency insights setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can view dependency insights setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload = {
  __typename?: "UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated members can view dependency insights setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the members can view dependency insights setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
export type UpdateEnterpriseOrganizationProjectsSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the organization projects setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the organization projects setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
export type UpdateEnterpriseOrganizationProjectsSettingPayload = {
  __typename?: "UpdateEnterpriseOrganizationProjectsSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated organization projects setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the organization projects setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */
export type UpdateEnterpriseOwnerOrganizationRoleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Enterprise which the owner belongs to. */
  enterpriseId: Scalars["ID"];
  /** The ID of the organization for membership change. */
  organizationId: Scalars["ID"];
  /** The role to assume in the organization. */
  organizationRole: RoleInOrganization;
};

/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole */
export type UpdateEnterpriseOwnerOrganizationRolePayload = {
  __typename?: "UpdateEnterpriseOwnerOrganizationRolePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** A message confirming the result of changing the owner's organization role. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseProfile */
export type UpdateEnterpriseProfileInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the enterprise. */
  description?: InputMaybe<Scalars["String"]>;
  /** The Enterprise ID to update. */
  enterpriseId: Scalars["ID"];
  /** The location of the enterprise. */
  location?: InputMaybe<Scalars["String"]>;
  /** The name of the enterprise. */
  name?: InputMaybe<Scalars["String"]>;
  /** The URL of the enterprise's website. */
  websiteUrl?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of UpdateEnterpriseProfile */
export type UpdateEnterpriseProfilePayload = {
  __typename?: "UpdateEnterpriseProfilePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated enterprise. */
  enterprise?: Maybe<Enterprise>;
};

/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
export type UpdateEnterpriseRepositoryProjectsSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the repository projects setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the repository projects setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
export type UpdateEnterpriseRepositoryProjectsSettingPayload = {
  __typename?: "UpdateEnterpriseRepositoryProjectsSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated repository projects setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the repository projects setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
export type UpdateEnterpriseTeamDiscussionsSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the team discussions setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the team discussions setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
export type UpdateEnterpriseTeamDiscussionsSettingPayload = {
  __typename?: "UpdateEnterpriseTeamDiscussionsSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated team discussions setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the team discussions setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the two factor authentication required setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the two factor authentication required setting on the enterprise. */
  settingValue: EnterpriseEnabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload = {
  __typename?: "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The enterprise with the updated two factor authentication required setting. */
  enterprise?: Maybe<Enterprise>;
  /** A message confirming the result of updating the two factor authentication required setting. */
  message?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateEnvironment */
export type UpdateEnvironmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The node ID of the environment. */
  environmentId: Scalars["ID"];
  /** The ids of users or teams that can approve deployments to this environment */
  reviewers?: InputMaybe<Array<Scalars["ID"]>>;
  /** The wait timer in minutes. */
  waitTimer?: InputMaybe<Scalars["Int"]>;
};

/** Autogenerated return type of UpdateEnvironment */
export type UpdateEnvironmentPayload = {
  __typename?: "UpdateEnvironmentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated environment. */
  environment?: Maybe<Environment>;
};

/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
export type UpdateIpAllowListEnabledSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the owner on which to set the IP allow list enabled setting. */
  ownerId: Scalars["ID"];
  /** The value for the IP allow list enabled setting. */
  settingValue: IpAllowListEnabledSettingValue;
};

/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
export type UpdateIpAllowListEnabledSettingPayload = {
  __typename?: "UpdateIpAllowListEnabledSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The IP allow list owner on which the setting was updated. */
  owner?: Maybe<IpAllowListOwner>;
};

/** Autogenerated input type of UpdateIpAllowListEntry */
export type UpdateIpAllowListEntryInput = {
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the IP allow list entry to update. */
  ipAllowListEntryId: Scalars["ID"];
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: Scalars["Boolean"];
  /** An optional name for the IP allow list entry. */
  name?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of UpdateIpAllowListEntry */
export type UpdateIpAllowListEntryPayload = {
  __typename?: "UpdateIpAllowListEntryPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The IP allow list entry that was updated. */
  ipAllowListEntry?: Maybe<IpAllowListEntry>;
};

/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export type UpdateIpAllowListForInstalledAppsEnabledSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the owner. */
  ownerId: Scalars["ID"];
  /** The value for the IP allow list configuration for installed GitHub Apps setting. */
  settingValue: IpAllowListForInstalledAppsEnabledSettingValue;
};

/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export type UpdateIpAllowListForInstalledAppsEnabledSettingPayload = {
  __typename?: "UpdateIpAllowListForInstalledAppsEnabledSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The IP allow list owner on which the setting was updated. */
  owner?: Maybe<IpAllowListOwner>;
};

/** Autogenerated input type of UpdateIssueComment */
export type UpdateIssueCommentInput = {
  /** The updated text of the comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the IssueComment to modify. */
  id: Scalars["ID"];
};

/** Autogenerated return type of UpdateIssueComment */
export type UpdateIssueCommentPayload = {
  __typename?: "UpdateIssueCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated comment. */
  issueComment?: Maybe<IssueComment>;
};

/** Autogenerated input type of UpdateIssue */
export type UpdateIssueInput = {
  /** An array of Node IDs of users for this issue. */
  assigneeIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The body for the issue description. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Issue to modify. */
  id: Scalars["ID"];
  /** An array of Node IDs of labels for this issue. */
  labelIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The Node ID of the milestone for this issue. */
  milestoneId?: InputMaybe<Scalars["ID"]>;
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The desired issue state. */
  state?: InputMaybe<IssueState>;
  /** The title for the issue. */
  title?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of UpdateIssue */
export type UpdateIssuePayload = {
  __typename?: "UpdateIssuePayload";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The issue. */
  issue?: Maybe<Issue>;
};

/** Autogenerated input type of UpdateNotificationRestrictionSetting */
export type UpdateNotificationRestrictionSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the owner on which to set the restrict notifications setting. */
  ownerId: Scalars["ID"];
  /** The value for the restrict notifications setting. */
  settingValue: NotificationRestrictionSettingValue;
};

/** Autogenerated return type of UpdateNotificationRestrictionSetting */
export type UpdateNotificationRestrictionSettingPayload = {
  __typename?: "UpdateNotificationRestrictionSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The owner on which the setting was updated. */
  owner?: Maybe<VerifiableDomainOwner>;
};

/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export type UpdateOrganizationAllowPrivateRepositoryForkingSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Enable forking of private repositories in the organization? */
  forkingEnabled: Scalars["Boolean"];
  /** The ID of the organization on which to set the allow private repository forking setting. */
  organizationId: Scalars["ID"];
};

/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export type UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload = {
  __typename?: "UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** A message confirming the result of updating the allow private repository forking setting. */
  message?: Maybe<Scalars["String"]>;
  /** The organization with the updated allow private repository forking setting. */
  organization?: Maybe<Organization>;
};

/** Autogenerated input type of UpdateProjectCard */
export type UpdateProjectCardInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether or not the ProjectCard should be archived */
  isArchived?: InputMaybe<Scalars["Boolean"]>;
  /** The note of ProjectCard. */
  note?: InputMaybe<Scalars["String"]>;
  /** The ProjectCard ID to update. */
  projectCardId: Scalars["ID"];
};

/** Autogenerated return type of UpdateProjectCard */
export type UpdateProjectCardPayload = {
  __typename?: "UpdateProjectCardPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated ProjectCard. */
  projectCard?: Maybe<ProjectCard>;
};

/** Autogenerated input type of UpdateProjectColumn */
export type UpdateProjectColumnInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of project column. */
  name: Scalars["String"];
  /** The ProjectColumn ID to update. */
  projectColumnId: Scalars["ID"];
};

/** Autogenerated return type of UpdateProjectColumn */
export type UpdateProjectColumnPayload = {
  __typename?: "UpdateProjectColumnPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated project column. */
  projectColumn?: Maybe<ProjectColumn>;
};

/** Autogenerated input type of UpdateProject */
export type UpdateProjectInput = {
  /** The description of project. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of project. */
  name?: InputMaybe<Scalars["String"]>;
  /** The Project ID to update. */
  projectId: Scalars["ID"];
  /** Whether the project is public or not. */
  public?: InputMaybe<Scalars["Boolean"]>;
  /** Whether the project is open or closed. */
  state?: InputMaybe<ProjectState>;
};

/** Autogenerated input type of UpdateProjectNext */
export type UpdateProjectNextInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Set the project to closed or open. */
  closed?: InputMaybe<Scalars["Boolean"]>;
  /** Set the readme description of the project. */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the Project to update. */
  projectId: Scalars["ID"];
  /** Set the project to public or private. */
  public?: InputMaybe<Scalars["Boolean"]>;
  /** Set the short description of the project. */
  shortDescription?: InputMaybe<Scalars["String"]>;
  /** Set the title of the project. */
  title?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated input type of UpdateProjectNextItemField */
export type UpdateProjectNextItemFieldInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the field to be updated. */
  fieldId?: InputMaybe<Scalars["ID"]>;
  /** The id of the item to be updated. */
  itemId: Scalars["ID"];
  /** The ID of the Project. */
  projectId: Scalars["ID"];
  /** The value which will be set on the field. */
  value: Scalars["String"];
};

/** Autogenerated return type of UpdateProjectNextItemField */
export type UpdateProjectNextItemFieldPayload = {
  __typename?: "UpdateProjectNextItemFieldPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated item. */
  projectNextItem?: Maybe<ProjectNextItem>;
};

/** Autogenerated return type of UpdateProjectNext */
export type UpdateProjectNextPayload = {
  __typename?: "UpdateProjectNextPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated Project. */
  projectNext?: Maybe<ProjectNext>;
};

/** Autogenerated return type of UpdateProject */
export type UpdateProjectPayload = {
  __typename?: "UpdateProjectPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated project. */
  project?: Maybe<Project>;
};

/** Autogenerated input type of UpdatePullRequestBranch */
export type UpdatePullRequestBranchInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The head ref oid for the upstream branch. */
  expectedHeadOid?: InputMaybe<Scalars["GitObjectID"]>;
  /** The Node ID of the pull request. */
  pullRequestId: Scalars["ID"];
};

/** Autogenerated return type of UpdatePullRequestBranch */
export type UpdatePullRequestBranchPayload = {
  __typename?: "UpdatePullRequestBranchPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated pull request. */
  pullRequest?: Maybe<PullRequest>;
};

/** Autogenerated input type of UpdatePullRequest */
export type UpdatePullRequestInput = {
  /** An array of Node IDs of users for this pull request. */
  assigneeIds?: InputMaybe<Array<Scalars["ID"]>>;
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository.
   *
   */
  baseRefName?: InputMaybe<Scalars["String"]>;
  /** The contents of the pull request. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** An array of Node IDs of labels for this pull request. */
  labelIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: InputMaybe<Scalars["Boolean"]>;
  /** The Node ID of the milestone for this pull request. */
  milestoneId?: InputMaybe<Scalars["ID"]>;
  /** An array of Node IDs for projects associated with this pull request. */
  projectIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The Node ID of the pull request. */
  pullRequestId: Scalars["ID"];
  /** The target state of the pull request. */
  state?: InputMaybe<PullRequestUpdateState>;
  /** The title of the pull request. */
  title?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of UpdatePullRequest */
export type UpdatePullRequestPayload = {
  __typename?: "UpdatePullRequestPayload";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated pull request. */
  pullRequest?: Maybe<PullRequest>;
};

/** Autogenerated input type of UpdatePullRequestReviewComment */
export type UpdatePullRequestReviewCommentInput = {
  /** The text of the comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the comment to modify. */
  pullRequestReviewCommentId: Scalars["ID"];
};

/** Autogenerated return type of UpdatePullRequestReviewComment */
export type UpdatePullRequestReviewCommentPayload = {
  __typename?: "UpdatePullRequestReviewCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated comment. */
  pullRequestReviewComment?: Maybe<PullRequestReviewComment>;
};

/** Autogenerated input type of UpdatePullRequestReview */
export type UpdatePullRequestReviewInput = {
  /** The contents of the pull request review body. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: Scalars["ID"];
};

/** Autogenerated return type of UpdatePullRequestReview */
export type UpdatePullRequestReviewPayload = {
  __typename?: "UpdatePullRequestReviewPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated pull request review. */
  pullRequestReview?: Maybe<PullRequestReview>;
};

/** Autogenerated input type of UpdateRef */
export type UpdateRefInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Permit updates of branch Refs that are not fast-forwards? */
  force?: InputMaybe<Scalars["Boolean"]>;
  /** The GitObjectID that the Ref shall be updated to target. */
  oid: Scalars["GitObjectID"];
  /** The Node ID of the Ref to be updated. */
  refId: Scalars["ID"];
};

/** Autogenerated return type of UpdateRef */
export type UpdateRefPayload = {
  __typename?: "UpdateRefPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated Ref. */
  ref?: Maybe<Ref>;
};

/** Autogenerated input type of UpdateRepository */
export type UpdateRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A new description for the repository. Pass an empty string to erase the existing description. */
  description?: InputMaybe<Scalars["String"]>;
  /** Indicates if the repository should have the issues feature enabled. */
  hasIssuesEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** Indicates if the repository should have the project boards feature enabled. */
  hasProjectsEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** Indicates if the repository should have the wiki feature enabled. */
  hasWikiEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
  homepageUrl?: InputMaybe<Scalars["URI"]>;
  /** The new name of the repository. */
  name?: InputMaybe<Scalars["String"]>;
  /** The ID of the repository to update. */
  repositoryId: Scalars["ID"];
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  template?: InputMaybe<Scalars["Boolean"]>;
};

/** Autogenerated return type of UpdateRepository */
export type UpdateRepositoryPayload = {
  __typename?: "UpdateRepositoryPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated repository. */
  repository?: Maybe<Repository>;
};

/** Autogenerated input type of UpdateSponsorshipPreferences */
export type UpdateSponsorshipPreferencesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  privacyLevel?: InputMaybe<SponsorshipPrivacy>;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  receiveEmails?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: InputMaybe<Scalars["String"]>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of UpdateSponsorshipPreferences */
export type UpdateSponsorshipPreferencesPayload = {
  __typename?: "UpdateSponsorshipPreferencesPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The sponsorship that was updated. */
  sponsorship?: Maybe<Sponsorship>;
};

/** Autogenerated input type of UpdateSubscription */
export type UpdateSubscriptionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The new state of the subscription. */
  state: SubscriptionState;
  /** The Node ID of the subscribable object to modify. */
  subscribableId: Scalars["ID"];
};

/** Autogenerated return type of UpdateSubscription */
export type UpdateSubscriptionPayload = {
  __typename?: "UpdateSubscriptionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The input subscribable entity. */
  subscribable?: Maybe<Subscribable>;
};

/** Autogenerated input type of UpdateTeamDiscussionComment */
export type UpdateTeamDiscussionCommentInput = {
  /** The updated text of the comment. */
  body: Scalars["String"];
  /** The current version of the body content. */
  bodyVersion?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the comment to modify. */
  id: Scalars["ID"];
};

/** Autogenerated return type of UpdateTeamDiscussionComment */
export type UpdateTeamDiscussionCommentPayload = {
  __typename?: "UpdateTeamDiscussionCommentPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated comment. */
  teamDiscussionComment?: Maybe<TeamDiscussionComment>;
};

/** Autogenerated input type of UpdateTeamDiscussion */
export type UpdateTeamDiscussionInput = {
  /** The updated text of the discussion. */
  body?: InputMaybe<Scalars["String"]>;
  /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
  bodyVersion?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion to modify. */
  id: Scalars["ID"];
  /** If provided, sets the pinned state of the updated discussion. */
  pinned?: InputMaybe<Scalars["Boolean"]>;
  /** The updated title of the discussion. */
  title?: InputMaybe<Scalars["String"]>;
};

/** Autogenerated return type of UpdateTeamDiscussion */
export type UpdateTeamDiscussionPayload = {
  __typename?: "UpdateTeamDiscussionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The updated discussion. */
  teamDiscussion?: Maybe<TeamDiscussion>;
};

/** Autogenerated input type of UpdateTopics */
export type UpdateTopicsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
  /** An array of topic names. */
  topicNames: Array<Scalars["String"]>;
};

/** Autogenerated return type of UpdateTopics */
export type UpdateTopicsPayload = {
  __typename?: "UpdateTopicsPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Names of the provided topics that are not valid. */
  invalidTopicNames?: Maybe<Array<Scalars["String"]>>;
  /** The updated repository. */
  repository?: Maybe<Repository>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type User = Actor &
  Node &
  PackageOwner &
  ProfileOwner &
  ProjectNextOwner &
  ProjectOwner &
  RepositoryDiscussionAuthor &
  RepositoryDiscussionCommentAuthor &
  RepositoryOwner &
  Sponsorable &
  UniformResourceLocatable & {
    __typename?: "User";
    /** Determine if this repository owner has any items that can be pinned to their profile. */
    anyPinnableItems: Scalars["Boolean"];
    /** A URL pointing to the user's public avatar. */
    avatarUrl: Scalars["URI"];
    /** The user's public profile bio. */
    bio?: Maybe<Scalars["String"]>;
    /** The user's public profile bio as HTML. */
    bioHTML: Scalars["HTML"];
    /** Could this user receive email notifications, if the organization had notification restrictions enabled? */
    canReceiveOrganizationEmailsWhenNotificationsRestricted: Scalars["Boolean"];
    /** A list of commit comments made by this user. */
    commitComments: CommitCommentConnection;
    /** The user's public profile company. */
    company?: Maybe<Scalars["String"]>;
    /** The user's public profile company as HTML. */
    companyHTML: Scalars["HTML"];
    /** The collection of contributions this user has made to different repositories. */
    contributionsCollection: ContributionsCollection;
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"];
    /** Identifies the primary key from the database. */
    databaseId?: Maybe<Scalars["Int"]>;
    /** The user's publicly visible profile email. */
    email: Scalars["String"];
    /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
    estimatedNextSponsorsPayoutInCents: Scalars["Int"];
    /** A list of users the given user is followed by. */
    followers: FollowerConnection;
    /** A list of users the given user is following. */
    following: FollowingConnection;
    /** Find gist by repo name. */
    gist?: Maybe<Gist>;
    /** A list of gist comments made by this user. */
    gistComments: GistCommentConnection;
    /** A list of the Gists the user has created. */
    gists: GistConnection;
    /** True if this user/organization has a GitHub Sponsors listing. */
    hasSponsorsListing: Scalars["Boolean"];
    /** The hovercard information for this user in a given context */
    hovercard: Hovercard;
    id: Scalars["ID"];
    /** The interaction ability settings for this user. */
    interactionAbility?: Maybe<RepositoryInteractionAbility>;
    /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
    isBountyHunter: Scalars["Boolean"];
    /** Whether or not this user is a participant in the GitHub Campus Experts Program. */
    isCampusExpert: Scalars["Boolean"];
    /** Whether or not this user is a GitHub Developer Program member. */
    isDeveloperProgramMember: Scalars["Boolean"];
    /** Whether or not this user is a GitHub employee. */
    isEmployee: Scalars["Boolean"];
    /** Whether or not this user is following the viewer. Inverse of viewer_is_following */
    isFollowingViewer: Scalars["Boolean"];
    /** Whether or not this user is a member of the GitHub Stars Program. */
    isGitHubStar: Scalars["Boolean"];
    /** Whether or not the user has marked themselves as for hire. */
    isHireable: Scalars["Boolean"];
    /** Whether or not this user is a site administrator. */
    isSiteAdmin: Scalars["Boolean"];
    /** Check if the given account is sponsoring this user/organization. */
    isSponsoredBy: Scalars["Boolean"];
    /** True if the viewer is sponsored by this user/organization. */
    isSponsoringViewer: Scalars["Boolean"];
    /** Whether or not this user is the viewing user. */
    isViewer: Scalars["Boolean"];
    /** A list of issue comments made by this user. */
    issueComments: IssueCommentConnection;
    /** A list of issues associated with this user. */
    issues: IssueConnection;
    /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
    itemShowcase: ProfileItemShowcase;
    /** The user's public profile location. */
    location?: Maybe<Scalars["String"]>;
    /** The username used to login. */
    login: Scalars["String"];
    /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
    monthlyEstimatedSponsorsIncomeInCents: Scalars["Int"];
    /** The user's public profile name. */
    name?: Maybe<Scalars["String"]>;
    /** Find an organization by its login that the user belongs to. */
    organization?: Maybe<Organization>;
    /** Verified email addresses that match verified domains for a specified organization the user is a member of. */
    organizationVerifiedDomainEmails: Array<Scalars["String"]>;
    /** A list of organizations the user belongs to. */
    organizations: OrganizationConnection;
    /** A list of packages under the owner. */
    packages: PackageConnection;
    /** A list of repositories and gists this profile owner can pin to their profile. */
    pinnableItems: PinnableItemConnection;
    /** A list of repositories and gists this profile owner has pinned to their profile */
    pinnedItems: PinnableItemConnection;
    /** Returns how many more items this profile owner can pin to their profile. */
    pinnedItemsRemaining: Scalars["Int"];
    /** Find project by number. */
    project?: Maybe<Project>;
    /** Find a project by project (beta) number. */
    projectNext?: Maybe<ProjectNext>;
    /** A list of projects under the owner. */
    projects: ProjectConnection;
    /** A list of projects (beta) under the owner. */
    projectsNext: ProjectNextConnection;
    /** The HTTP path listing user's projects */
    projectsResourcePath: Scalars["URI"];
    /** The HTTP URL listing user's projects */
    projectsUrl: Scalars["URI"];
    /** A list of public keys associated with this user. */
    publicKeys: PublicKeyConnection;
    /** A list of pull requests associated with this user. */
    pullRequests: PullRequestConnection;
    /** A list of repositories that the user owns. */
    repositories: RepositoryConnection;
    /** A list of repositories that the user recently contributed to. */
    repositoriesContributedTo: RepositoryConnection;
    /** Find Repository. */
    repository?: Maybe<Repository>;
    /** Discussion comments this user has authored. */
    repositoryDiscussionComments: DiscussionCommentConnection;
    /** Discussions this user has started. */
    repositoryDiscussions: DiscussionConnection;
    /** The HTTP path for this user */
    resourcePath: Scalars["URI"];
    /** Replies this user has saved */
    savedReplies?: Maybe<SavedReplyConnection>;
    /** List of users and organizations this entity is sponsoring. */
    sponsoring: SponsorConnection;
    /** List of sponsors for this user or organization. */
    sponsors: SponsorConnection;
    /** Events involving this sponsorable, such as new sponsorships. */
    sponsorsActivities: SponsorsActivityConnection;
    /** The GitHub Sponsors listing for this user or organization. */
    sponsorsListing?: Maybe<SponsorsListing>;
    /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
    sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;
    /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */
    sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;
    /** List of sponsorship updates sent from this sponsorable to sponsors. */
    sponsorshipNewsletters: SponsorshipNewsletterConnection;
    /** This object's sponsorships as the maintainer. */
    sponsorshipsAsMaintainer: SponsorshipConnection;
    /** This object's sponsorships as the sponsor. */
    sponsorshipsAsSponsor: SponsorshipConnection;
    /** Repositories the user has starred. */
    starredRepositories: StarredRepositoryConnection;
    /** The user's description of what they're currently doing. */
    status?: Maybe<UserStatus>;
    /**
     * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
     *
     */
    topRepositories: RepositoryConnection;
    /** The user's Twitter username. */
    twitterUsername?: Maybe<Scalars["String"]>;
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"];
    /** The HTTP URL for this user */
    url: Scalars["URI"];
    /** Can the viewer pin repositories and gists to the profile? */
    viewerCanChangePinnedItems: Scalars["Boolean"];
    /** Can the current viewer create new projects on this owner. */
    viewerCanCreateProjects: Scalars["Boolean"];
    /** Whether or not the viewer is able to follow the user. */
    viewerCanFollow: Scalars["Boolean"];
    /** Whether or not the viewer is able to sponsor this user/organization. */
    viewerCanSponsor: Scalars["Boolean"];
    /** Whether or not this user is followed by the viewer. Inverse of is_following_viewer. */
    viewerIsFollowing: Scalars["Boolean"];
    /** True if the viewer is sponsoring this user/organization. */
    viewerIsSponsoring: Scalars["Boolean"];
    /** A list of repositories the given user is watching. */
    watching: RepositoryConnection;
    /** A URL pointing to the user's public website/blog. */
    websiteUrl?: Maybe<Scalars["URI"]>;
  };

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserAnyPinnableItemsArgs = {
  type?: InputMaybe<PinnableItemType>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserAvatarUrlArgs = {
  size?: InputMaybe<Scalars["Int"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserCanReceiveOrganizationEmailsWhenNotificationsRestrictedArgs = {
  login: Scalars["String"];
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserCommitCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserContributionsCollectionArgs = {
  from?: InputMaybe<Scalars["DateTime"]>;
  organizationID?: InputMaybe<Scalars["ID"]>;
  to?: InputMaybe<Scalars["DateTime"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserFollowersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserFollowingArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserGistArgs = {
  name: Scalars["String"];
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserGistCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserGistsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<GistOrder>;
  privacy?: InputMaybe<GistPrivacy>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserHovercardArgs = {
  primarySubjectId?: InputMaybe<Scalars["ID"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserIsSponsoredByArgs = {
  accountLogin: Scalars["String"];
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserIssueCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueCommentOrder>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserIssuesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  filterBy?: InputMaybe<IssueFilters>;
  first?: InputMaybe<Scalars["Int"]>;
  labels?: InputMaybe<Array<Scalars["String"]>>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueOrder>;
  states?: InputMaybe<Array<IssueState>>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserOrganizationArgs = {
  login: Scalars["String"];
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserOrganizationVerifiedDomainEmailsArgs = {
  login: Scalars["String"];
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserOrganizationsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserPackagesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  names?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  orderBy?: InputMaybe<PackageOrder>;
  packageType?: InputMaybe<PackageType>;
  repositoryId?: InputMaybe<Scalars["ID"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserPinnableItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  types?: InputMaybe<Array<PinnableItemType>>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserPinnedItemsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  types?: InputMaybe<Array<PinnableItemType>>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserProjectArgs = {
  number: Scalars["Int"];
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserProjectNextArgs = {
  number: Scalars["Int"];
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserProjectsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<ProjectOrder>;
  search?: InputMaybe<Scalars["String"]>;
  states?: InputMaybe<Array<ProjectState>>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserProjectsNextArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  query?: InputMaybe<Scalars["String"]>;
  sortBy?: InputMaybe<ProjectNextOrderField>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserPublicKeysArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserPullRequestsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  baseRefName?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  headRefName?: InputMaybe<Scalars["String"]>;
  labels?: InputMaybe<Array<Scalars["String"]>>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<IssueOrder>;
  states?: InputMaybe<Array<PullRequestState>>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserRepositoriesArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  isFork?: InputMaybe<Scalars["Boolean"]>;
  isLocked?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  privacy?: InputMaybe<RepositoryPrivacy>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserRepositoriesContributedToArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  contributionTypes?: InputMaybe<Array<InputMaybe<RepositoryContributionType>>>;
  first?: InputMaybe<Scalars["Int"]>;
  includeUserRepositories?: InputMaybe<Scalars["Boolean"]>;
  isLocked?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<RepositoryOrder>;
  privacy?: InputMaybe<RepositoryPrivacy>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserRepositoryArgs = {
  followRenames?: InputMaybe<Scalars["Boolean"]>;
  name: Scalars["String"];
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserRepositoryDiscussionCommentsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  onlyAnswers?: InputMaybe<Scalars["Boolean"]>;
  repositoryId?: InputMaybe<Scalars["ID"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserRepositoryDiscussionsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  answered?: InputMaybe<Scalars["Boolean"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<DiscussionOrder>;
  repositoryId?: InputMaybe<Scalars["ID"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserSavedRepliesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SavedReplyOrder>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserSponsoringArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorOrder>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserSponsorsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorOrder>;
  tierId?: InputMaybe<Scalars["ID"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserSponsorsActivitiesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorsActivityOrder>;
  period?: InputMaybe<SponsorsActivityPeriod>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserSponsorshipNewslettersArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserSponsorshipsAsMaintainerArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  includePrivate?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorshipOrder>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserSponsorshipsAsSponsorArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<SponsorshipOrder>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserStarredRepositoriesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<StarOrder>;
  ownedByViewer?: InputMaybe<Scalars["Boolean"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserTopRepositoriesArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy: RepositoryOrder;
  since?: InputMaybe<Scalars["DateTime"]>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type UserWatchingArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  isLocked?: InputMaybe<Scalars["Boolean"]>;
  last?: InputMaybe<Scalars["Int"]>;
  orderBy?: InputMaybe<RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;
  privacy?: InputMaybe<RepositoryPrivacy>;
};

/** The possible durations that a user can be blocked for. */
export enum UserBlockDuration {
  /** The user was blocked for 1 day */
  OneDay = "ONE_DAY",
  /** The user was blocked for 30 days */
  OneMonth = "ONE_MONTH",
  /** The user was blocked for 7 days */
  OneWeek = "ONE_WEEK",
  /** The user was blocked permanently */
  Permanent = "PERMANENT",
  /** The user was blocked for 3 days */
  ThreeDays = "THREE_DAYS",
}

/** Represents a 'user_blocked' event on a given user. */
export type UserBlockedEvent = Node & {
  __typename?: "UserBlockedEvent";
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Actor>;
  /** Number of days that the user was blocked for. */
  blockDuration: UserBlockDuration;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["ID"];
  /** The user who was blocked. */
  subject?: Maybe<User>;
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: "UserConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edit on user content */
export type UserContentEdit = Node & {
  __typename?: "UserContentEdit";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the date and time when the object was deleted. */
  deletedAt?: Maybe<Scalars["DateTime"]>;
  /** The actor who deleted this content */
  deletedBy?: Maybe<Actor>;
  /** A summary of the changes for this edit */
  diff?: Maybe<Scalars["String"]>;
  /** When this content was edited */
  editedAt: Scalars["DateTime"];
  /** The actor who edited this content */
  editor?: Maybe<Actor>;
  id: Scalars["ID"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** A list of edits to content. */
export type UserContentEditConnection = {
  __typename?: "UserContentEditConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserContentEditEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<UserContentEdit>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type UserContentEditEdge = {
  __typename?: "UserContentEditEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<UserContentEdit>;
};

/** Represents a user. */
export type UserEdge = {
  __typename?: "UserEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

/** Email attributes from External Identity */
export type UserEmailMetadata = {
  __typename?: "UserEmailMetadata";
  /** Boolean to identify primary emails */
  primary?: Maybe<Scalars["Boolean"]>;
  /** Type of email */
  type?: Maybe<Scalars["String"]>;
  /** Email id */
  value: Scalars["String"];
};

/** The user's description of what they're currently doing. */
export type UserStatus = Node & {
  __typename?: "UserStatus";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** An emoji summarizing the user's status. */
  emoji?: Maybe<Scalars["String"]>;
  /** The status emoji as HTML. */
  emojiHTML?: Maybe<Scalars["HTML"]>;
  /** If set, the status will not be shown after this date. */
  expiresAt?: Maybe<Scalars["DateTime"]>;
  id: Scalars["ID"];
  /** Whether this status indicates the user is not fully available on GitHub. */
  indicatesLimitedAvailability: Scalars["Boolean"];
  /** A brief message describing what the user is doing. */
  message?: Maybe<Scalars["String"]>;
  /** The organization whose members can see this status. If null, this status is publicly visible. */
  organization?: Maybe<Organization>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The user who has this status. */
  user: User;
};

/** The connection type for UserStatus. */
export type UserStatusConnection = {
  __typename?: "UserStatusConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserStatusEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<UserStatus>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type UserStatusEdge = {
  __typename?: "UserStatusEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<UserStatus>;
};

/** Ordering options for user status connections. */
export type UserStatusOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order user statuses by. */
  field: UserStatusOrderField;
};

/** Properties by which user status connections can be ordered. */
export enum UserStatusOrderField {
  /** Order user statuses by when they were updated. */
  UpdatedAt = "UPDATED_AT",
}

/** A domain that can be verified or approved for an organization or an enterprise. */
export type VerifiableDomain = Node & {
  __typename?: "VerifiableDomain";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** The DNS host name that should be used for verification. */
  dnsHostName?: Maybe<Scalars["URI"]>;
  /** The unicode encoded domain. */
  domain: Scalars["URI"];
  /** Whether a TXT record for verification with the expected host name was found. */
  hasFoundHostName: Scalars["Boolean"];
  /** Whether a TXT record for verification with the expected verification token was found. */
  hasFoundVerificationToken: Scalars["Boolean"];
  id: Scalars["ID"];
  /** Whether or not the domain is approved. */
  isApproved: Scalars["Boolean"];
  /** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */
  isRequiredForPolicyEnforcement: Scalars["Boolean"];
  /** Whether or not the domain is verified. */
  isVerified: Scalars["Boolean"];
  /** The owner of the domain. */
  owner: VerifiableDomainOwner;
  /** The punycode encoded domain. */
  punycodeEncodedDomain: Scalars["URI"];
  /** The time that the current verification token will expire. */
  tokenExpirationTime?: Maybe<Scalars["DateTime"]>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The current verification token for the domain. */
  verificationToken?: Maybe<Scalars["String"]>;
};

/** The connection type for VerifiableDomain. */
export type VerifiableDomainConnection = {
  __typename?: "VerifiableDomainConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<VerifiableDomainEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<VerifiableDomain>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type VerifiableDomainEdge = {
  __typename?: "VerifiableDomainEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<VerifiableDomain>;
};

/** Ordering options for verifiable domain connections. */
export type VerifiableDomainOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order verifiable domains by. */
  field: VerifiableDomainOrderField;
};

/** Properties by which verifiable domain connections can be ordered. */
export enum VerifiableDomainOrderField {
  /** Order verifiable domains by their creation date. */
  CreatedAt = "CREATED_AT",
  /** Order verifiable domains by the domain name. */
  Domain = "DOMAIN",
}

/** Types that can own a verifiable domain. */
export type VerifiableDomainOwner = Enterprise | Organization;

/** Autogenerated input type of VerifyVerifiableDomain */
export type VerifyVerifiableDomainInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the verifiable domain to verify. */
  id: Scalars["ID"];
};

/** Autogenerated return type of VerifyVerifiableDomain */
export type VerifyVerifiableDomainPayload = {
  __typename?: "VerifyVerifiableDomainPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** The verifiable domain that was verified. */
  domain?: Maybe<VerifiableDomain>;
};

/** A hovercard context with a message describing how the viewer is related. */
export type ViewerHovercardContext = HovercardContext & {
  __typename?: "ViewerHovercardContext";
  /** A string describing this context */
  message: Scalars["String"];
  /** An octicon to accompany this context */
  octicon: Scalars["String"];
  /** Identifies the user who is related to this context. */
  viewer: User;
};

/** A subject that may be upvoted. */
export type Votable = {
  /** Number of upvotes that this subject has received. */
  upvoteCount: Scalars["Int"];
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote: Scalars["Boolean"];
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted: Scalars["Boolean"];
};

/** A workflow contains meta information about an Actions workflow file. */
export type Workflow = Node & {
  __typename?: "Workflow";
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  id: Scalars["ID"];
  /** The name of the workflow. */
  name: Scalars["String"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
};

/** A workflow run. */
export type WorkflowRun = Node & {
  __typename?: "WorkflowRun";
  /** The check suite this workflow run belongs to. */
  checkSuite: CheckSuite;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars["DateTime"];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars["Int"]>;
  /** The log of deployment reviews */
  deploymentReviews: DeploymentReviewConnection;
  id: Scalars["ID"];
  /** The pending deployment requests of all check runs in this workflow run */
  pendingDeploymentRequests: DeploymentRequestConnection;
  /** The HTTP path for this workflow run */
  resourcePath: Scalars["URI"];
  /** A number that uniquely identifies this workflow run in its parent workflow. */
  runNumber: Scalars["Int"];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars["DateTime"];
  /** The HTTP URL for this workflow run */
  url: Scalars["URI"];
  /** The workflow executed in this workflow run. */
  workflow: Workflow;
};

/** A workflow run. */
export type WorkflowRunDeploymentReviewsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

/** A workflow run. */
export type WorkflowRunPendingDeploymentRequestsArgs = {
  after?: InputMaybe<Scalars["String"]>;
  before?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Int"]>;
  last?: InputMaybe<Scalars["Int"]>;
};

export type SearchFileQueryVariables = Exact<{
  expression: Scalars["String"];
  repositoryName: Scalars["String"];
  owner: Scalars["String"];
}>;

export type SearchFileQuery = {
  __typename?: "Query";
  repository?: {
    __typename?: "Repository";
    object?:
      | { __typename?: "Blob" }
      | { __typename?: "Commit" }
      | { __typename?: "Tag" }
      | {
          __typename?: "Tree";
          entries?: Array<{
            __typename?: "TreeEntry";
            type: string;
            name: string;
          }> | null;
        }
      | null;
  } | null;
};

export type SearchPullRequestQueryVariables = Exact<{
  repositoryName: Scalars["String"];
  owner: Scalars["String"];
}>;

export type SearchPullRequestQuery = {
  __typename?: "Query";
  repository?: {
    __typename?: "Repository";
    defaultBranchRef?: { __typename?: "Ref"; name: string } | null;
    pullRequests: {
      __typename?: "PullRequestConnection";
      nodes?: Array<{
        __typename?: "PullRequest";
        number: number;
        title: string;
        headRefName: string;
        headRepository?: {
          __typename?: "Repository";
          name: string;
          owner:
            | { __typename?: "Organization"; login: string }
            | { __typename?: "User"; login: string };
        } | null;
      } | null> | null;
    };
  } | null;
};

export type SearchRepositoryQueryVariables = Exact<{
  query: Scalars["String"];
}>;

export type SearchRepositoryQuery = {
  __typename?: "Query";
  search: {
    __typename?: "SearchResultItemConnection";
    nodes?: Array<
      | { __typename?: "App" }
      | { __typename?: "Discussion" }
      | { __typename?: "Issue" }
      | { __typename?: "MarketplaceListing" }
      | { __typename?: "Organization" }
      | { __typename?: "PullRequest" }
      | { __typename?: "Repository"; name: string }
      | { __typename?: "User" }
      | null
    > | null;
  };
};

export type SearchUserQueryVariables = Exact<{
  query: Scalars["String"];
}>;

export type SearchUserQuery = {
  __typename?: "Query";
  search: {
    __typename?: "SearchResultItemConnection";
    nodes?: Array<
      | { __typename?: "App" }
      | { __typename?: "Discussion" }
      | { __typename?: "Issue" }
      | { __typename?: "MarketplaceListing" }
      | { __typename?: "Organization" }
      | { __typename?: "PullRequest" }
      | { __typename?: "Repository" }
      | { __typename?: "User"; login: string }
      | null
    > | null;
  };
};

export const SearchFileDocument = gql`
  query searchFile(
    $expression: String!
    $repositoryName: String!
    $owner: String!
  ) {
    repository(name: $repositoryName, owner: $owner) {
      object(expression: $expression) {
        ... on Tree {
          entries {
            type
            name
          }
        }
      }
    }
  }
`;

/**
 * __useSearchFileQuery__
 *
 * To run a query within a React component, call `useSearchFileQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchFileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchFileQuery({
 *   variables: {
 *      expression: // value for 'expression'
 *      repositoryName: // value for 'repositoryName'
 *      owner: // value for 'owner'
 *   },
 * });
 */
export function useSearchFileQuery(
  baseOptions: Apollo.QueryHookOptions<
    SearchFileQuery,
    SearchFileQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return useQuery<SearchFileQuery, SearchFileQueryVariables>(
    SearchFileDocument,
    options
  );
}
export function useSearchFileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    SearchFileQuery,
    SearchFileQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return useLazyQuery<SearchFileQuery, SearchFileQueryVariables>(
    SearchFileDocument,
    options
  );
}
export type SearchFileQueryHookResult = ReturnType<typeof useSearchFileQuery>;
export type SearchFileLazyQueryHookResult = ReturnType<
  typeof useSearchFileLazyQuery
>;
export type SearchFileQueryResult = Apollo.QueryResult<
  SearchFileQuery,
  SearchFileQueryVariables
>;
export const SearchPullRequestDocument = gql`
  query searchPullRequest($repositoryName: String!, $owner: String!) {
    repository(name: $repositoryName, owner: $owner) {
      defaultBranchRef {
        name
      }
      pullRequests(last: 100, states: OPEN) {
        nodes {
          number
          title
          headRefName
          headRepository {
            owner {
              login
            }
            name
          }
        }
      }
    }
  }
`;

/**
 * __useSearchPullRequestQuery__
 *
 * To run a query within a React component, call `useSearchPullRequestQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchPullRequestQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchPullRequestQuery({
 *   variables: {
 *      repositoryName: // value for 'repositoryName'
 *      owner: // value for 'owner'
 *   },
 * });
 */
export function useSearchPullRequestQuery(
  baseOptions: Apollo.QueryHookOptions<
    SearchPullRequestQuery,
    SearchPullRequestQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return useQuery<SearchPullRequestQuery, SearchPullRequestQueryVariables>(
    SearchPullRequestDocument,
    options
  );
}
export function useSearchPullRequestLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    SearchPullRequestQuery,
    SearchPullRequestQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return useLazyQuery<SearchPullRequestQuery, SearchPullRequestQueryVariables>(
    SearchPullRequestDocument,
    options
  );
}
export type SearchPullRequestQueryHookResult = ReturnType<
  typeof useSearchPullRequestQuery
>;
export type SearchPullRequestLazyQueryHookResult = ReturnType<
  typeof useSearchPullRequestLazyQuery
>;
export type SearchPullRequestQueryResult = Apollo.QueryResult<
  SearchPullRequestQuery,
  SearchPullRequestQueryVariables
>;
export const SearchRepositoryDocument = gql`
  query searchRepository($query: String!) {
    search(first: 10, query: $query, type: REPOSITORY) {
      nodes {
        ... on Repository {
          name
        }
      }
    }
  }
`;

/**
 * __useSearchRepositoryQuery__
 *
 * To run a query within a React component, call `useSearchRepositoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchRepositoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchRepositoryQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
export function useSearchRepositoryQuery(
  baseOptions: Apollo.QueryHookOptions<
    SearchRepositoryQuery,
    SearchRepositoryQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return useQuery<SearchRepositoryQuery, SearchRepositoryQueryVariables>(
    SearchRepositoryDocument,
    options
  );
}
export function useSearchRepositoryLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    SearchRepositoryQuery,
    SearchRepositoryQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return useLazyQuery<SearchRepositoryQuery, SearchRepositoryQueryVariables>(
    SearchRepositoryDocument,
    options
  );
}
export type SearchRepositoryQueryHookResult = ReturnType<
  typeof useSearchRepositoryQuery
>;
export type SearchRepositoryLazyQueryHookResult = ReturnType<
  typeof useSearchRepositoryLazyQuery
>;
export type SearchRepositoryQueryResult = Apollo.QueryResult<
  SearchRepositoryQuery,
  SearchRepositoryQueryVariables
>;
export const SearchUserDocument = gql`
  query searchUser($query: String!) {
    search(first: 10, query: $query, type: USER) {
      nodes {
        ... on User {
          login
        }
      }
    }
  }
`;

/**
 * __useSearchUserQuery__
 *
 * To run a query within a React component, call `useSearchUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchUserQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
export function useSearchUserQuery(
  baseOptions: Apollo.QueryHookOptions<
    SearchUserQuery,
    SearchUserQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return useQuery<SearchUserQuery, SearchUserQueryVariables>(
    SearchUserDocument,
    options
  );
}
export function useSearchUserLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    SearchUserQuery,
    SearchUserQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return useLazyQuery<SearchUserQuery, SearchUserQueryVariables>(
    SearchUserDocument,
    options
  );
}
export type SearchUserQueryHookResult = ReturnType<typeof useSearchUserQuery>;
export type SearchUserLazyQueryHookResult = ReturnType<
  typeof useSearchUserLazyQuery
>;
export type SearchUserQueryResult = Apollo.QueryResult<
  SearchUserQuery,
  SearchUserQueryVariables
>;

--- End of openapi-codegen/cli/src/prompts/queries/github.tsx ---

--- Start of openapi-codegen/cli/src/prompts/queries/searchPullRequest.graphql ---
query searchPullRequest($repositoryName: String!, $owner: String!) {
  repository(name: $repositoryName, owner: $owner) {
    defaultBranchRef {
      name
    }
    pullRequests(last: 100, states: OPEN) {
      nodes {
        number
        title
        headRefName
        headRepository {
          owner {
            login
          }
          name
        }
      }
    }
  }
}

--- End of openapi-codegen/cli/src/prompts/queries/searchPullRequest.graphql ---

--- Start of openapi-codegen/cli/src/templates/emptyConfig.ts ---
export default `import { defineConfig } from "@openapi-codegen/cli";

export default defineConfig({});`;

--- End of openapi-codegen/cli/src/templates/emptyConfig.ts ---

--- Start of openapi-codegen/cli/src/fixtures/spec.json ---
# Content omitted for convenience

--- End of openapi-codegen/cli/src/fixtures/spec.json ---

--- Start of openapi-codegen/cli/src/fixtures/petstore-expanded.ts ---
import { OpenAPIObject } from "openapi3-ts";

export const petstore: OpenAPIObject = {
  openapi: "3.0.0",
  info: {
    version: "1.0.0",
    title: "Swagger Petstore",
    description:
      "A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification",
    termsOfService: "http://swagger.io/terms/",
    contact: {
      name: "Swagger API Team",
      email: "apiteam@swagger.io",
      url: "http://swagger.io",
    },
    license: {
      name: "Apache 2.0",
      url: "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
  },
  servers: [
    {
      url: "http://petstore.swagger.io/api",
    },
  ],
  paths: {
    "/pets": {
      get: {
        description:
          "Returns all pets from the system that the user has access to\nNam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.\n\nSed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.\n",
        operationId: "findPets",
        parameters: [
          {
            name: "tags",
            in: "query",
            description: "tags to filter by",
            required: false,
            style: "form",
            schema: {
              type: "array",
              items: {
                type: "string",
              },
            },
          },
          {
            name: "limit",
            in: "query",
            description: "maximum number of results to return",
            required: false,
            schema: {
              type: "integer",
              format: "int32",
            },
          },
        ],
        responses: {
          "200": {
            description: "pet response",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    $ref: "#/components/schemas/Pet",
                  },
                },
              },
            },
          },
          default: {
            description: "unexpected error",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Error",
                },
              },
            },
          },
        },
      },
      post: {
        description: "Creates a new pet in the store.  Duplicates are allowed",
        operationId: "addPet",
        requestBody: {
          description: "Pet to add to the store",
          required: true,
          content: {
            "application/json": {
              schema: {
                $ref: "#/components/schemas/NewPet",
              },
            },
          },
        },
        responses: {
          "200": {
            description: "pet response",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Pet",
                },
              },
            },
          },
          default: {
            description: "unexpected error",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Error",
                },
              },
            },
          },
        },
      },
    },
    "/pets/{id}": {
      get: {
        description:
          "Returns a user based on a single ID, if the user does not have access to the pet",
        operationId: "find pet by id",
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of pet to fetch",
            required: true,
            schema: {
              type: "integer",
              format: "int64",
            },
          },
        ],
        responses: {
          "200": {
            description: "pet response",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Pet",
                },
              },
            },
          },
          default: {
            description: "unexpected error",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Error",
                },
              },
            },
          },
        },
      },
      delete: {
        description: "deletes a single pet based on the ID supplied",
        operationId: "deletePet",
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of pet to delete",
            required: true,
            schema: {
              type: "integer",
              format: "int64",
            },
          },
        ],
        responses: {
          "204": {
            description: "pet deleted",
          },
          default: {
            description: "unexpected error",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Error",
                },
              },
            },
          },
        },
      },
      patch: {
        description: "Updates a pet in the store.",
        operationId: "updatePet",
        parameters: [
          {
            name: "id",
            in: "path",
            description: "ID of pet to update",
            required: true,
            schema: {
              type: "integer",
              format: "int64",
            },
          },
        ],
        requestBody: {
          $ref: "#/components/requestBodies/updatePetRequest",
        },
        responses: {
          "200": {
            description: "pet response",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Pet",
                },
              },
            },
          },
          default: {
            description: "unexpected error",
            content: {
              "application/json": {
                schema: {
                  $ref: "#/components/schemas/Error",
                },
              },
            },
          },
        },
      },
    },
  },
  components: {
    requestBodies: {
      updatePetRequest: {
        content: {
          "application/json": {
            schema: {
              $ref: "#/components/schemas/NewPet",
            },
          },
        },
        required: true,
      },
    },
    schemas: {
      Pet: {
        description: "A pet.",
        allOf: [
          {
            $ref: "#/components/schemas/NewPet",
          },
          {
            required: ["id"],
            properties: {
              id: {
                type: "integer",
                format: "int64",
              },
            },
          },
        ],
      },
      NewPet: {
        description: "A new pet.",
        required: ["name"],
        properties: {
          name: {
            type: "string",
          },
          tag: {
            type: "string",
          },
        },
      },
      CatOrDog: {
        description: "A discriminator example.",
        oneOf: [
          {
            $ref: "#/components/schemas/Cat",
          },
          {
            $ref: "#/components/schemas/Dog",
          },
        ],
        discriminator: {
          propertyName: "type",
          mapping: {
            cat: "#/components/schemas/Cat",
            dog: "#/components/schemas/Dog",
          },
        },
      },
      Cat: {
        description: "A cat, meow.",
        type: "object",
        properties: {
          type: {
            type: "string",
          },
          breed: {
            type: "string",
            enum: ["labrador", "carlin", "beagle"],
          },
        },
        required: ["type", "breed"],
      },
      Dog: {
        description: "A dog, wooof.",
        type: "object",
        properties: {
          type: {
            type: "string",
          },
          breed: {
            type: "string",
            enum: ["saimois", "bengal", "british shorthair"],
          },
        },
        required: ["type", "breed"],
      },
      Error: {
        description: "An error :(",
        required: ["code", "message"],
        properties: {
          code: {
            type: "integer",
            format: "int32",
          },
          message: {
            type: "string",
          },
        },
      },
      Request: {
        description: "Request description",
        properties: {
          action: {
            type: "array",
            items: {
              type: "string",
              enum: ["create", "read", "update", "delete"],
            },
          },
        },
      },
    },
  },
};

--- End of openapi-codegen/cli/src/fixtures/petstore-expanded.ts ---

--- Start of openapi-codegen/cli/src/fixtures/spec.yaml ---
# Content omitted for convenience

--- End of openapi-codegen/cli/src/fixtures/spec.yaml ---

--- Start of openapi-codegen/cli/src/fixtures/spec.yolo ---
😁
--- End of openapi-codegen/cli/src/fixtures/spec.yolo ---

--- Start of openapi-codegen/cli/src/fixtures/spec.yml ---
# Content omitted for convenience

--- End of openapi-codegen/cli/src/fixtures/spec.yml ---

--- Start of openapi-codegen/cli/src/commands/InitCommand.ts ---
import { Command, Option } from "clipanion";
import { posix as path } from "path";
import fsExtra from "fs-extra";
import ts from "typescript";
import { highlight } from "cli-highlight";
import prettier from "prettier";
import format from "case";

import type { FileOptions, FromOptions, UrlOptions, Plugin } from "../types";

import {
  generateConfigProperty,
  getImports,
} from "../core/generateConfigProperty.js";
import { Prompt } from "../prompts/Prompt.js";
import { getText } from "../utils/getText.js";
import emptyConfig from "../templates/emptyConfig.js";
import { updateConfig } from "../core/updateConfig.js";

export class InitCommand extends Command {
  static paths = [["init"]];

  config = Option.String(`-c,--config`, {
    description: "Configuration file path",
  });

  dryRun = Option.Boolean("--dry-run", {
    description: "Print the file in the stdout",
  });

  private prompt = new Prompt();

  private hasDependencyInstalled(name: string, packageJSON: any) {
    if (typeof packageJSON !== "object") return false;
    if (
      typeof packageJSON.dependencies === "object" &&
      packageJSON.dependencies[name]
    )
      return true;
    if (
      typeof packageJSON.devDependencies === "object" &&
      packageJSON.devDependencies[name]
    )
      return true;

    return false;
  }

  private async getConfigSourceFile(userConfigPath: string) {
    if (fsExtra.existsSync(userConfigPath)) {
      const sourceText = await fsExtra.readFile(userConfigPath, "utf-8");
      const sourceFile = ts.createSourceFile(
        "openapi-codegen.config.ts",
        sourceText,
        ts.ScriptTarget.Latest
      );

      // Check if the config have `export default defineConfig({})`
      let isValidConfig = false;
      const importModules = new Set<string>();
      const visitor: ts.Visitor = (node) => {
        if (
          ts.isExportAssignment(node) &&
          ts.isCallExpression(node.expression) &&
          ts.isIdentifier(node.expression.expression) &&
          node.expression.expression.escapedText === "defineConfig"
        ) {
          isValidConfig = true;
        }
        if (ts.isImportDeclaration(node)) {
          importModules.add(getText(node.moduleSpecifier));
        }

        return node.forEachChild(visitor);
      };

      ts.visitNode(sourceFile, visitor);

      if (isValidConfig) {
        return {
          isExistingConfig: true,
          sourceFile,
          importModules: Array.from(importModules.values()),
        };
      }
    }

    // Load and return emptyConfig.ts
    const sourceFile = ts.createSourceFile(
      "openapi-codegen.config.ts",
      emptyConfig,
      ts.ScriptTarget.Latest
    );

    return {
      isExistingConfig: false,
      sourceFile,
      importModules: ["@openapi-codegen/cli"],
    };
  }

  private async askForFile(): Promise<FileOptions> {
    return {
      relativePath: await this.prompt.input({
        message: "Relative path",
        hint: "Example: ./openapi.json",
      }),
      source: "file",
    };
  }

  private async askForUrl(): Promise<UrlOptions> {
    return {
      source: "url",
      url: await this.prompt.input({
        message: "Url",
        hint: "Example: https://.../openapi.json",
      }),
    };
  }

  async execute() {
    const userConfigPath = path.join(
      process.cwd(),
      this.config || "openapi-codegen.config.ts"
    );

    const config = await this.getConfigSourceFile(userConfigPath);

    const source = await this.prompt.select({
      choices: [
        { label: "File", value: "file" as const },
        { label: "Url", value: "url" as const },
        // { label: "Github", value: "github" as const },
      ],
      message: "Select the source of your OpenAPI",
    });

    const from: FromOptions =
      source === "file"
        ? await this.askForFile()
        : source === "url"
        ? await this.askForUrl()
        : await this.prompt.github("todo: inject the token");

    const namespace = format.camel(
      await this.prompt.input({
        message: "What namespace do you want for your API?",
      })
    );

    const plugin = await this.prompt.select<Plugin>({
      message: "What do you want to generate?",
      choices: [
        { label: "Types only", value: "typescript/types-only" },
        { label: "Generic Fetchers", value: "typescript/fetch" },
        { label: "React Query components", value: "typescript/react-query" },
      ],
    });

    const outputDir = await this.prompt.input({
      message: "Which folder do you want to generate?",
    });
    this.prompt.close();

    const configProperty = generateConfigProperty({
      namespace,
      options: {
        from,
        outputDir,
        plugin,
      },
    });

    const importsToInsert = getImports(plugin);

    const updatedConfigSourceFile = updateConfig({
      sourceFile: config.sourceFile,
      existingImports: config.importModules,
      importsToInsert,
      configProperty,
    });

    const printer = ts.createPrinter({
      newLine: ts.NewLineKind.LineFeed,
      removeComments: false,
    });

    const prettierConfig = await prettier.resolveConfig(process.cwd());

    const updatedConfig = prettier.format(
      printer.printFile(updatedConfigSourceFile),
      { parser: "babel-ts", ...prettierConfig }
    );

    if (this.dryRun) {
      this.context.stdout.write(
        highlight(updatedConfig, {
          language: "typescript",
        })
      );
    } else {
      const nextSteps: string[] = [];
      try {
        const packageJson = await fsExtra.readJSON(
          path.join(process.cwd(), "package.json")
        );
        const hasCli = this.hasDependencyInstalled(
          "@openapi-codegen/cli",
          packageJson
        );
        const hasTsPlugin = this.hasDependencyInstalled(
          "@openapi-codegen/typescript",
          packageJson
        );
        if (!hasCli && !hasTsPlugin) {
          nextSteps.push("npm install -D @openapi-codegen/{cli,typescript}");
        } else if (!hasCli) {
          nextSteps.push("npm install -D @openapi-codegen/cli");
        } else if (!hasTsPlugin) {
          nextSteps.push("npm install -D @openapi-codegen/typescript");
        }
      } catch {
        nextSteps.push("npm install -D @openapi-codegen/{cli,typescript}");
      }
      nextSteps.push(`npx openapi-codegen gen ${namespace}`);

      await fsExtra.writeFile(userConfigPath, updatedConfig);
      if (config.isExistingConfig) {
        this.context.stdout.write(
          `The config "${namespace}" has been added to your current config successfully 🥳\n`
        );
      } else {
        this.context.stdout.write(`A new config file has been created!\n`);
      }

      this.context.stdout.write(
        `\n  Next steps:\n   - ${nextSteps.join("\n   - ")}\n`
      );
    }
  }
}

--- End of openapi-codegen/cli/src/commands/InitCommand.ts ---

--- Start of openapi-codegen/cli/src/commands/GenerateCommand.ts ---
import { Command, Option, UsageError } from "clipanion";
import * as t from "typanion";
import fsExtra from "fs-extra";
import { posix as path } from "path";
import * as swc from "@swc/core";
import prettier from "prettier";
import { fileURLToPath } from "url";
import slash from "slash";

import { Config, FromOptions, Namespace } from "../types";
import { getOpenAPISourceFile } from "../core/getOpenAPISourceFile.js";
import { parseOpenAPISourceFile } from "../core/parseOpenAPISourceFile.js";
import { Prompt } from "../prompts/Prompt.js";

const __filename = fileURLToPath(import.meta.url);

// if no config -> tell the user to do `openapi-codegen init`
// if config -> adjust examples/documentation regarding the keys

export class GenerateCommand extends Command {
  config = Option.String(`-c,--config`, {
    description: "Configuration file path",
    env: "OPENAPI_CODEGEN_CONFIG",
  });

  namespace = Option.String();

  source = Option.String(`--source`, {
    description: "Source of the spec (file, url or github)",
    env: "OPENAPI_CODEGEN_SOURCE",
    validator: t.isEnum(["file", "url", "github"]),
  });

  // source=file options
  relativePath = Option.String(`--relativePath`, {
    description: "[source=file] Relative path of the spec file",
    env: "OPENAPI_CODEGEN_FILE_PATH",
  });

  // source=url options
  url = Option.String("--url", {
    description: "[source=url] URL of the spec file",
    env: "OPENAPI_CODEGEN_URL",
  });
  method = Option.String("--method", {
    description: "[source=url] HTTP Method",
    env: "OPENAPI_CODEGEN_URL_METHOD",
    validator: t.isEnum(["get", "post"] as const),
  });

  // source=github options
  owner = Option.String("--owner", {
    description: "[source=github] Owner of the repository",
    env: "OPENAPI_CODEGEN_GITHUB_OWNER",
  });
  repository = Option.String("--repository,--repo", {
    description: "[source=github] Repository name",
    env: "OPENAPI_CODEGEN_GITHUB_REPOSITORY",
  });
  ref = Option.String("--ref", {
    description: "[source=github] Git reference (commit sha, branch or tag)",
    env: "OPENAPI_CODEGEN_GITHUB_REF",
  });
  specPath = Option.String("--specPath", {
    description: "[source=github] OpenAPI specs file path",
    env: "OPENAPI_CODEGEN_GITHUB_SPEC_PATH",
  });
  pullRequest = Option.String("--pr,--pull-request", {
    description: "[source=github] Select a specific pull-request as ref",
    env: "OPENAPI_CODEGEN_GITHUB_PULL_REQUEST",
    validator: t.isNumber(),
    tolerateBoolean: true,
  });

  static paths = [["gen"], ["generate"], Command.Default];
  static usage = Command.Usage({
    description: "Generate types & components from an OpenAPI file",
    examples: [
      [`From a config key`, `$0 gen myapi`],
      [`With some override`, `$0 gen myapi --ref awesome-feature`],
    ],
  });

  private async loadConfigs(): Promise<Record<Namespace, Config>> {
    const userConfigPath = path.join(
      process.cwd(),
      this.config || "openapi-codegen.config.ts"
    );
    const { dir, name, ext } = path.parse(userConfigPath);
    const isTs = ext.toLowerCase() === ".ts";

    if (isTs) {
      const transpiledPath = `${dir}/${name}.mjs`;

      const { code } = await swc.transformFile(userConfigPath, {
        jsc: {
          target: "es2022",
        },
        module: {
          type: "es6",
        },
      });

      // Write the transpiled file (.js)
      await fsExtra.outputFile(transpiledPath, code);

      // Compute the result
      const { default: config } = await import(
        path.relative(path.parse(slash(__filename)).dir, slash(transpiledPath))
      );

      // Delete the transpiled file
      await fsExtra.unlink(transpiledPath);

      // Return the result
      return config;
    } else {
      return await import(
        path.relative(path.parse(slash(__filename)).dir, slash(userConfigPath))
      );
    }
  }

  /**
   * Get `from` options consolidated with cli flags.
   *
   * @param config config from openapi-codegen.config.ts
   * @returns consolidated configuration
   */
  private getFromOptions(config: Config): FromOptions {
    const source = this.source || config.from.source;

    switch (source) {
      case "file": {
        if (config.from.source === "file") {
          return {
            ...config.from,
            relativePath: this.relativePath ?? config.from.relativePath,
          };
        } else {
          if (!this.relativePath) {
            throw new UsageError("--relativePath argument is missing");
          }
          return {
            source: "file",
            relativePath: this.relativePath,
          };
        }
      }

      case "url":
        if (config.from.source === "url") {
          return {
            ...config.from,
            url: this.url ?? config.from.url,
            method: this.method ?? config.from.method,
          };
        } else {
          if (!this.url) {
            throw new UsageError("--url argument is missing");
          }
          return {
            source: "url",
            url: this.url,
            method: this.method,
          };
        }

      case "github":
        if (config.from.source === "github") {
          return {
            ...config.from,
            owner: this.owner ?? config.from.owner,
            ref: this.ref ?? config.from.ref,
            repository: this.repository ?? config.from.repository,
            specPath: this.specPath ?? config.from.specPath,
          };
        } else {
          if (!this.owner) {
            throw new UsageError("--owner argument is missing");
          }
          if (!this.ref && !this.pullRequest) {
            throw new UsageError("--ref argument is missing");
          }
          if (!this.repository) {
            throw new UsageError("--repository argument is missing");
          }
          if (!this.specPath) {
            throw new UsageError("--specPath argument is missing");
          }

          return {
            source: "github",
            ref: this.ref || "main", // Fallback for --pr mode
            owner: this.owner,
            repository: this.repository,
            specPath: this.specPath,
          };
        }

      default:
        throw new UsageError("--source argument is invalid");
    }
  }

  async execute() {
    const configs = await this.loadConfigs();
    if (!(this.namespace in configs)) {
      throw new UsageError(
        `"${this.namespace}" is not defined in your configuration`
      );
    }

    const config = configs[this.namespace];
    const options = this.getFromOptions(config);
    if (options.source === "github" && this.pullRequest) {
      const prompt = new Prompt();
      const token = await prompt.githubToken();
      const pullRequest = await prompt.githubPullRequest({
        ...options,
        token,
        pullRequestNumber:
          typeof this.pullRequest === "number" ? this.pullRequest : undefined,
      });

      options.ref = pullRequest.ref;
      options.owner = pullRequest.owner;
      options.repository = pullRequest.repository;
    }

    const sourceFile = await getOpenAPISourceFile(options);
    const openAPIDocument = await parseOpenAPISourceFile(sourceFile);
    const prettierConfig = await prettier.resolveConfig(process.cwd());

    const writeFile = async (file: string, data: string) => {
      await fsExtra.outputFile(
        path.join(process.cwd(), config.outputDir, file),
        prettier.format(data, { parser: "babel-ts", ...prettierConfig })
      );
    };

    const readFile = (file: string) => {
      return fsExtra.readFile(
        path.join(process.cwd(), config.outputDir, file),
        "utf-8"
      );
    };

    const existsFile = (file: string) => {
      return fsExtra.existsSync(
        path.join(process.cwd(), config.outputDir, file)
      );
    };

    await config.to({
      openAPIDocument,
      outputDir: config.outputDir,
      writeFile,
      existsFile,
      readFile,
    });
  }
}

--- End of openapi-codegen/cli/src/commands/GenerateCommand.ts ---

--- Start of openapi-codegen/examples/frontend/tsconfig.node.json ---
# Content omitted for convenience

--- End of openapi-codegen/examples/frontend/tsconfig.node.json ---

--- Start of openapi-codegen/examples/frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/src/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

--- End of openapi-codegen/examples/frontend/index.html ---

--- Start of openapi-codegen/examples/frontend/openapi-codegen.config.ts ---
import {
  generateSchemaTypes,
  generateReactQueryComponents,
} from "@openapi-codegen/typescript";
import { defineConfig } from "@openapi-codegen/cli";

export default defineConfig({
  github: {
    from: {
      source: "url",
      url: "https://api.apis.guru/v2/specs/github.com/1.1.4/openapi.yaml",
    },
    outputDir: "src/github",
    to: async (context) => {
      const filenamePrefix = "github";
      const { schemasFiles } = await generateSchemaTypes(context, {
        filenamePrefix,
      });
      await generateReactQueryComponents(context, {
        filenamePrefix,
        schemasFiles,
      });
    },
  },
});

--- End of openapi-codegen/examples/frontend/openapi-codegen.config.ts ---

--- Start of openapi-codegen/examples/frontend/README.md ---
# OpenAPI Codegen `github` example

## Getting started

To try the playground out for yourself, run the following commands:

```shell
git clone https://github.com/fabien0102/openapi-codegen.git
cd openapi-codegen/examples/frontend
npm install
npm run dev
```

You can play around with the example by removing the ./openapi-codegen.config.ts and ./src/github/ and run the following commands to generate these files on your own:

```shell
npx openapi-codegen init
npx openapi-codegen gen {namespace}
```

## References

You can find a detailed description of how to use openapi-codegen on https://xata.io/blog/openapi-typesafe-react-query-hooks

--- End of openapi-codegen/examples/frontend/README.md ---

--- Start of openapi-codegen/examples/frontend/.gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

--- End of openapi-codegen/examples/frontend/.gitignore ---

--- Start of openapi-codegen/examples/frontend/package-lock.json ---
# Content omitted for convenience

--- End of openapi-codegen/examples/frontend/package-lock.json ---

--- Start of openapi-codegen/examples/frontend/package.json ---
# Content omitted for convenience

--- End of openapi-codegen/examples/frontend/package.json ---

--- Start of openapi-codegen/examples/frontend/tsconfig.json ---
# Content omitted for convenience

--- End of openapi-codegen/examples/frontend/tsconfig.json ---

--- Start of openapi-codegen/examples/frontend/vite.config.ts ---
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()]
})

--- End of openapi-codegen/examples/frontend/vite.config.ts ---

--- Start of openapi-codegen/examples/frontend/src/Auth.tsx ---
import React, { createContext, useContext, useState } from "react";
import { useQueryClient } from "@tanstack/react-query";

const authContext = createContext<{ token: null | string }>({
  token: null,
});

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const key = "githubToken";
  const [token, setToken] = useState(localStorage.getItem(key));
  const [draftToken, setDraftToken] = useState("");
  const queryClient = useQueryClient();

  return (
    <authContext.Provider value={{ token }}>
      {token ? (
        <>
          {children}
          <button
            onClick={() => {
              setToken(null);
              localStorage.removeItem(key);
              queryClient.clear();
            }}
          >
            Disconnect
          </button>
        </>
      ) : (
        <div>
          <form
            onSubmit={(e) => {
              e.preventDefault();
              setToken(draftToken);
              localStorage.setItem(key, draftToken);
            }}
          >
            <p>Please enter a personal access token</p>
            <input
              value={draftToken}
              onChange={(e) => setDraftToken(e.target.value)}
            ></input>
          </form>
        </div>
      )}
    </authContext.Provider>
  );
}

export const useToken = () => {
  const { token } = useContext(authContext);

  return token;
};

--- End of openapi-codegen/examples/frontend/src/Auth.tsx ---

--- Start of openapi-codegen/examples/frontend/src/App.tsx ---
import { useState } from "react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { AuthProvider } from "./Auth";
import { useSearchUsers } from "./github/githubComponents";

const queryClient = new QueryClient();

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <Users />
      </AuthProvider>
    </QueryClientProvider>
  );
}

function Users() {
  const [query, setQuery] = useState("");
  const { data, error, isLoading } = useSearchUsers(
    {
      queryParams: { q: query },
    },
    {
      enabled: Boolean(query),
    }
  );

  if (error) {
    return (
      <div>
        <pre>{JSON.stringify(error, null, 2)}</pre>
      </div>
    );
  }

  return (
    <div>
      <input value={query} onChange={(e) => setQuery(e.target.value)} />
      {isLoading ? (
        <div>Loading…</div>
      ) : (
        <ul>
          {data?.items.map((item) => (
            <li key={item.id}>{item.login}</li>
          ))}
        </ul>
      )}
    </div>
  );
}

export default App;

--- End of openapi-codegen/examples/frontend/src/App.tsx ---

--- Start of openapi-codegen/examples/frontend/src/main.tsx ---
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

--- End of openapi-codegen/examples/frontend/src/main.tsx ---

--- Start of openapi-codegen/examples/frontend/src/vite-env.d.ts ---
/// <reference types="vite/client" />

--- End of openapi-codegen/examples/frontend/src/vite-env.d.ts ---

--- Start of openapi-codegen/examples/frontend/src/github/githubSchemas.ts ---
/**
 * Generated by @openapi-codegen
 *
 * @version 1.1.4
 */
export type ActionsBillingUsage = {
  /*
   * The amount of free GitHub Actions minutes available.
   */
  included_minutes: number;
  minutes_used_breakdown: {
    /*
     * Total minutes used on macOS runner machines.
     */
    MACOS?: number;
    /*
     * Total minutes used on Ubuntu runner machines.
     */
    UBUNTU?: number;
    /*
     * Total minutes used on Windows runner machines.
     */
    WINDOWS?: number;
  };
  /*
   * The sum of the free and paid GitHub Actions minutes used.
   */
  total_minutes_used: number;
  /*
   * The total paid GitHub Actions minutes used.
   */
  total_paid_minutes_used: number;
};

/**
 * Whether GitHub Actions is enabled on the repository.
 */
export type ActionsEnabled = boolean;

export type ActionsEnterprisePermissions = {
  allowed_actions: AllowedActions;
  enabled_organizations: EnabledOrganizations;
  selected_actions_url?: SelectedActionsUrl;
  /*
   * The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`.
   */
  selected_organizations_url?: string;
};

export type ActionsOrganizationPermissions = {
  allowed_actions: AllowedActions;
  enabled_repositories: EnabledRepositories;
  selected_actions_url?: SelectedActionsUrl;
  /*
   * The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
   */
  selected_repositories_url?: string;
};

/**
 * The public key used for setting Actions Secrets.
 */
export type ActionsPublicKey = {
  /*
   * @example "2011-01-26T19:01:12.000Z"
   */
  created_at?: string;
  /*
   * @example 2
   */
  id?: number;
  /*
   * The Base64 encoded public key.
   *
   * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
   */
  key: string;
  /*
   * The identifier for the key.
   *
   * @example 1234567
   */
  key_id: string;
  /*
   * @example ssh-rsa AAAAB3NzaC1yc2EAAA
   */
  title?: string;
  /*
   * @example https://api.github.com/user/keys/2
   */
  url?: string;
};

export type ActionsRepositoryPermissions = {
  allowed_actions: AllowedActions;
  enabled: ActionsEnabled;
  selected_actions_url?: SelectedActionsUrl;
};

/**
 * Set secrets for GitHub Actions.
 */
export type ActionsSecret = {
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * The name of the secret.
   *
   * @example SECRET_TOKEN
   */
  name: string;
  /*
   * @format date-time
   */
  updated_at: string;
};

/**
 * Actor
 */
export type Actor = {
  /*
   * @format uri
   */
  avatar_url: string;
  display_login?: string;
  gravatar_id: string | null;
  id: number;
  login: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type AlertCreatedAt = string;

/**
 * The GitHub URL of the alert resource.
 *
 * @format uri
 */
export type AlertHtmlUrl = string;

/**
 * The REST API URL for fetching the list of instances for an alert.
 *
 * @format uri
 */
export type AlertInstancesUrl = string;

/**
 * The security alert number.
 */
export type AlertNumber = number;

/**
 * The REST API URL of the alert resource.
 *
 * @format uri
 */
export type AlertUrl = string;

/**
 * The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
 */
export type AllowedActions = "all" | "local_only" | "selected";

/**
 * Api Overview
 */
export type ApiOverview = {
  /*
   * @example 13.64.0.0/16
   * @example 13.65.0.0/16
   */
  actions?: string[];
  /*
   * @example 127.0.0.1/32
   */
  api?: string[];
  /*
   * @example 127.0.0.1/32
   */
  git?: string[];
  /*
   * @example 127.0.0.1/32
   */
  hooks?: string[];
  /*
   * @example 54.158.161.132
   * @example 54.226.70.38
   */
  importer?: string[];
  /*
   * @example 192.30.252.153/32
   * @example 192.30.252.154/32
   */
  pages?: string[];
  ssh_key_fingerprints?: {
    SHA256_DSA?: string;
    SHA256_RSA?: string;
  };
  /*
   * @example true
   */
  verifiable_password_authentication: boolean;
  /*
   * @example 127.0.0.1/32
   */
  web?: string[];
};

/**
 * The permissions granted to the user-to-server access token.
 *
 * @example {"contents":"read","deployments":"write","issues":"read","single_file":"read"}
 */
export type AppPermissions = {
  /*
   * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
   */
  actions?: "read" | "write";
  /*
   * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
   */
  administration?: "read" | "write";
  /*
   * The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
   */
  checks?: "read" | "write";
  /*
   * The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.
   */
  content_references?: "read" | "write";
  /*
   * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
   */
  contents?: "read" | "write";
  /*
   * The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
   */
  deployments?: "read" | "write";
  /*
   * The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
   */
  environments?: "read" | "write";
  /*
   * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
   */
  issues?: "read" | "write";
  /*
   * The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
   */
  members?: "read" | "write";
  /*
   * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
   */
  metadata?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
   */
  organization_administration?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
   */
  organization_hooks?: "read" | "write";
  /*
   * The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
   */
  organization_plan?: "read";
  /*
   * The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
   */
  organization_projects?: "read" | "write" | "admin";
  /*
   * The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
   */
  organization_secrets?: "read" | "write";
  /*
   * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
   */
  organization_self_hosted_runners?: "read" | "write";
  /*
   * The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
   */
  organization_user_blocking?: "read" | "write";
  /*
   * The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
   */
  packages?: "read" | "write";
  /*
   * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
   */
  pages?: "read" | "write";
  /*
   * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
   */
  pull_requests?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
   */
  repository_hooks?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
   */
  repository_projects?: "read" | "write" | "admin";
  /*
   * The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
   */
  secret_scanning_alerts?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
   */
  secrets?: "read" | "write";
  /*
   * The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
   */
  security_events?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
   */
  single_file?: "read" | "write";
  /*
   * The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
   */
  statuses?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
   */
  team_discussions?: "read" | "write";
  /*
   * The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`.
   */
  vulnerability_alerts?: "read";
  /*
   * The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
   */
  workflows?: "write";
};

/**
 * The authorization associated with an OAuth Access.
 */
export type ApplicationGrant = {
  app: {
    client_id: string;
    name: string;
    /*
     * @format uri
     */
    url: string;
  };
  /*
   * @example "2011-09-06T17:26:27.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example public_repo
   */
  scopes: string[];
  /*
   * @example "2011-09-06T20:39:23.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/applications/grants/1
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user?: SimpleUser;
};

/**
 * An artifact
 */
export type Artifact = {
  /*
   * @example https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip
   */
  archive_download_url: string;
  /*
   * @format date-time
   */
  created_at: string | null;
  /*
   * Whether or not the artifact has expired.
   */
  expired: boolean;
  /*
   * @format date-time
   */
  expires_at: string;
  /*
   * @example 5
   */
  id: number;
  /*
   * The name of the artifact.
   *
   * @example AdventureWorks.Framework
   */
  name: string;
  /*
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;
  /*
   * The size in bytes of the artifact.
   *
   * @example 12345
   */
  size_in_bytes: number;
  /*
   * @format date-time
   */
  updated_at: string | null;
  /*
   * @example https://api.github.com/repos/github/hello-world/actions/artifacts/5
   */
  url: string;
};

export type AuditLogEvent = {
  /*
   * The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   */
  ["@timestamp"]?: number;
  /*
   * The name of the action that was performed, for example `user.login` or `repo.create`.
   */
  action?: string;
  active?: boolean;
  active_was?: boolean;
  /*
   * The actor who performed the action.
   */
  actor?: string;
  /*
   * The username of the account being blocked.
   */
  blocked_user?: string;
  business?: string;
  config?: any[];
  config_was?: any[];
  content_type?: string;
  /*
   * The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   */
  created_at?: number;
  deploy_key_fingerprint?: string;
  emoji?: string;
  events?: any[];
  events_were?: any[];
  explanation?: string;
  fingerprint?: string;
  hook_id?: number;
  limited_availability?: boolean;
  message?: string;
  name?: string;
  old_user?: string;
  openssh_public_key?: string;
  org?: string;
  previous_visibility?: string;
  read_only?: boolean;
  /*
   * The name of the repository.
   */
  repo?: string;
  /*
   * The name of the repository.
   */
  repository?: string;
  repository_public?: boolean;
  target_login?: string;
  team?: string;
  /*
   * The type of protocol (for example, HTTP or SSH) used to transfer Git data.
   */
  transport_protocol?: number;
  /*
   * A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
   */
  transport_protocol_name?: string;
  /*
   * The user that was affected by the action performed (if available).
   */
  user?: string;
  /*
   * The repository visibility, for example `public` or `private`.
   */
  visibility?: string;
};

/**
 * Authentication Token
 */
export type AuthenticationToken = {
  /*
   * The time this token expires
   *
   * @example "2016-07-11T22:14:10.000Z"
   * @format date-time
   */
  expires_at: string;
  /*
   * @example {"deployments":"write","issues":"read"}
   */
  permissions?: Record<string, any>;
  /*
   * The repositories this token has access to
   */
  repositories?: Repository[];
  /*
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection?: "all" | "selected";
  /*
   * @example config.yaml
   */
  single_file?: string | null;
  /*
   * The token used for authentication
   *
   * @example v1.1f699f1069f60xxx
   */
  token: string;
};

/**
 * How the author is associated with the repository.
 *
 * @example OWNER
 */
export type AuthorAssociation =
  | "COLLABORATOR"
  | "CONTRIBUTOR"
  | "FIRST_TIMER"
  | "FIRST_TIME_CONTRIBUTOR"
  | "MANNEQUIN"
  | "MEMBER"
  | "NONE"
  | "OWNER";

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export type Authorization = {
  app: {
    client_id: string;
    name: string;
    /*
     * @format uri
     */
    url: string;
  };
  /*
   * @format date-time
   */
  created_at: string;
  fingerprint: string | null;
  hashed_token: string | null;
  id: number;
  installation?: ScopedInstallation;
  note: string | null;
  /*
   * @format uri
   */
  note_url: string | null;
  /*
   * A list of scopes that this authorization is in.
   */
  scopes: string[] | null;
  token: string;
  token_last_eight: string | null;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user?: SimpleUser;
};

/**
 * The status of auto merging a pull request.
 */
export type AutoMerge = {
  /*
   * Commit message for the merge commit.
   */
  commit_message: string;
  /*
   * Title for the merge commit message.
   */
  commit_title: string;
  enabled_by: SimpleUser;
  /*
   * The merge method to use.
   */
  merge_method: "merge" | "squash" | "rebase";
} | null;

/**
 * Base Gist
 */
export type BaseGist = {
  comments: number;
  /*
   * @format uri
   */
  comments_url: string;
  /*
   * @format uri
   */
  commits_url: string;
  /*
   * @format date-time
   */
  created_at: string;
  description: string | null;
  files: {
    [key: string]: {
      filename?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      type?: string;
    };
  };
  forks?: any[];
  /*
   * @format uri
   */
  forks_url: string;
  /*
   * @format uri
   */
  git_pull_url: string;
  /*
   * @format uri
   */
  git_push_url: string;
  history?: any[];
  /*
   * @format uri
   */
  html_url: string;
  id: string;
  node_id: string;
  /*
   * Simple User
   */
  owner?: SimpleUser;
  public: boolean;
  truncated?: boolean;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Basic Error
 */
export type BasicError = {
  documentation_url?: string;
  message?: string;
};

/**
 * Blob
 */
export type Blob = {
  content: string;
  encoding: string;
  highlighted_content?: string;
  node_id: string;
  sha: string;
  size: number | null;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Branch Protection
 */
export type BranchProtection = {
  allow_deletions?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  enabled: boolean;
  enforce_admins?: ProtectedBranchAdminEnforced;
  /*
   * @example "branch/with/protection"
   */
  name?: string;
  /*
   * @example "https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"
   */
  protection_url?: string;
  required_linear_history?: {
    enabled?: boolean;
  };
  required_pull_request_reviews?: ProtectedBranchPullRequestReview;
  required_status_checks: {
    contexts: string[];
    contexts_url?: string;
    enforcement_level: string;
    url?: string;
  };
  restrictions?: BranchRestrictionPolicy;
  url?: string;
};

/**
 * Branch Restriction Policy
 */
export type BranchRestrictionPolicy = {
  apps: {
    created_at?: string;
    description?: string;
    events?: string[];
    external_url?: string;
    html_url?: string;
    id?: number;
    name?: string;
    node_id?: string;
    owner?: {
      avatar_url?: string;
      description?: string;
      events_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"
       */
      followers_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"
       */
      following_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"
       */
      gists_url?: string;
      /*
       * @example ""
       */
      gravatar_id?: string;
      hooks_url?: string;
      /*
       * @example "https://github.com/testorg-ea8ec76d71c3af4b"
       */
      html_url?: string;
      id?: number;
      issues_url?: string;
      login?: string;
      members_url?: string;
      node_id?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"
       */
      organizations_url?: string;
      public_members_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"
       */
      received_events_url?: string;
      repos_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"
       */
      starred_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"
       */
      subscriptions_url?: string;
      /*
       * @example "Organization"
       */
      type?: string;
      url?: string;
    };
    permissions?: {
      contents?: string;
      issues?: string;
      metadata?: string;
      single_file?: string;
    };
    slug?: string;
    updated_at?: string;
  }[];
  /*
   * @format uri
   */
  apps_url: string;
  teams: {
    description?: string | null;
    html_url?: string;
    id?: number;
    members_url?: string;
    name?: string;
    node_id?: string;
    parent?: string | null;
    permission?: string;
    privacy?: string;
    repositories_url?: string;
    slug?: string;
    url?: string;
  }[];
  /*
   * @format uri
   */
  teams_url: string;
  /*
   * @format uri
   */
  url: string;
  users: {
    avatar_url?: string;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id?: number;
    login?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    url?: string;
  }[];
  /*
   * @format uri
   */
  users_url: string;
};

/**
 * Branch Short
 */
export type BranchShort = {
  commit: {
    sha: string;
    url: string;
  };
  name: string;
  protected: boolean;
};

/**
 * Branch With Protection
 */
export type BranchWithProtection = {
  _links: {
    html: string;
    /*
     * @format uri
     */
    self: string;
  };
  commit: Commit;
  name: string;
  /*
   * @example "mas*"
   */
  pattern?: string;
  protected: boolean;
  protection: BranchProtection;
  /*
   * @format uri
   */
  protection_url: string;
  /*
   * @example 1
   */
  required_approving_review_count?: number;
};

/**
 * Check Annotation
 */
export type CheckAnnotation = {
  /*
   * @example warning
   */
  annotation_level: string | null;
  blob_href: string;
  /*
   * @example 10
   */
  end_column: number | null;
  /*
   * @example 2
   */
  end_line: number;
  /*
   * @example Check your spelling for 'banaas'.
   */
  message: string | null;
  /*
   * @example README.md
   */
  path: string;
  /*
   * @example Do you mean 'bananas' or 'banana'?
   */
  raw_details: string | null;
  /*
   * @example 5
   */
  start_column: number | null;
  /*
   * @example 2
   */
  start_line: number;
  /*
   * @example Spell Checker
   */
  title: string | null;
};

/**
 * A check performed on the code of a given code change
 */
export type CheckRun = {
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  app: Integration;
  check_suite: {
    id: number;
  } | null;
  /*
   * @example "2018-05-04T01:14:52.000Z"
   * @format date-time
   */
  completed_at: string | null;
  /*
   * @example neutral
   */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required";
  deployment?: DeploymentSimple;
  /*
   * @example https://example.com
   */
  details_url: string | null;
  /*
   * @example 42
   */
  external_id: string | null;
  /*
   * The SHA of the commit that is being checked.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /*
   * @example https://github.com/github/hello-world/runs/4
   */
  html_url: string | null;
  /*
   * The id of the check.
   *
   * @example 21
   */
  id: number;
  /*
   * The name of the check.
   *
   * @example test-coverage
   */
  name: string;
  /*
   * @example MDg6Q2hlY2tSdW40
   */
  node_id: string;
  output: {
    annotations_count: number;
    /*
     * @format uri
     */
    annotations_url: string;
    summary: string | null;
    text: string | null;
    title: string | null;
  };
  pull_requests: PullRequestMinimal[];
  /*
   * @example "2018-05-04T01:14:52.000Z"
   * @format date-time
   */
  started_at: string | null;
  /*
   * The phase of the lifecycle that the check is currently in.
   *
   * @example queued
   */
  status: "queued" | "in_progress" | "completed";
  /*
   * @example https://api.github.com/repos/github/hello-world/check-runs/4
   */
  url: string;
};

/**
 * A suite of checks performed on the code of a given code change
 */
export type CheckSuite = {
  /*
   * @example d6fde92930d4715a2b49857d24b940956b26d2d3
   */
  after: string | null;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  app: Integration;
  /*
   * @example 146e867f55c26428e5f9fade55a9bbf5e95a7912
   */
  before: string | null;
  check_runs_url: string;
  /*
   * @example neutral
   */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required";
  /*
   * @format date-time
   */
  created_at: string | null;
  /*
   * @example master
   */
  head_branch: string | null;
  head_commit: SimpleCommit;
  /*
   * The SHA of the head commit that is being checked.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /*
   * @example 5
   */
  id: number;
  latest_check_runs_count: number;
  /*
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;
  pull_requests: PullRequestMinimal[] | null;
  repository: MinimalRepository;
  /*
   * @example completed
   */
  status: "queued" | "in_progress" | "completed";
  /*
   * @format date-time
   */
  updated_at: string | null;
  /*
   * @example https://api.github.com/repos/github/hello-world/check-suites/5
   */
  url: string | null;
};

/**
 * Check suite configuration preferences for a repository.
 */
export type CheckSuitePreference = {
  preferences: {
    auto_trigger_checks?: {
      app_id: number;
      setting: boolean;
    }[];
  };
  repository: Repository;
};

/**
 * Clone Traffic
 */
export type CloneTraffic = {
  clones: Traffic[];
  /*
   * @example 173
   */
  count: number;
  /*
   * @example 128
   */
  uniques: number;
};

/**
 * Code Frequency Stat
 */
export type CodeFrequencyStat = number[];

/**
 * Code Of Conduct
 */
export type CodeOfConduct = {
  /*
     * @example # Contributor Covenant Code of Conduct
    
    ## Our Pledge
    
    In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
    
    ## Our Standards
    
    Examples of behavior that contributes to creating a positive environment include:
    
    * Using welcoming and inclusive language
    * Being respectful of differing viewpoints and experiences
    * Gracefully accepting constructive criticism
    * Focusing on what is best for the community
    * Showing empathy towards other community members
    
    Examples of unacceptable behavior by participants include:
    
    * The use of sexualized language or imagery and unwelcome sexual attention or advances
    * Trolling, insulting/derogatory comments, and personal or political attacks
    * Public or private harassment
    * Publishing others' private information, such as a physical or electronic address, without explicit permission
    * Other conduct which could reasonably be considered inappropriate in a professional setting
    
    ## Our Responsibilities
    
    Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response
                      to any instances of unacceptable behavior.
    
    Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
    
    ## Scope
    
    This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,
                      posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
    
    ## Enforcement
    
    Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
    
    Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.
    
    ## Attribution
    
    This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]
    
    [homepage]: http://contributor-covenant.org
    [version]: http://contributor-covenant.org/version/1/4/
     */
  body?: string;
  /*
   * @format uri
   */
  html_url: string | null;
  /*
   * @example contributor_covenant
   */
  key: string;
  /*
   * @example Contributor Covenant
   */
  name: string;
  /*
   * @example https://api.github.com/codes_of_conduct/contributor_covenant
   * @format uri
   */
  url: string;
};

/**
 * Code of Conduct Simple
 */
export type CodeOfConductSimple = {
  /*
   * @example https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md
   * @format uri
   */
  html_url: string | null;
  /*
   * @example citizen_code_of_conduct
   */
  key: string;
  /*
   * @example Citizen Code of Conduct
   */
  name: string;
  /*
   * @example https://api.github.com/repos/github/docs/community/code_of_conduct
   * @format uri
   */
  url: string;
};

export type CodeScanningAlert = {
  created_at: AlertCreatedAt;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_by: SimpleUser;
  dismissed_reason: CodeScanningAlertDismissedReason;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  most_recent_instance: CodeScanningAlertInstance;
  number: AlertNumber;
  rule: CodeScanningAlertRule;
  state: CodeScanningAlertState;
  tool: CodeScanningAnalysisTool;
  url: AlertUrl;
};

/**
 * A classification of the file. For example to identify it as generated.
 */
export type CodeScanningAlertClassification =
  | "source"
  | "generated"
  | "test"
  | "library";

/**
 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type CodeScanningAlertDismissedAt = string | null;

/**
 * **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
 */
export type CodeScanningAlertDismissedReason =
  | ("false positive" | "won't fix" | "used in tests")
  | any
  | null;

/**
 * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
 */
export type CodeScanningAlertEnvironment = string;

export type CodeScanningAlertInstance = {
  analysis_key?: CodeScanningAnalysisAnalysisKey;
  /*
   * Classifications that have been applied to the file that triggered the alert.
   * For example identifying it as documentation, or a generated file.
   */
  classifications?: CodeScanningAlertClassification[];
  commit_sha?: string;
  environment?: CodeScanningAlertEnvironment;
  html_url?: string;
  location?: CodeScanningAlertLocation;
  message?: {
    text?: string;
  };
  ref?: CodeScanningRef;
  state?: CodeScanningAlertState;
};

export type CodeScanningAlertItems = {
  created_at: AlertCreatedAt;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_by: SimpleUser;
  dismissed_reason: CodeScanningAlertDismissedReason;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  most_recent_instance: CodeScanningAlertInstance;
  number: AlertNumber;
  rule: CodeScanningAlertRuleSummary;
  state: CodeScanningAlertState;
  tool: CodeScanningAnalysisTool;
  url: AlertUrl;
};

/**
 * Describe a region within a file for the alert.
 */
export type CodeScanningAlertLocation = {
  end_column?: number;
  end_line?: number;
  path?: string;
  start_column?: number;
  start_line?: number;
};

export type CodeScanningAlertRule = {
  /*
   * A short description of the rule used to detect the alert.
   */
  description?: string;
  /*
   * description of the rule used to detect the alert.
   */
  full_description?: string;
  /*
   * Detailed documentation for the rule as GitHub Flavored Markdown.
   */
  help?: string;
  /*
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;
  /*
   * The name of the rule used to detect the alert.
   */
  name?: string;
  /*
   * The severity of the alert.
   */
  severity?: "none" | "note" | "warning" | "error";
  /*
   * A set of tags applicable for the rule.
   */
  tags?: string[];
};

export type CodeScanningAlertRuleSummary = {
  /*
   * A short description of the rule used to detect the alert.
   */
  description?: string;
  /*
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;
  /*
   * The name of the rule used to detect the alert.
   */
  name?: string;
  /*
   * The severity of the alert.
   */
  severity?: "none" | "note" | "warning" | "error";
};

/**
 * Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.
 */
export type CodeScanningAlertSetState = "open" | "dismissed";

/**
 * State of a code scanning alert.
 */
export type CodeScanningAlertState = "open" | "closed" | "dismissed" | "fixed";

export type CodeScanningAnalysis = {
  analysis_key: CodeScanningAnalysisAnalysisKey;
  commit_sha: CodeScanningAnalysisCommitSha;
  created_at: CodeScanningAnalysisCreatedAt;
  deletable: boolean;
  environment: CodeScanningAnalysisEnvironment;
  /*
   * @example error reading field xyz
   */
  error: string;
  /*
   * Unique identifier for this analysis.
   */
  id: number;
  ref: CodeScanningRef;
  /*
   * The total number of results in the analysis.
   */
  results_count: number;
  /*
   * The total number of rules used in the analysis.
   */
  rules_count: number;
  sarif_id: CodeScanningAnalysisSarifId;
  tool: CodeScanningAnalysisTool;
  url: CodeScanningAnalysisUrl;
};

/**
 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 */
export type CodeScanningAnalysisAnalysisKey = string;

/**
 * The SHA of the commit to which the analysis you are uploading relates.
 *
 * @maxLength 40
 * @minLength 40
 * @pattern ^[0-9a-fA-F]+$
 */
export type CodeScanningAnalysisCommitSha = string;

/**
 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type CodeScanningAnalysisCreatedAt = string;

/**
 * Successful deletion of a code scanning analysis
 */
export type CodeScanningAnalysisDeletion = {
  /*
   * Next deletable analysis in chain, with last analysis deletion confirmation
   *
   * @format uri
   */
  confirm_delete_url: string | null;
  /*
   * Next deletable analysis in chain, without last analysis deletion confirmation
   *
   * @format uri
   */
  next_analysis_url: string | null;
};

/**
 * Identifies the variable values associated with the environment in which this analysis was performed.
 */
export type CodeScanningAnalysisEnvironment = string;

/**
 * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/github/finding-security-vulnerabilities-and-errors-in-your-code/sarif-support-for-code-scanning)."
 */
export type CodeScanningAnalysisSarifFile = string;

/**
 * An identifier for the upload.
 *
 * @example 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53
 */
export type CodeScanningAnalysisSarifId = string;

export type CodeScanningAnalysisTool = {
  guid?: CodeScanningAnalysisToolGuid;
  name?: CodeScanningAnalysisToolName;
  version?: CodeScanningAnalysisToolVersion;
};

/**
 * The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
 */
export type CodeScanningAnalysisToolGuid = string | null;

/**
 * The name of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolName = string;

/**
 * The version of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolVersion = string | null;

/**
 * The REST API URL of the analysis resource.
 *
 * @format uri
 */
export type CodeScanningAnalysisUrl = string;

/**
 * The full Git reference, formatted as `refs/heads/<branch name>`,
 * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
 */
export type CodeScanningRef = string;

export type CodeScanningSarifsReceipt = {
  id?: CodeScanningAnalysisSarifId;
  /*
   * The REST API URL for checking the status of the upload.
   *
   * @format uri
   */
  url?: string;
};

export type CodeScanningSarifsStatus = {
  /*
   * The REST API URL for getting the analyses associated with the upload.
   *
   * @format uri
   */
  analyses_url?: string | null;
  /*
   * `pending` files have not yet been processed, while `complete` means all results in the SARIF have been stored.
   */
  processing_status?: "pending" | "complete";
};

/**
 * Code Search Result Item
 */
export type CodeSearchResultItem = {
  file_size?: number;
  /*
   * @format uri
   */
  git_url: string;
  /*
   * @format uri
   */
  html_url: string;
  language?: string | null;
  /*
   * @format date-time
   */
  last_modified_at?: string;
  /*
   * @example 73..77
   * @example 77..78
   */
  line_numbers?: string[];
  name: string;
  path: string;
  repository: MinimalRepository;
  score: number;
  sha: string;
  text_matches?: SearchResultTextMatches;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Collaborator
 */
export type Collaborator = {
  /*
   * @example https://github.com/images/error/octocat_happy.gif
   * @format uri
   */
  avatar_url: string;
  /*
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;
  /*
   * @example https://api.github.com/users/octocat/followers
   * @format uri
   */
  followers_url: string;
  /*
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;
  /*
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;
  /*
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;
  /*
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example octocat
   */
  login: string;
  /*
   * @example MDQ6VXNlcjE=
   */
  node_id: string;
  /*
   * @example https://api.github.com/users/octocat/orgs
   * @format uri
   */
  organizations_url: string;
  permissions?: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  /*
   * @example https://api.github.com/users/octocat/received_events
   * @format uri
   */
  received_events_url: string;
  /*
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  /*
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;
  /*
   * @example https://api.github.com/users/octocat/subscriptions
   * @format uri
   */
  subscriptions_url: string;
  /*
   * @example User
   */
  type: string;
  /*
   * @example https://api.github.com/users/octocat
   * @format uri
   */
  url: string;
};

export type CombinedBillingUsage = {
  /*
   * Numbers of days left in billing cycle.
   */
  days_left_in_billing_cycle: number;
  /*
   * Estimated storage space (GB) used in billing cycle.
   */
  estimated_paid_storage_for_month: number;
  /*
   * Estimated sum of free and paid storage space (GB) used in billing cycle.
   */
  estimated_storage_for_month: number;
};

/**
 * Combined Commit Status
 */
export type CombinedCommitStatus = {
  /*
   * @format uri
   */
  commit_url: string;
  repository: MinimalRepository;
  sha: string;
  state: string;
  statuses: SimpleCommitStatus[];
  total_count: number;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Commit
 */
export type Commit = {
  /*
   * Simple User
   */
  author: SimpleUser;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments
   * @format uri
   */
  comments_url: string;
  commit: {
    /*
     * Metaproperties for Git author/committer information.
     */
    author: GitUser;
    /*
     * @example 0
     */
    comment_count: number;
    /*
     * Metaproperties for Git author/committer information.
     */
    committer: GitUser;
    /*
     * @example Fix all the bugs
     */
    message: string;
    tree: {
      /*
       * @example 827efc6d56897b048c772eb4087f854f46256132
       */
      sha: string;
      /*
       * @example https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132
       * @format uri
       */
      url: string;
    };
    /*
     * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
     * @format uri
     */
    url: string;
    verification?: Verification;
  };
  /*
   * Simple User
   */
  committer: SimpleUser;
  files?: {
    additions?: number;
    blob_url?: string;
    changes?: number;
    /*
     * @example "https://api.github.com/repos/owner-3d68404b07d25daeb2d4a6bf/AAA_Public_Repo/contents/geometry.js?ref=c3956841a7cb7e8ba4a6fd923568d86958f01573"
     */
    contents_url?: string;
    deletions?: number;
    filename?: string;
    patch?: string;
    /*
     * @example "subdir/before_name.txt"
     */
    previous_filename?: string;
    raw_url?: string;
    /*
     * @example "1e8e60ce9733d5283f7836fa602b6365a66b2567"
     */
    sha?: string;
    status?: string;
  }[];
  /*
   * @example https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  html_url: string;
  /*
   * @example MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==
   */
  node_id: string;
  parents: {
    /*
     * @example https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd
     * @format uri
     */
    html_url?: string;
    /*
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    /*
     * @example https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd
     * @format uri
     */
    url: string;
  }[];
  /*
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  sha: string;
  stats?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  url: string;
};

/**
 * Commit Activity
 */
export type CommitActivity = {
  /*
   * @example 0
   * @example 3
   * @example 26
   * @example 20
   * @example 39
   * @example 1
   * @example 0
   */
  days: number[];
  /*
   * @example 89
   */
  total: number;
  /*
   * @example 1336280400
   */
  week: number;
};

/**
 * Commit Comment
 */
export type CommitComment = {
  author_association: AuthorAssociation;
  body: string;
  commit_id: string;
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  line: number | null;
  node_id: string;
  path: string | null;
  position: number | null;
  reactions?: ReactionRollup;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Commit Comparison
 */
export type CommitComparison = {
  /*
   * @example 4
   */
  ahead_by: number;
  base_commit: Commit;
  /*
   * @example 5
   */
  behind_by: number;
  commits: Commit[];
  /*
   * @example https://github.com/octocat/Hello-World/compare/master...topic.diff
   * @format uri
   */
  diff_url: string;
  files: DiffEntry[];
  /*
   * @example https://github.com/octocat/Hello-World/compare/master...topic
   * @format uri
   */
  html_url: string;
  merge_base_commit: Commit;
  /*
   * @example https://github.com/octocat/Hello-World/compare/master...topic.patch
   * @format uri
   */
  patch_url: string;
  /*
   * @example https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17
   * @format uri
   */
  permalink_url: string;
  /*
   * @example ahead
   */
  status: "diverged" | "ahead" | "behind" | "identical";
  /*
   * @example 6
   */
  total_commits: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/compare/master...topic
   * @format uri
   */
  url: string;
};

/**
 * Commit Search Result Item
 */
export type CommitSearchResultItem = {
  /*
   * Simple User
   */
  author: SimpleUser;
  /*
   * @format uri
   */
  comments_url: string;
  commit: {
    author: {
      /*
       * @format date-time
       */
      date: string;
      email: string;
      name: string;
    };
    comment_count: number;
    /*
     * Metaproperties for Git author/committer information.
     */
    committer: GitUser;
    message: string;
    tree: {
      sha: string;
      /*
       * @format uri
       */
      url: string;
    };
    /*
     * @format uri
     */
    url: string;
    verification?: Verification;
  };
  /*
   * Metaproperties for Git author/committer information.
   */
  committer: GitUser;
  /*
   * @format uri
   */
  html_url: string;
  node_id: string;
  parents: {
    html_url?: string;
    sha?: string;
    url?: string;
  }[];
  repository: MinimalRepository;
  score: number;
  sha: string;
  text_matches?: SearchResultTextMatches;
  /*
   * @format uri
   */
  url: string;
};

export type CommunityHealthFile = {
  /*
   * @format uri
   */
  html_url: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Community Profile
 */
export type CommunityProfile = {
  /*
   * @example true
   */
  content_reports_enabled?: boolean;
  /*
   * @example My first repository on GitHub!
   */
  description: string | null;
  /*
   * @example example.com
   */
  documentation: string | null;
  files: {
    /*
     * Code of Conduct Simple
     */
    code_of_conduct: CodeOfConductSimple;
    contributing: CommunityHealthFile;
    issue_template: CommunityHealthFile;
    /*
     * License Simple
     */
    license: LicenseSimple;
    pull_request_template: CommunityHealthFile;
    readme: CommunityHealthFile;
  };
  /*
   * @example 100
   */
  health_percentage: number;
  /*
   * @example "2017-02-28T19:09:29.000Z"
   * @format date-time
   */
  updated_at: string | null;
};

/**
 * A list of directory items
 */
export type ContentDirectory = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  content?: string;
  /*
   * @format uri
   */
  download_url: string | null;
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  /*
   * @format uri
   */
  url: string;
}[];

/**
 * Content File
 */
export type ContentFile = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  content: string;
  /*
   * @format uri
   */
  download_url: string | null;
  encoding: string;
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  /*
   * @example "git://example.com/defunkt/dotjs.git"
   */
  submodule_git_url?: string;
  /*
   * @example "actual/actual.md"
   */
  target?: string;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Content Reference attachments allow you to provide context around URLs posted in comments
 */
export type ContentReferenceAttachment = {
  /*
   * The body of the attachment
   *
   * @example Body of the attachment
   * @maxLength 262144
   */
  body: string;
  /*
   * The ID of the attachment
   *
   * @example 21
   */
  id: number;
  /*
   * The node_id of the content attachment
   *
   * @example MDE3OkNvbnRlbnRBdHRhY2htZW50MjE=
   */
  node_id?: string;
  /*
   * The title of the attachment
   *
   * @example Title of the attachment
   * @maxLength 1024
   */
  title: string;
};

/**
 * An object describing a symlink
 */
export type ContentSubmodule = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  /*
   * @format uri
   */
  download_url: string | null;
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  /*
   * @format uri
   */
  submodule_git_url: string;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * An object describing a symlink
 */
export type ContentSymlink = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  /*
   * @format uri
   */
  download_url: string | null;
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  target: string;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Content Traffic
 */
export type ContentTraffic = {
  /*
   * @example 3542
   */
  count: number;
  /*
   * @example /github/hubot
   */
  path: string;
  /*
   * @example github/hubot: A customizable life embetterment robot.
   */
  title: string;
  /*
   * @example 2225
   */
  uniques: number;
};

/**
 * Content Tree
 */
export type ContentTree = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  /*
   * @format uri
   */
  download_url: string | null;
  entries?: {
    _links: {
      /*
       * @format uri
       */
      git: string | null;
      /*
       * @format uri
       */
      html: string | null;
      /*
       * @format uri
       */
      self: string;
    };
    content?: string;
    /*
     * @format uri
     */
    download_url: string | null;
    /*
     * @format uri
     */
    git_url: string | null;
    /*
     * @format uri
     */
    html_url: string | null;
    name: string;
    path: string;
    sha: string;
    size: number;
    type: string;
    /*
     * @format uri
     */
    url: string;
  }[];
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Contributor
 */
export type Contributor = {
  /*
   * @format uri
   */
  avatar_url?: string;
  contributions: number;
  email?: string;
  events_url?: string;
  /*
   * @format uri
   */
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  gravatar_id?: string | null;
  /*
   * @format uri
   */
  html_url?: string;
  id?: number;
  login?: string;
  name?: string;
  node_id?: string;
  /*
   * @format uri
   */
  organizations_url?: string;
  /*
   * @format uri
   */
  received_events_url?: string;
  /*
   * @format uri
   */
  repos_url?: string;
  site_admin?: boolean;
  starred_url?: string;
  /*
   * @format uri
   */
  subscriptions_url?: string;
  type: string;
  /*
   * @format uri
   */
  url?: string;
};

/**
 * Contributor Activity
 */
export type ContributorActivity = {
  /*
   * Simple User
   */
  author: SimpleUser;
  /*
   * @example 135
   */
  total: number;
  /*
   * @example {"a":6898,"c":10,"d":77,"w":"1367712000"}
   */
  weeks: {
    a?: number;
    c?: number;
    d?: number;
    w?: string;
  }[];
};

/**
 * Credential Authorization
 */
export type CredentialAuthorization = {
  /*
   * @example 12345678
   */
  authorized_credential_id?: number | null;
  /*
   * The note given to the token. This will only be present when the credential is a token.
   *
   * @example my token
   */
  authorized_credential_note?: string | null;
  /*
   * The title given to the ssh key. This will only be present when the credential is an ssh key.
   *
   * @example my ssh key
   */
  authorized_credential_title?: string | null;
  /*
   * Date when the credential was last accessed. May be null if it was never accessed
   *
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  credential_accessed_at?: string | null;
  /*
   * Date when the credential was authorized for use.
   *
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  credential_authorized_at: string;
  /*
   * Unique identifier for the credential.
   *
   * @example 1
   */
  credential_id: number;
  /*
   * Human-readable description of the credential type.
   *
   * @example SSH Key
   */
  credential_type: string;
  /*
   * Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
   *
   * @example jklmnop12345678
   */
  fingerprint?: string;
  /*
   * User login that owns the underlying credential.
   *
   * @example monalisa
   */
  login: string;
  /*
   * List of oauth scopes the token has been granted.
   *
   * @example user
   * @example repo
   */
  scopes?: string[];
  /*
   * Last eight characters of the credential. Only included in responses with credential_type of personal access token.
   *
   * @example 12345678
   */
  token_last_eight?: string;
};

/**
 * An SSH key granting access to a single repository.
 */
export type DeployKey = {
  created_at: string;
  id: number;
  key: string;
  read_only: boolean;
  title: string;
  url: string;
  verified: boolean;
};

/**
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export type Deployment = {
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Simple User
   */
  creator: SimpleUser;
  /*
   * @example Deploy request from hubot
   */
  description: string | null;
  /*
   * Name for the target deployment environment.
   *
   * @example production
   */
  environment: string;
  /*
   * Unique identifier of the deployment
   *
   * @example 42
   */
  id: number;
  /*
   * @example MDEwOkRlcGxveW1lbnQx
   */
  node_id: string;
  /*
   * @example staging
   */
  original_environment?: string;
  payload: {};
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  /*
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   *
   * @example true
   */
  production_environment?: boolean;
  /*
   * The ref to deploy. This can be a branch, tag, or sha.
   *
   * @example topic-branch
   */
  ref: string;
  /*
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /*
   * @example a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d
   */
  sha: string;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
   * @format uri
   */
  statuses_url: string;
  /*
   * Parameter to specify a task to execute
   *
   * @example deploy
   */
  task: string;
  /*
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   *
   * @example true
   */
  transient_environment?: boolean;
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/1
   * @format uri
   */
  url: string;
};

/**
 * The type of reviewer. Must be one of: `User` or `Team`
 *
 * @example User
 */
export type DeploymentReviewerType = "User" | "Team";

/**
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
export type DeploymentSimple = {
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example Deploy request from hubot
   */
  description: string | null;
  /*
   * Name for the target deployment environment.
   *
   * @example production
   */
  environment: string;
  /*
   * Unique identifier of the deployment
   *
   * @example 42
   */
  id: number;
  /*
   * @example MDEwOkRlcGxveW1lbnQx
   */
  node_id: string;
  /*
   * @example staging
   */
  original_environment?: string;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  /*
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   *
   * @example true
   */
  production_environment?: boolean;
  /*
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
   * @format uri
   */
  statuses_url: string;
  /*
   * Parameter to specify a task to execute
   *
   * @example deploy
   */
  task: string;
  /*
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   *
   * @example true
   */
  transient_environment?: boolean;
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/1
   * @format uri
   */
  url: string;
};

/**
 * The status of a deployment.
 */
export type DeploymentStatus = {
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Simple User
   */
  creator: SimpleUser;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/42
   * @format uri
   */
  deployment_url: string;
  /*
   * A short description of the status.
   *
   * @default
   * @example Deployment finished successfully.
   * @maxLength 140
   */
  description: string;
  /*
   * The environment of the deployment that the status is for.
   *
   * @default
   * @example production
   */
  environment?: string;
  /*
   * The URL for accessing your environment.
   *
   * @default
   * @example https://staging.example.com/
   * @format uri
   */
  environment_url?: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * The URL to associate with this status.
   *
   * @default
   * @example https://example.com/deployment/42/output
   * @format uri
   */
  log_url?: string;
  /*
   * @example MDE2OkRlcGxveW1lbnRTdGF0dXMx
   */
  node_id: string;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  /*
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /*
   * The state of the status.
   *
   * @example success
   */
  state:
    | "error"
    | "failure"
    | "inactive"
    | "pending"
    | "success"
    | "queued"
    | "in_progress";
  /*
   * Deprecated: the URL to associate with this status.
   *
   * @default
   * @example https://example.com/deployment/42/output
   * @format uri
   */
  target_url: string;
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/42/statuses/1
   * @format uri
   */
  url: string;
};

/**
 * The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
 */
export type DeploymentBranchPolicy = {
  /*
   * Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
   */
  custom_branch_policies: boolean;
  /*
   * Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
   */
  protected_branches: boolean;
} | null;

/**
 * Diff Entry
 */
export type DiffEntry = {
  /*
   * @example 103
   */
  additions: number;
  /*
   * @example https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
   * @format uri
   */
  blob_url: string;
  /*
   * @example 124
   */
  changes: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  contents_url: string;
  /*
   * @example 21
   */
  deletions: number;
  /*
   * @example file1.txt
   */
  filename: string;
  /*
   * @example @@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test
   */
  patch?: string;
  /*
   * @example file.txt
   */
  previous_filename?: string;
  /*
   * @example https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
   * @format uri
   */
  raw_url: string;
  /*
   * @example bbcd538c8e72b8c175046e27cc8f907076331401
   */
  sha: string;
  /*
   * @example added
   */
  status: string;
};

/**
 * Email
 */
export type Email = {
  /*
   * @example octocat@github.com
   * @format email
   */
  email: string;
  /*
   * @example true
   */
  primary: boolean;
  /*
   * @example true
   */
  verified: boolean;
  /*
   * @example public
   */
  visibility: string | null;
};

/**
 * The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
 */
export type EnabledOrganizations = "all" | "none" | "selected";

/**
 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
 */
export type EnabledRepositories = "all" | "none" | "selected";

/**
 * An enterprise account
 */
export type Enterprise = {
  /*
   * @format uri
   */
  avatar_url: string;
  /*
   * @example "2019-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  /*
   * A short description of the enterprise.
   */
  description?: string | null;
  /*
   * @example https://github.com/enterprises/octo-business
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the enterprise
   *
   * @example 42
   */
  id: number;
  /*
   * The name of the enterprise.
   *
   * @example Octo Business
   */
  name: string;
  /*
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /*
   * The slug url identifier for the enterprise.
   *
   * @example octo-business
   */
  slug: string;
  /*
   * @example "2019-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string | null;
  /*
   * The enterprise's website URL.
   *
   * @format uri
   */
  website_url?: string | null;
};

/**
 * Details of a deployment environment
 */
export type Environment = {
  /*
   * The time that the environment was created, in ISO 8601 format.
   *
   * @example "2020-11-23T22:00:40.000Z"
   * @format date-time
   */
  created_at: string;
  deployment_branch_policy?: DeploymentBranchPolicy;
  /*
   * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
   */
  html_url: string;
  /*
   * The id of the environment.
   *
   * @example 56780428
   */
  id: number;
  /*
   * The name of the environment.
   *
   * @example staging
   */
  name: string;
  /*
   * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
   */
  node_id: string;
  protection_rules?: (
    | {
        /*
         * @example 3515
         */
        id: number;
        /*
         * @example MDQ6R2F0ZTM1MTU=
         */
        node_id: string;
        /*
         * @example wait_timer
         */
        type: string;
        wait_timer?: WaitTimer;
      }
    | {
        /*
         * @example 3755
         */
        id: number;
        /*
         * @example MDQ6R2F0ZTM3NTU=
         */
        node_id: string;
        /*
         * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
         */
        reviewers?: {
          reviewer?: SimpleUser | TeamSimple;
          type?: DeploymentReviewerType;
        }[];
        /*
         * @example required_reviewers
         */
        type: string;
      }
    | {
        /*
         * @example 3515
         */
        id: number;
        /*
         * @example MDQ6R2F0ZTM1MTU=
         */
        node_id: string;
        /*
         * @example branch_policy
         */
        type: string;
      }
  )[];
  /*
   * The time that the environment was last updated, in ISO 8601 format.
   *
   * @example "2020-11-23T22:00:40.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/github/hello-world/environments/staging
   */
  url: string;
};

/**
 * An entry in the reviews log for environment deployments
 */
export type EnvironmentApprovals = {
  /*
   * The comment submitted with the deployment review
   *
   * @example Ship it!
   */
  comment: string;
  /*
   * The list of environments that were approved or rejected
   */
  environments: {
    /*
     * The time that the environment was created, in ISO 8601 format.
     *
     * @example "2020-11-23T22:00:40.000Z"
     * @format date-time
     */
    created_at?: string;
    /*
     * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
     */
    html_url?: string;
    /*
     * The id of the environment.
     *
     * @example 56780428
     */
    id?: number;
    /*
     * The name of the environment.
     *
     * @example staging
     */
    name?: string;
    /*
     * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
     */
    node_id?: string;
    /*
     * The time that the environment was last updated, in ISO 8601 format.
     *
     * @example "2020-11-23T22:00:40.000Z"
     * @format date-time
     */
    updated_at?: string;
    /*
     * @example https://api.github.com/repos/github/hello-world/environments/staging
     */
    url?: string;
  }[];
  /*
   * Whether deployment to the environment(s) was approved or rejected
   *
   * @example approved
   */
  state: "approved" | "rejected";
  user: SimpleUser;
};

/**
 * Event
 */
export type Event = {
  actor: Actor;
  /*
   * @format date-time
   */
  created_at: string | null;
  id: string;
  org?: Actor;
  payload: {
    action: string;
    comment?: IssueComment;
    issue?: IssueSimple;
    pages?: {
      action?: string;
      html_url?: string;
      page_name?: string;
      sha?: string;
      summary?: string | null;
      title?: string;
    }[];
  };
  public: boolean;
  repo: {
    id: number;
    name: string;
    /*
     * @format uri
     */
    url: string;
  };
  type: string | null;
};

/**
 * Feed
 */
export type Feed = {
  _links: {
    current_user?: LinkWithType;
    current_user_actor?: LinkWithType;
    current_user_organization?: LinkWithType;
    current_user_organizations?: LinkWithType[];
    current_user_public?: LinkWithType;
    security_advisories?: LinkWithType;
    timeline: LinkWithType;
    user: LinkWithType;
  };
  /*
   * @example https://github.com/octocat.private.actor?token=abc123
   */
  current_user_actor_url?: string;
  /*
   * @example https://github.com/octocat-org
   */
  current_user_organization_url?: string;
  /*
   * @example https://github.com/organizations/github/octocat.private.atom?token=abc123
   */
  current_user_organization_urls?: string[];
  /*
   * @example https://github.com/octocat
   */
  current_user_public_url?: string;
  /*
   * @example https://github.com/octocat.private?token=abc123
   */
  current_user_url?: string;
  /*
   * @example https://github.com/security-advisories
   */
  security_advisories_url?: string;
  /*
   * @example https://github.com/timeline
   */
  timeline_url: string;
  /*
   * @example https://github.com/{user}
   */
  user_url: string;
};

/**
 * File Commit
 */
export type FileCommit = {
  commit: {
    author?: {
      date?: string;
      email?: string;
      name?: string;
    };
    committer?: {
      date?: string;
      email?: string;
      name?: string;
    };
    html_url?: string;
    message?: string;
    node_id?: string;
    parents?: {
      html_url?: string;
      sha?: string;
      url?: string;
    }[];
    sha?: string;
    tree?: {
      sha?: string;
      url?: string;
    };
    url?: string;
    verification?: {
      payload?: string | null;
      reason?: string;
      signature?: string | null;
      verified?: boolean;
    };
  };
  content: {
    _links?: {
      git?: string;
      html?: string;
      self?: string;
    };
    download_url?: string;
    git_url?: string;
    html_url?: string;
    name?: string;
    path?: string;
    sha?: string;
    size?: number;
    type?: string;
    url?: string;
  } | null;
};

/**
 * Full Repository
 */
export type FullRepository = {
  /*
   * @example true
   */
  allow_merge_commit?: boolean;
  /*
   * @example true
   */
  allow_rebase_merge?: boolean;
  /*
   * @example true
   */
  allow_squash_merge?: boolean;
  /*
   * Whether anonymous git access is allowed.
   *
   * @default true
   */
  anonymous_access_enabled?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  archived: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  /*
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;
  code_of_conduct?: CodeOfConductSimple;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example master
   */
  default_branch: string;
  /*
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /*
   * @example This your first repo!
   */
  description: string | null;
  /*
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /*
   * @example 9
   */
  forks_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /*
   * @example octocat/Hello-World
   */
  full_name: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  /*
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;
  /*
   * @example true
   */
  has_downloads: boolean;
  /*
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /*
   * @example true
   */
  has_projects: boolean;
  /*
   * @example true
   */
  has_wiki: boolean;
  /*
   * @example https://github.com
   * @format uri
   */
  homepage: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /*
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /*
   * @example 1296269
   */
  id: number;
  /*
   * @example true
   */
  is_template?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  /*
   * License Simple
   */
  license: LicenseSimple;
  master_branch?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  /*
   * @example git:git.example.com/octocat/Hello-World
   * @format uri
   */
  mirror_url: string | null;
  /*
   * @example Hello-World
   */
  name: string;
  /*
   * @example 0
   */
  network_count: number;
  /*
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  open_issues: number;
  /*
   * @example 0
   */
  open_issues_count: number;
  /*
   * Simple User
   */
  organization?: SimpleUser;
  /*
   * Simple User
   */
  owner: SimpleUser;
  parent?: Repository;
  permissions?: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  private: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /*
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /*
   * @example 108
   */
  size: number;
  source?: Repository;
  /*
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;
  /*
   * @example 80
   */
  stargazers_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  /*
   * @example 42
   */
  subscribers_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  /*
   * @example https://svn.github.com/octocat/Hello-World
   * @format uri
   */
  svn_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string | null;
  /*
   * A git repository
   */
  template_repository?: Repository;
  /*
   * @example octocat
   * @example atom
   * @example electron
   * @example API
   */
  topics?: string[];
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /*
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  /*
   * The repository visibility: public, private, or internal.
   *
   * @example public
   */
  visibility?: string;
  watchers: number;
  /*
   * @example 80
   */
  watchers_count: number;
};

/**
 * A comment made to a gist.
 */
export type GistComment = {
  author_association: AuthorAssociation;
  /*
   * The comment text.
   *
   * @example Body of the attachment
   * @maxLength 65535
   */
  body: string;
  /*
   * @example "2011-04-18T23:23:56.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example MDExOkdpc3RDb21tZW50MQ==
   */
  node_id: string;
  /*
   * @example "2011-04-18T23:23:56.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/gists/a6db0bec360bb87e9418/comments/1
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Gist Commit
 */
export type GistCommit = {
  change_status: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  /*
   * @example "2010-04-14T02:15:15.000Z"
   * @format date-time
   */
  committed_at: string;
  /*
   * @example https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
  /*
   * @example 57a7f021a713b1c5a6a199b54cc514735d2d462f
   */
  version: string;
};

/**
 * Gist Simple
 */
export type GistSimple = {
  comments?: number;
  comments_url?: string;
  commits_url?: string;
  created_at?: string;
  description?: string | null;
  files?: {
    [key: string]: {
      content?: string;
      filename?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      type?: string;
    } | null;
  };
  forks_url?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  id?: string;
  node_id?: string;
  owner?: SimpleUser;
  public?: boolean;
  truncated?: boolean;
  updated_at?: string;
  url?: string;
  user?: string | null;
};

/**
 * Low-level Git commit operations within a repository
 */
export type GitCommit = {
  /*
   * Identifying information for the git-user
   */
  author: {
    /*
     * Timestamp of the commit
     *
     * @example "2014-08-08T20:02:04.000Z"
     * @format date-time
     */
    date: string;
    /*
     * Git email address of the user
     *
     * @example monalisa.octocat@example.com
     */
    email: string;
    /*
     * Name of the git user
     *
     * @example Monalisa Octocat
     */
    name: string;
  };
  /*
   * Identifying information for the git-user
   */
  committer: {
    /*
     * Timestamp of the commit
     *
     * @example "2014-08-08T20:02:04.000Z"
     * @format date-time
     */
    date: string;
    /*
     * Git email address of the user
     *
     * @example monalisa.octocat@example.com
     */
    email: string;
    /*
     * Name of the git user
     *
     * @example Monalisa Octocat
     */
    name: string;
  };
  /*
   * @format uri
   */
  html_url: string;
  /*
   * Message describing the purpose of the commit
   *
   * @example Fix #42
   */
  message: string;
  node_id: string;
  parents: {
    /*
     * @format uri
     */
    html_url: string;
    /*
     * SHA for the commit
     *
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    /*
     * @format uri
     */
    url: string;
  }[];
  /*
   * SHA for the commit
   *
   * @example 7638417db6d59f3c431d3e1f261cc637155684cd
   */
  sha: string;
  tree: {
    /*
     * SHA for the commit
     *
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    /*
     * @format uri
     */
    url: string;
  };
  /*
   * @format uri
   */
  url: string;
  verification: {
    payload: string | null;
    reason: string;
    signature: string | null;
    verified: boolean;
  };
};

/**
 * Git references within a repository
 */
export type GitRef = {
  node_id: string;
  object: {
    /*
     * SHA for the reference
     *
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     * @maxLength 40
     * @minLength 40
     */
    sha: string;
    type: string;
    /*
     * @format uri
     */
    url: string;
  };
  ref: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Metadata for a Git tag
 */
export type GitTag = {
  /*
   * Message describing the purpose of the tag
   *
   * @example Initial public release
   */
  message: string;
  /*
   * @example MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==
   */
  node_id: string;
  object: {
    sha: string;
    type: string;
    /*
     * @format uri
     */
    url: string;
  };
  /*
   * @example 940bd336248efae0f9ee5bc7b2d5c985887b16ac
   */
  sha: string;
  /*
   * Name of the tag
   *
   * @example v0.0.1
   */
  tag: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  /*
   * URL for the tag
   *
   * @example https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac
   * @format uri
   */
  url: string;
  verification?: Verification;
};

/**
 * The hierarchy between files in a Git repository.
 */
export type GitTree = {
  sha: string;
  /*
   * Objects specifying a tree structure
   *
   * @example {"mode":"100644","path":"file.rb","properties":{"mode":{"type":"string"},"path":{"type":"string"},"sha":{"type":"string"},"size":{"type":"integer"},"type":{"type":"string"},"url":{"type":"string"}},"required":["path","mode","type","sha","url","size"],"sha":"44b4fc6d56897b048c772eb4087f854f46256132","size":30,"type":"blob","url":"https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132"}
   */
  tree: {
    /*
     * @example 040000
     */
    mode?: string;
    /*
     * @example test/file.rb
     */
    path?: string;
    /*
     * @example 23f6827669e43831def8a7ad935069c8bd418261
     */
    sha?: string;
    /*
     * @example 12
     */
    size?: number;
    /*
     * @example tree
     */
    type?: string;
    /*
     * @example https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261
     */
    url?: string;
  }[];
  truncated: boolean;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Metaproperties for Git author/committer information.
 */
export type GitUser = {
  /*
   * @example "2007-10-29T02:42:39.000-07:00"
   */
  date?: string;
  /*
   * @example "chris@ozmm.org"
   */
  email?: string;
  /*
   * @example "Chris Wanstrath"
   */
  name?: string;
};

/**
 * Gitignore Template
 */
export type GitignoreTemplate = {
  /*
   * @example C
   */
  name: string;
  /*
     * @example # Object files
    *.o
    
    # Libraries
    *.lib
    *.a
    
    # Shared objects (inc. Windows DLLs)
    *.dll
    *.so
    *.so.*
    *.dylib
    
    # Executables
    *.exe
    *.out
    *.app
     */
  source: string;
};

/**
 * A unique encryption key
 */
export type GpgKey = {
  /*
   * @example true
   */
  can_certify: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  /*
   * @example true
   */
  can_sign: boolean;
  /*
   * @example "2016-03-24T17:31:04.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example {"email":"mastahyeti@users.noreply.github.com","verified":true}
   */
  emails: {
    email?: string;
    verified?: boolean;
  }[];
  /*
   * @format date-time
   */
  expires_at: string | null;
  /*
   * @example 3
   */
  id: number;
  /*
   * @example 3262EFF25BA0D270
   */
  key_id: string;
  primary_key_id: number | null;
  /*
   * @example xsBNBFayYZ...
   */
  public_key: string;
  raw_key: string | null;
  /*
   * @example {"can_certify":false,"can_encrypt_comms":true,"can_encrypt_storage":true,"can_sign":false,"created_at":"2016-03-24T17:31:04.000Z","emails":[],"expires_at":null,"id":4,"key_id":"4A595D4C72EE49C7","primary_key_id":3,"public_key":"zsBNBFayYZ...","subkeys":[]}
   */
  subkeys: {
    can_certify?: boolean;
    can_encrypt_comms?: boolean;
    can_encrypt_storage?: boolean;
    can_sign?: boolean;
    created_at?: string;
    emails?: any[];
    expires_at?: string | null;
    id?: number;
    key_id?: string;
    primary_key_id?: number;
    public_key?: string;
    raw_key?: string | null;
    subkeys?: any[];
  }[];
};

/**
 * External Groups to be mapped to a team for membership
 */
export type GroupMapping = {
  /*
   * Array of groups to be mapped to this team
   *
   * @example {"group_description":"A group of Developers working on AzureAD SAML SSO","group_id":"111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa","group_name":"saml-azuread-test"}
   * @example {"group_description":"Another group of Developers working on AzureAD SAML SSO","group_id":"2bb2bb2b-bb22-22bb-2bb2-bb2bbb2bb2b2","group_name":"saml-azuread-test2"}
   */
  groups?: {
    /*
     * a description of the group
     *
     * @example A group of Developers working on AzureAD SAML SSO
     */
    group_description: string;
    /*
     * The ID of the group
     *
     * @example 111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa
     */
    group_id: string;
    /*
     * The name of the group
     *
     * @example saml-azuread-test
     */
    group_name: string;
    /*
     * synchronization status for this group mapping
     *
     * @example unsynced
     */
    status?: string;
    /*
     * the time of the last sync for this group-mapping
     *
     * @example 2019-06-03 22:27:15:000 -700
     */
    synced_at?: string;
  }[];
};

/**
 * Webhooks for repositories.
 */
export type Hook = {
  /*
   * Determines whether the hook is actually triggered on pushes.
   *
   * @example true
   */
  active: boolean;
  config: {
    content_type?: WebhookConfigContentType;
    /*
     * @example "sha256"
     */
    digest?: string;
    /*
     * @example "foo@bar.com"
     */
    email?: string;
    insecure_ssl?: WebhookConfigInsecureSsl;
    /*
     * @example "foo"
     */
    password?: string;
    /*
     * @example "roomer"
     */
    room?: string;
    secret?: WebhookConfigSecret;
    /*
     * @example "foo"
     */
    subdomain?: string;
    /*
     * @example "abc"
     */
    token?: string;
    url?: WebhookConfigUrl;
  };
  /*
   * @example "2011-09-06T17:26:27.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Determines what events the hook is triggered for. Default: ['push'].
   *
   * @example push
   * @example pull_request
   */
  events: string[];
  /*
   * Unique identifier of the webhook.
   *
   * @example 42
   */
  id: number;
  last_response: HookResponse;
  /*
   * The name of a valid service, use 'web' for a webhook.
   *
   * @example web
   */
  name: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/pings
   * @format uri
   */
  ping_url: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/test
   * @format uri
   */
  test_url: string;
  type: string;
  /*
   * @example "2011-09-06T20:39:23.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1
   * @format uri
   */
  url: string;
};

export type HookResponse = {
  code: number | null;
  message: string | null;
  status: string | null;
};

/**
 * Hovercard
 */
export type Hovercard = {
  contexts: {
    message: string;
    octicon: string;
  }[];
};

/**
 * A repository import from an external source.
 */
export type Import = {
  authors_count?: number | null;
  /*
   * @format uri
   */
  authors_url: string;
  commit_count?: number | null;
  error_message?: string | null;
  failed_step?: string | null;
  has_large_files?: boolean;
  /*
   * @format uri
   */
  html_url: string;
  import_percent?: number | null;
  large_files_count?: number;
  large_files_size?: number;
  message?: string;
  project_choices?: {
    human_name?: string;
    tfvc_project?: string;
    vcs?: string;
  }[];
  push_percent?: number | null;
  /*
   * @format uri
   */
  repository_url: string;
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth";
  status_text?: string | null;
  svc_root?: string;
  svn_root?: string;
  tfvc_project?: string;
  /*
   * @format uri
   */
  url: string;
  use_lfs?: string;
  vcs: string | null;
  /*
   * The URL of the originating repository.
   */
  vcs_url: string;
};

/**
 * Installation
 */
export type Installation = {
  /*
   * @example https://api.github.com/installations/1/access_tokens
   * @format uri
   */
  access_tokens_url: string;
  account: SimpleUser | Enterprise | null;
  /*
   * @example 1
   */
  app_id: number;
  /*
   * @example github-actions
   */
  app_slug: string;
  /*
   * @example "test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"
   */
  contact_email?: string | null;
  /*
   * @format date-time
   */
  created_at: string;
  events: string[];
  /*
   * @example true
   */
  has_multiple_single_files?: boolean;
  /*
   * @example https://github.com/organizations/github/settings/installations/1
   * @format uri
   */
  html_url: string;
  /*
   * The ID of the installation.
   *
   * @example 1
   */
  id: number;
  /*
   * @example {"deployments":"write","issues":"read"}
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    /*
     * @example "read"
     */
    issues?: string;
    metadata?: string;
    /*
     * @example "read"
     */
    organization_administration?: string;
    pull_requests?: string;
    statuses?: string;
  };
  /*
   * @example https://api.github.com/installation/repositories
   * @format uri
   */
  repositories_url: string;
  /*
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  /*
   * @example config.yaml
   */
  single_file_name: string | null;
  /*
   * @example config.yml
   * @example .github/issue_TEMPLATE.md
   */
  single_file_paths?: string[];
  /*
   * @format date-time
   */
  suspended_at?: string | null;
  /*
   * Simple User
   */
  suspended_by?: SimpleUser;
  /*
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  /*
   * @example Organization
   */
  target_type: string;
  /*
   * @format date-time
   */
  updated_at: string;
};

/**
 * Authentication token for a GitHub App installed on a user or org.
 */
export type InstallationToken = {
  expires_at: string;
  /*
   * @example true
   */
  has_multiple_single_files?: boolean;
  permissions?: {
    contents?: string;
    issues?: string;
    /*
     * @example read
     */
    metadata?: string;
    /*
     * @example read
     */
    single_file?: string;
  };
  repositories?: Repository[];
  repository_selection?: "all" | "selected";
  /*
   * @example README.md
   */
  single_file?: string;
  /*
   * @example config.yml
   * @example .github/issue_TEMPLATE.md
   */
  single_file_paths?: string[];
  token: string;
};

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type Integration = {
  /*
   * @example "Iv1.25b5d1e65ffc4022"
   */
  client_id?: string;
  /*
   * @example "1d4b2097ac622ba702d19de498f005747a8b21d3"
   */
  client_secret?: string;
  /*
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example The description of the app.
   */
  description: string | null;
  /*
   * The list of events for the GitHub app
   *
   * @example label
   * @example deployment
   */
  events: string[];
  /*
   * @example https://example.com
   * @format uri
   */
  external_url: string;
  /*
   * @example https://github.com/apps/super-ci
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the GitHub app
   *
   * @example 37
   */
  id: number;
  /*
   * The number of installations associated with the GitHub app
   *
   * @example 5
   */
  installations_count?: number;
  /*
   * The name of the GitHub app
   *
   * @example Probot Owners
   */
  name: string;
  /*
   * @example MDExOkludGVncmF0aW9uMQ==
   */
  node_id: string;
  /*
   * Simple User
   */
  owner: SimpleUser;
  /*
   * @example "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n"
   */
  pem?: string;
  /*
   * The set of permissions for the GitHub app
   *
   * @example {"deployments":"write","issues":"read"}
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    issues?: string;
    metadata?: string;
  } & {
    [key: string]: string;
  };
  /*
   * The slug name of the GitHub app
   *
   * @example probot-owners
   */
  slug?: string;
  /*
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"
   */
  webhook_secret?: string;
} & {
  [key: string]: any;
};

/**
 * The duration of the interaction restriction. Can be one of: `one_day`, `three_days`, `one_week`, `one_month`, `six_months`. Default: `one_day`.
 *
 * @example one_month
 */
export type InteractionExpiry =
  | "one_day"
  | "three_days"
  | "one_week"
  | "one_month"
  | "six_months";

/**
 * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: `existing_users`, `contributors_only`, `collaborators_only`.
 *
 * @example collaborators_only
 */
export type InteractionGroup =
  | "existing_users"
  | "contributors_only"
  | "collaborators_only";

/**
 * Limit interactions to a specific type of user for a specified duration
 */
export type InteractionLimit = {
  expiry?: InteractionExpiry;
  limit: InteractionGroup;
};

/**
 * Interaction limit settings.
 */
export type InteractionLimitResponse = {
  /*
   * @example "2018-08-17T04:18:39.000Z"
   * @format date-time
   */
  expires_at: string;
  limit: InteractionGroup;
  /*
   * @example repository
   */
  origin: string;
};

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type Issue = {
  active_lock_reason?: string | null;
  /*
   * Simple User
   */
  assignee: SimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  /*
   * Contents of the issue
   *
   * @example It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  /*
   * @format date-time
   */
  closed_at: string | null;
  /*
   * Simple User
   */
  closed_by?: SimpleUser;
  comments: number;
  /*
   * @format uri
   */
  comments_url: string;
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * @format uri
   */
  events_url: string;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  /*
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   *
   * @example bug
   * @example registration
   */
  labels: (
    | string
    | {
        color?: string | null;
        ["default"]?: boolean;
        description?: string | null;
        id?: number;
        name?: string;
        node_id?: string;
        /*
         * @format uri
         */
        url?: string;
      }
  )[];
  labels_url: string;
  locked: boolean;
  /*
   * A collection of related issues and pull requests.
   */
  milestone: Milestone;
  node_id: string;
  /*
   * Number uniquely identifying the issue within its repository
   *
   * @example 42
   */
  number: number;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  pull_request?: {
    /*
     * @format uri
     */
    diff_url: string | null;
    /*
     * @format uri
     */
    html_url: string | null;
    /*
     * @format date-time
     */
    merged_at?: string | null;
    /*
     * @format uri
     */
    patch_url: string | null;
    /*
     * @format uri
     */
    url: string | null;
  };
  reactions?: ReactionRollup;
  repository?: Repository;
  /*
   * @format uri
   */
  repository_url: string;
  /*
   * State of the issue; either 'open' or 'closed'
   *
   * @example open
   */
  state: string;
  /*
   * @format uri
   */
  timeline_url?: string;
  /*
   * Title of the issue
   *
   * @example Widget creation fails in Safari on OS X 10.8
   */
  title: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * URL for the issue
   *
   * @example https://api.github.com/repositories/42/issues/1
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Comments provide a way for people to collaborate on an issue.
 */
export type IssueComment = {
  author_association: AuthorAssociation;
  /*
   * Contents of the issue comment
   *
   * @example What version of Safari were you using when you observed this bug?
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the issue comment
   *
   * @example 42
   */
  id: number;
  /*
   * @format uri
   */
  issue_url: string;
  node_id: string;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  reactions?: ReactionRollup;
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * URL for the issue comment
   *
   * @example https://api.github.com/repositories/42/issues/comments/1
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Issue Event
 */
export type IssueEvent = {
  /*
   * Simple User
   */
  actor: SimpleUser;
  /*
   * Simple User
   */
  assignee?: SimpleUser;
  /*
   * Simple User
   */
  assigner?: SimpleUser;
  author_association?: AuthorAssociation;
  /*
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_url: string | null;
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  dismissed_review?: IssueEventDismissedReview;
  /*
   * @example closed
   */
  event: string;
  /*
   * @example 1
   */
  id: number;
  issue?: IssueSimple;
  label?: IssueEventLabel;
  lock_reason?: string | null;
  milestone?: IssueEventMilestone;
  /*
   * @example MDEwOklzc3VlRXZlbnQx
   */
  node_id: string;
  project_card?: IssueEventProjectCard;
  rename?: IssueEventRename;
  /*
   * Simple User
   */
  requested_reviewer?: SimpleUser;
  requested_team?: Team;
  /*
   * Simple User
   */
  review_requester?: SimpleUser;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/events/1
   * @format uri
   */
  url: string;
};

export type IssueEventDismissedReview = {
  dismissal_commit_id?: string | null;
  dismissal_message: string | null;
  review_id: number;
  state: string;
};

/**
 * Issue Event for Issue
 */
export type IssueEventForIssue = {
  actor?: SimpleUser;
  author_association?: AuthorAssociation;
  /*
   * @example ":+1:"
   */
  body?: string;
  /*
   * @example "<p>Accusantium fugiat cumque. Autem qui nostrum. Atque quae ullam.</p>"
   */
  body_html?: string;
  /*
   * @example "Accusantium fugiat cumque. Autem qui nostrum. Atque quae ullam."
   */
  body_text?: string;
  commit_id?: string | null;
  commit_url?: string | null;
  created_at?: string;
  event?: string;
  /*
   * @example "https://github.com/owner-3906e11a33a3d55ba449d63f/BBB_Private_Repo/commit/480d4f47447129f015cb327536c522ca683939a1"
   */
  html_url?: string;
  id?: number;
  /*
   * @example "https://api.github.com/repos/owner-3906e11a33a3d55ba449d63f/AAA_Public_Repo/issues/1"
   */
  issue_url?: string;
  /*
   * @example "off-topic"
   */
  lock_reason?: string;
  /*
   * @example "add a bunch of files"
   */
  message?: string;
  node_id?: string;
  /*
   * @example "https://api.github.com/repos/owner-3906e11a33a3d55ba449d63f/AAA_Public_Repo/pulls/2"
   */
  pull_request_url?: string;
  /*
   * @example "480d4f47447129f015cb327536c522ca683939a1"
   */
  sha?: string;
  /*
   * @example "commented"
   */
  state?: string;
  /*
   * @example "2020-07-09T00:17:51Z"
   */
  submitted_at?: string;
  /*
   * @example "2020-07-09T00:17:36Z"
   */
  updated_at?: string;
  url?: string;
};

/**
 * Issue Event Label
 */
export type IssueEventLabel = {
  color: string | null;
  name: string | null;
};

/**
 * Issue Event Milestone
 */
export type IssueEventMilestone = {
  title: string;
};

/**
 * Issue Event Project Card
 */
export type IssueEventProjectCard = {
  column_name: string;
  id: number;
  previous_column_name?: string;
  project_id: number;
  /*
   * @format uri
   */
  project_url: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Issue Event Rename
 */
export type IssueEventRename = {
  from: string;
  to: string;
};

/**
 * Issue Search Result Item
 */
export type IssueSearchResultItem = {
  active_lock_reason?: string | null;
  /*
   * Simple User
   */
  assignee: SimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  body?: string;
  body_html?: string;
  body_text?: string;
  /*
   * @format date-time
   */
  closed_at: string | null;
  comments: number;
  /*
   * @format uri
   */
  comments_url: string;
  /*
   * @format date-time
   */
  created_at: string;
  draft?: boolean;
  /*
   * @format uri
   */
  events_url: string;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  labels: {
    color?: string;
    ["default"]?: boolean;
    description?: string | null;
    id?: number;
    name?: string;
    node_id?: string;
    url?: string;
  }[];
  labels_url: string;
  locked: boolean;
  /*
   * A collection of related issues and pull requests.
   */
  milestone: Milestone;
  node_id: string;
  number: number;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  pull_request?: {
    /*
     * @format uri
     */
    diff_url: string | null;
    /*
     * @format uri
     */
    html_url: string | null;
    /*
     * @format date-time
     */
    merged_at?: string | null;
    /*
     * @format uri
     */
    patch_url: string | null;
    /*
     * @format uri
     */
    url: string | null;
  };
  repository?: Repository;
  /*
   * @format uri
   */
  repository_url: string;
  score: number;
  state: string;
  text_matches?: SearchResultTextMatches;
  /*
   * @format uri
   */
  timeline_url?: string;
  title: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Issue Simple
 */
export type IssueSimple = {
  /*
   * @example too heated
   */
  active_lock_reason?: string | null;
  /*
   * Simple User
   */
  assignee: SimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  /*
   * @example I'm having a problem with this.
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  /*
   * @format date-time
   */
  closed_at: string | null;
  /*
   * @example 0
   */
  comments: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
   * @format uri
   */
  comments_url: string;
  /*
   * @example "2011-04-22T13:33:48.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/events
   * @format uri
   */
  events_url: string;
  /*
   * @example https://github.com/octocat/Hello-World/issues/1347
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  labels: Label[];
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}
   */
  labels_url: string;
  /*
   * @example true
   */
  locked: boolean;
  /*
   * A collection of related issues and pull requests.
   */
  milestone: Milestone;
  /*
   * @example MDU6SXNzdWUx
   */
  node_id: string;
  /*
   * @example 1347
   */
  number: number;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  pull_request?: {
    /*
     * @format uri
     */
    diff_url: string | null;
    /*
     * @format uri
     */
    html_url: string | null;
    /*
     * @format date-time
     */
    merged_at?: string | null;
    /*
     * @format uri
     */
    patch_url: string | null;
    /*
     * @format uri
     */
    url: string | null;
  };
  repository?: Repository;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  repository_url: string;
  /*
   * @example open
   */
  state: string;
  /*
   * @format uri
   */
  timeline_url?: string;
  /*
   * @example Found a bug
   */
  title: string;
  /*
   * @example "2011-04-22T13:33:48.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Information of a job execution in a workflow run
 */
export type Job = {
  /*
   * @example https://api.github.com/repos/github/hello-world/check-runs/4
   */
  check_run_url: string;
  /*
   * The time that the job finished, in ISO 8601 format.
   *
   * @example "2019-08-08T15:00:00.000Z"
   * @format date-time
   */
  completed_at: string | null;
  /*
   * The outcome of the job.
   *
   * @example success
   */
  conclusion: string | null;
  /*
   * The SHA of the commit that is being run.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /*
   * @example https://github.com/github/hello-world/runs/4
   */
  html_url: string | null;
  /*
   * The id of the job.
   *
   * @example 21
   */
  id: number;
  /*
   * The name of the job.
   *
   * @example test-coverage
   */
  name: string;
  /*
   * @example MDg6Q2hlY2tSdW40
   */
  node_id: string;
  /*
   * The id of the associated workflow run.
   *
   * @example 5
   */
  run_id: number;
  /*
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5
   */
  run_url: string;
  /*
   * The time that the job started, in ISO 8601 format.
   *
   * @example "2019-08-08T15:00:00.000Z"
   * @format date-time
   */
  started_at: string;
  /*
   * The phase of the lifecycle that the job is currently in.
   *
   * @example queued
   */
  status: "queued" | "in_progress" | "completed";
  /*
   * Steps in this job.
   */
  steps?: {
    /*
     * The time that the job finished, in ISO 8601 format.
     *
     * @example "2019-08-08T15:00:00.000Z"
     * @format date-time
     */
    completed_at?: string | null;
    /*
     * The outcome of the job.
     *
     * @example success
     */
    conclusion: string | null;
    /*
     * The name of the job.
     *
     * @example test-coverage
     */
    name: string;
    /*
     * @example 1
     */
    number: number;
    /*
     * The time that the step started, in ISO 8601 format.
     *
     * @example "2019-08-08T15:00:00.000Z"
     * @format date-time
     */
    started_at?: string | null;
    /*
     * The phase of the lifecycle that the job is currently in.
     *
     * @example queued
     */
    status: "queued" | "in_progress" | "completed";
  }[];
  /*
   * @example https://api.github.com/repos/github/hello-world/actions/jobs/21
   */
  url: string;
};

/**
 * Key
 */
export type Key = {
  /*
   * @format date-time
   */
  created_at: string;
  id: number;
  key: string;
  key_id: string;
  read_only: boolean;
  title: string;
  url: string;
  verified: boolean;
};

/**
 * Key Simple
 */
export type KeySimple = {
  id: number;
  key: string;
};

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export type Label = {
  /*
   * 6-character hex code, without the leading #, identifying the color
   *
   * @example FFFFFF
   */
  color: string;
  /*
   * @example true
   */
  ["default"]: boolean;
  /*
   * @example Something isn't working
   */
  description: string | null;
  /*
   * @example 208045946
   */
  id: number;
  /*
   * The name of the label.
   *
   * @example bug
   */
  name: string;
  /*
   * @example MDU6TGFiZWwyMDgwNDU5NDY=
   */
  node_id: string;
  /*
   * URL for the label
   *
   * @example https://api.github.com/repositories/42/labels/bug
   * @format uri
   */
  url: string;
};

/**
 * Label Search Result Item
 */
export type LabelSearchResultItem = {
  color: string;
  ["default"]: boolean;
  description: string | null;
  id: number;
  name: string;
  node_id: string;
  score: number;
  text_matches?: SearchResultTextMatches;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Language
 */
export type Language = {
  [key: string]: number;
};

/**
 * License
 */
export type License = {
  /*
     * @example
    
    The MIT License (MIT)
    
    Copyright (c) [year] [fullname]
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
     */
  body: string;
  /*
   * @example include-copyright
   */
  conditions: string[];
  /*
   * @example A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.
   */
  description: string;
  /*
   * @example true
   */
  featured: boolean;
  /*
   * @example http://choosealicense.com/licenses/mit/
   * @format uri
   */
  html_url: string;
  /*
   * @example Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.
   */
  implementation: string;
  /*
   * @example mit
   */
  key: string;
  /*
   * @example no-liability
   */
  limitations: string[];
  /*
   * @example MIT License
   */
  name: string;
  /*
   * @example MDc6TGljZW5zZW1pdA==
   */
  node_id: string;
  /*
   * @example commercial-use
   * @example modifications
   * @example distribution
   * @example sublicense
   * @example private-use
   */
  permissions: string[];
  /*
   * @example MIT
   */
  spdx_id: string | null;
  /*
   * @example https://api.github.com/licenses/mit
   * @format uri
   */
  url: string | null;
};

/**
 * License Content
 */
export type LicenseContent = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  content: string;
  /*
   * @format uri
   */
  download_url: string | null;
  encoding: string;
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  /*
   * License Simple
   */
  license: LicenseSimple;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * License Simple
 */
export type LicenseSimple = {
  /*
   * @format uri
   */
  html_url?: string;
  /*
   * @example mit
   */
  key: string;
  /*
   * @example MIT License
   */
  name: string;
  /*
   * @example MDc6TGljZW5zZW1pdA==
   */
  node_id: string;
  /*
   * @example MIT
   */
  spdx_id: string | null;
  /*
   * @example https://api.github.com/licenses/mit
   * @format uri
   */
  url: string | null;
};

/**
 * Hypermedia Link
 */
export type Link = {
  href: string;
};

/**
 * Hypermedia Link with Type
 */
export type LinkWithType = {
  href: string;
  type: string;
};

export type MarketplaceAccount = {
  /*
   * @format email
   */
  email?: string | null;
  id: number;
  login: string;
  node_id?: string;
  /*
   * @format email
   */
  organization_billing_email?: string | null;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Marketplace Listing Plan
 */
export type MarketplaceListingPlan = {
  /*
   * @example https://api.github.com/marketplace_listing/plans/1313/accounts
   * @format uri
   */
  accounts_url: string;
  /*
   * @example Up to 25 private repositories
   * @example 11 concurrent builds
   */
  bullets: string[];
  /*
   * @example A professional-grade CI solution
   */
  description: string;
  /*
   * @example true
   */
  has_free_trial: boolean;
  /*
   * @example 1313
   */
  id: number;
  /*
   * @example 1099
   */
  monthly_price_in_cents: number;
  /*
   * @example Pro
   */
  name: string;
  /*
   * @example 3
   */
  number: number;
  /*
   * @example flat-rate
   */
  price_model: string;
  /*
   * @example published
   */
  state: string;
  unit_name: string | null;
  /*
   * @example https://api.github.com/marketplace_listing/plans/1313
   * @format uri
   */
  url: string;
  /*
   * @example 11870
   */
  yearly_price_in_cents: number;
};

/**
 * Marketplace Purchase
 */
export type MarketplacePurchase = {
  id: number;
  login: string;
  marketplace_pending_change?: {
    effective_date?: string;
    id?: number;
    is_installed?: boolean;
    plan?: MarketplaceListingPlan;
    unit_count?: number | null;
  } | null;
  marketplace_purchase: {
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    is_installed?: boolean;
    next_billing_date?: string | null;
    on_free_trial?: boolean;
    plan?: MarketplaceListingPlan;
    unit_count?: number | null;
    updated_at?: string;
  };
  organization_billing_email?: string;
  type: string;
  url: string;
};

/**
 * A migration.
 */
export type Migration = {
  /*
   * @format uri
   */
  archive_url?: string;
  /*
   * @example "2015-07-06T22:33:38.000Z"
   * @format date-time
   */
  created_at: string;
  exclude?: any[];
  exclude_attachments: boolean;
  /*
   * @example 0b989ba4-242f-11e5-81e1-c7b6966d2516
   */
  guid: string;
  /*
   * @example 79
   */
  id: number;
  /*
   * @example true
   */
  lock_repositories: boolean;
  node_id: string;
  /*
   * Simple User
   */
  owner: SimpleUser;
  repositories: Repository[];
  /*
   * @example pending
   */
  state: string;
  /*
   * @example "2015-07-06T22:33:38.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/orgs/octo-org/migrations/79
   * @format uri
   */
  url: string;
};

/**
 * A collection of related issues and pull requests.
 */
export type Milestone = {
  /*
   * @example "2013-02-12T13:22:01.000Z"
   * @format date-time
   */
  closed_at: string | null;
  /*
   * @example 8
   */
  closed_issues: number;
  /*
   * @example "2011-04-10T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Simple User
   */
  creator: SimpleUser;
  /*
   * @example Tracking milestone for version 1.0
   */
  description: string | null;
  /*
   * @example "2012-10-09T23:39:01.000Z"
   * @format date-time
   */
  due_on: string | null;
  /*
   * @example https://github.com/octocat/Hello-World/milestones/v1.0
   * @format uri
   */
  html_url: string;
  /*
   * @example 1002604
   */
  id: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
   * @format uri
   */
  labels_url: string;
  /*
   * @example MDk6TWlsZXN0b25lMTAwMjYwNA==
   */
  node_id: string;
  /*
   * The number of the milestone.
   *
   * @example 42
   */
  number: number;
  /*
   * @example 4
   */
  open_issues: number;
  /*
   * The state of the milestone.
   *
   * @default open
   * @example open
   */
  state: "open" | "closed";
  /*
   * The title of the milestone.
   *
   * @example v1.0
   */
  title: string;
  /*
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1
   * @format uri
   */
  url: string;
};

/**
 * Minimal Repository
 */
export type MinimalRepository = {
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  archived?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  clone_url?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at?: string | null;
  default_branch?: string;
  delete_branch_on_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /*
   * @example This your first repo!
   */
  description: string | null;
  disabled?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  /*
   * @example 0
   */
  forks?: number;
  forks_count?: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /*
   * @example octocat/Hello-World
   */
  full_name: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  git_url?: string;
  has_downloads?: boolean;
  has_issues?: boolean;
  has_pages?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  homepage?: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /*
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /*
   * @example 1296269
   */
  id: number;
  is_template?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language?: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  license?: {
    key?: string;
    name?: string;
    node_id?: string;
    spdx_id?: string;
    url?: string;
  } | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  mirror_url?: string | null;
  /*
   * @example Hello-World
   */
  name: string;
  network_count?: number;
  /*
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  /*
   * @example 0
   */
  open_issues?: number;
  open_issues_count?: number;
  /*
   * Simple User
   */
  owner: SimpleUser;
  permissions?: {
    admin?: boolean;
    pull?: boolean;
    push?: boolean;
  };
  private: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /*
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at?: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  size?: number;
  ssh_url?: string;
  stargazers_count?: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  subscribers_count?: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  svn_url?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  /*
   * A git repository
   */
  template_repository?: Repository;
  topics?: string[];
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /*
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at?: string | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  visibility?: string;
  /*
   * @example 0
   */
  watchers?: number;
  watchers_count?: number;
};

/**
 * Org Hook
 */
export type OrgHook = {
  /*
   * @example true
   */
  active: boolean;
  config: {
    /*
     * @example "form"
     */
    content_type?: string;
    /*
     * @example "0"
     */
    insecure_ssl?: string;
    /*
     * @example "********"
     */
    secret?: string;
    /*
     * @example "http://example.com/2"
     */
    url?: string;
  };
  /*
   * @example "2011-09-06T17:26:27.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example push
   * @example pull_request
   */
  events: string[];
  /*
   * @example 1
   */
  id: number;
  /*
   * @example web
   */
  name: string;
  /*
   * @example https://api.github.com/orgs/octocat/hooks/1/pings
   * @format uri
   */
  ping_url: string;
  type: string;
  /*
   * @example "2011-09-06T20:39:23.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/orgs/octocat/hooks/1
   * @format uri
   */
  url: string;
};

/**
 * Org Membership
 */
export type OrgMembership = {
  organization: OrganizationSimple;
  /*
   * @example https://api.github.com/orgs/octocat
   * @format uri
   */
  organization_url: string;
  permissions?: {
    can_create_repository: boolean;
  };
  /*
   * @example admin
   */
  role: string;
  /*
   * @example active
   */
  state: string;
  /*
   * @example https://api.github.com/orgs/octocat/memberships/defunkt
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Secrets for GitHub Actions for an organization.
 */
export type OrganizationActionsSecret = {
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * The name of the secret.
   *
   * @example SECRET_TOKEN
   */
  name: string;
  /*
   * @example https://api.github.com/organizations/org/secrets/my_secret/repositories
   * @format uri
   */
  selected_repositories_url?: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * Visibility of a secret
   */
  visibility: "all" | "private" | "selected";
};

/**
 * Organization Full
 */
export type OrganizationFull = {
  /*
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;
  /*
   * @example org@example.com
   * @format email
   */
  billing_email?: string | null;
  /*
   * @example https://github.com/blog
   * @format uri
   */
  blog?: string;
  /*
   * @example 8
   */
  collaborators?: number | null;
  /*
   * @example GitHub
   */
  company?: string;
  /*
   * @example "2008-01-14T04:33:35.000Z"
   * @format date-time
   */
  created_at: string;
  default_repository_permission?: string | null;
  /*
   * @example A great organization
   */
  description: string | null;
  /*
   * @example 10000
   */
  disk_usage?: number | null;
  /*
   * @example octocat@github.com
   * @format email
   */
  email?: string;
  /*
   * @example https://api.github.com/orgs/github/events
   * @format uri
   */
  events_url: string;
  /*
   * @example 20
   */
  followers: number;
  /*
   * @example 0
   */
  following: number;
  /*
   * @example true
   */
  has_organization_projects: boolean;
  /*
   * @example true
   */
  has_repository_projects: boolean;
  /*
   * @example https://api.github.com/orgs/github/hooks
   */
  hooks_url: string;
  /*
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example true
   */
  is_verified?: boolean;
  /*
   * @example https://api.github.com/orgs/github/issues
   */
  issues_url: string;
  /*
   * @example San Francisco
   */
  location?: string;
  /*
   * @example github
   */
  login: string;
  /*
   * @example all
   */
  members_allowed_repository_creation_type?: string;
  /*
   * @example true
   */
  members_can_create_internal_repositories?: boolean;
  /*
   * @example true
   */
  members_can_create_pages?: boolean;
  /*
   * @example true
   */
  members_can_create_private_repositories?: boolean;
  /*
   * @example true
   */
  members_can_create_public_repositories?: boolean;
  /*
   * @example true
   */
  members_can_create_repositories?: boolean | null;
  /*
   * @example https://api.github.com/orgs/github/members{/member}
   */
  members_url: string;
  /*
   * @example github
   */
  name?: string;
  /*
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;
  /*
   * @example 100
   */
  owned_private_repos?: number;
  plan?: {
    filled_seats?: number;
    name: string;
    private_repos: number;
    seats?: number;
    space: number;
  };
  /*
   * @example 81
   */
  private_gists?: number | null;
  /*
   * @example 1
   */
  public_gists: number;
  /*
   * @example https://api.github.com/orgs/github/public_members{/member}
   */
  public_members_url: string;
  /*
   * @example 2
   */
  public_repos: number;
  /*
   * @example https://api.github.com/orgs/github/repos
   * @format uri
   */
  repos_url: string;
  /*
   * @example 100
   */
  total_private_repos?: number;
  /*
   * @example github
   */
  twitter_username?: string | null;
  /*
   * @example true
   */
  two_factor_requirement_enabled?: boolean | null;
  /*
   * @example Organization
   */
  type: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/orgs/github
   * @format uri
   */
  url: string;
};

/**
 * Organization Invitation
 */
export type OrganizationInvitation = {
  created_at: string;
  email: string | null;
  failed_at?: string;
  failed_reason?: string;
  id: number;
  invitation_team_url: string;
  /*
   * @example "https://api.github.com/organizations/16/invitations/1/teams"
   */
  invitation_teams_url?: string;
  inviter: SimpleUser;
  login: string | null;
  /*
   * @example "MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"
   */
  node_id: string;
  role: string;
  team_count: number;
};

/**
 * Organization Simple
 */
export type OrganizationSimple = {
  /*
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;
  /*
   * @example A great organization
   */
  description: string | null;
  /*
   * @example https://api.github.com/orgs/github/events
   * @format uri
   */
  events_url: string;
  /*
   * @example https://api.github.com/orgs/github/hooks
   */
  hooks_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example https://api.github.com/orgs/github/issues
   */
  issues_url: string;
  /*
   * @example github
   */
  login: string;
  /*
   * @example https://api.github.com/orgs/github/members{/member}
   */
  members_url: string;
  /*
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;
  /*
   * @example https://api.github.com/orgs/github/public_members{/member}
   */
  public_members_url: string;
  /*
   * @example https://api.github.com/orgs/github/repos
   * @format uri
   */
  repos_url: string;
  /*
   * @example https://api.github.com/orgs/github
   * @format uri
   */
  url: string;
};

/**
 * A software package
 */
export type Package = {
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * @example https://github.com/orgs/github/packages/container/package/super-linter
   */
  html_url: string;
  /*
   * Unique identifier of the package.
   *
   * @example 1
   */
  id: number;
  /*
   * The name of the package.
   *
   * @example super-linter
   */
  name: string;
  /*
   * Simple User
   */
  owner?: SimpleUser;
  /*
   * @example docker
   */
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * Minimal Repository
   */
  repository?: MinimalRepository;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/orgs/github/packages/container/super-linter
   */
  url: string;
  /*
   * The number of versions of the package.
   *
   * @example 1
   */
  version_count: number;
  /*
   * @example private
   */
  visibility: "private" | "public";
};

/**
 * A version of a software package
 */
export type PackageVersion = {
  /*
   * @example "2011-04-10T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  deleted_at?: string;
  description?: string;
  /*
   * @example https://github.com/orgs/github/packages/container/super-linter/786068
   */
  html_url?: string;
  /*
   * Unique identifier of the package version.
   *
   * @example 1
   */
  id: number;
  /*
   * @example MIT
   */
  license?: string;
  metadata?: {
    container?: {
      tags: any[];
    };
    docker?: {
      tag?: any[];
    };
    /*
     * @example docker
     */
    package_type:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container";
  };
  /*
   * The name of the package version.
   *
   * @example latest
   */
  name: string;
  /*
   * @example https://github.com/orgs/github/packages/container/package/super-linter
   */
  package_html_url: string;
  /*
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/orgs/github/packages/container/super-linter/versions/786068
   */
  url: string;
};

export type PackagesBillingUsage = {
  /*
   * Free storage space (GB) for GitHub Packages.
   */
  included_gigabytes_bandwidth: number;
  /*
   * Sum of the free and paid storage space (GB) for GitHuub Packages.
   */
  total_gigabytes_bandwidth_used: number;
  /*
   * Total paid storage space (GB) for GitHuub Packages.
   */
  total_paid_gigabytes_bandwidth_used: number;
};

/**
 * The configuration for GitHub Pages for a repository.
 */
export type Page = {
  /*
   * The Pages site's custom domain
   *
   * @example example.com
   */
  cname: string | null;
  /*
   * Whether the Page has a custom 404 page.
   *
   * @default false
   * @example false
   */
  custom_404: boolean;
  /*
   * The web address the Page can be accessed from.
   *
   * @example https://example.com
   * @format uri
   */
  html_url?: string;
  /*
   * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
   *
   * @example true
   */
  public: boolean;
  source?: PagesSourceHash;
  /*
   * The status of the most recent build of the Page.
   *
   * @example built
   */
  status: "built" | "building" | "errored";
  /*
   * The API address for accessing this Page resource.
   *
   * @example https://api.github.com/repos/github/hello-world/pages
   * @format uri
   */
  url: string;
};

/**
 * Page Build
 */
export type PageBuild = {
  commit: string;
  /*
   * @format date-time
   */
  created_at: string;
  duration: number;
  error: {
    message: string | null;
  };
  /*
   * Simple User
   */
  pusher: SimpleUser;
  status: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Page Build Status
 */
export type PageBuildStatus = {
  /*
   * @example queued
   */
  status: string;
  /*
   * @example https://api.github.com/repos/github/hello-world/pages/builds/latest
   * @format uri
   */
  url: string;
};

export type PagesSourceHash = {
  branch: string;
  path: string;
};

export type ParticipationStats = {
  all: number[];
  owner: number[];
};

/**
 * Details of a deployment that is waiting for protection rules to pass
 */
export type PendingDeployment = {
  /*
   * Whether the currently authenticated user can approve the deployment
   *
   * @example true
   */
  current_user_can_approve: boolean;
  environment: {
    /*
     * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
     */
    html_url?: string;
    /*
     * The id of the environment.
     *
     * @example 56780428
     */
    id?: number;
    /*
     * The name of the environment.
     *
     * @example staging
     */
    name?: string;
    /*
     * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
     */
    node_id?: string;
    /*
     * @example https://api.github.com/repos/github/hello-world/environments/staging
     */
    url?: string;
  };
  /*
   * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   */
  reviewers: {
    reviewer?: SimpleUser | TeamSimple;
    type?: DeploymentReviewerType;
  }[];
  /*
   * The set duration of the wait timer
   *
   * @example 30
   */
  wait_timer: number;
  /*
   * The time that the wait timer began.
   *
   * @example "2020-11-23T22:00:40.000Z"
   * @format date-time
   */
  wait_timer_started_at: string | null;
};

/**
 * Porter Author
 */
export type PorterAuthor = {
  email: string;
  id: number;
  /*
   * @format uri
   */
  import_url: string;
  name: string;
  remote_id: string;
  remote_name: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Porter Large File
 */
export type PorterLargeFile = {
  oid: string;
  path: string;
  ref_name: string;
  size: number;
};

/**
 * Private User
 */
export type PrivateUser = {
  /*
   * @example https://github.com/images/error/octocat_happy.gif
   * @format uri
   */
  avatar_url: string;
  /*
   * @example There once was...
   */
  bio: string | null;
  /*
   * @example https://github.com/blog
   */
  blog: string | null;
  business_plus?: boolean;
  /*
   * @example 8
   */
  collaborators: number;
  /*
   * @example GitHub
   */
  company: string | null;
  /*
   * @example "2008-01-14T04:33:35.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example 10000
   */
  disk_usage: number;
  /*
   * @example octocat@github.com
   * @format email
   */
  email: string | null;
  /*
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;
  /*
   * @example 20
   */
  followers: number;
  /*
   * @example https://api.github.com/users/octocat/followers
   * @format uri
   */
  followers_url: string;
  /*
   * @example 0
   */
  following: number;
  /*
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;
  /*
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;
  /*
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;
  hireable: boolean | null;
  /*
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  ldap_dn?: string;
  /*
   * @example San Francisco
   */
  location: string | null;
  /*
   * @example octocat
   */
  login: string;
  /*
   * @example monalisa octocat
   */
  name: string | null;
  /*
   * @example MDQ6VXNlcjE=
   */
  node_id: string;
  /*
   * @example https://api.github.com/users/octocat/orgs
   * @format uri
   */
  organizations_url: string;
  /*
   * @example 100
   */
  owned_private_repos: number;
  plan?: {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  /*
   * @example 81
   */
  private_gists: number;
  /*
   * @example 1
   */
  public_gists: number;
  /*
   * @example 2
   */
  public_repos: number;
  /*
   * @example https://api.github.com/users/octocat/received_events
   * @format uri
   */
  received_events_url: string;
  /*
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  /*
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;
  /*
   * @example https://api.github.com/users/octocat/subscriptions
   * @format uri
   */
  subscriptions_url: string;
  /*
   * @format date-time
   */
  suspended_at?: string | null;
  /*
   * @example 100
   */
  total_private_repos: number;
  /*
   * @example monalisa
   */
  twitter_username?: string | null;
  /*
   * @example true
   */
  two_factor_authentication: boolean;
  /*
   * @example User
   */
  type: string;
  /*
   * @example "2008-01-14T04:33:35.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/users/octocat
   * @format uri
   */
  url: string;
};

/**
 * Projects are a way to organize columns and cards of work.
 */
export type Project = {
  /*
   * Body of the project
   *
   * @example This project represents the sprint of the first week in January
   */
  body: string | null;
  /*
   * @example https://api.github.com/projects/1002604/columns
   * @format uri
   */
  columns_url: string;
  /*
   * @example "2011-04-10T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Simple User
   */
  creator: SimpleUser;
  /*
   * @example https://github.com/api-playground/projects-test/projects/12
   * @format uri
   */
  html_url: string;
  /*
   * @example 1002604
   */
  id: number;
  /*
   * Name of the project
   *
   * @example Week One Sprint
   */
  name: string;
  /*
   * @example MDc6UHJvamVjdDEwMDI2MDQ=
   */
  node_id: string;
  /*
   * @example 1
   */
  number: number;
  /*
   * The baseline permission that all organization members have on this project. Only present if owner is an organization.
   */
  organization_permission?: "read" | "write" | "admin" | "none";
  /*
   * @example https://api.github.com/repos/api-playground/projects-test
   * @format uri
   */
  owner_url: string;
  /*
   * Whether or not this project can be seen by everyone. Only present if owner is an organization.
   */
  private?: boolean;
  /*
   * State of the project; either 'open' or 'closed'
   *
   * @example open
   */
  state: string;
  /*
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/projects/1002604
   * @format uri
   */
  url: string;
};

/**
 * Project cards represent a scope of work.
 */
export type ProjectCard = {
  /*
   * Whether or not the card is archived
   *
   * @example false
   */
  archived?: boolean;
  /*
   * @example https://api.github.com/projects/columns/367
   * @format uri
   */
  column_url: string;
  /*
   * @example https://api.github.com/repos/api-playground/projects-test/issues/3
   * @format uri
   */
  content_url?: string;
  /*
   * @example "2016-09-05T14:21:06.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Simple User
   */
  creator: SimpleUser;
  /*
   * The project card's ID
   *
   * @example 42
   */
  id: number;
  /*
   * @example MDExOlByb2plY3RDYXJkMTQ3OA==
   */
  node_id: string;
  /*
   * @example Add payload for delete Project column
   */
  note: string | null;
  /*
   * @example https://api.github.com/projects/120
   * @format uri
   */
  project_url: string;
  /*
   * @example "2016-09-05T14:20:22.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/projects/columns/cards/1478
   * @format uri
   */
  url: string;
};

/**
 * Project columns contain cards of work.
 */
export type ProjectColumn = {
  /*
   * @example https://api.github.com/projects/columns/367/cards
   * @format uri
   */
  cards_url: string;
  /*
   * @example "2016-09-05T14:18:44.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * The unique identifier of the project column
   *
   * @example 42
   */
  id: number;
  /*
   * Name of the project column
   *
   * @example Remaining tasks
   */
  name: string;
  /*
   * @example MDEzOlByb2plY3RDb2x1bW4zNjc=
   */
  node_id: string;
  /*
   * @example https://api.github.com/projects/120
   * @format uri
   */
  project_url: string;
  /*
   * @example "2016-09-05T14:22:28.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/projects/columns/367
   * @format uri
   */
  url: string;
};

/**
 * Branch protections protect branches
 */
export type ProtectedBranch = {
  allow_deletions?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  enforce_admins?: {
    enabled: boolean;
    /*
     * @format uri
     */
    url: string;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  required_pull_request_reviews?: {
    dismiss_stale_reviews?: boolean;
    dismissal_restrictions?: {
      teams: Team[];
      /*
       * @format uri
       */
      teams_url: string;
      /*
       * @format uri
       */
      url: string;
      users: SimpleUser[];
      /*
       * @format uri
       */
      users_url: string;
    };
    require_code_owner_reviews?: boolean;
    required_approving_review_count?: number;
    /*
     * @format uri
     */
    url: string;
  };
  required_signatures?: {
    /*
     * @example true
     */
    enabled: boolean;
    /*
     * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
     * @format uri
     */
    url: string;
  };
  required_status_checks?: StatusCheckPolicy;
  restrictions?: BranchRestrictionPolicy;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Protected Branch Admin Enforced
 */
export type ProtectedBranchAdminEnforced = {
  /*
   * @example true
   */
  enabled: boolean;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins
   * @format uri
   */
  url: string;
};

/**
 * Protected Branch Pull Request Review
 */
export type ProtectedBranchPullRequestReview = {
  /*
   * @example true
   */
  dismiss_stale_reviews: boolean;
  dismissal_restrictions?: {
    /*
     * The list of teams with review dismissal access.
     */
    teams?: Team[];
    /*
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"
     */
    teams_url?: string;
    /*
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"
     */
    url?: string;
    /*
     * The list of users with review dismissal access.
     */
    users?: SimpleUser[];
    /*
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"
     */
    users_url?: string;
  };
  /*
   * @example true
   */
  require_code_owner_reviews: boolean;
  /*
   * @example 2
   * @maximum 6
   * @minimum 1
   */
  required_approving_review_count?: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions
   * @format uri
   */
  url?: string;
};

/**
 * Public User
 */
export type PublicUser = {
  /*
   * @format uri
   */
  avatar_url: string;
  bio: string | null;
  blog: string | null;
  /*
   * @example 3
   */
  collaborators?: number;
  company: string | null;
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * @example 1
   */
  disk_usage?: number;
  /*
   * @format email
   */
  email: string | null;
  events_url: string;
  followers: number;
  /*
   * @format uri
   */
  followers_url: string;
  following: number;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  hireable: boolean | null;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  location: string | null;
  login: string;
  name: string | null;
  node_id: string;
  /*
   * @format uri
   */
  organizations_url: string;
  /*
   * @example 2
   */
  owned_private_repos?: number;
  plan?: {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  /*
   * @example 1
   */
  private_gists?: number;
  public_gists: number;
  public_repos: number;
  /*
   * @format uri
   */
  received_events_url: string;
  /*
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  starred_url: string;
  /*
   * @format uri
   */
  subscriptions_url: string;
  /*
   * @format date-time
   */
  suspended_at?: string | null;
  /*
   * @example 2
   */
  total_private_repos?: number;
  twitter_username?: string | null;
  type: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export type PullRequest = {
  _links: {
    comments: Link;
    commits: Link;
    html: Link;
    issue: Link;
    review_comment: Link;
    review_comments: Link;
    self: Link;
    statuses: Link;
  };
  /*
   * @example too heated
   */
  active_lock_reason?: string | null;
  /*
   * @example 100
   */
  additions: number;
  /*
   * Simple User
   */
  assignee: SimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  auto_merge: AutoMerge;
  base: {
    label: string;
    ref: string;
    repo: {
      allow_merge_commit?: boolean;
      allow_rebase_merge?: boolean;
      allow_squash_merge?: boolean;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /*
       * @format uri
       */
      contributors_url: string;
      /*
       * @format date-time
       */
      created_at: string;
      default_branch: string;
      /*
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      disabled: boolean;
      /*
       * @format uri
       */
      downloads_url: string;
      /*
       * @format uri
       */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /*
       * @format uri
       */
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      /*
       * @format uri
       */
      homepage: string | null;
      /*
       * @format uri
       */
      hooks_url: string;
      /*
       * @format uri
       */
      html_url: string;
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      /*
       * @format uri
       */
      languages_url: string;
      /*
       * License Simple
       */
      license: LicenseSimple;
      master_branch?: string;
      /*
       * @format uri
       */
      merges_url: string;
      milestones_url: string;
      /*
       * @format uri
       */
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      owner: {
        /*
         * @format uri
         */
        avatar_url: string;
        events_url: string;
        /*
         * @format uri
         */
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        /*
         * @format uri
         */
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        /*
         * @format uri
         */
        organizations_url: string;
        /*
         * @format uri
         */
        received_events_url: string;
        /*
         * @format uri
         */
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        /*
         * @format uri
         */
        subscriptions_url: string;
        type: string;
        /*
         * @format uri
         */
        url: string;
      };
      permissions?: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      private: boolean;
      pulls_url: string;
      /*
       * @format date-time
       */
      pushed_at: string;
      releases_url: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      /*
       * @format uri
       */
      stargazers_url: string;
      statuses_url: string;
      /*
       * @format uri
       */
      subscribers_url: string;
      /*
       * @format uri
       */
      subscription_url: string;
      /*
       * @format uri
       */
      svn_url: string;
      /*
       * @format uri
       */
      tags_url: string;
      /*
       * @format uri
       */
      teams_url: string;
      temp_clone_token?: string;
      topics?: string[];
      trees_url: string;
      /*
       * @format date-time
       */
      updated_at: string;
      /*
       * @format uri
       */
      url: string;
      watchers: number;
      watchers_count: number;
    };
    sha: string;
    user: {
      /*
       * @format uri
       */
      avatar_url: string;
      events_url: string;
      /*
       * @format uri
       */
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      /*
       * @format uri
       */
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      /*
       * @format uri
       */
      organizations_url: string;
      /*
       * @format uri
       */
      received_events_url: string;
      /*
       * @format uri
       */
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      /*
       * @format uri
       */
      subscriptions_url: string;
      type: string;
      /*
       * @format uri
       */
      url: string;
    };
  };
  /*
   * @example Please pull these awesome changes
   */
  body: string | null;
  /*
   * @example 5
   */
  changed_files: number;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  closed_at: string | null;
  /*
   * @example 10
   */
  comments: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
   * @format uri
   */
  comments_url: string;
  /*
   * @example 3
   */
  commits: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
   * @format uri
   */
  commits_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example 3
   */
  deletions: number;
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347.diff
   * @format uri
   */
  diff_url: string;
  /*
   * Indicates whether or not the pull request is a draft.
   *
   * @example false
   */
  draft?: boolean;
  head: {
    label: string;
    ref: string;
    repo: {
      allow_merge_commit?: boolean;
      allow_rebase_merge?: boolean;
      allow_squash_merge?: boolean;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /*
       * @format uri
       */
      contributors_url: string;
      /*
       * @format date-time
       */
      created_at: string;
      default_branch: string;
      /*
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      disabled: boolean;
      /*
       * @format uri
       */
      downloads_url: string;
      /*
       * @format uri
       */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /*
       * @format uri
       */
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      /*
       * @format uri
       */
      homepage: string | null;
      /*
       * @format uri
       */
      hooks_url: string;
      /*
       * @format uri
       */
      html_url: string;
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      /*
       * @format uri
       */
      languages_url: string;
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string | null;
        /*
         * @format uri
         */
        url: string | null;
      } | null;
      master_branch?: string;
      /*
       * @format uri
       */
      merges_url: string;
      milestones_url: string;
      /*
       * @format uri
       */
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      owner: {
        /*
         * @format uri
         */
        avatar_url: string;
        events_url: string;
        /*
         * @format uri
         */
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        /*
         * @format uri
         */
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        /*
         * @format uri
         */
        organizations_url: string;
        /*
         * @format uri
         */
        received_events_url: string;
        /*
         * @format uri
         */
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        /*
         * @format uri
         */
        subscriptions_url: string;
        type: string;
        /*
         * @format uri
         */
        url: string;
      };
      permissions?: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      private: boolean;
      pulls_url: string;
      /*
       * @format date-time
       */
      pushed_at: string;
      releases_url: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      /*
       * @format uri
       */
      stargazers_url: string;
      statuses_url: string;
      /*
       * @format uri
       */
      subscribers_url: string;
      /*
       * @format uri
       */
      subscription_url: string;
      /*
       * @format uri
       */
      svn_url: string;
      /*
       * @format uri
       */
      tags_url: string;
      /*
       * @format uri
       */
      teams_url: string;
      temp_clone_token?: string;
      topics?: string[];
      trees_url: string;
      /*
       * @format date-time
       */
      updated_at: string;
      /*
       * @format uri
       */
      url: string;
      watchers: number;
      watchers_count: number;
    };
    sha: string;
    user: {
      /*
       * @format uri
       */
      avatar_url: string;
      events_url: string;
      /*
       * @format uri
       */
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      /*
       * @format uri
       */
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      /*
       * @format uri
       */
      organizations_url: string;
      /*
       * @format uri
       */
      received_events_url: string;
      /*
       * @format uri
       */
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      /*
       * @format uri
       */
      subscriptions_url: string;
      type: string;
      /*
       * @format uri
       */
      url: string;
    };
  };
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   * @format uri
   */
  issue_url: string;
  labels: {
    color?: string;
    ["default"]?: boolean;
    description?: string | null;
    id?: number;
    name?: string;
    node_id?: string;
    url?: string;
  }[];
  /*
   * @example true
   */
  locked: boolean;
  /*
   * Indicates whether maintainers can modify the pull request.
   *
   * @example true
   */
  maintainer_can_modify: boolean;
  /*
   * @example e5bd3914e2e596debea16f433f57875b5b90bcd6
   */
  merge_commit_sha: string | null;
  /*
   * @example true
   */
  mergeable: boolean | null;
  /*
   * @example clean
   */
  mergeable_state: string;
  merged: boolean;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  merged_at: string | null;
  /*
   * Simple User
   */
  merged_by: SimpleUser;
  /*
   * A collection of related issues and pull requests.
   */
  milestone: Milestone;
  /*
   * @example MDExOlB1bGxSZXF1ZXN0MQ==
   */
  node_id: string;
  /*
   * Number uniquely identifying the pull request within its repository.
   *
   * @example 42
   */
  number: number;
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347.patch
   * @format uri
   */
  patch_url: string;
  /*
   * @example true
   */
  rebaseable?: boolean | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: TeamSimple[] | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
   */
  review_comment_url: string;
  /*
   * @example 0
   */
  review_comments: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
   * @format uri
   */
  review_comments_url: string;
  /*
   * State of this Pull Request. Either `open` or `closed`.
   *
   * @example open
   */
  state: "open" | "closed";
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  statuses_url: string;
  /*
   * The title of the pull request.
   *
   * @example Amazing new feature
   */
  title: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Pull Request Merge Result
 */
export type PullRequestMergeResult = {
  merged: boolean;
  message: string;
  sha: string;
};

export type PullRequestMinimal = {
  base: {
    ref: string;
    repo: {
      id: number;
      name: string;
      url: string;
    };
    sha: string;
  };
  head: {
    ref: string;
    repo: {
      id: number;
      name: string;
      url: string;
    };
    sha: string;
  };
  id: number;
  number: number;
  url: string;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export type PullRequestReview = {
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  author_association: AuthorAssociation;
  /*
   * The text of the review.
   *
   * @example This looks great.
   */
  body: string;
  body_html?: string;
  body_text?: string;
  /*
   * A commit SHA for the review.
   *
   * @example 54bb654c9e6025347f57900a4a5c2313a96b8035
   */
  commit_id: string;
  /*
   * @example https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the review
   *
   * @example 42
   */
  id: number;
  /*
   * @example MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=
   */
  node_id: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/12
   * @format uri
   */
  pull_request_url: string;
  /*
   * @example CHANGES_REQUESTED
   */
  state: string;
  /*
   * @format date-time
   */
  submitted_at?: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export type PullRequestReviewComment = {
  _links: {
    html: {
      /*
       * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
       * @format uri
       */
      href: string;
    };
    pull_request: {
      /*
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
       * @format uri
       */
      href: string;
    };
    self: {
      /*
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
       * @format uri
       */
      href: string;
    };
  };
  author_association: AuthorAssociation;
  /*
   * The text of the comment.
   *
   * @example We should probably include a check for null values here.
   */
  body: string;
  /*
   * @example "<p>comment body</p>"
   */
  body_html?: string;
  /*
   * @example "comment body"
   */
  body_text?: string;
  /*
   * The SHA of the commit to which the comment applies.
   *
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string;
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * The diff of the line that the comment refers to.
   *
   * @example @@ -16,33 +16,40 @@ public class Connection : IConnection...
   */
  diff_hunk: string;
  /*
   * HTML URL for the pull request review comment.
   *
   * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
   * @format uri
   */
  html_url: string;
  /*
   * The ID of the pull request review comment.
   *
   * @example 1
   */
  id: number;
  /*
   * The comment ID to reply to.
   *
   * @example 8
   */
  in_reply_to_id?: number;
  /*
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  line?: number;
  /*
   * The node ID of the pull request review comment.
   *
   * @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
   */
  node_id: string;
  /*
   * The SHA of the original commit to which the comment applies.
   *
   * @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
   */
  original_commit_id: string;
  /*
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  original_line?: number;
  /*
   * The index of the original line in the diff to which the comment applies.
   *
   * @example 4
   */
  original_position: number;
  /*
   * The first line of the range for a multi-line comment.
   *
   * @example 2
   */
  original_start_line?: number | null;
  /*
   * The relative path of the file to which the comment applies.
   *
   * @example config/database.yaml
   */
  path: string;
  /*
   * The line index in the diff to which the comment applies.
   *
   * @example 1
   */
  position: number;
  /*
   * The ID of the pull request review to which the comment belongs.
   *
   * @example 42
   */
  pull_request_review_id: number | null;
  /*
   * URL for the pull request that the review comment belongs to.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
   * @format uri
   */
  pull_request_url: string;
  reactions?: ReactionRollup;
  /*
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   *
   * @default RIGHT
   */
  side?: "LEFT" | "RIGHT";
  /*
   * The first line of the range for a multi-line comment.
   *
   * @example 2
   */
  start_line?: number | null;
  /*
   * The side of the first line of the range for a multi-line comment.
   *
   * @default RIGHT
   */
  start_side?: "LEFT" | "RIGHT";
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * URL for the pull request review comment
   *
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
   */
  url: string;
  user: SimpleUser;
};

/**
 * Pull Request Review Request
 */
export type PullRequestReviewRequest = {
  teams: TeamSimple[];
  users: SimpleUser[];
};

/**
 * Pull Request Simple
 */
export type PullRequestSimple = {
  _links: {
    comments: Link;
    commits: Link;
    html: Link;
    issue: Link;
    review_comment: Link;
    review_comments: Link;
    self: Link;
    statuses: Link;
  };
  /*
   * @example too heated
   */
  active_lock_reason?: string | null;
  /*
   * Simple User
   */
  assignee: SimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  auto_merge: AutoMerge;
  base: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    /*
     * Simple User
     */
    user: SimpleUser;
  };
  /*
   * @example Please pull these awesome changes
   */
  body: string | null;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  closed_at: string | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
   * @format uri
   */
  comments_url: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
   * @format uri
   */
  commits_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347.diff
   * @format uri
   */
  diff_url: string;
  /*
   * Indicates whether or not the pull request is a draft.
   *
   * @example false
   */
  draft?: boolean;
  head: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    /*
     * Simple User
     */
    user: SimpleUser;
  };
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   * @format uri
   */
  issue_url: string;
  labels: {
    color?: string;
    ["default"]?: boolean;
    description?: string;
    id?: number;
    name?: string;
    node_id?: string;
    url?: string;
  }[];
  /*
   * @example true
   */
  locked: boolean;
  /*
   * @example e5bd3914e2e596debea16f433f57875b5b90bcd6
   */
  merge_commit_sha: string | null;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  merged_at: string | null;
  /*
   * A collection of related issues and pull requests.
   */
  milestone: Milestone;
  /*
   * @example MDExOlB1bGxSZXF1ZXN0MQ==
   */
  node_id: string;
  /*
   * @example 1347
   */
  number: number;
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347.patch
   * @format uri
   */
  patch_url: string;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: TeamSimple[] | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
   */
  review_comment_url: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
   * @format uri
   */
  review_comments_url: string;
  /*
   * @example open
   */
  state: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  statuses_url: string;
  /*
   * @example new-feature
   */
  title: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

export type RateLimit = {
  limit: number;
  remaining: number;
  reset: number;
};

/**
 * Rate Limit Overview
 */
export type RateLimitOverview = {
  rate: RateLimit;
  resources: {
    code_scanning_upload?: RateLimit;
    core: RateLimit;
    graphql?: RateLimit;
    integration_manifest?: RateLimit;
    search: RateLimit;
    source_import?: RateLimit;
  };
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export type Reaction = {
  /*
   * The reaction to use
   *
   * @example heart
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * @example "2016-05-20T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example MDg6UmVhY3Rpb24x
   */
  node_id: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

export type ReactionRollup = {
  ["+1"]: number;
  ["-1"]: number;
  confused: number;
  eyes: number;
  heart: number;
  hooray: number;
  laugh: number;
  rocket: number;
  total_count: number;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Referrer Traffic
 */
export type ReferrerTraffic = {
  /*
   * @example 4
   */
  count: number;
  /*
   * @example Google
   */
  referrer: string;
  /*
   * @example 3
   */
  uniques: number;
};

/**
 * A release.
 */
export type Release = {
  assets: ReleaseAsset[];
  /*
   * @format uri
   */
  assets_url: string;
  author: SimpleUser;
  body?: string | null;
  body_html?: string;
  body_text?: string;
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * true to create a draft (unpublished) release, false to create a published one.
   *
   * @example false
   */
  draft: boolean;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  name: string | null;
  node_id: string;
  /*
   * Whether to identify the release as a prerelease or a full release.
   *
   * @example false
   */
  prerelease: boolean;
  /*
   * @format date-time
   */
  published_at: string | null;
  /*
   * The name of the tag.
   *
   * @example v1.0.0
   */
  tag_name: string;
  /*
   * @format uri
   */
  tarball_url: string | null;
  /*
   * Specifies the commitish value that determines where the Git tag is created from.
   *
   * @example master
   */
  target_commitish: string;
  upload_url: string;
  /*
   * @format uri
   */
  url: string;
  /*
   * @format uri
   */
  zipball_url: string | null;
};

/**
 * Data related to a release.
 */
export type ReleaseAsset = {
  /*
   * @format uri
   */
  browser_download_url: string;
  content_type: string;
  /*
   * @format date-time
   */
  created_at: string;
  download_count: number;
  id: number;
  label: string | null;
  /*
   * The file name of the asset.
   *
   * @example Team Environment
   */
  name: string;
  node_id: string;
  size: number;
  /*
   * State of the release asset.
   */
  state: "uploaded" | "open";
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * Simple User
   */
  uploader: SimpleUser;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Repo Search Result Item
 */
export type RepoSearchResultItem = {
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  allow_squash_merge?: boolean;
  archive_url: string;
  archived: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  /*
   * @format uri
   */
  contributors_url: string;
  /*
   * @format date-time
   */
  created_at: string;
  default_branch: string;
  delete_branch_on_merge?: boolean;
  /*
   * @format uri
   */
  deployments_url: string;
  description: string | null;
  /*
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /*
   * @format uri
   */
  downloads_url: string;
  /*
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  forks_count: number;
  /*
   * @format uri
   */
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  has_downloads: boolean;
  has_issues: boolean;
  has_pages: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  /*
   * @format uri
   */
  homepage: string | null;
  /*
   * @format uri
   */
  hooks_url: string;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language: string | null;
  /*
   * @format uri
   */
  languages_url: string;
  /*
   * License Simple
   */
  license: LicenseSimple;
  master_branch?: string;
  /*
   * @format uri
   */
  merges_url: string;
  milestones_url: string;
  /*
   * @format uri
   */
  mirror_url: string | null;
  name: string;
  node_id: string;
  notifications_url: string;
  open_issues: number;
  open_issues_count: number;
  /*
   * Simple User
   */
  owner: SimpleUser;
  permissions?: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  private: boolean;
  pulls_url: string;
  /*
   * @format date-time
   */
  pushed_at: string;
  releases_url: string;
  score: number;
  size: number;
  ssh_url: string;
  stargazers_count: number;
  /*
   * @format uri
   */
  stargazers_url: string;
  statuses_url: string;
  /*
   * @format uri
   */
  subscribers_url: string;
  /*
   * @format uri
   */
  subscription_url: string;
  /*
   * @format uri
   */
  svn_url: string;
  /*
   * @format uri
   */
  tags_url: string;
  /*
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  text_matches?: SearchResultTextMatches;
  topics?: string[];
  trees_url: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
  watchers: number;
  watchers_count: number;
};

/**
 * A git repository
 */
export type Repository = {
  /*
   * Whether to allow merge commits for pull requests.
   *
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /*
   * Whether to allow rebase merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /*
   * Whether to allow squash merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  /*
   * Whether the repository is archived.
   *
   * @default false
   */
  archived: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  /*
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  /*
   * The default branch of the repository.
   *
   * @example master
   */
  default_branch: string;
  /*
   * Whether to delete head branches when pull requests are merged
   *
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /*
   * @example This your first repo!
   */
  description: string | null;
  /*
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /*
   * @example 9
   */
  forks_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /*
   * @example octocat/Hello-World
   */
  full_name: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  /*
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;
  /*
   * Whether downloads are enabled.
   *
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /*
   * Whether issues are enabled.
   *
   * @default true
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /*
   * Whether projects are enabled.
   *
   * @default true
   * @example true
   */
  has_projects: boolean;
  /*
   * Whether the wiki is enabled.
   *
   * @default true
   * @example true
   */
  has_wiki: boolean;
  /*
   * @example https://github.com
   * @format uri
   */
  homepage: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /*
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the repository
   *
   * @example 42
   */
  id: number;
  /*
   * Whether this repository acts as a template that can be used to generate new repositories.
   *
   * @default false
   * @example true
   */
  is_template?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  /*
   * License Simple
   */
  license: LicenseSimple;
  master_branch?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  /*
   * @example git:git.example.com/octocat/Hello-World
   * @format uri
   */
  mirror_url: string | null;
  /*
   * The name of the repository.
   *
   * @example Team Environment
   */
  name: string;
  network_count?: number;
  /*
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  open_issues: number;
  /*
   * @example 0
   */
  open_issues_count: number;
  /*
   * Simple User
   */
  owner: SimpleUser;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /*
   * Whether the repository is private or public.
   *
   * @default false
   */
  private: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /*
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /*
   * @example 108
   */
  size: number;
  /*
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;
  /*
   * @example 80
   */
  stargazers_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /*
   * @example "2020-07-09T00:17:42Z"
   */
  starred_at?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  subscribers_count?: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  /*
   * @example https://svn.github.com/octocat/Hello-World
   * @format uri
   */
  svn_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  template_repository?: {
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    archive_url?: string;
    archived?: boolean;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    clone_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    created_at?: string;
    default_branch?: string;
    delete_branch_on_merge?: boolean;
    deployments_url?: string;
    description?: string;
    disabled?: boolean;
    downloads_url?: string;
    events_url?: string;
    fork?: boolean;
    forks_count?: number;
    forks_url?: string;
    full_name?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    has_downloads?: boolean;
    has_issues?: boolean;
    has_pages?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string;
    hooks_url?: string;
    html_url?: string;
    id?: number;
    is_template?: boolean;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    language?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    mirror_url?: string;
    name?: string;
    network_count?: number;
    node_id?: string;
    notifications_url?: string;
    open_issues_count?: number;
    owner?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    permissions?: {
      admin?: boolean;
      pull?: boolean;
      push?: boolean;
    };
    private?: boolean;
    pulls_url?: string;
    pushed_at?: string;
    releases_url?: string;
    size?: number;
    ssh_url?: string;
    stargazers_count?: number;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_count?: number;
    subscribers_url?: string;
    subscription_url?: string;
    svn_url?: string;
    tags_url?: string;
    teams_url?: string;
    temp_clone_token?: string;
    topics?: string[];
    trees_url?: string;
    updated_at?: string;
    url?: string;
    visibility?: string;
    watchers_count?: number;
  } | null;
  topics?: string[];
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /*
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  /*
   * The repository visibility: public, private, or internal.
   *
   * @default public
   */
  visibility?: string;
  watchers: number;
  /*
   * @example 80
   */
  watchers_count: number;
};

/**
 * Repository Collaborator Permission
 */
export type RepositoryCollaboratorPermission = {
  permission: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositoryInvitation = {
  /*
   * @example "2016-06-13T19:52:50.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Whether or not the invitation has expired
   */
  expired?: boolean;
  /*
   * @example https://github.com/octocat/Hello-World/invitations
   */
  html_url: string;
  /*
   * Unique identifier of the repository invitation.
   *
   * @example 42
   */
  id: number;
  /*
   * Simple User
   */
  invitee: SimpleUser;
  /*
   * Simple User
   */
  inviter: SimpleUser;
  node_id: string;
  /*
   * The permission associated with the invitation.
   *
   * @example read
   */
  permissions: "read" | "write" | "admin";
  repository: MinimalRepository;
  /*
   * URL for the repository invitation
   *
   * @example https://api.github.com/user/repository-invitations/1
   */
  url: string;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositorySubscription = {
  /*
   * @example "2012-10-06T21:34:12.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Determines if all notifications should be blocked from this repository.
   */
  ignored: boolean;
  reason: string | null;
  /*
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /*
   * Determines if notifications should be received from this repository.
   *
   * @example true
   */
  subscribed: boolean;
  /*
   * @example https://api.github.com/repos/octocat/example/subscription
   * @format uri
   */
  url: string;
};

/**
 * Legacy Review Comment
 */
export type ReviewComment = {
  _links: {
    html: Link;
    pull_request: Link;
    self: Link;
  };
  author_association: AuthorAssociation;
  /*
   * @example Great stuff
   */
  body: string;
  body_html?: string;
  body_text?: string;
  /*
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string;
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example @@ -16,33 +16,40 @@ public class Connection : IConnection...
   */
  diff_hunk: string;
  /*
   * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
   * @format uri
   */
  html_url: string;
  /*
   * @example 10
   */
  id: number;
  /*
   * @example 8
   */
  in_reply_to_id?: number;
  /*
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  line?: number;
  /*
   * @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
   */
  node_id: string;
  /*
   * @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
   */
  original_commit_id: string;
  /*
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  original_line?: number;
  /*
   * @example 4
   */
  original_position: number;
  /*
   * The original first line of the range for a multi-line comment.
   *
   * @example 2
   */
  original_start_line?: number | null;
  /*
   * @example file1.txt
   */
  path: string;
  /*
   * @example 1
   */
  position: number | null;
  /*
   * @example 42
   */
  pull_request_review_id: number | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
   * @format uri
   */
  pull_request_url: string;
  /*
   * The side of the first line of the range for a multi-line comment.
   *
   * @default RIGHT
   */
  side?: "LEFT" | "RIGHT";
  /*
   * The first line of the range for a multi-line comment.
   *
   * @example 2
   */
  start_line?: number | null;
  /*
   * The side of the first line of the range for a multi-line comment.
   *
   * @default RIGHT
   */
  start_side?: "LEFT" | "RIGHT";
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * A self hosted runner
 */
export type Runner = {
  busy: boolean;
  /*
   * The id of the runner.
   *
   * @example 5
   */
  id: number;
  labels: {
    /*
     * Unique identifier of the label.
     */
    id?: number;
    /*
     * Name of the label.
     */
    name?: string;
    /*
     * The type of label. Read-only labels are applied automatically when the runner is configured.
     */
    type?: "read-only" | "custom";
  }[];
  /*
   * The name of the runner.
   *
   * @example iMac
   */
  name: string;
  /*
   * The Operating System of the runner.
   *
   * @example macos
   */
  os: string;
  /*
   * The status of the runner.
   *
   * @example online
   */
  status: string;
};

/**
 * Runner Application
 */
export type RunnerApplication = {
  architecture: string;
  download_url: string;
  filename: string;
  os: string;
};

export type RunnerGroupsEnterprise = {
  allows_public_repositories: boolean;
  ["default"]: boolean;
  id: number;
  name: string;
  runners_url: string;
  selected_organizations_url?: string;
  visibility: string;
};

export type RunnerGroupsOrg = {
  allows_public_repositories: boolean;
  ["default"]: boolean;
  id: number;
  inherited: boolean;
  inherited_allows_public_repositories?: boolean;
  name: string;
  runners_url: string;
  /*
   * Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`
   */
  selected_repositories_url?: string;
  visibility: string;
};

export type ScimEnterpriseGroup = {
  displayName?: string;
  externalId?: string | null;
  id: string;
  members?: {
    $ref?: string;
    display?: string;
    value?: string;
  }[];
  meta?: {
    created?: string;
    lastModified?: string;
    location?: string;
    resourceType?: string;
  };
  schemas: string[];
};

export type ScimEnterpriseUser = {
  active?: boolean;
  emails?: {
    primary?: boolean;
    type?: string;
    value?: string;
  }[];
  externalId?: string;
  groups?: {
    value?: string;
  }[];
  id: string;
  meta?: {
    created?: string;
    lastModified?: string;
    location?: string;
    resourceType?: string;
  };
  name?: {
    familyName?: string;
    givenName?: string;
  };
  schemas: string[];
  userName?: string;
};

/**
 * Scim Error
 */
export type ScimError = {
  detail?: string | null;
  documentation_url?: string | null;
  message?: string | null;
  schemas?: string[];
  scimType?: string | null;
  status?: number;
};

export type ScimGroupListEnterprise = {
  Resources: {
    displayName?: string;
    externalId?: string | null;
    id: string;
    members?: {
      $ref?: string;
      display?: string;
      value?: string;
    }[];
    meta?: {
      created?: string;
      lastModified?: string;
      location?: string;
      resourceType?: string;
    };
    schemas: string[];
  }[];
  itemsPerPage: number;
  schemas: string[];
  startIndex: number;
  totalResults: number;
};

/**
 * SCIM /Users provisioning endpoints
 */
export type ScimUser = {
  /*
   * The active status of the User.
   *
   * @example true
   */
  active: boolean;
  /*
   * The name of the user, suitable for display to end-users
   *
   * @example Jon Doe
   */
  displayName?: string | null;
  /*
   * user emails
   *
   * @example {"primary":true,"value":"someone@example.com"}
   * @example {"primary":false,"value":"another@example.com"}
   * @minItems 1
   */
  emails: {
    primary?: boolean;
    value: string;
  }[];
  /*
   * The ID of the User.
   *
   * @example a7b0f98395
   */
  externalId: string | null;
  /*
   * associated groups
   */
  groups?: {
    display?: string;
    value?: string;
  }[];
  /*
   * Unique identifier of an external identity
   *
   * @example 1b78eada-9baa-11e6-9eb6-a431576d590e
   */
  id: string;
  meta: {
    /*
     * @example "2019-01-24T22:45:36.000Z"
     * @format date-time
     */
    created?: string;
    /*
     * @example "2019-01-24T22:45:36.000Z"
     * @format date-time
     */
    lastModified?: string;
    /*
     * @example https://api.github.com/scim/v2/organizations/myorg-123abc55141bfd8f/Users/c42772b5-2029-11e9-8543-9264a97dec8d
     * @format uri
     */
    location?: string;
    /*
     * @example User
     */
    resourceType?: string;
  };
  /*
   * @example {"familyName":"User","givenName":"Jane"}
   */
  name: {
    familyName: string | null;
    formatted?: string | null;
    givenName: string | null;
  };
  /*
   * Set of operations to be performed
   *
   * @example {"op":"replace","value":{"active":false}}
   * @minItems 1
   */
  operations?: {
    op: "add" | "remove" | "replace";
    path?: string;
    value?: string | Record<string, any> | any[];
  }[];
  /*
   * The ID of the organization.
   */
  organization_id?: number;
  /*
   * SCIM schema used.
   *
   * @minItems 1
   */
  schemas: string[];
  /*
   * Configured by the admin. Could be an email, login, or username
   *
   * @example someone@example.com
   */
  userName: string | null;
};

/**
 * SCIM User List
 */
export type ScimUserList = {
  Resources: ScimUser[];
  /*
   * @example 10
   */
  itemsPerPage: number;
  /*
   * SCIM schema used.
   *
   * @minItems 1
   */
  schemas: string[];
  /*
   * @example 1
   */
  startIndex: number;
  /*
   * @example 3
   */
  totalResults: number;
};

export type ScimUserListEnterprise = {
  Resources: {
    active?: boolean;
    emails?: {
      primary?: boolean;
      type?: string;
      value?: string;
    }[];
    externalId?: string;
    groups?: {
      value?: string;
    }[];
    id: string;
    meta?: {
      created?: string;
      lastModified?: string;
      location?: string;
      resourceType?: string;
    };
    name?: {
      familyName?: string;
      givenName?: string;
    };
    schemas: string[];
    userName?: string;
  }[];
  itemsPerPage: number;
  schemas: string[];
  startIndex: number;
  totalResults: number;
};

export type ScopedInstallation = {
  account: SimpleUser;
  /*
   * @example true
   */
  has_multiple_single_files?: boolean;
  permissions: AppPermissions;
  /*
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repositories_url: string;
  /*
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  /*
   * @example config.yaml
   */
  single_file_name: string | null;
  /*
   * @example config.yml
   * @example .github/issue_TEMPLATE.md
   */
  single_file_paths?: string[];
};

export type SearchResultTextMatches = {
  fragment?: string;
  matches?: {
    indices?: number[];
    text?: string;
  }[];
  object_type?: string | null;
  object_url?: string;
  property?: string;
}[];

export type SecretScanningAlert = {
  created_at?: AlertCreatedAt;
  html_url?: AlertHtmlUrl;
  number?: AlertNumber;
  resolution?: SecretScanningAlertResolution;
  /*
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  resolved_at?: string | null;
  resolved_by?: SimpleUser;
  /*
   * The secret that was detected.
   */
  secret?: string;
  /*
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;
  state?: SecretScanningAlertState;
  url?: AlertUrl;
};

/**
 * **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.
 */
export type SecretScanningAlertResolution =
  | ("false_positive" | "wont_fix" | "revoked" | "used_in_tests")
  | any
  | null;

/**
 * Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
 */
export type SecretScanningAlertState = "open" | "resolved";

export type SelectedActions = {
  /*
   * Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
   */
  github_owned_allowed: boolean;
  /*
   * Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`."
   */
  patterns_allowed: string[];
  /*
   * Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow all GitHub Marketplace actions by verified creators.
   */
  verified_allowed: boolean;
};

/**
 * The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`.
 */
export type SelectedActionsUrl = string;

/**
 * Short Blob
 */
export type ShortBlob = {
  sha: string;
  url: string;
};

/**
 * Short Branch
 */
export type ShortBranch = {
  commit: {
    sha: string;
    /*
     * @format uri
     */
    url: string;
  };
  name: string;
  protected: boolean;
  protection?: BranchProtection;
  /*
   * @format uri
   */
  protection_url?: string;
};

/**
 * Simple Commit
 */
export type SimpleCommit = {
  author: {
    email: string;
    name: string;
  } | null;
  committer: {
    email: string;
    name: string;
  } | null;
  id: string;
  message: string;
  /*
   * @format date-time
   */
  timestamp: string;
  tree_id: string;
};

export type SimpleCommitStatus = {
  /*
   * @format uri
   */
  avatar_url: string | null;
  context: string;
  /*
   * @format date-time
   */
  created_at: string;
  description: string | null;
  id: number;
  node_id: string;
  required?: boolean | null;
  state: string;
  /*
   * @format uri
   */
  target_url: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Simple User
 */
export type SimpleUser = {
  /*
   * @example https://github.com/images/error/octocat_happy.gif
   * @format uri
   */
  avatar_url: string;
  /*
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;
  /*
   * @example https://api.github.com/users/octocat/followers
   * @format uri
   */
  followers_url: string;
  /*
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;
  /*
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;
  /*
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;
  /*
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example octocat
   */
  login: string;
  /*
   * @example MDQ6VXNlcjE=
   */
  node_id: string;
  /*
   * @example https://api.github.com/users/octocat/orgs
   * @format uri
   */
  organizations_url: string;
  /*
   * @example https://api.github.com/users/octocat/received_events
   * @format uri
   */
  received_events_url: string;
  /*
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  /*
   * @example "2020-07-09T00:17:55Z"
   */
  starred_at?: string;
  /*
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;
  /*
   * @example https://api.github.com/users/octocat/subscriptions
   * @format uri
   */
  subscriptions_url: string;
  /*
   * @example User
   */
  type: string;
  /*
   * @example https://api.github.com/users/octocat
   * @format uri
   */
  url: string;
} | null;

/**
 * Stargazer
 */
export type Stargazer = {
  /*
   * @format date-time
   */
  starred_at: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Starred Repository
 */
export type StarredRepository = {
  repo: Repository;
  /*
   * @format date-time
   */
  starred_at: string;
};

/**
 * The status of a commit.
 */
export type Status = {
  avatar_url: string | null;
  context: string;
  created_at: string;
  creator: SimpleUser;
  description: string;
  id: number;
  node_id: string;
  state: string;
  target_url: string;
  updated_at: string;
  url: string;
};

/**
 * Status Check Policy
 */
export type StatusCheckPolicy = {
  /*
   * @example continuous-integration/travis-ci
   */
  contexts: string[];
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts
   * @format uri
   */
  contexts_url: string;
  /*
   * @example true
   */
  strict: boolean;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks
   * @format uri
   */
  url: string;
};

/**
 * Tag
 */
export type Tag = {
  commit: {
    sha: string;
    /*
     * @format uri
     */
    url: string;
  };
  /*
   * @example v0.1
   */
  name: string;
  node_id: string;
  /*
   * @example https://github.com/octocat/Hello-World/tarball/v0.1
   * @format uri
   */
  tarball_url: string;
  /*
   * @example https://github.com/octocat/Hello-World/zipball/v0.1
   * @format uri
   */
  zipball_url: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type Team = {
  description: string | null;
  /*
   * @example https://github.com/orgs/rails/teams/core
   * @format uri
   */
  html_url: string;
  id: number;
  members_url: string;
  name: string;
  node_id: string;
  /*
   * Groups of organization members that gives permissions on specified repositories.
   */
  parent?: TeamSimple;
  permission: string;
  privacy?: string;
  /*
   * @format uri
   */
  repositories_url: string;
  slug: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export type TeamDiscussion = {
  /*
   * Simple User
   */
  author: SimpleUser;
  /*
   * The main text of the discussion.
   *
   * @example Please suggest improvements to our workflow in comments.
   */
  body: string;
  /*
   * @example <p>Hi! This is an area for us to collaborate as a team</p>
   */
  body_html: string;
  /*
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   *
   * @example 0307116bbf7ced493b8d8a346c650b71
   */
  body_version: string;
  /*
   * @example 0
   */
  comments_count: number;
  /*
   * @example https://api.github.com/organizations/1/team/2343027/discussions/1/comments
   * @format uri
   */
  comments_url: string;
  /*
   * @example "2018-01-25T18:56:31.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example https://github.com/orgs/github/teams/justice-league/discussions/1
   * @format uri
   */
  html_url: string;
  /*
   * @format date-time
   */
  last_edited_at: string | null;
  /*
   * @example MDE0OlRlYW1EaXNjdXNzaW9uMQ==
   */
  node_id: string;
  /*
   * The unique sequence number of a team discussion.
   *
   * @example 42
   */
  number: number;
  /*
   * Whether or not this discussion should be pinned for easy retrieval.
   *
   * @example true
   */
  pinned: boolean;
  /*
   * Whether or not this discussion should be restricted to team members and organization administrators.
   *
   * @example true
   */
  private: boolean;
  reactions?: ReactionRollup;
  /*
   * @example https://api.github.com/organizations/1/team/2343027
   * @format uri
   */
  team_url: string;
  /*
   * The title of the discussion.
   *
   * @example How can we improve our workflow?
   */
  title: string;
  /*
   * @example "2018-01-25T18:56:31.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/organizations/1/team/2343027/discussions/1
   * @format uri
   */
  url: string;
};

/**
 * A reply to a discussion within a team.
 */
export type TeamDiscussionComment = {
  /*
   * Simple User
   */
  author: SimpleUser;
  /*
   * The main text of the comment.
   *
   * @example I agree with this suggestion.
   */
  body: string;
  /*
   * @example <p>Do you like apples?</p>
   */
  body_html: string;
  /*
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   *
   * @example 0307116bbf7ced493b8d8a346c650b71
   */
  body_version: string;
  /*
   * @example "2018-01-15T23:53:58.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example https://api.github.com/organizations/1/team/2403582/discussions/1
   * @format uri
   */
  discussion_url: string;
  /*
   * @example https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
   * @format uri
   */
  html_url: string;
  /*
   * @format date-time
   */
  last_edited_at: string | null;
  /*
   * @example MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=
   */
  node_id: string;
  /*
   * The unique sequence number of a team discussion comment.
   *
   * @example 42
   */
  number: number;
  reactions?: ReactionRollup;
  /*
   * @example "2018-01-15T23:53:58.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1
   * @format uri
   */
  url: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamFull = {
  /*
   * @example "2017-07-14T16:53:42.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example A great team.
   */
  description: string | null;
  /*
   * @example https://github.com/orgs/rails/teams/core
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the team
   *
   * @example 42
   */
  id: number;
  /*
   * Distinguished Name (DN) that team maps to within LDAP environment
   *
   * @example uid=example,ou=users,dc=github,dc=com
   */
  ldap_dn?: string;
  /*
   * @example 3
   */
  members_count: number;
  /*
   * @example https://api.github.com/organizations/1/team/1/members{/member}
   */
  members_url: string;
  /*
   * Name of the team
   *
   * @example Developers
   */
  name: string;
  /*
   * @example MDQ6VGVhbTE=
   */
  node_id: string;
  organization: OrganizationFull;
  /*
   * Groups of organization members that gives permissions on specified repositories.
   */
  parent?: TeamSimple;
  /*
   * Permission that the team will have for its repositories
   *
   * @example push
   */
  permission: string;
  /*
   * The level of privacy this team should have
   *
   * @example closed
   */
  privacy?: "closed" | "secret";
  /*
   * @example 10
   */
  repos_count: number;
  /*
   * @example https://api.github.com/organizations/1/team/1/repos
   * @format uri
   */
  repositories_url: string;
  /*
   * @example justice-league
   */
  slug: string;
  /*
   * @example "2017-08-17T12:37:15.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * URL for the team
   *
   * @example https://api.github.com/organizations/1/team/1
   * @format uri
   */
  url: string;
};

/**
 * Team Membership
 */
export type TeamMembership = {
  /*
   * The role of the user in the team.
   *
   * @default member
   * @example member
   */
  role: "member" | "maintainer";
  state: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * A team's access to a project.
 */
export type TeamProject = {
  body: string | null;
  columns_url: string;
  created_at: string;
  creator: SimpleUser;
  html_url: string;
  id: number;
  name: string;
  node_id: string;
  number: number;
  /*
   * The organization permission for this project. Only present when owner is an organization.
   */
  organization_permission?: string;
  owner_url: string;
  permissions: {
    admin: boolean;
    read: boolean;
    write: boolean;
  };
  /*
   * Whether the project is private or not. Only present when owner is an organization.
   */
  private?: boolean;
  state: string;
  updated_at: string;
  url: string;
};

/**
 * A team's access to a repository.
 */
export type TeamRepository = {
  /*
   * Whether to allow merge commits for pull requests.
   *
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /*
   * Whether to allow rebase merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /*
   * Whether to allow squash merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  /*
   * Whether the repository is archived.
   *
   * @default false
   */
  archived: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  /*
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  /*
   * The default branch of the repository.
   *
   * @example master
   */
  default_branch: string;
  /*
   * Whether to delete head branches when pull requests are merged
   *
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /*
   * @example This your first repo!
   */
  description: string | null;
  /*
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /*
   * @example 9
   */
  forks_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /*
   * @example octocat/Hello-World
   */
  full_name: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  /*
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;
  /*
   * Whether downloads are enabled.
   *
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /*
   * Whether issues are enabled.
   *
   * @default true
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /*
   * Whether projects are enabled.
   *
   * @default true
   * @example true
   */
  has_projects: boolean;
  /*
   * Whether the wiki is enabled.
   *
   * @default true
   * @example true
   */
  has_wiki: boolean;
  /*
   * @example https://github.com
   * @format uri
   */
  homepage: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /*
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the repository
   *
   * @example 42
   */
  id: number;
  /*
   * Whether this repository acts as a template that can be used to generate new repositories.
   *
   * @default false
   * @example true
   */
  is_template?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  /*
   * License Simple
   */
  license: LicenseSimple;
  master_branch?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  /*
   * @example git:git.example.com/octocat/Hello-World
   * @format uri
   */
  mirror_url: string | null;
  /*
   * The name of the repository.
   *
   * @example Team Environment
   */
  name: string;
  network_count?: number;
  /*
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  open_issues: number;
  /*
   * @example 0
   */
  open_issues_count: number;
  /*
   * Simple User
   */
  owner: SimpleUser;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /*
   * Whether the repository is private or public.
   *
   * @default false
   */
  private: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /*
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /*
   * @example 108
   */
  size: number;
  /*
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;
  /*
   * @example 80
   */
  stargazers_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  subscribers_count?: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  /*
   * @example https://svn.github.com/octocat/Hello-World
   * @format uri
   */
  svn_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  /*
   * A git repository
   */
  template_repository?: Repository;
  topics?: string[];
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /*
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  /*
   * The repository visibility: public, private, or internal.
   *
   * @default public
   */
  visibility?: string;
  watchers: number;
  /*
   * @example 80
   */
  watchers_count: number;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamSimple = {
  /*
   * Description of the team
   *
   * @example A great team.
   */
  description: string | null;
  /*
   * @example https://github.com/orgs/rails/teams/core
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the team
   *
   * @example 1
   */
  id: number;
  /*
   * Distinguished Name (DN) that team maps to within LDAP environment
   *
   * @example uid=example,ou=users,dc=github,dc=com
   */
  ldap_dn?: string;
  /*
   * @example https://api.github.com/organizations/1/team/1/members{/member}
   */
  members_url: string;
  /*
   * Name of the team
   *
   * @example Justice League
   */
  name: string;
  /*
   * @example MDQ6VGVhbTE=
   */
  node_id: string;
  /*
   * Permission that the team will have for its repositories
   *
   * @example admin
   */
  permission: string;
  /*
   * The level of privacy this team should have
   *
   * @example closed
   */
  privacy?: string;
  /*
   * @example https://api.github.com/organizations/1/team/1/repos
   * @format uri
   */
  repositories_url: string;
  /*
   * @example justice-league
   */
  slug: string;
  /*
   * URL for the team
   *
   * @example https://api.github.com/organizations/1/team/1
   * @format uri
   */
  url: string;
} | null;

/**
 * Thread
 */
export type Thread = {
  id: string;
  last_read_at: string | null;
  reason: string;
  repository: MinimalRepository;
  subject: {
    latest_comment_url: string;
    title: string;
    type: string;
    url: string;
  };
  /*
   * @example https://api.github.com/notifications/threads/2/subscription
   */
  subscription_url: string;
  unread: boolean;
  updated_at: string;
  url: string;
};

/**
 * Thread Subscription
 */
export type ThreadSubscription = {
  /*
   * @example "2012-10-06T21:34:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  ignored: boolean;
  reason: string | null;
  /*
   * @example https://api.github.com/repos/1
   * @format uri
   */
  repository_url?: string;
  /*
   * @example true
   */
  subscribed: boolean;
  /*
   * @example https://api.github.com/notifications/threads/1
   * @format uri
   */
  thread_url?: string;
  /*
   * @example https://api.github.com/notifications/threads/1/subscription
   * @format uri
   */
  url: string;
};

/**
 * A topic aggregates entities that are related to a subject.
 */
export type Topic = {
  names: string[];
};

/**
 * Topic Search Result Item
 */
export type TopicSearchResultItem = {
  aliases?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          relation_type?: string;
          topic_id?: number;
        };
      }[]
    | null;
  /*
   * @format date-time
   */
  created_at: string;
  created_by: string | null;
  curated: boolean;
  description: string | null;
  display_name: string | null;
  featured: boolean;
  /*
   * @format uri
   */
  logo_url?: string | null;
  name: string;
  related?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          relation_type?: string;
          topic_id?: number;
        };
      }[]
    | null;
  released: string | null;
  repository_count?: number | null;
  score: number;
  short_description: string | null;
  text_matches?: SearchResultTextMatches;
  /*
   * @format date-time
   */
  updated_at: string;
};

export type Traffic = {
  count: number;
  /*
   * @format date-time
   */
  timestamp: string;
  uniques: number;
};

/**
 * User Marketplace Purchase
 */
export type UserMarketplacePurchase = {
  account: MarketplaceAccount;
  /*
   * @example monthly
   */
  billing_cycle: string;
  /*
   * @example "2017-11-11T00:00:00.000Z"
   * @format date-time
   */
  free_trial_ends_on: string | null;
  /*
   * @example "2017-11-11T00:00:00.000Z"
   * @format date-time
   */
  next_billing_date: string | null;
  /*
   * @example true
   */
  on_free_trial: boolean;
  plan: MarketplaceListingPlan;
  unit_count: number | null;
  /*
   * @example "2017-11-02T01:12:12.000Z"
   * @format date-time
   */
  updated_at: string | null;
};

/**
 * User Search Result Item
 */
export type UserSearchResultItem = {
  /*
   * @format uri
   */
  avatar_url: string;
  bio?: string | null;
  blog?: string | null;
  company?: string | null;
  /*
   * @format date-time
   */
  created_at?: string;
  /*
   * @format email
   */
  email?: string | null;
  events_url: string;
  followers?: number;
  /*
   * @format uri
   */
  followers_url: string;
  following?: number;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  hireable?: boolean | null;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  location?: string | null;
  login: string;
  name?: string | null;
  node_id: string;
  /*
   * @format uri
   */
  organizations_url: string;
  public_gists?: number;
  public_repos?: number;
  /*
   * @format uri
   */
  received_events_url: string;
  /*
   * @format uri
   */
  repos_url: string;
  score: number;
  site_admin: boolean;
  starred_url: string;
  /*
   * @format uri
   */
  subscriptions_url: string;
  /*
   * @format date-time
   */
  suspended_at?: string | null;
  text_matches?: SearchResultTextMatches;
  type: string;
  /*
   * @format date-time
   */
  updated_at?: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Validation Error
 */
export type ValidationError = {
  documentation_url: string;
  errors?: {
    code: string;
    field?: string;
    index?: number;
    message?: string;
    resource?: string;
    value?: (string | null) | (number | null) | (string[] | null);
  }[];
  message: string;
};

/**
 * Validation Error Simple
 */
export type ValidationErrorSimple = {
  documentation_url: string;
  errors?: string[];
  message: string;
};

export type Verification = {
  payload: string | null;
  reason: string;
  signature: string | null;
  verified: boolean;
};

/**
 * View Traffic
 */
export type ViewTraffic = {
  /*
   * @example 14850
   */
  count: number;
  /*
   * @example 3782
   */
  uniques: number;
  views: Traffic[];
};

/**
 * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
 *
 * @example 30
 */
export type WaitTimer = number;

/**
 * Configuration object of the webhook
 */
export type WebhookConfig = {
  content_type?: WebhookConfigContentType;
  insecure_ssl?: WebhookConfigInsecureSsl;
  secret?: WebhookConfigSecret;
  url?: WebhookConfigUrl;
};

/**
 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
 *
 * @example "json"
 */
export type WebhookConfigContentType = string;

/**
 * Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**
 *
 * @example "0"
 */
export type WebhookConfigInsecureSsl = string;

/**
 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 *
 * @example "********"
 */
export type WebhookConfigSecret = string;

/**
 * The URL to which the payloads will be delivered.
 *
 * @example https://example.com/webhook
 * @format uri
 */
export type WebhookConfigUrl = string;

/**
 * A GitHub Actions workflow
 */
export type Workflow = {
  /*
   * @example https://github.com/actions/setup-ruby/workflows/CI/badge.svg
   */
  badge_url: string;
  /*
   * @example "2019-12-06T14:20:20.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example "2019-12-06T14:20:20.000Z"
   * @format date-time
   */
  deleted_at?: string;
  /*
   * @example https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml
   */
  html_url: string;
  /*
   * @example 5
   */
  id: number;
  /*
   * @example CI
   */
  name: string;
  /*
   * @example MDg6V29ya2Zsb3cxMg==
   */
  node_id: string;
  /*
   * @example ruby.yaml
   */
  path: string;
  /*
   * @example active
   */
  state: "active" | "deleted";
  /*
   * @example "2019-12-06T14:20:20.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/actions/setup-ruby/workflows/5
   */
  url: string;
};

/**
 * An invocation of a workflow
 */
export type WorkflowRun = {
  /*
   * The URL to the artifacts for the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts
   */
  artifacts_url: string;
  /*
   * The URL to cancel the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/cancel
   */
  cancel_url: string;
  /*
   * The URL to the associated check suite.
   *
   * @example https://api.github.com/repos/github/hello-world/check-suites/12
   */
  check_suite_url: string;
  /*
   * @example neutral
   */
  conclusion: string | null;
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * @example push
   */
  event: string;
  /*
   * @example master
   */
  head_branch: string | null;
  head_commit: SimpleCommit;
  head_repository: MinimalRepository;
  /*
   * @example 5
   */
  head_repository_id?: number;
  /*
   * The SHA of the head commit that points to the version of the worflow being run.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /*
   * @example https://github.com/github/hello-world/suites/4
   */
  html_url: string;
  /*
   * The ID of the workflow run.
   *
   * @example 5
   */
  id: number;
  /*
   * The URL to the jobs for the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/jobs
   */
  jobs_url: string;
  /*
   * The URL to download the logs for the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/logs
   */
  logs_url: string;
  /*
   * The name of the workflow run.
   *
   * @example Build
   */
  name?: string;
  /*
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;
  pull_requests: PullRequestMinimal[] | null;
  repository: MinimalRepository;
  /*
   * The URL to rerun the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun
   */
  rerun_url: string;
  /*
   * The auto incrementing run number for the workflow run.
   *
   * @example 106
   */
  run_number: number;
  /*
   * @example completed
   */
  status: string | null;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * The URL to the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5
   */
  url: string;
  /*
   * The ID of the parent workflow.
   *
   * @example 5
   */
  workflow_id: number;
  /*
   * The URL to the workflow.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml
   */
  workflow_url: string;
};

/**
 * Workflow Run Usage
 */
export type WorkflowRunUsage = {
  billable: {
    MACOS?: {
      jobs: number;
      total_ms: number;
    };
    UBUNTU?: {
      jobs: number;
      total_ms: number;
    };
    WINDOWS?: {
      jobs: number;
      total_ms: number;
    };
  };
  run_duration_ms: number;
};

/**
 * Workflow Usage
 */
export type WorkflowUsage = {
  billable: {
    MACOS?: {
      total_ms?: number;
    };
    UBUNTU?: {
      total_ms?: number;
    };
    WINDOWS?: {
      total_ms?: number;
    };
  };
};

--- End of openapi-codegen/examples/frontend/src/github/githubSchemas.ts ---

--- Start of openapi-codegen/examples/frontend/src/github/githubContext.ts ---
import type { QueryKey, UseQueryOptions } from "@tanstack/react-query";
import { useToken } from "../Auth";
import { QueryOperation } from "./githubComponents";

export type GithubContext = {
  fetcherOptions: {
    /**
     * Headers to inject in the fetcher
     */
    headers?: {
      authorization?: string;
    };
    /**
     * Query params to inject in the fetcher
     */
    queryParams?: {};
  };
  queryOptions: {
    /**
     * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.
     * Defaults to `true`.
     */
    enabled?: boolean;
  };
  /**
   * Query key manager.
   */
  queryKeyFn: (operation: QueryOperation) => QueryKey;
};

/**
 * Context injected into every react-query hook wrappers
 *
 * @param queryOptions options from the useQuery wrapper
 */
export function useGithubContext<
  TQueryFnData = unknown,
  TError = unknown,
  TData = TQueryFnData,
  TQueryKey extends QueryKey = QueryKey
>(
  queryOptions?: Omit<
    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,
    "queryKey" | "queryFn"
  >
): GithubContext {
  const token = useToken();
  return {
    fetcherOptions: {
      headers: {
        authorization: token ? `Bearer ${token}` : undefined,
      },
    },
    queryOptions: {
      enabled: token !== null && (queryOptions?.enabled ?? true),
    },
    queryKeyFn: (operation) => {
      const queryKey: unknown[] = hasPathParams(operation)
        ? operation.path
            .split("/")
            .filter(Boolean)
            .map((i) => resolvePathParam(i, operation.variables.pathParams))
        : operation.path.split("/").filter(Boolean);

      if (hasQueryParams(operation)) {
        queryKey.push(operation.variables.queryParams);
      }

      if (hasBody(operation)) {
        queryKey.push(operation.variables.body);
      }

      return queryKey;
    },
  };
}

// Helpers
const resolvePathParam = (key: string, pathParams: Record<string, string>) => {
  if (key.startsWith("{") && key.endsWith("}")) {
    return pathParams[key.slice(1, -1)];
  }
  return key;
};

const hasPathParams = (
  operation: QueryOperation
): operation is QueryOperation & {
  variables: { pathParams: Record<string, string> };
} => {
  return Boolean((operation.variables as any).pathParams);
};

const hasBody = (
  operation: QueryOperation
): operation is QueryOperation & {
  variables: { body: Record<string, unknown> };
} => {
  return Boolean((operation.variables as any).body);
};

const hasQueryParams = (
  operation: QueryOperation
): operation is QueryOperation & {
  variables: { queryParams: Record<string, unknown> };
} => {
  return Boolean((operation.variables as any).queryParams);
};

--- End of openapi-codegen/examples/frontend/src/github/githubContext.ts ---

--- Start of openapi-codegen/examples/frontend/src/github/githubComponents.ts ---
/**
 * Generated by @openapi-codegen
 *
 * @version 1.1.4
 */
import * as reactQuery from "@tanstack/react-query";
import { useGithubContext, GithubContext } from "./githubContext";
import type * as Fetcher from "./githubFetcher";
import { githubFetch } from "./githubFetcher";
import type * as Schemas from "./githubSchemas";
import type * as Responses from "./githubResponses";

export type MetaRootError = Fetcher.ErrorWrapper<undefined>;

export type MetaRootResponse = {
  /*
   * @format uri
   */
  authorizations_url: string;
  /*
   * @format uri
   */
  code_search_url: string;
  /*
   * @format uri
   */
  commit_search_url: string;
  /*
   * @format uri
   */
  current_user_authorizations_html_url: string;
  /*
   * @format uri
   */
  current_user_repositories_url: string;
  /*
   * @format uri
   */
  current_user_url: string;
  /*
   * @format uri
   */
  emails_url: string;
  /*
   * @format uri
   */
  emojis_url: string;
  /*
   * @format uri
   */
  events_url: string;
  /*
   * @format uri
   */
  feeds_url: string;
  /*
   * @format uri
   */
  followers_url: string;
  /*
   * @format uri
   */
  following_url: string;
  /*
   * @format uri
   */
  gists_url: string;
  /*
   * @format uri
   */
  hub_url: string;
  /*
   * @format uri
   */
  issue_search_url: string;
  /*
   * @format uri
   */
  issues_url: string;
  /*
   * @format uri
   */
  keys_url: string;
  /*
   * @format uri
   */
  label_search_url: string;
  /*
   * @format uri
   */
  notifications_url: string;
  /*
   * @format uri
   */
  organization_repositories_url: string;
  /*
   * @format uri
   */
  organization_teams_url: string;
  /*
   * @format uri
   */
  organization_url: string;
  /*
   * @format uri
   */
  public_gists_url: string;
  /*
   * @format uri
   */
  rate_limit_url: string;
  /*
   * @format uri
   */
  repository_search_url: string;
  /*
   * @format uri
   */
  repository_url: string;
  /*
   * @format uri
   */
  starred_gists_url: string;
  /*
   * @format uri
   */
  starred_url: string;
  /*
   * @format uri
   */
  topic_search_url?: string;
  /*
   * @format uri
   */
  user_organizations_url: string;
  /*
   * @format uri
   */
  user_repositories_url: string;
  /*
   * @format uri
   */
  user_search_url: string;
  /*
   * @format uri
   */
  user_url: string;
};

export type MetaRootVariables = GithubContext["fetcherOptions"];

/**
 * Get Hypermedia links to resources accessible in GitHub's REST API
 */
export const fetchMetaRoot = (variables: MetaRootVariables) =>
  githubFetch<MetaRootResponse, MetaRootError, undefined, {}, {}, {}>({
    url: "/",
    method: "get",
    ...variables,
  });

/**
 * Get Hypermedia links to resources accessible in GitHub's REST API
 */
export const useMetaRoot = <TData = MetaRootResponse>(
  variables: MetaRootVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<MetaRootResponse, MetaRootError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<MetaRootResponse, MetaRootError, TData>(
    queryKeyFn({ path: "/", operationId: "metaRoot", variables }),
    () => fetchMetaRoot({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsGetAuthenticatedError = Fetcher.ErrorWrapper<undefined>;

export type AppsGetAuthenticatedVariables = GithubContext["fetcherOptions"];

/**
 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetAuthenticated = (
  variables: AppsGetAuthenticatedVariables
) =>
  githubFetch<
    Schemas.Integration,
    AppsGetAuthenticatedError,
    undefined,
    {},
    {},
    {}
  >({ url: "/app", method: "get", ...variables });

/**
 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetAuthenticated = <TData = Schemas.Integration>(
  variables: AppsGetAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Integration,
      AppsGetAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Integration,
    AppsGetAuthenticatedError,
    TData
  >(
    queryKeyFn({
      path: "/app",
      operationId: "appsGetAuthenticated",
      variables,
    }),
    () => fetchAppsGetAuthenticated({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsCreateFromManifestPathParams = {
  code: string;
};

export type AppsCreateFromManifestError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type AppsCreateFromManifestResponse = {
  /*
   * @example "Iv1.25b5d1e65ffc4022"
   */
  client_id: string;
  /*
   * @example "1d4b2097ac622ba702d19de498f005747a8b21d3"
   */
  client_secret: string;
  /*
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example The description of the app.
   */
  description: string | null;
  /*
   * The list of events for the GitHub app
   *
   * @example label
   * @example deployment
   */
  events: string[];
  /*
   * @example https://example.com
   * @format uri
   */
  external_url: string;
  /*
   * @example https://github.com/apps/super-ci
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the GitHub app
   *
   * @example 37
   */
  id?: number;
  /*
   * The number of installations associated with the GitHub app
   *
   * @example 5
   */
  installations_count?: number;
  /*
   * The name of the GitHub app
   *
   * @example Probot Owners
   */
  name?: string;
  /*
   * @example MDExOkludGVncmF0aW9uMQ==
   */
  node_id?: string;
  /*
   * Simple User
   */
  owner?: Schemas.SimpleUser;
  /*
   * @example "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n"
   */
  pem: string;
  /*
   * The set of permissions for the GitHub app
   *
   * @example {"deployments":"write","issues":"read"}
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    issues?: string;
    metadata?: string;
  } & {
    [key: string]: string;
  };
  /*
   * The slug name of the GitHub app
   *
   * @example probot-owners
   */
  slug?: string;
  /*
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"
   */
  webhook_secret: string;
} & {
  [key: string]: any;
};

export type AppsCreateFromManifestVariables = {
  pathParams: AppsCreateFromManifestPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
 */
export const fetchAppsCreateFromManifest = (
  variables: AppsCreateFromManifestVariables
) =>
  githubFetch<
    AppsCreateFromManifestResponse,
    AppsCreateFromManifestError,
    undefined,
    {},
    {},
    AppsCreateFromManifestPathParams
  >({ url: "/app-manifests/{code}/conversions", method: "post", ...variables });

/**
 * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
 */
export const useAppsCreateFromManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AppsCreateFromManifestResponse,
      AppsCreateFromManifestError,
      AppsCreateFromManifestVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    AppsCreateFromManifestResponse,
    AppsCreateFromManifestError,
    AppsCreateFromManifestVariables
  >(
    (variables: AppsCreateFromManifestVariables) =>
      fetchAppsCreateFromManifest({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetWebhookConfigForAppError = Fetcher.ErrorWrapper<undefined>;

export type AppsGetWebhookConfigForAppVariables =
  GithubContext["fetcherOptions"];

/**
 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetWebhookConfigForApp = (
  variables: AppsGetWebhookConfigForAppVariables
) =>
  githubFetch<
    Schemas.WebhookConfig,
    AppsGetWebhookConfigForAppError,
    undefined,
    {},
    {},
    {}
  >({ url: "/app/hook/config", method: "get", ...variables });

/**
 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetWebhookConfigForApp = <TData = Schemas.WebhookConfig>(
  variables: AppsGetWebhookConfigForAppVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      AppsGetWebhookConfigForAppError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WebhookConfig,
    AppsGetWebhookConfigForAppError,
    TData
  >(
    queryKeyFn({
      path: "/app/hook/config",
      operationId: "appsGetWebhookConfigForApp",
      variables,
    }),
    () => fetchAppsGetWebhookConfigForApp({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsUpdateWebhookConfigForAppError =
  Fetcher.ErrorWrapper<undefined>;

export type AppsUpdateWebhookConfigForAppRequestBody = {
  content_type?: Schemas.WebhookConfigContentType;
  insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
  secret?: Schemas.WebhookConfigSecret;
  url?: Schemas.WebhookConfigUrl;
};

export type AppsUpdateWebhookConfigForAppVariables = {
  body?: AppsUpdateWebhookConfigForAppRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsUpdateWebhookConfigForApp = (
  variables: AppsUpdateWebhookConfigForAppVariables
) =>
  githubFetch<
    Schemas.WebhookConfig,
    AppsUpdateWebhookConfigForAppError,
    AppsUpdateWebhookConfigForAppRequestBody,
    {},
    {},
    {}
  >({ url: "/app/hook/config", method: "patch", ...variables });

/**
 * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsUpdateWebhookConfigForApp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.WebhookConfig,
      AppsUpdateWebhookConfigForAppError,
      AppsUpdateWebhookConfigForAppVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.WebhookConfig,
    AppsUpdateWebhookConfigForAppError,
    AppsUpdateWebhookConfigForAppVariables
  >(
    (variables: AppsUpdateWebhookConfigForAppVariables) =>
      fetchAppsUpdateWebhookConfigForApp({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsListInstallationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  outdated?: string;
};

export type AppsListInstallationsError = Fetcher.ErrorWrapper<undefined>;

export type AppsListInstallationsResponse = Schemas.Installation[];

export type AppsListInstallationsVariables = {
  queryParams?: AppsListInstallationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * The permissions the installation has are included under the `permissions` key.
 */
export const fetchAppsListInstallations = (
  variables: AppsListInstallationsVariables
) =>
  githubFetch<
    AppsListInstallationsResponse,
    AppsListInstallationsError,
    undefined,
    {},
    AppsListInstallationsQueryParams,
    {}
  >({ url: "/app/installations", method: "get", ...variables });

/**
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * The permissions the installation has are included under the `permissions` key.
 */
export const useAppsListInstallations = <TData = AppsListInstallationsResponse>(
  variables: AppsListInstallationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationsResponse,
      AppsListInstallationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListInstallationsResponse,
    AppsListInstallationsError,
    TData
  >(
    queryKeyFn({
      path: "/app/installations",
      operationId: "appsListInstallations",
      variables,
    }),
    () => fetchAppsListInstallations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsDeleteInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsDeleteInstallationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type AppsDeleteInstallationVariables = {
  pathParams: AppsDeleteInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsDeleteInstallation = (
  variables: AppsDeleteInstallationVariables
) =>
  githubFetch<
    undefined,
    AppsDeleteInstallationError,
    undefined,
    {},
    {},
    AppsDeleteInstallationPathParams
  >({
    url: "/app/installations/{installationId}",
    method: "delete",
    ...variables,
  });

/**
 * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsDeleteInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsDeleteInstallationError,
      AppsDeleteInstallationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsDeleteInstallationError,
    AppsDeleteInstallationVariables
  >(
    (variables: AppsDeleteInstallationVariables) =>
      fetchAppsDeleteInstallation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsGetInstallationError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type AppsGetInstallationVariables = {
  pathParams: AppsGetInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetInstallation = (
  variables: AppsGetInstallationVariables
) =>
  githubFetch<
    Schemas.Installation,
    AppsGetInstallationError,
    undefined,
    {},
    {},
    AppsGetInstallationPathParams
  >({
    url: "/app/installations/{installationId}",
    method: "get",
    ...variables,
  });

/**
 * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetInstallation = <TData = Schemas.Installation>(
  variables: AppsGetInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetInstallationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    AppsGetInstallationError,
    TData
  >(
    queryKeyFn({
      path: "/app/installations/{installation_id}",
      operationId: "appsGetInstallation",
      variables,
    }),
    () => fetchAppsGetInstallation({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsCreateInstallationAccessTokenPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsCreateInstallationAccessTokenError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsCreateInstallationAccessTokenRequestBody = {
  permissions?: Schemas.AppPermissions;
  /*
   * List of repository names that the token should have access to
   */
  repositories?: string[];
  /*
   * List of repository IDs that the token should have access to
   *
   * @example 1
   */
  repository_ids?: number[];
};

export type AppsCreateInstallationAccessTokenVariables = {
  body?: AppsCreateInstallationAccessTokenRequestBody;
  pathParams: AppsCreateInstallationAccessTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsCreateInstallationAccessToken = (
  variables: AppsCreateInstallationAccessTokenVariables
) =>
  githubFetch<
    Schemas.InstallationToken,
    AppsCreateInstallationAccessTokenError,
    AppsCreateInstallationAccessTokenRequestBody,
    {},
    {},
    AppsCreateInstallationAccessTokenPathParams
  >({
    url: "/app/installations/{installationId}/access_tokens",
    method: "post",
    ...variables,
  });

/**
 * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsCreateInstallationAccessToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InstallationToken,
      AppsCreateInstallationAccessTokenError,
      AppsCreateInstallationAccessTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InstallationToken,
    AppsCreateInstallationAccessTokenError,
    AppsCreateInstallationAccessTokenVariables
  >(
    (variables: AppsCreateInstallationAccessTokenVariables) =>
      fetchAppsCreateInstallationAccessToken({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type AppsUnsuspendInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsUnsuspendInstallationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type AppsUnsuspendInstallationVariables = {
  pathParams: AppsUnsuspendInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a GitHub App installation suspension.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsUnsuspendInstallation = (
  variables: AppsUnsuspendInstallationVariables
) =>
  githubFetch<
    undefined,
    AppsUnsuspendInstallationError,
    undefined,
    {},
    {},
    AppsUnsuspendInstallationPathParams
  >({
    url: "/app/installations/{installationId}/suspended",
    method: "delete",
    ...variables,
  });

/**
 * Removes a GitHub App installation suspension.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsUnsuspendInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsUnsuspendInstallationError,
      AppsUnsuspendInstallationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsUnsuspendInstallationError,
    AppsUnsuspendInstallationVariables
  >(
    (variables: AppsUnsuspendInstallationVariables) =>
      fetchAppsUnsuspendInstallation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsSuspendInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsSuspendInstallationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type AppsSuspendInstallationVariables = {
  pathParams: AppsSuspendInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsSuspendInstallation = (
  variables: AppsSuspendInstallationVariables
) =>
  githubFetch<
    undefined,
    AppsSuspendInstallationError,
    undefined,
    {},
    {},
    AppsSuspendInstallationPathParams
  >({
    url: "/app/installations/{installationId}/suspended",
    method: "put",
    ...variables,
  });

/**
 * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsSuspendInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsSuspendInstallationError,
      AppsSuspendInstallationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsSuspendInstallationError,
    AppsSuspendInstallationVariables
  >(
    (variables: AppsSuspendInstallationVariables) =>
      fetchAppsSuspendInstallation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OauthAuthorizationsListGrantsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * The client ID of your GitHub app.
   */
  client_id?: string;
};

export type OauthAuthorizationsListGrantsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type OauthAuthorizationsListGrantsResponse = Schemas.ApplicationGrant[];

export type OauthAuthorizationsListGrantsVariables = {
  queryParams?: OauthAuthorizationsListGrantsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
 */
export const fetchOauthAuthorizationsListGrants = (
  variables: OauthAuthorizationsListGrantsVariables
) =>
  githubFetch<
    OauthAuthorizationsListGrantsResponse,
    OauthAuthorizationsListGrantsError,
    undefined,
    {},
    OauthAuthorizationsListGrantsQueryParams,
    {}
  >({ url: "/applications/grants", method: "get", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
 */
export const useOauthAuthorizationsListGrants = <
  TData = OauthAuthorizationsListGrantsResponse
>(
  variables: OauthAuthorizationsListGrantsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OauthAuthorizationsListGrantsResponse,
      OauthAuthorizationsListGrantsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OauthAuthorizationsListGrantsResponse,
    OauthAuthorizationsListGrantsError,
    TData
  >(
    queryKeyFn({
      path: "/applications/grants",
      operationId: "oauthAuthorizationsListGrants",
      variables,
    }),
    () =>
      fetchOauthAuthorizationsListGrants({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OauthAuthorizationsDeleteGrantPathParams = {
  /*
   * grant_id parameter
   */
  grantId: number;
};

export type OauthAuthorizationsDeleteGrantError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type OauthAuthorizationsDeleteGrantVariables = {
  pathParams: OauthAuthorizationsDeleteGrantPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const fetchOauthAuthorizationsDeleteGrant = (
  variables: OauthAuthorizationsDeleteGrantVariables
) =>
  githubFetch<
    undefined,
    OauthAuthorizationsDeleteGrantError,
    undefined,
    {},
    {},
    OauthAuthorizationsDeleteGrantPathParams
  >({ url: "/applications/grants/{grantId}", method: "delete", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const useOauthAuthorizationsDeleteGrant = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OauthAuthorizationsDeleteGrantError,
      OauthAuthorizationsDeleteGrantVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OauthAuthorizationsDeleteGrantError,
    OauthAuthorizationsDeleteGrantVariables
  >(
    (variables: OauthAuthorizationsDeleteGrantVariables) =>
      fetchOauthAuthorizationsDeleteGrant({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OauthAuthorizationsGetGrantPathParams = {
  /*
   * grant_id parameter
   */
  grantId: number;
};

export type OauthAuthorizationsGetGrantError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type OauthAuthorizationsGetGrantVariables = {
  pathParams: OauthAuthorizationsGetGrantPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const fetchOauthAuthorizationsGetGrant = (
  variables: OauthAuthorizationsGetGrantVariables
) =>
  githubFetch<
    Schemas.ApplicationGrant,
    OauthAuthorizationsGetGrantError,
    undefined,
    {},
    {},
    OauthAuthorizationsGetGrantPathParams
  >({ url: "/applications/grants/{grantId}", method: "get", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const useOauthAuthorizationsGetGrant = <
  TData = Schemas.ApplicationGrant
>(
  variables: OauthAuthorizationsGetGrantVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ApplicationGrant,
      OauthAuthorizationsGetGrantError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ApplicationGrant,
    OauthAuthorizationsGetGrantError,
    TData
  >(
    queryKeyFn({
      path: "/applications/grants/{grant_id}",
      operationId: "oauthAuthorizationsGetGrant",
      variables,
    }),
    () => fetchOauthAuthorizationsGetGrant({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsDeleteAuthorizationPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type AppsDeleteAuthorizationError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type AppsDeleteAuthorizationRequestBody = {
  /*
   * The OAuth access token used to authenticate to the GitHub API.
   */
  access_token?: string;
};

export type AppsDeleteAuthorizationVariables = {
  body?: AppsDeleteAuthorizationRequestBody;
  pathParams: AppsDeleteAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const fetchAppsDeleteAuthorization = (
  variables: AppsDeleteAuthorizationVariables
) =>
  githubFetch<
    undefined,
    AppsDeleteAuthorizationError,
    AppsDeleteAuthorizationRequestBody,
    {},
    {},
    AppsDeleteAuthorizationPathParams
  >({ url: "/applications/{clientId}/grant", method: "delete", ...variables });

/**
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const useAppsDeleteAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsDeleteAuthorizationError,
      AppsDeleteAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsDeleteAuthorizationError,
    AppsDeleteAuthorizationVariables
  >(
    (variables: AppsDeleteAuthorizationVariables) =>
      fetchAppsDeleteAuthorization({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsRevokeGrantForApplicationPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
  accessToken: string;
};

export type AppsRevokeGrantForApplicationError =
  Fetcher.ErrorWrapper<undefined>;

export type AppsRevokeGrantForApplicationVariables = {
  pathParams: AppsRevokeGrantForApplicationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
 *
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub](https://github.com/settings/applications#authorized).
 */
export const fetchAppsRevokeGrantForApplication = (
  variables: AppsRevokeGrantForApplicationVariables
) =>
  githubFetch<
    undefined,
    AppsRevokeGrantForApplicationError,
    undefined,
    {},
    {},
    AppsRevokeGrantForApplicationPathParams
  >({
    url: "/applications/{clientId}/grants/{accessToken}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
 *
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub](https://github.com/settings/applications#authorized).
 */
export const useAppsRevokeGrantForApplication = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsRevokeGrantForApplicationError,
      AppsRevokeGrantForApplicationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsRevokeGrantForApplicationError,
    AppsRevokeGrantForApplicationVariables
  >(
    (variables: AppsRevokeGrantForApplicationVariables) =>
      fetchAppsRevokeGrantForApplication({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsDeleteTokenPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type AppsDeleteTokenError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type AppsDeleteTokenRequestBody = {
  /*
   * The OAuth access token used to authenticate to the GitHub API.
   */
  access_token: string;
};

export type AppsDeleteTokenVariables = {
  body: AppsDeleteTokenRequestBody;
  pathParams: AppsDeleteTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const fetchAppsDeleteToken = (variables: AppsDeleteTokenVariables) =>
  githubFetch<
    undefined,
    AppsDeleteTokenError,
    AppsDeleteTokenRequestBody,
    {},
    {},
    AppsDeleteTokenPathParams
  >({ url: "/applications/{clientId}/token", method: "delete", ...variables });

/**
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const useAppsDeleteToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsDeleteTokenError,
      AppsDeleteTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsDeleteTokenError,
    AppsDeleteTokenVariables
  >(
    (variables: AppsDeleteTokenVariables) =>
      fetchAppsDeleteToken({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsResetTokenPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type AppsResetTokenError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type AppsResetTokenRequestBody = {
  /*
   * The access_token of the OAuth application.
   */
  access_token: string;
};

export type AppsResetTokenVariables = {
  body: AppsResetTokenRequestBody;
  pathParams: AppsResetTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsResetToken = (variables: AppsResetTokenVariables) =>
  githubFetch<
    Schemas.Authorization,
    AppsResetTokenError,
    AppsResetTokenRequestBody,
    {},
    {},
    AppsResetTokenPathParams
  >({ url: "/applications/{clientId}/token", method: "patch", ...variables });

/**
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsResetToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      AppsResetTokenError,
      AppsResetTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    AppsResetTokenError,
    AppsResetTokenVariables
  >(
    (variables: AppsResetTokenVariables) =>
      fetchAppsResetToken({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsCheckTokenPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type AppsCheckTokenError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsCheckTokenRequestBody = {
  /*
   * The access_token of the OAuth application.
   */
  access_token: string;
};

export type AppsCheckTokenVariables = {
  body: AppsCheckTokenRequestBody;
  pathParams: AppsCheckTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsCheckToken = (variables: AppsCheckTokenVariables) =>
  githubFetch<
    Schemas.Authorization,
    AppsCheckTokenError,
    AppsCheckTokenRequestBody,
    {},
    {},
    AppsCheckTokenPathParams
  >({ url: "/applications/{clientId}/token", method: "post", ...variables });

/**
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsCheckToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      AppsCheckTokenError,
      AppsCheckTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    AppsCheckTokenError,
    AppsCheckTokenVariables
  >(
    (variables: AppsCheckTokenVariables) =>
      fetchAppsCheckToken({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsScopeTokenPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type AppsScopeTokenError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsScopeTokenRequestBody = {
  /*
   * **Required.** The OAuth access token used to authenticate to the GitHub API.
   *
   * @example e72e16c7e42f292c6912e7710c838347ae178b4a
   */
  access_token: string;
  permissions?: Schemas.AppPermissions;
  /*
   * The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.
   */
  repositories?: string[];
  /*
   * The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
   *
   * @example 1
   */
  repository_ids?: number[];
  /*
   * The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
   *
   * @example octocat
   */
  target?: string;
  /*
   * The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
   *
   * @example 1
   */
  target_id?: number;
};

export type AppsScopeTokenVariables = {
  body: AppsScopeTokenRequestBody;
  pathParams: AppsScopeTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Exchanges a non-repository scoped user-to-server OAuth access token for a repository scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsScopeToken = (variables: AppsScopeTokenVariables) =>
  githubFetch<
    Schemas.Authorization,
    AppsScopeTokenError,
    AppsScopeTokenRequestBody,
    {},
    {},
    AppsScopeTokenPathParams
  >({
    url: "/applications/{clientId}/token/scoped",
    method: "post",
    ...variables,
  });

/**
 * Exchanges a non-repository scoped user-to-server OAuth access token for a repository scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsScopeToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      AppsScopeTokenError,
      AppsScopeTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    AppsScopeTokenError,
    AppsScopeTokenVariables
  >(
    (variables: AppsScopeTokenVariables) =>
      fetchAppsScopeToken({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsRevokeAuthorizationForApplicationPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
  accessToken: string;
};

export type AppsRevokeAuthorizationForApplicationError =
  Fetcher.ErrorWrapper<undefined>;

export type AppsRevokeAuthorizationForApplicationVariables = {
  pathParams: AppsRevokeAuthorizationForApplicationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const fetchAppsRevokeAuthorizationForApplication = (
  variables: AppsRevokeAuthorizationForApplicationVariables
) =>
  githubFetch<
    undefined,
    AppsRevokeAuthorizationForApplicationError,
    undefined,
    {},
    {},
    AppsRevokeAuthorizationForApplicationPathParams
  >({
    url: "/applications/{clientId}/tokens/{accessToken}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const useAppsRevokeAuthorizationForApplication = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsRevokeAuthorizationForApplicationError,
      AppsRevokeAuthorizationForApplicationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsRevokeAuthorizationForApplicationError,
    AppsRevokeAuthorizationForApplicationVariables
  >(
    (variables: AppsRevokeAuthorizationForApplicationVariables) =>
      fetchAppsRevokeAuthorizationForApplication({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type AppsCheckAuthorizationPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
  accessToken: string;
};

export type AppsCheckAuthorizationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type AppsCheckAuthorizationResponse = Schemas.Authorization;

export type AppsCheckAuthorizationVariables = {
  pathParams: AppsCheckAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsCheckAuthorization = (
  variables: AppsCheckAuthorizationVariables
) =>
  githubFetch<
    AppsCheckAuthorizationResponse,
    AppsCheckAuthorizationError,
    undefined,
    {},
    {},
    AppsCheckAuthorizationPathParams
  >({
    url: "/applications/{clientId}/tokens/{accessToken}",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsCheckAuthorization = <
  TData = AppsCheckAuthorizationResponse
>(
  variables: AppsCheckAuthorizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsCheckAuthorizationResponse,
      AppsCheckAuthorizationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsCheckAuthorizationResponse,
    AppsCheckAuthorizationError,
    TData
  >(
    queryKeyFn({
      path: "/applications/{client_id}/tokens/{access_token}",
      operationId: "appsCheckAuthorization",
      variables,
    }),
    () => fetchAppsCheckAuthorization({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsResetAuthorizationPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
  accessToken: string;
};

export type AppsResetAuthorizationError = Fetcher.ErrorWrapper<undefined>;

export type AppsResetAuthorizationVariables = {
  pathParams: AppsResetAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsResetAuthorization = (
  variables: AppsResetAuthorizationVariables
) =>
  githubFetch<
    Schemas.Authorization,
    AppsResetAuthorizationError,
    undefined,
    {},
    {},
    AppsResetAuthorizationPathParams
  >({
    url: "/applications/{clientId}/tokens/{accessToken}",
    method: "post",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsResetAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      AppsResetAuthorizationError,
      AppsResetAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    AppsResetAuthorizationError,
    AppsResetAuthorizationVariables
  >(
    (variables: AppsResetAuthorizationVariables) =>
      fetchAppsResetAuthorization({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetBySlugPathParams = {
  appSlug: string;
};

export type AppsGetBySlugError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type AppsGetBySlugVariables = {
  pathParams: AppsGetBySlugPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
 *
 * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const fetchAppsGetBySlug = (variables: AppsGetBySlugVariables) =>
  githubFetch<
    Schemas.Integration,
    AppsGetBySlugError,
    undefined,
    {},
    {},
    AppsGetBySlugPathParams
  >({ url: "/apps/{appSlug}", method: "get", ...variables });

/**
 * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
 *
 * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useAppsGetBySlug = <TData = Schemas.Integration>(
  variables: AppsGetBySlugVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Integration, AppsGetBySlugError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Integration, AppsGetBySlugError, TData>(
    queryKeyFn({
      path: "/apps/{app_slug}",
      operationId: "appsGetBySlug",
      variables,
    }),
    () => fetchAppsGetBySlug({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OauthAuthorizationsListAuthorizationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * The client ID of your GitHub app.
   */
  client_id?: string;
};

export type OauthAuthorizationsListAuthorizationsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type OauthAuthorizationsListAuthorizationsResponse =
  Schemas.Authorization[];

export type OauthAuthorizationsListAuthorizationsVariables = {
  queryParams?: OauthAuthorizationsListAuthorizationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const fetchOauthAuthorizationsListAuthorizations = (
  variables: OauthAuthorizationsListAuthorizationsVariables
) =>
  githubFetch<
    OauthAuthorizationsListAuthorizationsResponse,
    OauthAuthorizationsListAuthorizationsError,
    undefined,
    {},
    OauthAuthorizationsListAuthorizationsQueryParams,
    {}
  >({ url: "/authorizations", method: "get", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const useOauthAuthorizationsListAuthorizations = <
  TData = OauthAuthorizationsListAuthorizationsResponse
>(
  variables: OauthAuthorizationsListAuthorizationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OauthAuthorizationsListAuthorizationsResponse,
      OauthAuthorizationsListAuthorizationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OauthAuthorizationsListAuthorizationsResponse,
    OauthAuthorizationsListAuthorizationsError,
    TData
  >(
    queryKeyFn({
      path: "/authorizations",
      operationId: "oauthAuthorizationsListAuthorizations",
      variables,
    }),
    () =>
      fetchOauthAuthorizationsListAuthorizations({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OauthAuthorizationsCreateAuthorizationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OauthAuthorizationsCreateAuthorizationRequestBody = {
  /*
   * The OAuth app client key for which to create the token.
   *
   * @maxLength 20
   */
  client_id?: string;
  /*
   * The OAuth app client secret for which to create the token.
   *
   * @maxLength 40
   */
  client_secret?: string;
  /*
   * A unique string to distinguish an authorization from others created for the same client ID and user.
   */
  fingerprint?: string;
  /*
   * A note to remind you what the OAuth token is for.
   *
   * @example Update all gems
   */
  note?: string;
  /*
   * A URL to remind you what app the OAuth token is for.
   */
  note_url?: string;
  /*
   * A list of scopes that this authorization is in.
   *
   * @example public_repo
   * @example user
   */
  scopes?: string[] | null;
};

export type OauthAuthorizationsCreateAuthorizationVariables = {
  body?: OauthAuthorizationsCreateAuthorizationRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
 *
 * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).
 *
 * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
 */
export const fetchOauthAuthorizationsCreateAuthorization = (
  variables: OauthAuthorizationsCreateAuthorizationVariables
) =>
  githubFetch<
    Schemas.Authorization,
    OauthAuthorizationsCreateAuthorizationError,
    OauthAuthorizationsCreateAuthorizationRequestBody,
    {},
    {},
    {}
  >({ url: "/authorizations", method: "post", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
 *
 * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).
 *
 * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
 */
export const useOauthAuthorizationsCreateAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      OauthAuthorizationsCreateAuthorizationError,
      OauthAuthorizationsCreateAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    OauthAuthorizationsCreateAuthorizationError,
    OauthAuthorizationsCreateAuthorizationVariables
  >(
    (variables: OauthAuthorizationsCreateAuthorizationVariables) =>
      fetchOauthAuthorizationsCreateAuthorization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OauthAuthorizationsGetOrCreateAuthorizationForAppPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type OauthAuthorizationsGetOrCreateAuthorizationForAppError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type OauthAuthorizationsGetOrCreateAuthorizationForAppRequestBody = {
  /*
   * The OAuth app client secret for which to create the token.
   *
   * @maxLength 40
   */
  client_secret: string;
  /*
   * A unique string to distinguish an authorization from others created for the same client ID and user.
   */
  fingerprint?: string;
  /*
   * A note to remind you what the OAuth token is for.
   *
   * @example Update all gems
   */
  note?: string;
  /*
   * A URL to remind you what app the OAuth token is for.
   */
  note_url?: string;
  /*
   * A list of scopes that this authorization is in.
   *
   * @example public_repo
   * @example user
   */
  scopes?: string[] | null;
};

export type OauthAuthorizationsGetOrCreateAuthorizationForAppVariables = {
  body: OauthAuthorizationsGetOrCreateAuthorizationForAppRequestBody;
  pathParams: OauthAuthorizationsGetOrCreateAuthorizationForAppPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const fetchOauthAuthorizationsGetOrCreateAuthorizationForApp = (
  variables: OauthAuthorizationsGetOrCreateAuthorizationForAppVariables
) =>
  githubFetch<
    Schemas.Authorization,
    OauthAuthorizationsGetOrCreateAuthorizationForAppError,
    OauthAuthorizationsGetOrCreateAuthorizationForAppRequestBody,
    {},
    {},
    OauthAuthorizationsGetOrCreateAuthorizationForAppPathParams
  >({ url: "/authorizations/clients/{clientId}", method: "put", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const useOauthAuthorizationsGetOrCreateAuthorizationForApp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      OauthAuthorizationsGetOrCreateAuthorizationForAppError,
      OauthAuthorizationsGetOrCreateAuthorizationForAppVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    OauthAuthorizationsGetOrCreateAuthorizationForAppError,
    OauthAuthorizationsGetOrCreateAuthorizationForAppVariables
  >(
    (variables: OauthAuthorizationsGetOrCreateAuthorizationForAppVariables) =>
      fetchOauthAuthorizationsGetOrCreateAuthorizationForApp({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintPathParams =
  {
    /*
     * The client ID of your GitHub app.
     */
    clientId: string;
    fingerprint: string;
  };

export type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Responses.ValidationFailed;
  }>;

export type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestBody =
  {
    /*
     * The OAuth app client secret for which to create the token.
     *
     * @maxLength 40
     */
    client_secret: string;
    /*
     * A note to remind you what the OAuth token is for.
     *
     * @example Update all gems
     */
    note?: string;
    /*
     * A URL to remind you what app the OAuth token is for.
     */
    note_url?: string;
    /*
     * A list of scopes that this authorization is in.
     *
     * @example public_repo
     * @example user
     */
    scopes?: string[] | null;
  };

export type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintVariables =
  {
    body: OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestBody;
    pathParams: OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 */
export const fetchOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint =
  (
    variables: OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintVariables
  ) =>
    githubFetch<
      Schemas.Authorization,
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintError,
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestBody,
      {},
      {},
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintPathParams
    >({
      url: "/authorizations/clients/{clientId}/{fingerprint}",
      method: "put",
      ...variables,
    });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 */
export const useOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        Schemas.Authorization,
        OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintError,
        OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      Schemas.Authorization,
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintError,
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintVariables
    >(
      (
        variables: OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintVariables
      ) =>
        fetchOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type OauthAuthorizationsDeleteAuthorizationPathParams = {
  /*
   * authorization_id parameter
   */
  authorizationId: number;
};

export type OauthAuthorizationsDeleteAuthorizationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type OauthAuthorizationsDeleteAuthorizationVariables = {
  pathParams: OauthAuthorizationsDeleteAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const fetchOauthAuthorizationsDeleteAuthorization = (
  variables: OauthAuthorizationsDeleteAuthorizationVariables
) =>
  githubFetch<
    undefined,
    OauthAuthorizationsDeleteAuthorizationError,
    undefined,
    {},
    {},
    OauthAuthorizationsDeleteAuthorizationPathParams
  >({
    url: "/authorizations/{authorizationId}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const useOauthAuthorizationsDeleteAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OauthAuthorizationsDeleteAuthorizationError,
      OauthAuthorizationsDeleteAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OauthAuthorizationsDeleteAuthorizationError,
    OauthAuthorizationsDeleteAuthorizationVariables
  >(
    (variables: OauthAuthorizationsDeleteAuthorizationVariables) =>
      fetchOauthAuthorizationsDeleteAuthorization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OauthAuthorizationsGetAuthorizationPathParams = {
  /*
   * authorization_id parameter
   */
  authorizationId: number;
};

export type OauthAuthorizationsGetAuthorizationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type OauthAuthorizationsGetAuthorizationVariables = {
  pathParams: OauthAuthorizationsGetAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const fetchOauthAuthorizationsGetAuthorization = (
  variables: OauthAuthorizationsGetAuthorizationVariables
) =>
  githubFetch<
    Schemas.Authorization,
    OauthAuthorizationsGetAuthorizationError,
    undefined,
    {},
    {},
    OauthAuthorizationsGetAuthorizationPathParams
  >({ url: "/authorizations/{authorizationId}", method: "get", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const useOauthAuthorizationsGetAuthorization = <
  TData = Schemas.Authorization
>(
  variables: OauthAuthorizationsGetAuthorizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Authorization,
      OauthAuthorizationsGetAuthorizationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Authorization,
    OauthAuthorizationsGetAuthorizationError,
    TData
  >(
    queryKeyFn({
      path: "/authorizations/{authorization_id}",
      operationId: "oauthAuthorizationsGetAuthorization",
      variables,
    }),
    () =>
      fetchOauthAuthorizationsGetAuthorization({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OauthAuthorizationsUpdateAuthorizationPathParams = {
  /*
   * authorization_id parameter
   */
  authorizationId: number;
};

export type OauthAuthorizationsUpdateAuthorizationError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type OauthAuthorizationsUpdateAuthorizationRequestBody = {
  /*
   * A list of scopes to add to this authorization.
   */
  add_scopes?: string[];
  /*
   * A unique string to distinguish an authorization from others created for the same client ID and user.
   */
  fingerprint?: string;
  /*
   * A note to remind you what the OAuth token is for.
   *
   * @example Update all gems
   */
  note?: string;
  /*
   * A URL to remind you what app the OAuth token is for.
   */
  note_url?: string;
  /*
   * A list of scopes to remove from this authorization.
   */
  remove_scopes?: string[];
  /*
   * A list of scopes that this authorization is in.
   *
   * @example public_repo
   * @example user
   */
  scopes?: string[] | null;
};

export type OauthAuthorizationsUpdateAuthorizationVariables = {
  body?: OauthAuthorizationsUpdateAuthorizationRequestBody;
  pathParams: OauthAuthorizationsUpdateAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * You can only send one of these scope keys at a time.
 */
export const fetchOauthAuthorizationsUpdateAuthorization = (
  variables: OauthAuthorizationsUpdateAuthorizationVariables
) =>
  githubFetch<
    Schemas.Authorization,
    OauthAuthorizationsUpdateAuthorizationError,
    OauthAuthorizationsUpdateAuthorizationRequestBody,
    {},
    {},
    OauthAuthorizationsUpdateAuthorizationPathParams
  >({
    url: "/authorizations/{authorizationId}",
    method: "patch",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * You can only send one of these scope keys at a time.
 */
export const useOauthAuthorizationsUpdateAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      OauthAuthorizationsUpdateAuthorizationError,
      OauthAuthorizationsUpdateAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    OauthAuthorizationsUpdateAuthorizationError,
    OauthAuthorizationsUpdateAuthorizationVariables
  >(
    (variables: OauthAuthorizationsUpdateAuthorizationVariables) =>
      fetchOauthAuthorizationsUpdateAuthorization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type CodesOfConductGetAllCodesOfConductError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type CodesOfConductGetAllCodesOfConductResponse =
  Schemas.CodeOfConduct[];

export type CodesOfConductGetAllCodesOfConductVariables =
  GithubContext["fetcherOptions"];

export const fetchCodesOfConductGetAllCodesOfConduct = (
  variables: CodesOfConductGetAllCodesOfConductVariables
) =>
  githubFetch<
    CodesOfConductGetAllCodesOfConductResponse,
    CodesOfConductGetAllCodesOfConductError,
    undefined,
    {},
    {},
    {}
  >({ url: "/codes_of_conduct", method: "get", ...variables });

export const useCodesOfConductGetAllCodesOfConduct = <
  TData = CodesOfConductGetAllCodesOfConductResponse
>(
  variables: CodesOfConductGetAllCodesOfConductVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodesOfConductGetAllCodesOfConductResponse,
      CodesOfConductGetAllCodesOfConductError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    CodesOfConductGetAllCodesOfConductResponse,
    CodesOfConductGetAllCodesOfConductError,
    TData
  >(
    queryKeyFn({
      path: "/codes_of_conduct",
      operationId: "codesOfConductGetAllCodesOfConduct",
      variables,
    }),
    () =>
      fetchCodesOfConductGetAllCodesOfConduct({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodesOfConductGetConductCodePathParams = {
  key: string;
};

export type CodesOfConductGetConductCodeError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type CodesOfConductGetConductCodeVariables = {
  pathParams: CodesOfConductGetConductCodePathParams;
} & GithubContext["fetcherOptions"];

export const fetchCodesOfConductGetConductCode = (
  variables: CodesOfConductGetConductCodeVariables
) =>
  githubFetch<
    Schemas.CodeOfConduct,
    CodesOfConductGetConductCodeError,
    undefined,
    {},
    {},
    CodesOfConductGetConductCodePathParams
  >({ url: "/codes_of_conduct/{key}", method: "get", ...variables });

export const useCodesOfConductGetConductCode = <TData = Schemas.CodeOfConduct>(
  variables: CodesOfConductGetConductCodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeOfConduct,
      CodesOfConductGetConductCodeError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeOfConduct,
    CodesOfConductGetConductCodeError,
    TData
  >(
    queryKeyFn({
      path: "/codes_of_conduct/{key}",
      operationId: "codesOfConductGetConductCode",
      variables,
    }),
    () =>
      fetchCodesOfConductGetConductCode({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsCreateContentAttachmentPathParams = {
  contentReferenceId: number;
};

export type AppsCreateContentAttachmentError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsCreateContentAttachmentRequestBody = {
  /*
   * The body of the attachment
   *
   * @example Body of the attachment
   * @maxLength 262144
   */
  body: string;
  /*
   * The title of the attachment
   *
   * @example Title of the attachment
   * @maxLength 1024
   */
  title: string;
};

export type AppsCreateContentAttachmentVariables = {
  body: AppsCreateContentAttachmentRequestBody;
  pathParams: AppsCreateContentAttachmentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.
 *
 * The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/apps/using-content-attachments/)" for details about content attachments.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const fetchAppsCreateContentAttachment = (
  variables: AppsCreateContentAttachmentVariables
) =>
  githubFetch<
    Schemas.ContentReferenceAttachment,
    AppsCreateContentAttachmentError,
    AppsCreateContentAttachmentRequestBody,
    {},
    {},
    AppsCreateContentAttachmentPathParams
  >({
    url: "/content_references/{contentReferenceId}/attachments",
    method: "post",
    ...variables,
  });

/**
 * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.
 *
 * The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/apps/using-content-attachments/)" for details about content attachments.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useAppsCreateContentAttachment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ContentReferenceAttachment,
      AppsCreateContentAttachmentError,
      AppsCreateContentAttachmentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ContentReferenceAttachment,
    AppsCreateContentAttachmentError,
    AppsCreateContentAttachmentVariables
  >(
    (variables: AppsCreateContentAttachmentVariables) =>
      fetchAppsCreateContentAttachment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type EmojisGetError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type EmojisGetResponse = {
  [key: string]: string;
};

export type EmojisGetVariables = GithubContext["fetcherOptions"];

/**
 * Lists all the emojis available to use on GitHub.
 */
export const fetchEmojisGet = (variables: EmojisGetVariables) =>
  githubFetch<EmojisGetResponse, EmojisGetError, undefined, {}, {}, {}>({
    url: "/emojis",
    method: "get",
    ...variables,
  });

/**
 * Lists all the emojis available to use on GitHub.
 */
export const useEmojisGet = <TData = EmojisGetResponse>(
  variables: EmojisGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<EmojisGetResponse, EmojisGetError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<EmojisGetResponse, EmojisGetError, TData>(
    queryKeyFn({ path: "/emojis", operationId: "emojisGet", variables }),
    () => fetchEmojisGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminGetGithubActionsPermissionsEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminGetGithubActionsPermissionsEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminGetGithubActionsPermissionsEnterpriseVariables = {
  pathParams: EnterpriseAdminGetGithubActionsPermissionsEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminGetGithubActionsPermissionsEnterprise = (
  variables: EnterpriseAdminGetGithubActionsPermissionsEnterpriseVariables
) =>
  githubFetch<
    Schemas.ActionsEnterprisePermissions,
    EnterpriseAdminGetGithubActionsPermissionsEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminGetGithubActionsPermissionsEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/permissions",
    method: "get",
    ...variables,
  });

/**
 * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminGetGithubActionsPermissionsEnterprise = <
  TData = Schemas.ActionsEnterprisePermissions
>(
  variables: EnterpriseAdminGetGithubActionsPermissionsEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsEnterprisePermissions,
      EnterpriseAdminGetGithubActionsPermissionsEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsEnterprisePermissions,
    EnterpriseAdminGetGithubActionsPermissionsEnterpriseError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/permissions",
      operationId: "enterpriseAdminGetGithubActionsPermissionsEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetGithubActionsPermissionsEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminSetGithubActionsPermissionsEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminSetGithubActionsPermissionsEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequestBody = {
  allowed_actions?: Schemas.AllowedActions;
  enabled_organizations: Schemas.EnabledOrganizations;
};

export type EnterpriseAdminSetGithubActionsPermissionsEnterpriseVariables = {
  body: EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequestBody;
  pathParams: EnterpriseAdminSetGithubActionsPermissionsEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminSetGithubActionsPermissionsEnterprise = (
  variables: EnterpriseAdminSetGithubActionsPermissionsEnterpriseVariables
) =>
  githubFetch<
    undefined,
    EnterpriseAdminSetGithubActionsPermissionsEnterpriseError,
    EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequestBody,
    {},
    {},
    EnterpriseAdminSetGithubActionsPermissionsEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/permissions",
    method: "put",
    ...variables,
  });

/**
 * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminSetGithubActionsPermissionsEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EnterpriseAdminSetGithubActionsPermissionsEnterpriseError,
      EnterpriseAdminSetGithubActionsPermissionsEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    EnterpriseAdminSetGithubActionsPermissionsEnterpriseError,
    EnterpriseAdminSetGithubActionsPermissionsEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminSetGithubActionsPermissionsEnterpriseVariables
    ) =>
      fetchEnterpriseAdminSetGithubActionsPermissionsEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
  };

export type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseQueryParams =
  {
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse =
  {
    organizations: Schemas.OrganizationSimple[];
    total_count: number;
  };

export type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseVariables =
  {
    pathParams: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprisePathParams;
    queryParams?: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise =
  (
    variables: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseVariables
  ) =>
    githubFetch<
      EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse,
      EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseError,
      undefined,
      {},
      EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseQueryParams,
      EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/permissions/organizations",
      method: "get",
      ...variables,
    });

/**
 * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise =
  <
    TData = EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
  >(
    variables: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse,
        EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseError,
        TData
      >,
      "queryKey" | "queryFn"
    >
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useGithubContext(options);
    return reactQuery.useQuery<
      EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse,
      EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseError,
      TData
    >(
      queryKeyFn({
        path: "/enterprises/{enterprise}/actions/permissions/organizations",
        operationId:
          "enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise",
        variables,
      }),
      () =>
        fetchEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(
          { ...fetcherOptions, ...variables }
        ),
      {
        ...options,
        ...queryOptions,
      }
    );
  };

export type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
  };

export type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequestBody =
  {
    /*
     * List of organization IDs to enable for GitHub Actions.
     */
    selected_organization_ids: number[];
  };

export type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseVariables =
  {
    body: EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequestBody;
    pathParams: EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise =
  (
    variables: EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseError,
      EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequestBody,
      {},
      {},
      EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/permissions/organizations",
      method: "put",
      ...variables,
    });

/**
 * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseError,
        EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseError,
      EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseVariables
      ) =>
        fetchEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(
          { ...fetcherOptions, ...variables }
        ),
      options
    );
  };

export type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of an organization.
     */
    orgId: number;
  };

export type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseVariables =
  {
    pathParams: EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise =
  (
    variables: EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseError,
      undefined,
      {},
      {},
      EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/permissions/organizations/{orgId}",
      method: "delete",
      ...variables,
    });

/**
 * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseError,
        EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseError,
      EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseVariables
      ) =>
        fetchEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of an organization.
     */
    orgId: number;
  };

export type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseVariables =
  {
    pathParams: EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise =
  (
    variables: EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseError,
      undefined,
      {},
      {},
      EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/permissions/organizations/{orgId}",
      method: "put",
      ...variables,
    });

/**
 * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseError,
        EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseError,
      EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseVariables
      ) =>
        fetchEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type EnterpriseAdminGetAllowedActionsEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminGetAllowedActionsEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminGetAllowedActionsEnterpriseVariables = {
  pathParams: EnterpriseAdminGetAllowedActionsEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminGetAllowedActionsEnterprise = (
  variables: EnterpriseAdminGetAllowedActionsEnterpriseVariables
) =>
  githubFetch<
    Schemas.SelectedActions,
    EnterpriseAdminGetAllowedActionsEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminGetAllowedActionsEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/permissions/selected-actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminGetAllowedActionsEnterprise = <
  TData = Schemas.SelectedActions
>(
  variables: EnterpriseAdminGetAllowedActionsEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SelectedActions,
      EnterpriseAdminGetAllowedActionsEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SelectedActions,
    EnterpriseAdminGetAllowedActionsEnterpriseError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/permissions/selected-actions",
      operationId: "enterpriseAdminGetAllowedActionsEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetAllowedActionsEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminSetAllowedActionsEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminSetAllowedActionsEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminSetAllowedActionsEnterpriseVariables = {
  body: Schemas.SelectedActions;
  pathParams: EnterpriseAdminSetAllowedActionsEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminSetAllowedActionsEnterprise = (
  variables: EnterpriseAdminSetAllowedActionsEnterpriseVariables
) =>
  githubFetch<
    undefined,
    EnterpriseAdminSetAllowedActionsEnterpriseError,
    Schemas.SelectedActions,
    {},
    {},
    EnterpriseAdminSetAllowedActionsEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/permissions/selected-actions",
    method: "put",
    ...variables,
  });

/**
 * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminSetAllowedActionsEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EnterpriseAdminSetAllowedActionsEnterpriseError,
      EnterpriseAdminSetAllowedActionsEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    EnterpriseAdminSetAllowedActionsEnterpriseError,
    EnterpriseAdminSetAllowedActionsEnterpriseVariables
  >(
    (variables: EnterpriseAdminSetAllowedActionsEnterpriseVariables) =>
      fetchEnterpriseAdminSetAllowedActionsEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListSelfHostedRunnerGroupsForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQueryParams =
  {
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse = {
  runner_groups: Schemas.RunnerGroupsEnterprise[];
  total_count: number;
};

export type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseVariables = {
  pathParams: EnterpriseAdminListSelfHostedRunnerGroupsForEnterprisePathParams;
  queryParams?: EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all self-hosted runner groups for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListSelfHostedRunnerGroupsForEnterprise = (
  variables: EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseVariables
) =>
  githubFetch<
    EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse,
    EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseError,
    undefined,
    {},
    EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQueryParams,
    EnterpriseAdminListSelfHostedRunnerGroupsForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups",
    method: "get",
    ...variables,
  });

/**
 * Lists all self-hosted runner groups for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListSelfHostedRunnerGroupsForEnterprise = <
  TData = EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse
>(
  variables: EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse,
      EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse,
    EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runner-groups",
      operationId: "enterpriseAdminListSelfHostedRunnerGroupsForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListSelfHostedRunnerGroupsForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
  };

export type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequestBody =
  {
    /*
     * Name of the runner group.
     */
    name: string;
    /*
     * List of runner IDs to add to the runner group.
     */
    runners?: number[];
    /*
     * List of organization IDs that can access the runner group.
     */
    selected_organization_ids?: number[];
    /*
     * Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected`
     */
    visibility?: "selected" | "all";
  };

export type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseVariables = {
  body: EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequestBody;
  pathParams: EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise = (
  variables: EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsEnterprise,
    EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseError,
    EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequestBody,
    {},
    {},
    EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups",
    method: "post",
    ...variables,
  });

/**
 * Creates a new self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RunnerGroupsEnterprise,
      EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseError,
      EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RunnerGroupsEnterprise,
    EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseError,
    EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseVariables
    ) =>
      fetchEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseVariables =
  {
    pathParams: EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Deletes a self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise = (
  variables: EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseVariables
) =>
  githubFetch<
    undefined,
    EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseError,
      EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseError,
    EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseVariables
    ) =>
      fetchEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminGetSelfHostedRunnerGroupForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseVariables = {
  pathParams: EnterpriseAdminGetSelfHostedRunnerGroupForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminGetSelfHostedRunnerGroupForEnterprise = (
  variables: EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsEnterprise,
    EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminGetSelfHostedRunnerGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminGetSelfHostedRunnerGroupForEnterprise = <
  TData = Schemas.RunnerGroupsEnterprise
>(
  variables: EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RunnerGroupsEnterprise,
      EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RunnerGroupsEnterprise,
    EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
      operationId: "enterpriseAdminGetSelfHostedRunnerGroupForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetSelfHostedRunnerGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequestBody =
  {
    /*
     * Name of the runner group.
     */
    name?: string;
    /*
     * Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected`
     *
     * @default all
     */
    visibility?: "selected" | "all";
  };

export type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseVariables = {
  body?: EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequestBody;
  pathParams: EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise = (
  variables: EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsEnterprise,
    EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseError,
    EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequestBody,
    {},
    {},
    EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}",
    method: "patch",
    ...variables,
  });

/**
 * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RunnerGroupsEnterprise,
      EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseError,
      EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RunnerGroupsEnterprise,
    EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseError,
    EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseVariables
    ) =>
      fetchEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseQueryParams =
  {
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse =
  {
    organizations: Schemas.OrganizationSimple[];
    total_count: number;
  };

export type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables =
  {
    pathParams: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams;
    queryParams?: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Lists the organizations with access to a self-hosted runner group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    variables: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
  ) =>
    githubFetch<
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse,
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
      undefined,
      {},
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseQueryParams,
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/organizations",
      method: "get",
      ...variables,
    });

/**
 * Lists the organizations with access to a self-hosted runner group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise =
  <
    TData = EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
  >(
    variables: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse,
        EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
        TData
      >,
      "queryKey" | "queryFn"
    >
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useGithubContext(options);
    return reactQuery.useQuery<
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse,
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
      TData
    >(
      queryKeyFn({
        path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
        operationId:
          "enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise",
        variables,
      }),
      () =>
        fetchEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      {
        ...options,
        ...queryOptions,
      }
    );
  };

export type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestBody =
  {
    /*
     * List of organization IDs that can access the runner group.
     */
    selected_organization_ids: number[];
  };

export type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables =
  {
    body: EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestBody;
    pathParams: EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    variables: EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
      EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestBody,
      {},
      {},
      EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/organizations",
      method: "put",
      ...variables,
    });

/**
 * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
        EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
      EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      ) =>
        fetchEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
    /*
     * Unique identifier of an organization.
     */
    orgId: number;
  };

export type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables =
  {
    pathParams: EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    variables: EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
      undefined,
      {},
      {},
      EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/organizations/{orgId}",
      method: "delete",
      ...variables,
    });

/**
 * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
        EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
      EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      ) =>
        fetchEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
    /*
     * Unique identifier of an organization.
     */
    orgId: number;
  };

export type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables =
  {
    pathParams: EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    variables: EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
      undefined,
      {},
      {},
      EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/organizations/{orgId}",
      method: "put",
      ...variables,
    });

/**
 * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
        EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseError,
      EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      ) =>
        fetchEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type EnterpriseAdminListSelfHostedRunnersInGroupForEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseQueryParams =
  {
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse = {
  runners: Schemas.Runner[];
  total_count: number;
};

export type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseVariables =
  {
    pathParams: EnterpriseAdminListSelfHostedRunnersInGroupForEnterprisePathParams;
    queryParams?: EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Lists the self-hosted runners that are in a specific enterprise group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListSelfHostedRunnersInGroupForEnterprise = (
  variables: EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseVariables
) =>
  githubFetch<
    EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse,
    EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseError,
    undefined,
    {},
    EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseQueryParams,
    EnterpriseAdminListSelfHostedRunnersInGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/runners",
    method: "get",
    ...variables,
  });

/**
 * Lists the self-hosted runners that are in a specific enterprise group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListSelfHostedRunnersInGroupForEnterprise = <
  TData = EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse
>(
  variables: EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse,
      EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse,
    EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
      operationId: "enterpriseAdminListSelfHostedRunnersInGroupForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListSelfHostedRunnersInGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequestBody =
  {
    /*
     * List of runner IDs to add to the runner group.
     */
    runners: number[];
  };

export type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseVariables = {
  body: EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequestBody;
  pathParams: EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Replaces the list of self-hosted runners that are part of an enterprise runner group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise = (
  variables: EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseVariables
) =>
  githubFetch<
    undefined,
    EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseError,
    EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequestBody,
    {},
    {},
    EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/runners",
    method: "put",
    ...variables,
  });

/**
 * Replaces the list of self-hosted runners that are part of an enterprise runner group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseError,
      EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseError,
    EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseVariables
    ) =>
      fetchEnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
    /*
     * Unique identifier of the self-hosted runner.
     */
    runnerId: number;
  };

export type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseVariables =
  {
    pathParams: EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise =
  (
    variables: EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseError,
      undefined,
      {},
      {},
      EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/runners/{runnerId}",
      method: "delete",
      ...variables,
    });

/**
 * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseError,
      EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseError,
    EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseVariables
    ) =>
      fetchEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseVariables = {
  pathParams: EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a self-hosted runner to a runner group configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise`
 * scope to use this endpoint.
 */
export const fetchEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise = (
  variables: EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseVariables
) =>
  githubFetch<
    undefined,
    EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/runners/{runnerId}",
    method: "put",
    ...variables,
  });

/**
 * Adds a self-hosted runner to a runner group configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise`
 * scope to use this endpoint.
 */
export const useEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseError,
      EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseError,
    EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseVariables
    ) =>
      fetchEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListSelfHostedRunnersForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminListSelfHostedRunnersForEnterpriseQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type EnterpriseAdminListSelfHostedRunnersForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse = {
  runners?: Schemas.Runner[];
  total_count?: number;
};

export type EnterpriseAdminListSelfHostedRunnersForEnterpriseVariables = {
  pathParams: EnterpriseAdminListSelfHostedRunnersForEnterprisePathParams;
  queryParams?: EnterpriseAdminListSelfHostedRunnersForEnterpriseQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all self-hosted runners configured for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListSelfHostedRunnersForEnterprise = (
  variables: EnterpriseAdminListSelfHostedRunnersForEnterpriseVariables
) =>
  githubFetch<
    EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse,
    EnterpriseAdminListSelfHostedRunnersForEnterpriseError,
    undefined,
    {},
    EnterpriseAdminListSelfHostedRunnersForEnterpriseQueryParams,
    EnterpriseAdminListSelfHostedRunnersForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners",
    method: "get",
    ...variables,
  });

/**
 * Lists all self-hosted runners configured for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListSelfHostedRunnersForEnterprise = <
  TData = EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse
>(
  variables: EnterpriseAdminListSelfHostedRunnersForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse,
      EnterpriseAdminListSelfHostedRunnersForEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse,
    EnterpriseAdminListSelfHostedRunnersForEnterpriseError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runners",
      operationId: "enterpriseAdminListSelfHostedRunnersForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListSelfHostedRunnersForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminListRunnerApplicationsForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminListRunnerApplicationsForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminListRunnerApplicationsForEnterpriseResponse =
  Schemas.RunnerApplication[];

export type EnterpriseAdminListRunnerApplicationsForEnterpriseVariables = {
  pathParams: EnterpriseAdminListRunnerApplicationsForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListRunnerApplicationsForEnterprise = (
  variables: EnterpriseAdminListRunnerApplicationsForEnterpriseVariables
) =>
  githubFetch<
    EnterpriseAdminListRunnerApplicationsForEnterpriseResponse,
    EnterpriseAdminListRunnerApplicationsForEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminListRunnerApplicationsForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners/downloads",
    method: "get",
    ...variables,
  });

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListRunnerApplicationsForEnterprise = <
  TData = EnterpriseAdminListRunnerApplicationsForEnterpriseResponse
>(
  variables: EnterpriseAdminListRunnerApplicationsForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EnterpriseAdminListRunnerApplicationsForEnterpriseResponse,
      EnterpriseAdminListRunnerApplicationsForEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    EnterpriseAdminListRunnerApplicationsForEnterpriseResponse,
    EnterpriseAdminListRunnerApplicationsForEnterpriseError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runners/downloads",
      operationId: "enterpriseAdminListRunnerApplicationsForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListRunnerApplicationsForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminCreateRegistrationTokenForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminCreateRegistrationTokenForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminCreateRegistrationTokenForEnterpriseVariables = {
  pathParams: EnterpriseAdminCreateRegistrationTokenForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
 * ```
 */
export const fetchEnterpriseAdminCreateRegistrationTokenForEnterprise = (
  variables: EnterpriseAdminCreateRegistrationTokenForEnterpriseVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    EnterpriseAdminCreateRegistrationTokenForEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminCreateRegistrationTokenForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners/registration-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
 * ```
 */
export const useEnterpriseAdminCreateRegistrationTokenForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      EnterpriseAdminCreateRegistrationTokenForEnterpriseError,
      EnterpriseAdminCreateRegistrationTokenForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    EnterpriseAdminCreateRegistrationTokenForEnterpriseError,
    EnterpriseAdminCreateRegistrationTokenForEnterpriseVariables
  >(
    (variables: EnterpriseAdminCreateRegistrationTokenForEnterpriseVariables) =>
      fetchEnterpriseAdminCreateRegistrationTokenForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminCreateRemoveTokenForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminCreateRemoveTokenForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminCreateRemoveTokenForEnterpriseVariables = {
  pathParams: EnterpriseAdminCreateRemoveTokenForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
 * endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const fetchEnterpriseAdminCreateRemoveTokenForEnterprise = (
  variables: EnterpriseAdminCreateRemoveTokenForEnterpriseVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    EnterpriseAdminCreateRemoveTokenForEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminCreateRemoveTokenForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners/remove-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
 * endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const useEnterpriseAdminCreateRemoveTokenForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      EnterpriseAdminCreateRemoveTokenForEnterpriseError,
      EnterpriseAdminCreateRemoveTokenForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    EnterpriseAdminCreateRemoveTokenForEnterpriseError,
    EnterpriseAdminCreateRemoveTokenForEnterpriseVariables
  >(
    (variables: EnterpriseAdminCreateRemoveTokenForEnterpriseVariables) =>
      fetchEnterpriseAdminCreateRemoveTokenForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseVariables = {
  pathParams: EnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminDeleteSelfHostedRunnerFromEnterprise = (
  variables: EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseVariables
) =>
  githubFetch<
    undefined,
    EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners/{runnerId}",
    method: "delete",
    ...variables,
  });

/**
 * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminDeleteSelfHostedRunnerFromEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseError,
      EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseError,
    EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseVariables
  >(
    (variables: EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseVariables) =>
      fetchEnterpriseAdminDeleteSelfHostedRunnerFromEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminGetSelfHostedRunnerForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type EnterpriseAdminGetSelfHostedRunnerForEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminGetSelfHostedRunnerForEnterpriseVariables = {
  pathParams: EnterpriseAdminGetSelfHostedRunnerForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminGetSelfHostedRunnerForEnterprise = (
  variables: EnterpriseAdminGetSelfHostedRunnerForEnterpriseVariables
) =>
  githubFetch<
    Schemas.Runner,
    EnterpriseAdminGetSelfHostedRunnerForEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminGetSelfHostedRunnerForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners/{runnerId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminGetSelfHostedRunnerForEnterprise = <
  TData = Schemas.Runner
>(
  variables: EnterpriseAdminGetSelfHostedRunnerForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Runner,
      EnterpriseAdminGetSelfHostedRunnerForEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Runner,
    EnterpriseAdminGetSelfHostedRunnerForEnterpriseError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runners/{runner_id}",
      operationId: "enterpriseAdminGetSelfHostedRunnerForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetSelfHostedRunnerForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AuditLogGetAuditLogPathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type AuditLogGetAuditLogQueryParams = {
  /*
   * A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
   */
  phrase?: string;
  /*
   * The event types to include:
   *
   * - `web` - returns web (non-Git) events
   * - `git` - returns Git events
   * - `all` - returns both web and Git events
   *
   * The default is `web`.
   */
  include?: "web" | "git" | "all";
  /*
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
   */
  after?: string;
  /*
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
   */
  before?: string;
  /*
   * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
   *
   * The default is `desc`.
   */
  order?: "desc" | "asc";
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type AuditLogGetAuditLogError = Fetcher.ErrorWrapper<undefined>;

export type AuditLogGetAuditLogResponse = Schemas.AuditLogEvent[];

export type AuditLogGetAuditLogVariables = {
  pathParams: AuditLogGetAuditLogPathParams;
  queryParams?: AuditLogGetAuditLogQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The audit log REST API is currently in beta and is subject to change.
 *
 * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
 */
export const fetchAuditLogGetAuditLog = (
  variables: AuditLogGetAuditLogVariables
) =>
  githubFetch<
    AuditLogGetAuditLogResponse,
    AuditLogGetAuditLogError,
    undefined,
    {},
    AuditLogGetAuditLogQueryParams,
    AuditLogGetAuditLogPathParams
  >({
    url: "/enterprises/{enterprise}/audit-log",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The audit log REST API is currently in beta and is subject to change.
 *
 * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
 */
export const useAuditLogGetAuditLog = <TData = AuditLogGetAuditLogResponse>(
  variables: AuditLogGetAuditLogVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AuditLogGetAuditLogResponse,
      AuditLogGetAuditLogError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AuditLogGetAuditLogResponse,
    AuditLogGetAuditLogError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/audit-log",
      operationId: "auditLogGetAuditLog",
      variables,
    }),
    () => fetchAuditLogGetAuditLog({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetGithubActionsBillingGhePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type BillingGetGithubActionsBillingGheError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetGithubActionsBillingGheVariables = {
  pathParams: BillingGetGithubActionsBillingGhePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * The authenticated user must be an enterprise admin.
 */
export const fetchBillingGetGithubActionsBillingGhe = (
  variables: BillingGetGithubActionsBillingGheVariables
) =>
  githubFetch<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingGheError,
    undefined,
    {},
    {},
    BillingGetGithubActionsBillingGhePathParams
  >({
    url: "/enterprises/{enterprise}/settings/billing/actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * The authenticated user must be an enterprise admin.
 */
export const useBillingGetGithubActionsBillingGhe = <
  TData = Schemas.ActionsBillingUsage
>(
  variables: BillingGetGithubActionsBillingGheVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsBillingUsage,
      BillingGetGithubActionsBillingGheError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingGheError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/settings/billing/actions",
      operationId: "billingGetGithubActionsBillingGhe",
      variables,
    }),
    () =>
      fetchBillingGetGithubActionsBillingGhe({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetGithubPackagesBillingGhePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type BillingGetGithubPackagesBillingGheError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetGithubPackagesBillingGheVariables = {
  pathParams: BillingGetGithubPackagesBillingGhePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * The authenticated user must be an enterprise admin.
 */
export const fetchBillingGetGithubPackagesBillingGhe = (
  variables: BillingGetGithubPackagesBillingGheVariables
) =>
  githubFetch<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingGheError,
    undefined,
    {},
    {},
    BillingGetGithubPackagesBillingGhePathParams
  >({
    url: "/enterprises/{enterprise}/settings/billing/packages",
    method: "get",
    ...variables,
  });

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * The authenticated user must be an enterprise admin.
 */
export const useBillingGetGithubPackagesBillingGhe = <
  TData = Schemas.PackagesBillingUsage
>(
  variables: BillingGetGithubPackagesBillingGheVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackagesBillingUsage,
      BillingGetGithubPackagesBillingGheError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingGheError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/settings/billing/packages",
      operationId: "billingGetGithubPackagesBillingGhe",
      variables,
    }),
    () =>
      fetchBillingGetGithubPackagesBillingGhe({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetSharedStorageBillingGhePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type BillingGetSharedStorageBillingGheError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetSharedStorageBillingGheVariables = {
  pathParams: BillingGetSharedStorageBillingGhePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * The authenticated user must be an enterprise admin.
 */
export const fetchBillingGetSharedStorageBillingGhe = (
  variables: BillingGetSharedStorageBillingGheVariables
) =>
  githubFetch<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingGheError,
    undefined,
    {},
    {},
    BillingGetSharedStorageBillingGhePathParams
  >({
    url: "/enterprises/{enterprise}/settings/billing/shared-storage",
    method: "get",
    ...variables,
  });

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * The authenticated user must be an enterprise admin.
 */
export const useBillingGetSharedStorageBillingGhe = <
  TData = Schemas.CombinedBillingUsage
>(
  variables: BillingGetSharedStorageBillingGheVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedBillingUsage,
      BillingGetSharedStorageBillingGheError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingGheError,
    TData
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/settings/billing/shared-storage",
      operationId: "billingGetSharedStorageBillingGhe",
      variables,
    }),
    () =>
      fetchBillingGetSharedStorageBillingGhe({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListPublicEventsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicEventsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type ActivityListPublicEventsResponse = Schemas.Event[];

export type ActivityListPublicEventsVariables = {
  queryParams?: ActivityListPublicEventsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
 */
export const fetchActivityListPublicEvents = (
  variables: ActivityListPublicEventsVariables
) =>
  githubFetch<
    ActivityListPublicEventsResponse,
    ActivityListPublicEventsError,
    undefined,
    {},
    ActivityListPublicEventsQueryParams,
    {}
  >({ url: "/events", method: "get", ...variables });

/**
 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
 */
export const useActivityListPublicEvents = <
  TData = ActivityListPublicEventsResponse
>(
  variables: ActivityListPublicEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsResponse,
      ActivityListPublicEventsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicEventsResponse,
    ActivityListPublicEventsError,
    TData
  >(
    queryKeyFn({
      path: "/events",
      operationId: "activityListPublicEvents",
      variables,
    }),
    () => fetchActivityListPublicEvents({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityGetFeedsError = Fetcher.ErrorWrapper<undefined>;

export type ActivityGetFeedsVariables = GithubContext["fetcherOptions"];

/**
 * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
 *
 * *   **Timeline**: The GitHub global public timeline
 * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
 * *   **Current user public**: The public timeline for the authenticated user
 * *   **Current user**: The private timeline for the authenticated user
 * *   **Current user actor**: The private timeline for activity created by the authenticated user
 * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
 * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
 *
 * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
 */
export const fetchActivityGetFeeds = (variables: ActivityGetFeedsVariables) =>
  githubFetch<Schemas.Feed, ActivityGetFeedsError, undefined, {}, {}, {}>({
    url: "/feeds",
    method: "get",
    ...variables,
  });

/**
 * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
 *
 * *   **Timeline**: The GitHub global public timeline
 * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
 * *   **Current user public**: The public timeline for the authenticated user
 * *   **Current user**: The private timeline for the authenticated user
 * *   **Current user actor**: The private timeline for activity created by the authenticated user
 * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
 * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
 *
 * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
 */
export const useActivityGetFeeds = <TData = Schemas.Feed>(
  variables: ActivityGetFeedsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Feed, ActivityGetFeedsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Feed, ActivityGetFeedsError, TData>(
    queryKeyFn({ path: "/feeds", operationId: "activityGetFeeds", variables }),
    () => fetchActivityGetFeeds({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsListQueryParams = {
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type GistsListResponse = Schemas.BaseGist[];

export type GistsListVariables = {
  queryParams?: GistsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 */
export const fetchGistsList = (variables: GistsListVariables) =>
  githubFetch<
    GistsListResponse,
    GistsListError,
    undefined,
    {},
    GistsListQueryParams,
    {}
  >({ url: "/gists", method: "get", ...variables });

/**
 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 */
export const useGistsList = <TData = GistsListResponse>(
  variables: GistsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GistsListResponse, GistsListError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<GistsListResponse, GistsListError, TData>(
    queryKeyFn({ path: "/gists", operationId: "gistsList", variables }),
    () => fetchGistsList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsCreateError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GistsCreateRequestBody = {
  /*
   * Description of the gist
   *
   * @example Example Ruby script
   */
  description?: string;
  /*
   * Names and content for the files that make up the gist
   *
   * @example {"hello.rb":{"content":"puts \"Hello, World!\""}}
   */
  files: {
    [key: string]: {
      /*
       * Content of the file
       */
      content: string;
    };
  };
  public?: boolean | ("true" | "false");
};

export type GistsCreateVariables = {
  body: GistsCreateRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Allows you to add a new gist with one or more files.
 *
 * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
 */
export const fetchGistsCreate = (variables: GistsCreateVariables) =>
  githubFetch<
    Schemas.GistSimple,
    GistsCreateError,
    GistsCreateRequestBody,
    {},
    {},
    {}
  >({ url: "/gists", method: "post", ...variables });

/**
 * Allows you to add a new gist with one or more files.
 *
 * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
 */
export const useGistsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistSimple,
      GistsCreateError,
      GistsCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistSimple,
    GistsCreateError,
    GistsCreateVariables
  >(
    (variables: GistsCreateVariables) =>
      fetchGistsCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsListPublicQueryParams = {
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListPublicError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GistsListPublicResponse = Schemas.BaseGist[];

export type GistsListPublicVariables = {
  queryParams?: GistsListPublicQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List public gists sorted by most recently updated to least recently updated.
 *
 * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 */
export const fetchGistsListPublic = (variables: GistsListPublicVariables) =>
  githubFetch<
    GistsListPublicResponse,
    GistsListPublicError,
    undefined,
    {},
    GistsListPublicQueryParams,
    {}
  >({ url: "/gists/public", method: "get", ...variables });

/**
 * List public gists sorted by most recently updated to least recently updated.
 *
 * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 */
export const useGistsListPublic = <TData = GistsListPublicResponse>(
  variables: GistsListPublicVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListPublicResponse,
      GistsListPublicError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListPublicResponse,
    GistsListPublicError,
    TData
  >(
    queryKeyFn({
      path: "/gists/public",
      operationId: "gistsListPublic",
      variables,
    }),
    () => fetchGistsListPublic({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsListStarredQueryParams = {
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListStarredError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type GistsListStarredResponse = Schemas.BaseGist[];

export type GistsListStarredVariables = {
  queryParams?: GistsListStarredQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the authenticated user's starred gists:
 */
export const fetchGistsListStarred = (variables: GistsListStarredVariables) =>
  githubFetch<
    GistsListStarredResponse,
    GistsListStarredError,
    undefined,
    {},
    GistsListStarredQueryParams,
    {}
  >({ url: "/gists/starred", method: "get", ...variables });

/**
 * List the authenticated user's starred gists:
 */
export const useGistsListStarred = <TData = GistsListStarredResponse>(
  variables: GistsListStarredVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListStarredResponse,
      GistsListStarredError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListStarredResponse,
    GistsListStarredError,
    TData
  >(
    queryKeyFn({
      path: "/gists/starred",
      operationId: "gistsListStarred",
      variables,
    }),
    () => fetchGistsListStarred({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsDeletePathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsDeleteError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsDeleteVariables = {
  pathParams: GistsDeletePathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsDelete = (variables: GistsDeleteVariables) =>
  githubFetch<
    undefined,
    GistsDeleteError,
    undefined,
    {},
    {},
    GistsDeletePathParams
  >({ url: "/gists/{gistId}", method: "delete", ...variables });

export const useGistsDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GistsDeleteError,
      GistsDeleteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    GistsDeleteError,
    GistsDeleteVariables
  >(
    (variables: GistsDeleteVariables) =>
      fetchGistsDelete({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsGetPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsGetError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.ForbiddenGist;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsGetVariables = {
  pathParams: GistsGetPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsGet = (variables: GistsGetVariables) =>
  githubFetch<
    Schemas.GistSimple,
    GistsGetError,
    undefined,
    {},
    {},
    GistsGetPathParams
  >({ url: "/gists/{gistId}", method: "get", ...variables });

export const useGistsGet = <TData = Schemas.GistSimple>(
  variables: GistsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GistSimple, GistsGetError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.GistSimple, GistsGetError, TData>(
    queryKeyFn({
      path: "/gists/{gist_id}",
      operationId: "gistsGet",
      variables,
    }),
    () => fetchGistsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsUpdatePathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GistsUpdateVariables = {
  body?:
    | {
        /*
         * Description of the gist
         *
         * @example Example Ruby script
         */
        description: string;
        /*
         * Names of files to be updated
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files?: {
          [key: string]:
            | {
                /*
                 * The new content of the file
                 */
                content: string;
                /*
                 * The new filename for the file
                 */
                filename?: string | null;
              }
            | {
                /*
                 * The new content of the file
                 */
                content?: string;
                /*
                 * The new filename for the file
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | {
        /*
         * Description of the gist
         *
         * @example Example Ruby script
         */
        description?: string;
        /*
         * Names of files to be updated
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files: {
          [key: string]:
            | {
                /*
                 * The new content of the file
                 */
                content: string;
                /*
                 * The new filename for the file
                 */
                filename?: string | null;
              }
            | {
                /*
                 * The new content of the file
                 */
                content?: string;
                /*
                 * The new filename for the file
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | null;
  pathParams: GistsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
 */
export const fetchGistsUpdate = (variables: GistsUpdateVariables) =>
  githubFetch<
    Schemas.GistSimple,
    GistsUpdateError,
    | {
        /*
         * Description of the gist
         *
         * @example Example Ruby script
         */
        description: string;
        /*
         * Names of files to be updated
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files?: {
          [key: string]:
            | {
                /*
                 * The new content of the file
                 */
                content: string;
                /*
                 * The new filename for the file
                 */
                filename?: string | null;
              }
            | {
                /*
                 * The new content of the file
                 */
                content?: string;
                /*
                 * The new filename for the file
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | {
        /*
         * Description of the gist
         *
         * @example Example Ruby script
         */
        description?: string;
        /*
         * Names of files to be updated
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files: {
          [key: string]:
            | {
                /*
                 * The new content of the file
                 */
                content: string;
                /*
                 * The new filename for the file
                 */
                filename?: string | null;
              }
            | {
                /*
                 * The new content of the file
                 */
                content?: string;
                /*
                 * The new filename for the file
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | null,
    {},
    {},
    GistsUpdatePathParams
  >({ url: "/gists/{gistId}", method: "patch", ...variables });

/**
 * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
 */
export const useGistsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistSimple,
      GistsUpdateError,
      GistsUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistSimple,
    GistsUpdateError,
    GistsUpdateVariables
  >(
    (variables: GistsUpdateVariables) =>
      fetchGistsUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsListCommentsPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsListCommentsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListCommentsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsListCommentsResponse = Schemas.GistComment[];

export type GistsListCommentsVariables = {
  pathParams: GistsListCommentsPathParams;
  queryParams?: GistsListCommentsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsListComments = (variables: GistsListCommentsVariables) =>
  githubFetch<
    GistsListCommentsResponse,
    GistsListCommentsError,
    undefined,
    {},
    GistsListCommentsQueryParams,
    GistsListCommentsPathParams
  >({ url: "/gists/{gistId}/comments", method: "get", ...variables });

export const useGistsListComments = <TData = GistsListCommentsResponse>(
  variables: GistsListCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListCommentsResponse,
      GistsListCommentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListCommentsResponse,
    GistsListCommentsError,
    TData
  >(
    queryKeyFn({
      path: "/gists/{gist_id}/comments",
      operationId: "gistsListComments",
      variables,
    }),
    () => fetchGistsListComments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsCreateCommentPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsCreateCommentError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsCreateCommentRequestBody = {
  /*
   * The comment text.
   *
   * @example Body of the attachment
   * @maxLength 65535
   */
  body: string;
};

export type GistsCreateCommentVariables = {
  body: GistsCreateCommentRequestBody;
  pathParams: GistsCreateCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsCreateComment = (
  variables: GistsCreateCommentVariables
) =>
  githubFetch<
    Schemas.GistComment,
    GistsCreateCommentError,
    GistsCreateCommentRequestBody,
    {},
    {},
    GistsCreateCommentPathParams
  >({ url: "/gists/{gistId}/comments", method: "post", ...variables });

export const useGistsCreateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistComment,
      GistsCreateCommentError,
      GistsCreateCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistComment,
    GistsCreateCommentError,
    GistsCreateCommentVariables
  >(
    (variables: GistsCreateCommentVariables) =>
      fetchGistsCreateComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsDeleteCommentPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type GistsDeleteCommentError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsDeleteCommentVariables = {
  pathParams: GistsDeleteCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsDeleteComment = (
  variables: GistsDeleteCommentVariables
) =>
  githubFetch<
    undefined,
    GistsDeleteCommentError,
    undefined,
    {},
    {},
    GistsDeleteCommentPathParams
  >({
    url: "/gists/{gistId}/comments/{commentId}",
    method: "delete",
    ...variables,
  });

export const useGistsDeleteComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GistsDeleteCommentError,
      GistsDeleteCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    GistsDeleteCommentError,
    GistsDeleteCommentVariables
  >(
    (variables: GistsDeleteCommentVariables) =>
      fetchGistsDeleteComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsGetCommentPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type GistsGetCommentError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.ForbiddenGist;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsGetCommentVariables = {
  pathParams: GistsGetCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsGetComment = (variables: GistsGetCommentVariables) =>
  githubFetch<
    Schemas.GistComment,
    GistsGetCommentError,
    undefined,
    {},
    {},
    GistsGetCommentPathParams
  >({
    url: "/gists/{gistId}/comments/{commentId}",
    method: "get",
    ...variables,
  });

export const useGistsGetComment = <TData = Schemas.GistComment>(
  variables: GistsGetCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GistComment,
      GistsGetCommentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.GistComment, GistsGetCommentError, TData>(
    queryKeyFn({
      path: "/gists/{gist_id}/comments/{comment_id}",
      operationId: "gistsGetComment",
      variables,
    }),
    () => fetchGistsGetComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsUpdateCommentPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type GistsUpdateCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type GistsUpdateCommentRequestBody = {
  /*
   * The comment text.
   *
   * @example Body of the attachment
   * @maxLength 65535
   */
  body: string;
};

export type GistsUpdateCommentVariables = {
  body: GistsUpdateCommentRequestBody;
  pathParams: GistsUpdateCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsUpdateComment = (
  variables: GistsUpdateCommentVariables
) =>
  githubFetch<
    Schemas.GistComment,
    GistsUpdateCommentError,
    GistsUpdateCommentRequestBody,
    {},
    {},
    GistsUpdateCommentPathParams
  >({
    url: "/gists/{gistId}/comments/{commentId}",
    method: "patch",
    ...variables,
  });

export const useGistsUpdateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistComment,
      GistsUpdateCommentError,
      GistsUpdateCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistComment,
    GistsUpdateCommentError,
    GistsUpdateCommentVariables
  >(
    (variables: GistsUpdateCommentVariables) =>
      fetchGistsUpdateComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsListCommitsPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsListCommitsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListCommitsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsListCommitsResponse = Schemas.GistCommit[];

export type GistsListCommitsVariables = {
  pathParams: GistsListCommitsPathParams;
  queryParams?: GistsListCommitsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsListCommits = (variables: GistsListCommitsVariables) =>
  githubFetch<
    GistsListCommitsResponse,
    GistsListCommitsError,
    undefined,
    {},
    GistsListCommitsQueryParams,
    GistsListCommitsPathParams
  >({ url: "/gists/{gistId}/commits", method: "get", ...variables });

export const useGistsListCommits = <TData = GistsListCommitsResponse>(
  variables: GistsListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListCommitsResponse,
      GistsListCommitsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListCommitsResponse,
    GistsListCommitsError,
    TData
  >(
    queryKeyFn({
      path: "/gists/{gist_id}/commits",
      operationId: "gistsListCommits",
      variables,
    }),
    () => fetchGistsListCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsListForksPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsListForksQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListForksError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsListForksResponse = Schemas.GistSimple[];

export type GistsListForksVariables = {
  pathParams: GistsListForksPathParams;
  queryParams?: GistsListForksQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsListForks = (variables: GistsListForksVariables) =>
  githubFetch<
    GistsListForksResponse,
    GistsListForksError,
    undefined,
    {},
    GistsListForksQueryParams,
    GistsListForksPathParams
  >({ url: "/gists/{gistId}/forks", method: "get", ...variables });

export const useGistsListForks = <TData = GistsListForksResponse>(
  variables: GistsListForksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListForksResponse,
      GistsListForksError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListForksResponse,
    GistsListForksError,
    TData
  >(
    queryKeyFn({
      path: "/gists/{gist_id}/forks",
      operationId: "gistsListForks",
      variables,
    }),
    () => fetchGistsListForks({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsForkPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsForkError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GistsForkVariables = {
  pathParams: GistsForkPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: This was previously `/gists/:gist_id/fork`.
 */
export const fetchGistsFork = (variables: GistsForkVariables) =>
  githubFetch<
    Schemas.BaseGist,
    GistsForkError,
    undefined,
    {},
    {},
    GistsForkPathParams
  >({ url: "/gists/{gistId}/forks", method: "post", ...variables });

/**
 * **Note**: This was previously `/gists/:gist_id/fork`.
 */
export const useGistsFork = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BaseGist,
      GistsForkError,
      GistsForkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.BaseGist,
    GistsForkError,
    GistsForkVariables
  >(
    (variables: GistsForkVariables) =>
      fetchGistsFork({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsUnstarPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsUnstarError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsUnstarVariables = {
  pathParams: GistsUnstarPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsUnstar = (variables: GistsUnstarVariables) =>
  githubFetch<
    undefined,
    GistsUnstarError,
    undefined,
    {},
    {},
    GistsUnstarPathParams
  >({ url: "/gists/{gistId}/star", method: "delete", ...variables });

export const useGistsUnstar = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GistsUnstarError,
      GistsUnstarVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    GistsUnstarError,
    GistsUnstarVariables
  >(
    (variables: GistsUnstarVariables) =>
      fetchGistsUnstar({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsCheckIsStarredPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsCheckIsStarredError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: {};
    }
>;

export type GistsCheckIsStarredVariables = {
  pathParams: GistsCheckIsStarredPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsCheckIsStarred = (
  variables: GistsCheckIsStarredVariables
) =>
  githubFetch<
    undefined,
    GistsCheckIsStarredError,
    undefined,
    {},
    {},
    GistsCheckIsStarredPathParams
  >({ url: "/gists/{gistId}/star", method: "get", ...variables });

export const useGistsCheckIsStarred = <TData = undefined>(
  variables: GistsCheckIsStarredVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GistsCheckIsStarredError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, GistsCheckIsStarredError, TData>(
    queryKeyFn({
      path: "/gists/{gist_id}/star",
      operationId: "gistsCheckIsStarred",
      variables,
    }),
    () => fetchGistsCheckIsStarred({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsStarPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsStarError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsStarVariables = {
  pathParams: GistsStarPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchGistsStar = (variables: GistsStarVariables) =>
  githubFetch<
    undefined,
    GistsStarError,
    undefined,
    {},
    {},
    GistsStarPathParams
  >({ url: "/gists/{gistId}/star", method: "put", ...variables });

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useGistsStar = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GistsStarError,
      GistsStarVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<undefined, GistsStarError, GistsStarVariables>(
    (variables: GistsStarVariables) =>
      fetchGistsStar({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsGetRevisionPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
  sha: string;
};

export type GistsGetRevisionError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GistsGetRevisionVariables = {
  pathParams: GistsGetRevisionPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsGetRevision = (variables: GistsGetRevisionVariables) =>
  githubFetch<
    Schemas.GistSimple,
    GistsGetRevisionError,
    undefined,
    {},
    {},
    GistsGetRevisionPathParams
  >({ url: "/gists/{gistId}/{sha}", method: "get", ...variables });

export const useGistsGetRevision = <TData = Schemas.GistSimple>(
  variables: GistsGetRevisionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GistSimple,
      GistsGetRevisionError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.GistSimple, GistsGetRevisionError, TData>(
    queryKeyFn({
      path: "/gists/{gist_id}/{sha}",
      operationId: "gistsGetRevision",
      variables,
    }),
    () => fetchGistsGetRevision({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitignoreGetAllTemplatesError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type GitignoreGetAllTemplatesResponse = string[];

export type GitignoreGetAllTemplatesVariables = GithubContext["fetcherOptions"];

/**
 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
 */
export const fetchGitignoreGetAllTemplates = (
  variables: GitignoreGetAllTemplatesVariables
) =>
  githubFetch<
    GitignoreGetAllTemplatesResponse,
    GitignoreGetAllTemplatesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/gitignore/templates", method: "get", ...variables });

/**
 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
 */
export const useGitignoreGetAllTemplates = <
  TData = GitignoreGetAllTemplatesResponse
>(
  variables: GitignoreGetAllTemplatesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GitignoreGetAllTemplatesResponse,
      GitignoreGetAllTemplatesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GitignoreGetAllTemplatesResponse,
    GitignoreGetAllTemplatesError,
    TData
  >(
    queryKeyFn({
      path: "/gitignore/templates",
      operationId: "gitignoreGetAllTemplates",
      variables,
    }),
    () => fetchGitignoreGetAllTemplates({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitignoreGetTemplatePathParams = {
  name: string;
};

export type GitignoreGetTemplateError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type GitignoreGetTemplateVariables = {
  pathParams: GitignoreGetTemplatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * The API also allows fetching the source of a single template.
 * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
 */
export const fetchGitignoreGetTemplate = (
  variables: GitignoreGetTemplateVariables
) =>
  githubFetch<
    Schemas.GitignoreTemplate,
    GitignoreGetTemplateError,
    undefined,
    {},
    {},
    GitignoreGetTemplatePathParams
  >({ url: "/gitignore/templates/{name}", method: "get", ...variables });

/**
 * The API also allows fetching the source of a single template.
 * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
 */
export const useGitignoreGetTemplate = <TData = Schemas.GitignoreTemplate>(
  variables: GitignoreGetTemplateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GitignoreTemplate,
      GitignoreGetTemplateError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GitignoreTemplate,
    GitignoreGetTemplateError,
    TData
  >(
    queryKeyFn({
      path: "/gitignore/templates/{name}",
      operationId: "gitignoreGetTemplate",
      variables,
    }),
    () => fetchGitignoreGetTemplate({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListReposAccessibleToInstallationQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListReposAccessibleToInstallationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type AppsListReposAccessibleToInstallationResponse = {
  repositories: Schemas.Repository[];
  /*
   * @example selected
   */
  repository_selection?: string;
  total_count: number;
};

export type AppsListReposAccessibleToInstallationVariables = {
  queryParams?: AppsListReposAccessibleToInstallationQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List repositories that an app installation can access.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const fetchAppsListReposAccessibleToInstallation = (
  variables: AppsListReposAccessibleToInstallationVariables
) =>
  githubFetch<
    AppsListReposAccessibleToInstallationResponse,
    AppsListReposAccessibleToInstallationError,
    undefined,
    {},
    AppsListReposAccessibleToInstallationQueryParams,
    {}
  >({ url: "/installation/repositories", method: "get", ...variables });

/**
 * List repositories that an app installation can access.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useAppsListReposAccessibleToInstallation = <
  TData = AppsListReposAccessibleToInstallationResponse
>(
  variables: AppsListReposAccessibleToInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListReposAccessibleToInstallationResponse,
      AppsListReposAccessibleToInstallationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListReposAccessibleToInstallationResponse,
    AppsListReposAccessibleToInstallationError,
    TData
  >(
    queryKeyFn({
      path: "/installation/repositories",
      operationId: "appsListReposAccessibleToInstallation",
      variables,
    }),
    () =>
      fetchAppsListReposAccessibleToInstallation({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsRevokeInstallationAccessTokenError =
  Fetcher.ErrorWrapper<undefined>;

export type AppsRevokeInstallationAccessTokenVariables =
  GithubContext["fetcherOptions"];

/**
 * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
 *
 * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const fetchAppsRevokeInstallationAccessToken = (
  variables: AppsRevokeInstallationAccessTokenVariables
) =>
  githubFetch<
    undefined,
    AppsRevokeInstallationAccessTokenError,
    undefined,
    {},
    {},
    {}
  >({ url: "/installation/token", method: "delete", ...variables });

/**
 * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
 *
 * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useAppsRevokeInstallationAccessToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsRevokeInstallationAccessTokenError,
      AppsRevokeInstallationAccessTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsRevokeInstallationAccessTokenError,
    AppsRevokeInstallationAccessTokenVariables
  >(
    (variables: AppsRevokeInstallationAccessTokenVariables) =>
      fetchAppsRevokeInstallationAccessToken({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type IssuesListQueryParams = {
  /*
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all`: All issues the authenticated user can see, regardless of participation or creation
   *
   * @default assigned
   */
  filter?:
    | "assigned"
    | "created"
    | "mentioned"
    | "subscribed"
    | "repos"
    | "all";
  /*
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /*
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  collab?: boolean;
  orgs?: boolean;
  owned?: boolean;
  pulls?: boolean;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesListResponse = Schemas.Issue[];

export type IssuesListVariables = {
  queryParams?: IssuesListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
 * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
 * necessarily assigned to you.
 *
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesList = (variables: IssuesListVariables) =>
  githubFetch<
    IssuesListResponse,
    IssuesListError,
    undefined,
    {},
    IssuesListQueryParams,
    {}
  >({ url: "/issues", method: "get", ...variables });

/**
 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
 * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
 * necessarily assigned to you.
 *
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesList = <TData = IssuesListResponse>(
  variables: IssuesListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<IssuesListResponse, IssuesListError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<IssuesListResponse, IssuesListError, TData>(
    queryKeyFn({ path: "/issues", operationId: "issuesList", variables }),
    () => fetchIssuesList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type LicensesGetAllCommonlyUsedQueryParams = {
  featured?: boolean;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type LicensesGetAllCommonlyUsedError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type LicensesGetAllCommonlyUsedResponse = Schemas.LicenseSimple[];

export type LicensesGetAllCommonlyUsedVariables = {
  queryParams?: LicensesGetAllCommonlyUsedQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchLicensesGetAllCommonlyUsed = (
  variables: LicensesGetAllCommonlyUsedVariables
) =>
  githubFetch<
    LicensesGetAllCommonlyUsedResponse,
    LicensesGetAllCommonlyUsedError,
    undefined,
    {},
    LicensesGetAllCommonlyUsedQueryParams,
    {}
  >({ url: "/licenses", method: "get", ...variables });

export const useLicensesGetAllCommonlyUsed = <
  TData = LicensesGetAllCommonlyUsedResponse
>(
  variables: LicensesGetAllCommonlyUsedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      LicensesGetAllCommonlyUsedResponse,
      LicensesGetAllCommonlyUsedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    LicensesGetAllCommonlyUsedResponse,
    LicensesGetAllCommonlyUsedError,
    TData
  >(
    queryKeyFn({
      path: "/licenses",
      operationId: "licensesGetAllCommonlyUsed",
      variables,
    }),
    () => fetchLicensesGetAllCommonlyUsed({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type LicensesGetPathParams = {
  license: string;
};

export type LicensesGetError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type LicensesGetVariables = {
  pathParams: LicensesGetPathParams;
} & GithubContext["fetcherOptions"];

export const fetchLicensesGet = (variables: LicensesGetVariables) =>
  githubFetch<
    Schemas.License,
    LicensesGetError,
    undefined,
    {},
    {},
    LicensesGetPathParams
  >({ url: "/licenses/{license}", method: "get", ...variables });

export const useLicensesGet = <TData = Schemas.License>(
  variables: LicensesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.License, LicensesGetError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.License, LicensesGetError, TData>(
    queryKeyFn({
      path: "/licenses/{license}",
      operationId: "licensesGet",
      variables,
    }),
    () => fetchLicensesGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MarkdownRenderError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type MarkdownRenderRequestBody = {
  /*
   * The repository context to use when creating references in `gfm` mode.
   */
  context?: string;
  /*
   * The rendering mode.
   *
   * @default markdown
   * @example markdown
   */
  mode?: "markdown" | "gfm";
  /*
   * The Markdown text to render in HTML.
   */
  text: string;
};

export type MarkdownRenderVariables = {
  body: MarkdownRenderRequestBody;
} & GithubContext["fetcherOptions"];

export const fetchMarkdownRender = (variables: MarkdownRenderVariables) =>
  githubFetch<
    undefined,
    MarkdownRenderError,
    MarkdownRenderRequestBody,
    {},
    {},
    {}
  >({ url: "/markdown", method: "post", ...variables });

export const useMarkdownRender = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MarkdownRenderError,
      MarkdownRenderVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MarkdownRenderError,
    MarkdownRenderVariables
  >(
    (variables: MarkdownRenderVariables) =>
      fetchMarkdownRender({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MarkdownRenderRawError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type MarkdownRenderRawVariables = GithubContext["fetcherOptions"];

/**
 * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
 */
export const fetchMarkdownRenderRaw = (variables: MarkdownRenderRawVariables) =>
  githubFetch<undefined, MarkdownRenderRawError, undefined, {}, {}, {}>({
    url: "/markdown/raw",
    method: "post",
    ...variables,
  });

/**
 * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
 */
export const useMarkdownRenderRaw = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MarkdownRenderRawError,
      MarkdownRenderRawVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MarkdownRenderRawError,
    MarkdownRenderRawVariables
  >(
    (variables: MarkdownRenderRawVariables) =>
      fetchMarkdownRenderRaw({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetSubscriptionPlanForAccountPathParams = {
  /*
   * account_id parameter
   */
  accountId: number;
};

export type AppsGetSubscriptionPlanForAccountError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 404;
      payload: Schemas.BasicError;
    }
>;

export type AppsGetSubscriptionPlanForAccountVariables = {
  pathParams: AppsGetSubscriptionPlanForAccountPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsGetSubscriptionPlanForAccount = (
  variables: AppsGetSubscriptionPlanForAccountVariables
) =>
  githubFetch<
    Schemas.MarketplacePurchase,
    AppsGetSubscriptionPlanForAccountError,
    undefined,
    {},
    {},
    AppsGetSubscriptionPlanForAccountPathParams
  >({
    url: "/marketplace_listing/accounts/{accountId}",
    method: "get",
    ...variables,
  });

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsGetSubscriptionPlanForAccount = <
  TData = Schemas.MarketplacePurchase
>(
  variables: AppsGetSubscriptionPlanForAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MarketplacePurchase,
      AppsGetSubscriptionPlanForAccountError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.MarketplacePurchase,
    AppsGetSubscriptionPlanForAccountError,
    TData
  >(
    queryKeyFn({
      path: "/marketplace_listing/accounts/{account_id}",
      operationId: "appsGetSubscriptionPlanForAccount",
      variables,
    }),
    () =>
      fetchAppsGetSubscriptionPlanForAccount({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListPlansQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListPlansError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type AppsListPlansResponse = Schemas.MarketplaceListingPlan[];

export type AppsListPlansVariables = {
  queryParams?: AppsListPlansQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListPlans = (variables: AppsListPlansVariables) =>
  githubFetch<
    AppsListPlansResponse,
    AppsListPlansError,
    undefined,
    {},
    AppsListPlansQueryParams,
    {}
  >({ url: "/marketplace_listing/plans", method: "get", ...variables });

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListPlans = <TData = AppsListPlansResponse>(
  variables: AppsListPlansVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListPlansResponse,
      AppsListPlansError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<AppsListPlansResponse, AppsListPlansError, TData>(
    queryKeyFn({
      path: "/marketplace_listing/plans",
      operationId: "appsListPlans",
      variables,
    }),
    () => fetchAppsListPlans({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListAccountsForPlanPathParams = {
  /*
   * plan_id parameter
   */
  planId: number;
};

export type AppsListAccountsForPlanQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListAccountsForPlanError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsListAccountsForPlanResponse = Schemas.MarketplacePurchase[];

export type AppsListAccountsForPlanVariables = {
  pathParams: AppsListAccountsForPlanPathParams;
  queryParams?: AppsListAccountsForPlanQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListAccountsForPlan = (
  variables: AppsListAccountsForPlanVariables
) =>
  githubFetch<
    AppsListAccountsForPlanResponse,
    AppsListAccountsForPlanError,
    undefined,
    {},
    AppsListAccountsForPlanQueryParams,
    AppsListAccountsForPlanPathParams
  >({
    url: "/marketplace_listing/plans/{planId}/accounts",
    method: "get",
    ...variables,
  });

/**
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListAccountsForPlan = <
  TData = AppsListAccountsForPlanResponse
>(
  variables: AppsListAccountsForPlanVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListAccountsForPlanResponse,
      AppsListAccountsForPlanError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListAccountsForPlanResponse,
    AppsListAccountsForPlanError,
    TData
  >(
    queryKeyFn({
      path: "/marketplace_listing/plans/{plan_id}/accounts",
      operationId: "appsListAccountsForPlan",
      variables,
    }),
    () => fetchAppsListAccountsForPlan({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsGetSubscriptionPlanForAccountStubbedPathParams = {
  /*
   * account_id parameter
   */
  accountId: number;
};

export type AppsGetSubscriptionPlanForAccountStubbedError =
  Fetcher.ErrorWrapper<{
    status: 401;
    payload: Responses.RequiresAuthentication;
  }>;

export type AppsGetSubscriptionPlanForAccountStubbedVariables = {
  pathParams: AppsGetSubscriptionPlanForAccountStubbedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsGetSubscriptionPlanForAccountStubbed = (
  variables: AppsGetSubscriptionPlanForAccountStubbedVariables
) =>
  githubFetch<
    Schemas.MarketplacePurchase,
    AppsGetSubscriptionPlanForAccountStubbedError,
    undefined,
    {},
    {},
    AppsGetSubscriptionPlanForAccountStubbedPathParams
  >({
    url: "/marketplace_listing/stubbed/accounts/{accountId}",
    method: "get",
    ...variables,
  });

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsGetSubscriptionPlanForAccountStubbed = <
  TData = Schemas.MarketplacePurchase
>(
  variables: AppsGetSubscriptionPlanForAccountStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MarketplacePurchase,
      AppsGetSubscriptionPlanForAccountStubbedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.MarketplacePurchase,
    AppsGetSubscriptionPlanForAccountStubbedError,
    TData
  >(
    queryKeyFn({
      path: "/marketplace_listing/stubbed/accounts/{account_id}",
      operationId: "appsGetSubscriptionPlanForAccountStubbed",
      variables,
    }),
    () =>
      fetchAppsGetSubscriptionPlanForAccountStubbed({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListPlansStubbedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListPlansStubbedError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Responses.RequiresAuthentication;
}>;

export type AppsListPlansStubbedResponse = Schemas.MarketplaceListingPlan[];

export type AppsListPlansStubbedVariables = {
  queryParams?: AppsListPlansStubbedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListPlansStubbed = (
  variables: AppsListPlansStubbedVariables
) =>
  githubFetch<
    AppsListPlansStubbedResponse,
    AppsListPlansStubbedError,
    undefined,
    {},
    AppsListPlansStubbedQueryParams,
    {}
  >({ url: "/marketplace_listing/stubbed/plans", method: "get", ...variables });

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListPlansStubbed = <TData = AppsListPlansStubbedResponse>(
  variables: AppsListPlansStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListPlansStubbedResponse,
      AppsListPlansStubbedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListPlansStubbedResponse,
    AppsListPlansStubbedError,
    TData
  >(
    queryKeyFn({
      path: "/marketplace_listing/stubbed/plans",
      operationId: "appsListPlansStubbed",
      variables,
    }),
    () => fetchAppsListPlansStubbed({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListAccountsForPlanStubbedPathParams = {
  /*
   * plan_id parameter
   */
  planId: number;
};

export type AppsListAccountsForPlanStubbedQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListAccountsForPlanStubbedError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Responses.RequiresAuthentication;
}>;

export type AppsListAccountsForPlanStubbedResponse =
  Schemas.MarketplacePurchase[];

export type AppsListAccountsForPlanStubbedVariables = {
  pathParams: AppsListAccountsForPlanStubbedPathParams;
  queryParams?: AppsListAccountsForPlanStubbedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListAccountsForPlanStubbed = (
  variables: AppsListAccountsForPlanStubbedVariables
) =>
  githubFetch<
    AppsListAccountsForPlanStubbedResponse,
    AppsListAccountsForPlanStubbedError,
    undefined,
    {},
    AppsListAccountsForPlanStubbedQueryParams,
    AppsListAccountsForPlanStubbedPathParams
  >({
    url: "/marketplace_listing/stubbed/plans/{planId}/accounts",
    method: "get",
    ...variables,
  });

/**
 * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListAccountsForPlanStubbed = <
  TData = AppsListAccountsForPlanStubbedResponse
>(
  variables: AppsListAccountsForPlanStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListAccountsForPlanStubbedResponse,
      AppsListAccountsForPlanStubbedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListAccountsForPlanStubbedResponse,
    AppsListAccountsForPlanStubbedError,
    TData
  >(
    queryKeyFn({
      path: "/marketplace_listing/stubbed/plans/{plan_id}/accounts",
      operationId: "appsListAccountsForPlanStubbed",
      variables,
    }),
    () =>
      fetchAppsListAccountsForPlanStubbed({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MetaGetError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type MetaGetVariables = GithubContext["fetcherOptions"];

/**
 * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."
 *
 * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
 */
export const fetchMetaGet = (variables: MetaGetVariables) =>
  githubFetch<Schemas.ApiOverview, MetaGetError, undefined, {}, {}, {}>({
    url: "/meta",
    method: "get",
    ...variables,
  });

/**
 * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."
 *
 * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
 */
export const useMetaGet = <TData = Schemas.ApiOverview>(
  variables: MetaGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ApiOverview, MetaGetError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.ApiOverview, MetaGetError, TData>(
    queryKeyFn({ path: "/meta", operationId: "metaGet", variables }),
    () => fetchMetaGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListPublicEventsForRepoNetworkPathParams = {
  owner: string;
  repo: string;
};

export type ActivityListPublicEventsForRepoNetworkQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicEventsForRepoNetworkError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ActivityListPublicEventsForRepoNetworkResponse = Schemas.Event[];

export type ActivityListPublicEventsForRepoNetworkVariables = {
  pathParams: ActivityListPublicEventsForRepoNetworkPathParams;
  queryParams?: ActivityListPublicEventsForRepoNetworkQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListPublicEventsForRepoNetwork = (
  variables: ActivityListPublicEventsForRepoNetworkVariables
) =>
  githubFetch<
    ActivityListPublicEventsForRepoNetworkResponse,
    ActivityListPublicEventsForRepoNetworkError,
    undefined,
    {},
    ActivityListPublicEventsForRepoNetworkQueryParams,
    ActivityListPublicEventsForRepoNetworkPathParams
  >({ url: "/networks/{owner}/{repo}/events", method: "get", ...variables });

export const useActivityListPublicEventsForRepoNetwork = <
  TData = ActivityListPublicEventsForRepoNetworkResponse
>(
  variables: ActivityListPublicEventsForRepoNetworkVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsForRepoNetworkResponse,
      ActivityListPublicEventsForRepoNetworkError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicEventsForRepoNetworkResponse,
    ActivityListPublicEventsForRepoNetworkError,
    TData
  >(
    queryKeyFn({
      path: "/networks/{owner}/{repo}/events",
      operationId: "activityListPublicEventsForRepoNetwork",
      variables,
    }),
    () =>
      fetchActivityListPublicEventsForRepoNetwork({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListNotificationsForAuthenticatedUserQueryParams = {
  /*
   * If `true`, show notifications marked as read.
   *
   * @default false
   */
  all?: boolean;
  /*
   * If `true`, only shows notifications in which the user is directly participating or mentioned.
   *
   * @default false
   */
  participating?: boolean;
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  before?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListNotificationsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type ActivityListNotificationsForAuthenticatedUserResponse =
  Schemas.Thread[];

export type ActivityListNotificationsForAuthenticatedUserVariables = {
  queryParams?: ActivityListNotificationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all notifications for the current user, sorted by most recently updated.
 */
export const fetchActivityListNotificationsForAuthenticatedUser = (
  variables: ActivityListNotificationsForAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListNotificationsForAuthenticatedUserResponse,
    ActivityListNotificationsForAuthenticatedUserError,
    undefined,
    {},
    ActivityListNotificationsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/notifications", method: "get", ...variables });

/**
 * List all notifications for the current user, sorted by most recently updated.
 */
export const useActivityListNotificationsForAuthenticatedUser = <
  TData = ActivityListNotificationsForAuthenticatedUserResponse
>(
  variables: ActivityListNotificationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListNotificationsForAuthenticatedUserResponse,
      ActivityListNotificationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListNotificationsForAuthenticatedUserResponse,
    ActivityListNotificationsForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/notifications",
      operationId: "activityListNotificationsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListNotificationsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityMarkNotificationsAsReadError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ActivityMarkNotificationsAsReadResponse = {
  message?: string;
};

export type ActivityMarkNotificationsAsReadRequestBody = {
  /*
   * Describes the last point that notifications were checked.
   *
   * @format date-time
   */
  last_read_at?: string;
  /*
   * Whether the notification has been read.
   */
  read?: boolean;
};

export type ActivityMarkNotificationsAsReadVariables = {
  body?: ActivityMarkNotificationsAsReadRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const fetchActivityMarkNotificationsAsRead = (
  variables: ActivityMarkNotificationsAsReadVariables
) =>
  githubFetch<
    ActivityMarkNotificationsAsReadResponse,
    ActivityMarkNotificationsAsReadError,
    ActivityMarkNotificationsAsReadRequestBody,
    {},
    {},
    {}
  >({ url: "/notifications", method: "put", ...variables });

/**
 * Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const useActivityMarkNotificationsAsRead = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ActivityMarkNotificationsAsReadResponse,
      ActivityMarkNotificationsAsReadError,
      ActivityMarkNotificationsAsReadVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ActivityMarkNotificationsAsReadResponse,
    ActivityMarkNotificationsAsReadError,
    ActivityMarkNotificationsAsReadVariables
  >(
    (variables: ActivityMarkNotificationsAsReadVariables) =>
      fetchActivityMarkNotificationsAsRead({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityGetThreadPathParams = {
  /*
   * thread_id parameter
   */
  threadId: number;
};

export type ActivityGetThreadError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ActivityGetThreadVariables = {
  pathParams: ActivityGetThreadPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityGetThread = (variables: ActivityGetThreadVariables) =>
  githubFetch<
    Schemas.Thread,
    ActivityGetThreadError,
    undefined,
    {},
    {},
    ActivityGetThreadPathParams
  >({ url: "/notifications/threads/{threadId}", method: "get", ...variables });

export const useActivityGetThread = <TData = Schemas.Thread>(
  variables: ActivityGetThreadVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Thread, ActivityGetThreadError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Thread, ActivityGetThreadError, TData>(
    queryKeyFn({
      path: "/notifications/threads/{thread_id}",
      operationId: "activityGetThread",
      variables,
    }),
    () => fetchActivityGetThread({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityMarkThreadAsReadPathParams = {
  /*
   * thread_id parameter
   */
  threadId: number;
};

export type ActivityMarkThreadAsReadError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ActivityMarkThreadAsReadVariables = {
  pathParams: ActivityMarkThreadAsReadPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityMarkThreadAsRead = (
  variables: ActivityMarkThreadAsReadVariables
) =>
  githubFetch<
    undefined,
    ActivityMarkThreadAsReadError,
    undefined,
    {},
    {},
    ActivityMarkThreadAsReadPathParams
  >({
    url: "/notifications/threads/{threadId}",
    method: "patch",
    ...variables,
  });

export const useActivityMarkThreadAsRead = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivityMarkThreadAsReadError,
      ActivityMarkThreadAsReadVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActivityMarkThreadAsReadError,
    ActivityMarkThreadAsReadVariables
  >(
    (variables: ActivityMarkThreadAsReadVariables) =>
      fetchActivityMarkThreadAsRead({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityDeleteThreadSubscriptionPathParams = {
  /*
   * thread_id parameter
   */
  threadId: number;
};

export type ActivityDeleteThreadSubscriptionError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ActivityDeleteThreadSubscriptionVariables = {
  pathParams: ActivityDeleteThreadSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
 */
export const fetchActivityDeleteThreadSubscription = (
  variables: ActivityDeleteThreadSubscriptionVariables
) =>
  githubFetch<
    undefined,
    ActivityDeleteThreadSubscriptionError,
    undefined,
    {},
    {},
    ActivityDeleteThreadSubscriptionPathParams
  >({
    url: "/notifications/threads/{threadId}/subscription",
    method: "delete",
    ...variables,
  });

/**
 * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
 */
export const useActivityDeleteThreadSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivityDeleteThreadSubscriptionError,
      ActivityDeleteThreadSubscriptionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActivityDeleteThreadSubscriptionError,
    ActivityDeleteThreadSubscriptionVariables
  >(
    (variables: ActivityDeleteThreadSubscriptionVariables) =>
      fetchActivityDeleteThreadSubscription({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActivityGetThreadSubscriptionForAuthenticatedUserPathParams = {
  /*
   * thread_id parameter
   */
  threadId: number;
};

export type ActivityGetThreadSubscriptionForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
  >;

export type ActivityGetThreadSubscriptionForAuthenticatedUserVariables = {
  pathParams: ActivityGetThreadSubscriptionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
 *
 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 */
export const fetchActivityGetThreadSubscriptionForAuthenticatedUser = (
  variables: ActivityGetThreadSubscriptionForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.ThreadSubscription,
    ActivityGetThreadSubscriptionForAuthenticatedUserError,
    undefined,
    {},
    {},
    ActivityGetThreadSubscriptionForAuthenticatedUserPathParams
  >({
    url: "/notifications/threads/{threadId}/subscription",
    method: "get",
    ...variables,
  });

/**
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
 *
 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 */
export const useActivityGetThreadSubscriptionForAuthenticatedUser = <
  TData = Schemas.ThreadSubscription
>(
  variables: ActivityGetThreadSubscriptionForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ThreadSubscription,
      ActivityGetThreadSubscriptionForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ThreadSubscription,
    ActivityGetThreadSubscriptionForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/notifications/threads/{thread_id}/subscription",
      operationId: "activityGetThreadSubscriptionForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityGetThreadSubscriptionForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivitySetThreadSubscriptionPathParams = {
  /*
   * thread_id parameter
   */
  threadId: number;
};

export type ActivitySetThreadSubscriptionError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ActivitySetThreadSubscriptionRequestBody = {
  /*
   * Whether to block all notifications from a thread.
   *
   * @default false
   */
  ignored?: boolean;
};

export type ActivitySetThreadSubscriptionVariables = {
  body?: ActivitySetThreadSubscriptionRequestBody;
  pathParams: ActivitySetThreadSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
 *
 * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
 *
 * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
 */
export const fetchActivitySetThreadSubscription = (
  variables: ActivitySetThreadSubscriptionVariables
) =>
  githubFetch<
    Schemas.ThreadSubscription,
    ActivitySetThreadSubscriptionError,
    ActivitySetThreadSubscriptionRequestBody,
    {},
    {},
    ActivitySetThreadSubscriptionPathParams
  >({
    url: "/notifications/threads/{threadId}/subscription",
    method: "put",
    ...variables,
  });

/**
 * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
 *
 * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
 *
 * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
 */
export const useActivitySetThreadSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ThreadSubscription,
      ActivitySetThreadSubscriptionError,
      ActivitySetThreadSubscriptionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ThreadSubscription,
    ActivitySetThreadSubscriptionError,
    ActivitySetThreadSubscriptionVariables
  >(
    (variables: ActivitySetThreadSubscriptionVariables) =>
      fetchActivitySetThreadSubscription({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MetaGetOctocatQueryParams = {
  /*
   * The words to show in Octocat's speech bubble
   */
  s?: string;
};

export type MetaGetOctocatError = Fetcher.ErrorWrapper<undefined>;

export type MetaGetOctocatVariables = {
  queryParams?: MetaGetOctocatQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the octocat as ASCII art
 */
export const fetchMetaGetOctocat = (variables: MetaGetOctocatVariables) =>
  githubFetch<
    undefined,
    MetaGetOctocatError,
    undefined,
    {},
    MetaGetOctocatQueryParams,
    {}
  >({ url: "/octocat", method: "get", ...variables });

/**
 * Get the octocat as ASCII art
 */
export const useMetaGetOctocat = <TData = undefined>(
  variables: MetaGetOctocatVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, MetaGetOctocatError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, MetaGetOctocatError, TData>(
    queryKeyFn({ path: "/octocat", operationId: "metaGetOctocat", variables }),
    () => fetchMetaGetOctocat({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListQueryParams = {
  /*
   * An organization ID. Only return organizations with an ID greater than this ID.
   */
  since?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type OrgsListError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type OrgsListResponse = Schemas.OrganizationSimple[];

export type OrgsListVariables = {
  queryParams?: OrgsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all organizations, in the order that they were created on GitHub.
 *
 * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
 */
export const fetchOrgsList = (variables: OrgsListVariables) =>
  githubFetch<
    OrgsListResponse,
    OrgsListError,
    undefined,
    {},
    OrgsListQueryParams,
    {}
  >({ url: "/organizations", method: "get", ...variables });

/**
 * Lists all organizations, in the order that they were created on GitHub.
 *
 * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
 */
export const useOrgsList = <TData = OrgsListResponse>(
  variables: OrgsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<OrgsListResponse, OrgsListError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<OrgsListResponse, OrgsListError, TData>(
    queryKeyFn({ path: "/organizations", operationId: "orgsList", variables }),
    () => fetchOrgsList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsGetPathParams = {
  org: string;
};

export type OrgsGetError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsGetVariables = {
  pathParams: OrgsGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
 *
 * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
 */
export const fetchOrgsGet = (variables: OrgsGetVariables) =>
  githubFetch<
    Schemas.OrganizationFull,
    OrgsGetError,
    undefined,
    {},
    {},
    OrgsGetPathParams
  >({ url: "/orgs/{org}", method: "get", ...variables });

/**
 * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
 *
 * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
 */
export const useOrgsGet = <TData = Schemas.OrganizationFull>(
  variables: OrgsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganizationFull, OrgsGetError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.OrganizationFull, OrgsGetError, TData>(
    queryKeyFn({ path: "/orgs/{org}", operationId: "orgsGet", variables }),
    () => fetchOrgsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsUpdatePathParams = {
  org: string;
};

export type OrgsUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Schemas.ValidationError | Schemas.ValidationErrorSimple;
    }
>;

export type OrgsUpdateRequestBody = {
  /*
   * Billing email address. This address is not publicized.
   */
  billing_email?: string;
  /*
   * @example "http://github.blog"
   */
  blog?: string;
  /*
   * The company name.
   */
  company?: string;
  /*
   * Default permission level members have for organization repositories:
   * \* `read` - can pull, but not push to or administer this repository.
   * \* `write` - can pull and push, but not administer this repository.
   * \* `admin` - can pull, push, and administer this repository.
   * \* `none` - no permissions granted by default.
   *
   * @default read
   */
  default_repository_permission?: "read" | "write" | "admin" | "none";
  /*
   * The description of the company.
   */
  description?: string;
  /*
   * The publicly visible email address.
   */
  email?: string;
  /*
   * Toggles whether an organization can use organization projects.
   */
  has_organization_projects?: boolean;
  /*
   * Toggles whether repositories that belong to the organization can use repository projects.
   */
  has_repository_projects?: boolean;
  /*
   * The location.
   */
  location?: string;
  /*
   * Specifies which types of repositories non-admin organization members can create. Can be one of:
   * \* `all` - all organization members can create public and private repositories.
   * \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
   * \* `none` - only admin members can create repositories.
   * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
   */
  members_allowed_repository_creation_type?: "all" | "private" | "none";
  /*
   * Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
   * \* `true` - all organization members can create internal repositories.
   * \* `false` - only organization owners can create internal repositories.
   * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_internal_repositories?: boolean;
  /*
   * Toggles whether organization members can create GitHub Pages sites. Can be one of:
   * \* `true` - all organization members can create GitHub Pages sites.
   * \* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
   *
   * @default true
   */
  members_can_create_pages?: boolean;
  /*
   * Toggles whether organization members can create private GitHub Pages sites. Can be one of:
   * \* `true` - all organization members can create private GitHub Pages sites.
   * \* `false` - no organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
   *
   * @default true
   */
  members_can_create_private_pages?: boolean;
  /*
   * Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:
   * \* `true` - all organization members can create private repositories.
   * \* `false` - only organization owners can create private repositories.
   * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_private_repositories?: boolean;
  /*
   * Toggles whether organization members can create public GitHub Pages sites. Can be one of:
   * \* `true` - all organization members can create public GitHub Pages sites.
   * \* `false` - no organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
   *
   * @default true
   */
  members_can_create_public_pages?: boolean;
  /*
   * Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:
   * \* `true` - all organization members can create public repositories.
   * \* `false` - only organization owners can create public repositories.
   * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_public_repositories?: boolean;
  /*
   * Toggles the ability of non-admin organization members to create repositories. Can be one of:
   * \* `true` - all organization members can create repositories.
   * \* `false` - only organization owners can create repositories.
   * Default: `true`
   * **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
   *
   * @default true
   */
  members_can_create_repositories?: boolean;
  /*
   * The shorthand name of the company.
   */
  name?: string;
  /*
   * The Twitter username of the company.
   */
  twitter_username?: string;
};

export type OrgsUpdateVariables = {
  body?: OrgsUpdateRequestBody;
  pathParams: OrgsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
 *
 * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
 */
export const fetchOrgsUpdate = (variables: OrgsUpdateVariables) =>
  githubFetch<
    Schemas.OrganizationFull,
    OrgsUpdateError,
    OrgsUpdateRequestBody,
    {},
    {},
    OrgsUpdatePathParams
  >({ url: "/orgs/{org}", method: "patch", ...variables });

/**
 * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
 *
 * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
 */
export const useOrgsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganizationFull,
      OrgsUpdateError,
      OrgsUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrganizationFull,
    OrgsUpdateError,
    OrgsUpdateVariables
  >(
    (variables: OrgsUpdateVariables) =>
      fetchOrgsUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetGithubActionsPermissionsOrganizationPathParams = {
  org: string;
};

export type ActionsGetGithubActionsPermissionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetGithubActionsPermissionsOrganizationVariables = {
  pathParams: ActionsGetGithubActionsPermissionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsGetGithubActionsPermissionsOrganization = (
  variables: ActionsGetGithubActionsPermissionsOrganizationVariables
) =>
  githubFetch<
    Schemas.ActionsOrganizationPermissions,
    ActionsGetGithubActionsPermissionsOrganizationError,
    undefined,
    {},
    {},
    ActionsGetGithubActionsPermissionsOrganizationPathParams
  >({ url: "/orgs/{org}/actions/permissions", method: "get", ...variables });

/**
 * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsGetGithubActionsPermissionsOrganization = <
  TData = Schemas.ActionsOrganizationPermissions
>(
  variables: ActionsGetGithubActionsPermissionsOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsOrganizationPermissions,
      ActionsGetGithubActionsPermissionsOrganizationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsOrganizationPermissions,
    ActionsGetGithubActionsPermissionsOrganizationError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/permissions",
      operationId: "actionsGetGithubActionsPermissionsOrganization",
      variables,
    }),
    () =>
      fetchActionsGetGithubActionsPermissionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetGithubActionsPermissionsOrganizationPathParams = {
  org: string;
};

export type ActionsSetGithubActionsPermissionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetGithubActionsPermissionsOrganizationRequestBody = {
  allowed_actions?: Schemas.AllowedActions;
  enabled_repositories: Schemas.EnabledRepositories;
};

export type ActionsSetGithubActionsPermissionsOrganizationVariables = {
  body: ActionsSetGithubActionsPermissionsOrganizationRequestBody;
  pathParams: ActionsSetGithubActionsPermissionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
 *
 * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsSetGithubActionsPermissionsOrganization = (
  variables: ActionsSetGithubActionsPermissionsOrganizationVariables
) =>
  githubFetch<
    undefined,
    ActionsSetGithubActionsPermissionsOrganizationError,
    ActionsSetGithubActionsPermissionsOrganizationRequestBody,
    {},
    {},
    ActionsSetGithubActionsPermissionsOrganizationPathParams
  >({ url: "/orgs/{org}/actions/permissions", method: "put", ...variables });

/**
 * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
 *
 * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsSetGithubActionsPermissionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetGithubActionsPermissionsOrganizationError,
      ActionsSetGithubActionsPermissionsOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetGithubActionsPermissionsOrganizationError,
    ActionsSetGithubActionsPermissionsOrganizationVariables
  >(
    (variables: ActionsSetGithubActionsPermissionsOrganizationVariables) =>
      fetchActionsSetGithubActionsPermissionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPathParams =
  {
    org: string;
  };

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQueryParams =
  {
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse =
  {
    repositories: Schemas.Repository[];
    total_count: number;
  };

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables =
  {
    pathParams: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPathParams;
    queryParams?: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsListSelectedRepositoriesEnabledGithubActionsOrganization =
  (
    variables: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables
  ) =>
    githubFetch<
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError,
      undefined,
      {},
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQueryParams,
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPathParams
    >({
      url: "/orgs/{org}/actions/permissions/repositories",
      method: "get",
      ...variables,
    });

/**
 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsListSelectedRepositoriesEnabledGithubActionsOrganization =
  <
    TData = ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse
  >(
    variables: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
        ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError,
        TData
      >,
      "queryKey" | "queryFn"
    >
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useGithubContext(options);
    return reactQuery.useQuery<
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError,
      TData
    >(
      queryKeyFn({
        path: "/orgs/{org}/actions/permissions/repositories",
        operationId:
          "actionsListSelectedRepositoriesEnabledGithubActionsOrganization",
        variables,
      }),
      () =>
        fetchActionsListSelectedRepositoriesEnabledGithubActionsOrganization({
          ...fetcherOptions,
          ...variables,
        }),
      {
        ...options,
        ...queryOptions,
      }
    );
  };

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPathParams =
  {
    org: string;
  };

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequestBody =
  {
    /*
     * List of repository IDs to enable for GitHub Actions.
     */
    selected_repository_ids: number[];
  };

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables =
  {
    body: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequestBody;
    pathParams: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsSetSelectedRepositoriesEnabledGithubActionsOrganization =
  (
    variables: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables
  ) =>
    githubFetch<
      undefined,
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError,
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequestBody,
      {},
      {},
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPathParams
    >({
      url: "/orgs/{org}/actions/permissions/repositories",
      method: "put",
      ...variables,
    });

/**
 * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsSetSelectedRepositoriesEnabledGithubActionsOrganization =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError,
        ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError,
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables
    >(
      (
        variables: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables
      ) =>
        fetchActionsSetSelectedRepositoriesEnabledGithubActionsOrganization({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationPathParams =
  {
    org: string;
    repositoryId: number;
  };

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables =
  {
    pathParams: ActionsDisableSelectedRepositoryGithubActionsOrganizationPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsDisableSelectedRepositoryGithubActionsOrganization = (
  variables: ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables
) =>
  githubFetch<
    undefined,
    ActionsDisableSelectedRepositoryGithubActionsOrganizationError,
    undefined,
    {},
    {},
    ActionsDisableSelectedRepositoryGithubActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/repositories/{repositoryId}",
    method: "delete",
    ...variables,
  });

/**
 * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsDisableSelectedRepositoryGithubActionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDisableSelectedRepositoryGithubActionsOrganizationError,
      ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDisableSelectedRepositoryGithubActionsOrganizationError,
    ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables
  >(
    (
      variables: ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables
    ) =>
      fetchActionsDisableSelectedRepositoryGithubActionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationPathParams =
  {
    org: string;
    repositoryId: number;
  };

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables =
  {
    pathParams: ActionsEnableSelectedRepositoryGithubActionsOrganizationPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsEnableSelectedRepositoryGithubActionsOrganization = (
  variables: ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables
) =>
  githubFetch<
    undefined,
    ActionsEnableSelectedRepositoryGithubActionsOrganizationError,
    undefined,
    {},
    {},
    ActionsEnableSelectedRepositoryGithubActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/repositories/{repositoryId}",
    method: "put",
    ...variables,
  });

/**
 * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsEnableSelectedRepositoryGithubActionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsEnableSelectedRepositoryGithubActionsOrganizationError,
      ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsEnableSelectedRepositoryGithubActionsOrganizationError,
    ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables
  >(
    (
      variables: ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables
    ) =>
      fetchActionsEnableSelectedRepositoryGithubActionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsGetAllowedActionsOrganizationPathParams = {
  org: string;
};

export type ActionsGetAllowedActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetAllowedActionsOrganizationVariables = {
  pathParams: ActionsGetAllowedActionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsGetAllowedActionsOrganization = (
  variables: ActionsGetAllowedActionsOrganizationVariables
) =>
  githubFetch<
    Schemas.SelectedActions,
    ActionsGetAllowedActionsOrganizationError,
    undefined,
    {},
    {},
    ActionsGetAllowedActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/selected-actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsGetAllowedActionsOrganization = <
  TData = Schemas.SelectedActions
>(
  variables: ActionsGetAllowedActionsOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SelectedActions,
      ActionsGetAllowedActionsOrganizationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SelectedActions,
    ActionsGetAllowedActionsOrganizationError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/permissions/selected-actions",
      operationId: "actionsGetAllowedActionsOrganization",
      variables,
    }),
    () =>
      fetchActionsGetAllowedActionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetAllowedActionsOrganizationPathParams = {
  org: string;
};

export type ActionsSetAllowedActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetAllowedActionsOrganizationVariables = {
  body: Schemas.SelectedActions;
  pathParams: ActionsSetAllowedActionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
 *
 * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsSetAllowedActionsOrganization = (
  variables: ActionsSetAllowedActionsOrganizationVariables
) =>
  githubFetch<
    undefined,
    ActionsSetAllowedActionsOrganizationError,
    Schemas.SelectedActions,
    {},
    {},
    ActionsSetAllowedActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/selected-actions",
    method: "put",
    ...variables,
  });

/**
 * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
 *
 * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsSetAllowedActionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetAllowedActionsOrganizationError,
      ActionsSetAllowedActionsOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetAllowedActionsOrganizationError,
    ActionsSetAllowedActionsOrganizationVariables
  >(
    (variables: ActionsSetAllowedActionsOrganizationVariables) =>
      fetchActionsSetAllowedActionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListSelfHostedRunnerGroupsForOrgPathParams = {
  org: string;
};

export type ActionsListSelfHostedRunnerGroupsForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListSelfHostedRunnerGroupsForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelfHostedRunnerGroupsForOrgResponse = {
  runner_groups: Schemas.RunnerGroupsOrg[];
  total_count: number;
};

export type ActionsListSelfHostedRunnerGroupsForOrgVariables = {
  pathParams: ActionsListSelfHostedRunnerGroupsForOrgPathParams;
  queryParams?: ActionsListSelfHostedRunnerGroupsForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListSelfHostedRunnerGroupsForOrg = (
  variables: ActionsListSelfHostedRunnerGroupsForOrgVariables
) =>
  githubFetch<
    ActionsListSelfHostedRunnerGroupsForOrgResponse,
    ActionsListSelfHostedRunnerGroupsForOrgError,
    undefined,
    {},
    ActionsListSelfHostedRunnerGroupsForOrgQueryParams,
    ActionsListSelfHostedRunnerGroupsForOrgPathParams
  >({ url: "/orgs/{org}/actions/runner-groups", method: "get", ...variables });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListSelfHostedRunnerGroupsForOrg = <
  TData = ActionsListSelfHostedRunnerGroupsForOrgResponse
>(
  variables: ActionsListSelfHostedRunnerGroupsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnerGroupsForOrgResponse,
      ActionsListSelfHostedRunnerGroupsForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelfHostedRunnerGroupsForOrgResponse,
    ActionsListSelfHostedRunnerGroupsForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runner-groups",
      operationId: "actionsListSelfHostedRunnerGroupsForOrg",
      variables,
    }),
    () =>
      fetchActionsListSelfHostedRunnerGroupsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateSelfHostedRunnerGroupForOrgPathParams = {
  org: string;
};

export type ActionsCreateSelfHostedRunnerGroupForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateSelfHostedRunnerGroupForOrgRequestBody = {
  /*
   * Name of the runner group.
   */
  name: string;
  /*
   * List of runner IDs to add to the runner group.
   */
  runners?: number[];
  /*
   * List of repository IDs that can access the runner group.
   */
  selected_repository_ids?: number[];
  /*
   * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
   *
   * @default all
   */
  visibility?: "selected" | "all" | "private";
};

export type ActionsCreateSelfHostedRunnerGroupForOrgVariables = {
  body: ActionsCreateSelfHostedRunnerGroupForOrgRequestBody;
  pathParams: ActionsCreateSelfHostedRunnerGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Creates a new self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsCreateSelfHostedRunnerGroupForOrg = (
  variables: ActionsCreateSelfHostedRunnerGroupForOrgVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsOrg,
    ActionsCreateSelfHostedRunnerGroupForOrgError,
    ActionsCreateSelfHostedRunnerGroupForOrgRequestBody,
    {},
    {},
    ActionsCreateSelfHostedRunnerGroupForOrgPathParams
  >({ url: "/orgs/{org}/actions/runner-groups", method: "post", ...variables });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Creates a new self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsCreateSelfHostedRunnerGroupForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RunnerGroupsOrg,
      ActionsCreateSelfHostedRunnerGroupForOrgError,
      ActionsCreateSelfHostedRunnerGroupForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RunnerGroupsOrg,
    ActionsCreateSelfHostedRunnerGroupForOrgError,
    ActionsCreateSelfHostedRunnerGroupForOrgVariables
  >(
    (variables: ActionsCreateSelfHostedRunnerGroupForOrgVariables) =>
      fetchActionsCreateSelfHostedRunnerGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsDeleteSelfHostedRunnerGroupFromOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsDeleteSelfHostedRunnerGroupFromOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteSelfHostedRunnerGroupFromOrgVariables = {
  pathParams: ActionsDeleteSelfHostedRunnerGroupFromOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Deletes a self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsDeleteSelfHostedRunnerGroupFromOrg = (
  variables: ActionsDeleteSelfHostedRunnerGroupFromOrgVariables
) =>
  githubFetch<
    undefined,
    ActionsDeleteSelfHostedRunnerGroupFromOrgError,
    undefined,
    {},
    {},
    ActionsDeleteSelfHostedRunnerGroupFromOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}",
    method: "delete",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Deletes a self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsDeleteSelfHostedRunnerGroupFromOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteSelfHostedRunnerGroupFromOrgError,
      ActionsDeleteSelfHostedRunnerGroupFromOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteSelfHostedRunnerGroupFromOrgError,
    ActionsDeleteSelfHostedRunnerGroupFromOrgVariables
  >(
    (variables: ActionsDeleteSelfHostedRunnerGroupFromOrgVariables) =>
      fetchActionsDeleteSelfHostedRunnerGroupFromOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsGetSelfHostedRunnerGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsGetSelfHostedRunnerGroupForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetSelfHostedRunnerGroupForOrgVariables = {
  pathParams: ActionsGetSelfHostedRunnerGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Gets a specific self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsGetSelfHostedRunnerGroupForOrg = (
  variables: ActionsGetSelfHostedRunnerGroupForOrgVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsOrg,
    ActionsGetSelfHostedRunnerGroupForOrgError,
    undefined,
    {},
    {},
    ActionsGetSelfHostedRunnerGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}",
    method: "get",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Gets a specific self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsGetSelfHostedRunnerGroupForOrg = <
  TData = Schemas.RunnerGroupsOrg
>(
  variables: ActionsGetSelfHostedRunnerGroupForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RunnerGroupsOrg,
      ActionsGetSelfHostedRunnerGroupForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RunnerGroupsOrg,
    ActionsGetSelfHostedRunnerGroupForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}",
      operationId: "actionsGetSelfHostedRunnerGroupForOrg",
      variables,
    }),
    () =>
      fetchActionsGetSelfHostedRunnerGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsUpdateSelfHostedRunnerGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsUpdateSelfHostedRunnerGroupForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsUpdateSelfHostedRunnerGroupForOrgRequestBody = {
  /*
   * Name of the runner group.
   */
  name?: string;
  /*
   * Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`.
   */
  visibility?: "selected" | "all" | "private";
};

export type ActionsUpdateSelfHostedRunnerGroupForOrgVariables = {
  body?: ActionsUpdateSelfHostedRunnerGroupForOrgRequestBody;
  pathParams: ActionsUpdateSelfHostedRunnerGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsUpdateSelfHostedRunnerGroupForOrg = (
  variables: ActionsUpdateSelfHostedRunnerGroupForOrgVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsOrg,
    ActionsUpdateSelfHostedRunnerGroupForOrgError,
    ActionsUpdateSelfHostedRunnerGroupForOrgRequestBody,
    {},
    {},
    ActionsUpdateSelfHostedRunnerGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}",
    method: "patch",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsUpdateSelfHostedRunnerGroupForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RunnerGroupsOrg,
      ActionsUpdateSelfHostedRunnerGroupForOrgError,
      ActionsUpdateSelfHostedRunnerGroupForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RunnerGroupsOrg,
    ActionsUpdateSelfHostedRunnerGroupForOrgError,
    ActionsUpdateSelfHostedRunnerGroupForOrgVariables
  >(
    (variables: ActionsUpdateSelfHostedRunnerGroupForOrgVariables) =>
      fetchActionsUpdateSelfHostedRunnerGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse = {
  repositories: Schemas.Repository[];
  total_count: number;
};

export type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgVariables = {
  pathParams: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgPathParams;
  queryParams?: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists the repositories with access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListRepoAccessToSelfHostedRunnerGroupInOrg = (
  variables: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgVariables
) =>
  githubFetch<
    ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse,
    ActionsListRepoAccessToSelfHostedRunnerGroupInOrgError,
    undefined,
    {},
    ActionsListRepoAccessToSelfHostedRunnerGroupInOrgQueryParams,
    ActionsListRepoAccessToSelfHostedRunnerGroupInOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/repositories",
    method: "get",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists the repositories with access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListRepoAccessToSelfHostedRunnerGroupInOrg = <
  TData = ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse
>(
  variables: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse,
      ActionsListRepoAccessToSelfHostedRunnerGroupInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse,
    ActionsListRepoAccessToSelfHostedRunnerGroupInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
      operationId: "actionsListRepoAccessToSelfHostedRunnerGroupInOrg",
      variables,
    }),
    () =>
      fetchActionsListRepoAccessToSelfHostedRunnerGroupInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequestBody = {
  /*
   * List of repository IDs that can access the runner group.
   */
  selected_repository_ids: number[];
};

export type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgVariables = {
  body: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequestBody;
  pathParams: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsSetRepoAccessToSelfHostedRunnerGroupInOrg = (
  variables: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgVariables
) =>
  githubFetch<
    undefined,
    ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgError,
    ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequestBody,
    {},
    {},
    ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/repositories",
    method: "put",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsSetRepoAccessToSelfHostedRunnerGroupInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgError,
      ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgError,
    ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgVariables
  >(
    (variables: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgVariables) =>
      fetchActionsSetRepoAccessToSelfHostedRunnerGroupInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
  repositoryId: number;
};

export type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgVariables = {
  pathParams: ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg = (
  variables: ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgVariables
) =>
  githubFetch<
    undefined,
    ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgError,
    undefined,
    {},
    {},
    ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgError,
      ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgError,
    ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgVariables
  >(
    (variables: ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgVariables) =>
      fetchActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
  repositoryId: number;
};

export type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgVariables = {
  pathParams: ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org`
 * scope to use this endpoint.
 */
export const fetchActionsAddRepoAccessToSelfHostedRunnerGroupInOrg = (
  variables: ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgVariables
) =>
  githubFetch<
    undefined,
    ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgError,
    undefined,
    {},
    {},
    ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/repositories/{repositoryId}",
    method: "put",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org`
 * scope to use this endpoint.
 */
export const useActionsAddRepoAccessToSelfHostedRunnerGroupInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgError,
      ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgError,
    ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgVariables
  >(
    (variables: ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgVariables) =>
      fetchActionsAddRepoAccessToSelfHostedRunnerGroupInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListSelfHostedRunnersInGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsListSelfHostedRunnersInGroupForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListSelfHostedRunnersInGroupForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelfHostedRunnersInGroupForOrgResponse = {
  runners: Schemas.Runner[];
  total_count: number;
};

export type ActionsListSelfHostedRunnersInGroupForOrgVariables = {
  pathParams: ActionsListSelfHostedRunnersInGroupForOrgPathParams;
  queryParams?: ActionsListSelfHostedRunnersInGroupForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists self-hosted runners that are in a specific organization group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListSelfHostedRunnersInGroupForOrg = (
  variables: ActionsListSelfHostedRunnersInGroupForOrgVariables
) =>
  githubFetch<
    ActionsListSelfHostedRunnersInGroupForOrgResponse,
    ActionsListSelfHostedRunnersInGroupForOrgError,
    undefined,
    {},
    ActionsListSelfHostedRunnersInGroupForOrgQueryParams,
    ActionsListSelfHostedRunnersInGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/runners",
    method: "get",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists self-hosted runners that are in a specific organization group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListSelfHostedRunnersInGroupForOrg = <
  TData = ActionsListSelfHostedRunnersInGroupForOrgResponse
>(
  variables: ActionsListSelfHostedRunnersInGroupForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnersInGroupForOrgResponse,
      ActionsListSelfHostedRunnersInGroupForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelfHostedRunnersInGroupForOrgResponse,
    ActionsListSelfHostedRunnersInGroupForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
      operationId: "actionsListSelfHostedRunnersInGroupForOrg",
      variables,
    }),
    () =>
      fetchActionsListSelfHostedRunnersInGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetSelfHostedRunnersInGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsSetSelfHostedRunnersInGroupForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetSelfHostedRunnersInGroupForOrgRequestBody = {
  /*
   * List of runner IDs to add to the runner group.
   */
  runners: number[];
};

export type ActionsSetSelfHostedRunnersInGroupForOrgVariables = {
  body: ActionsSetSelfHostedRunnersInGroupForOrgRequestBody;
  pathParams: ActionsSetSelfHostedRunnersInGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Replaces the list of self-hosted runners that are part of an organization runner group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsSetSelfHostedRunnersInGroupForOrg = (
  variables: ActionsSetSelfHostedRunnersInGroupForOrgVariables
) =>
  githubFetch<
    undefined,
    ActionsSetSelfHostedRunnersInGroupForOrgError,
    ActionsSetSelfHostedRunnersInGroupForOrgRequestBody,
    {},
    {},
    ActionsSetSelfHostedRunnersInGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/runners",
    method: "put",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Replaces the list of self-hosted runners that are part of an organization runner group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsSetSelfHostedRunnersInGroupForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetSelfHostedRunnersInGroupForOrgError,
      ActionsSetSelfHostedRunnersInGroupForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetSelfHostedRunnersInGroupForOrgError,
    ActionsSetSelfHostedRunnersInGroupForOrgVariables
  >(
    (variables: ActionsSetSelfHostedRunnersInGroupForOrgVariables) =>
      fetchActionsSetSelfHostedRunnersInGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsRemoveSelfHostedRunnerFromGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsRemoveSelfHostedRunnerFromGroupForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsRemoveSelfHostedRunnerFromGroupForOrgVariables = {
  pathParams: ActionsRemoveSelfHostedRunnerFromGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsRemoveSelfHostedRunnerFromGroupForOrg = (
  variables: ActionsRemoveSelfHostedRunnerFromGroupForOrgVariables
) =>
  githubFetch<
    undefined,
    ActionsRemoveSelfHostedRunnerFromGroupForOrgError,
    undefined,
    {},
    {},
    ActionsRemoveSelfHostedRunnerFromGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/runners/{runnerId}",
    method: "delete",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsRemoveSelfHostedRunnerFromGroupForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsRemoveSelfHostedRunnerFromGroupForOrgError,
      ActionsRemoveSelfHostedRunnerFromGroupForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsRemoveSelfHostedRunnerFromGroupForOrgError,
    ActionsRemoveSelfHostedRunnerFromGroupForOrgVariables
  >(
    (variables: ActionsRemoveSelfHostedRunnerFromGroupForOrgVariables) =>
      fetchActionsRemoveSelfHostedRunnerFromGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsAddSelfHostedRunnerToGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsAddSelfHostedRunnerToGroupForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsAddSelfHostedRunnerToGroupForOrgVariables = {
  pathParams: ActionsAddSelfHostedRunnerToGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Adds a self-hosted runner to a runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org`
 * scope to use this endpoint.
 */
export const fetchActionsAddSelfHostedRunnerToGroupForOrg = (
  variables: ActionsAddSelfHostedRunnerToGroupForOrgVariables
) =>
  githubFetch<
    undefined,
    ActionsAddSelfHostedRunnerToGroupForOrgError,
    undefined,
    {},
    {},
    ActionsAddSelfHostedRunnerToGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/runners/{runnerId}",
    method: "put",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Adds a self-hosted runner to a runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org`
 * scope to use this endpoint.
 */
export const useActionsAddSelfHostedRunnerToGroupForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsAddSelfHostedRunnerToGroupForOrgError,
      ActionsAddSelfHostedRunnerToGroupForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsAddSelfHostedRunnerToGroupForOrgError,
    ActionsAddSelfHostedRunnerToGroupForOrgVariables
  >(
    (variables: ActionsAddSelfHostedRunnerToGroupForOrgVariables) =>
      fetchActionsAddSelfHostedRunnerToGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListSelfHostedRunnersForOrgPathParams = {
  org: string;
};

export type ActionsListSelfHostedRunnersForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListSelfHostedRunnersForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelfHostedRunnersForOrgResponse = {
  runners: Schemas.Runner[];
  total_count: number;
};

export type ActionsListSelfHostedRunnersForOrgVariables = {
  pathParams: ActionsListSelfHostedRunnersForOrgPathParams;
  queryParams?: ActionsListSelfHostedRunnersForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all self-hosted runners configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListSelfHostedRunnersForOrg = (
  variables: ActionsListSelfHostedRunnersForOrgVariables
) =>
  githubFetch<
    ActionsListSelfHostedRunnersForOrgResponse,
    ActionsListSelfHostedRunnersForOrgError,
    undefined,
    {},
    ActionsListSelfHostedRunnersForOrgQueryParams,
    ActionsListSelfHostedRunnersForOrgPathParams
  >({ url: "/orgs/{org}/actions/runners", method: "get", ...variables });

/**
 * Lists all self-hosted runners configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListSelfHostedRunnersForOrg = <
  TData = ActionsListSelfHostedRunnersForOrgResponse
>(
  variables: ActionsListSelfHostedRunnersForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnersForOrgResponse,
      ActionsListSelfHostedRunnersForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelfHostedRunnersForOrgResponse,
    ActionsListSelfHostedRunnersForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runners",
      operationId: "actionsListSelfHostedRunnersForOrg",
      variables,
    }),
    () =>
      fetchActionsListSelfHostedRunnersForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListRunnerApplicationsForOrgPathParams = {
  org: string;
};

export type ActionsListRunnerApplicationsForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListRunnerApplicationsForOrgResponse =
  Schemas.RunnerApplication[];

export type ActionsListRunnerApplicationsForOrgVariables = {
  pathParams: ActionsListRunnerApplicationsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListRunnerApplicationsForOrg = (
  variables: ActionsListRunnerApplicationsForOrgVariables
) =>
  githubFetch<
    ActionsListRunnerApplicationsForOrgResponse,
    ActionsListRunnerApplicationsForOrgError,
    undefined,
    {},
    {},
    ActionsListRunnerApplicationsForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/downloads",
    method: "get",
    ...variables,
  });

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListRunnerApplicationsForOrg = <
  TData = ActionsListRunnerApplicationsForOrgResponse
>(
  variables: ActionsListRunnerApplicationsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRunnerApplicationsForOrgResponse,
      ActionsListRunnerApplicationsForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRunnerApplicationsForOrgResponse,
    ActionsListRunnerApplicationsForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runners/downloads",
      operationId: "actionsListRunnerApplicationsForOrg",
      variables,
    }),
    () =>
      fetchActionsListRunnerApplicationsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateRegistrationTokenForOrgPathParams = {
  org: string;
};

export type ActionsCreateRegistrationTokenForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateRegistrationTokenForOrgVariables = {
  pathParams: ActionsCreateRegistrationTokenForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org --token TOKEN
 * ```
 */
export const fetchActionsCreateRegistrationTokenForOrg = (
  variables: ActionsCreateRegistrationTokenForOrgVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    ActionsCreateRegistrationTokenForOrgError,
    undefined,
    {},
    {},
    ActionsCreateRegistrationTokenForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/registration-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org --token TOKEN
 * ```
 */
export const useActionsCreateRegistrationTokenForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      ActionsCreateRegistrationTokenForOrgError,
      ActionsCreateRegistrationTokenForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    ActionsCreateRegistrationTokenForOrgError,
    ActionsCreateRegistrationTokenForOrgVariables
  >(
    (variables: ActionsCreateRegistrationTokenForOrgVariables) =>
      fetchActionsCreateRegistrationTokenForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsCreateRemoveTokenForOrgPathParams = {
  org: string;
};

export type ActionsCreateRemoveTokenForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateRemoveTokenForOrgVariables = {
  pathParams: ActionsCreateRemoveTokenForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
 * endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const fetchActionsCreateRemoveTokenForOrg = (
  variables: ActionsCreateRemoveTokenForOrgVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    ActionsCreateRemoveTokenForOrgError,
    undefined,
    {},
    {},
    ActionsCreateRemoveTokenForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/remove-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
 * endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const useActionsCreateRemoveTokenForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      ActionsCreateRemoveTokenForOrgError,
      ActionsCreateRemoveTokenForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    ActionsCreateRemoveTokenForOrgError,
    ActionsCreateRemoveTokenForOrgVariables
  >(
    (variables: ActionsCreateRemoveTokenForOrgVariables) =>
      fetchActionsCreateRemoveTokenForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsDeleteSelfHostedRunnerFromOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsDeleteSelfHostedRunnerFromOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteSelfHostedRunnerFromOrgVariables = {
  pathParams: ActionsDeleteSelfHostedRunnerFromOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsDeleteSelfHostedRunnerFromOrg = (
  variables: ActionsDeleteSelfHostedRunnerFromOrgVariables
) =>
  githubFetch<
    undefined,
    ActionsDeleteSelfHostedRunnerFromOrgError,
    undefined,
    {},
    {},
    ActionsDeleteSelfHostedRunnerFromOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/{runnerId}",
    method: "delete",
    ...variables,
  });

/**
 * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsDeleteSelfHostedRunnerFromOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteSelfHostedRunnerFromOrgError,
      ActionsDeleteSelfHostedRunnerFromOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteSelfHostedRunnerFromOrgError,
    ActionsDeleteSelfHostedRunnerFromOrgVariables
  >(
    (variables: ActionsDeleteSelfHostedRunnerFromOrgVariables) =>
      fetchActionsDeleteSelfHostedRunnerFromOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsGetSelfHostedRunnerForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsGetSelfHostedRunnerForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetSelfHostedRunnerForOrgVariables = {
  pathParams: ActionsGetSelfHostedRunnerForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsGetSelfHostedRunnerForOrg = (
  variables: ActionsGetSelfHostedRunnerForOrgVariables
) =>
  githubFetch<
    Schemas.Runner,
    ActionsGetSelfHostedRunnerForOrgError,
    undefined,
    {},
    {},
    ActionsGetSelfHostedRunnerForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/{runnerId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsGetSelfHostedRunnerForOrg = <TData = Schemas.Runner>(
  variables: ActionsGetSelfHostedRunnerForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Runner,
      ActionsGetSelfHostedRunnerForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Runner,
    ActionsGetSelfHostedRunnerForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runners/{runner_id}",
      operationId: "actionsGetSelfHostedRunnerForOrg",
      variables,
    }),
    () =>
      fetchActionsGetSelfHostedRunnerForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListOrgSecretsPathParams = {
  org: string;
};

export type ActionsListOrgSecretsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListOrgSecretsError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListOrgSecretsResponse = {
  secrets: Schemas.OrganizationActionsSecret[];
  total_count: number;
};

export type ActionsListOrgSecretsVariables = {
  pathParams: ActionsListOrgSecretsPathParams;
  queryParams?: ActionsListOrgSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsListOrgSecrets = (
  variables: ActionsListOrgSecretsVariables
) =>
  githubFetch<
    ActionsListOrgSecretsResponse,
    ActionsListOrgSecretsError,
    undefined,
    {},
    ActionsListOrgSecretsQueryParams,
    ActionsListOrgSecretsPathParams
  >({ url: "/orgs/{org}/actions/secrets", method: "get", ...variables });

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsListOrgSecrets = <TData = ActionsListOrgSecretsResponse>(
  variables: ActionsListOrgSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListOrgSecretsResponse,
      ActionsListOrgSecretsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListOrgSecretsResponse,
    ActionsListOrgSecretsError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/secrets",
      operationId: "actionsListOrgSecrets",
      variables,
    }),
    () => fetchActionsListOrgSecrets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetOrgPublicKeyPathParams = {
  org: string;
};

export type ActionsGetOrgPublicKeyError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetOrgPublicKeyVariables = {
  pathParams: ActionsGetOrgPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsGetOrgPublicKey = (
  variables: ActionsGetOrgPublicKeyVariables
) =>
  githubFetch<
    Schemas.ActionsPublicKey,
    ActionsGetOrgPublicKeyError,
    undefined,
    {},
    {},
    ActionsGetOrgPublicKeyPathParams
  >({
    url: "/orgs/{org}/actions/secrets/public-key",
    method: "get",
    ...variables,
  });

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsGetOrgPublicKey = <TData = Schemas.ActionsPublicKey>(
  variables: ActionsGetOrgPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      ActionsGetOrgPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsPublicKey,
    ActionsGetOrgPublicKeyError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/secrets/public-key",
      operationId: "actionsGetOrgPublicKey",
      variables,
    }),
    () => fetchActionsGetOrgPublicKey({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsDeleteOrgSecretError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteOrgSecretVariables = {
  pathParams: ActionsDeleteOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsDeleteOrgSecret = (
  variables: ActionsDeleteOrgSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsDeleteOrgSecretError,
    undefined,
    {},
    {},
    ActionsDeleteOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsDeleteOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteOrgSecretError,
      ActionsDeleteOrgSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteOrgSecretError,
    ActionsDeleteOrgSecretVariables
  >(
    (variables: ActionsDeleteOrgSecretVariables) =>
      fetchActionsDeleteOrgSecret({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsGetOrgSecretError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetOrgSecretVariables = {
  pathParams: ActionsGetOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsGetOrgSecret = (
  variables: ActionsGetOrgSecretVariables
) =>
  githubFetch<
    Schemas.OrganizationActionsSecret,
    ActionsGetOrgSecretError,
    undefined,
    {},
    {},
    ActionsGetOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsGetOrgSecret = <
  TData = Schemas.OrganizationActionsSecret
>(
  variables: ActionsGetOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganizationActionsSecret,
      ActionsGetOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrganizationActionsSecret,
    ActionsGetOrgSecretError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/secrets/{secret_name}",
      operationId: "actionsGetOrgSecret",
      variables,
    }),
    () => fetchActionsGetOrgSecret({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateOrUpdateOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsCreateOrUpdateOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateOrUpdateOrgSecretRequestBody = {
  /*
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /*
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
  /*
   * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids?: string[];
  /*
   * Configures the access that repositories have to the organization secret. Can be one of:
   * \- `all` - All repositories in an organization can access the secret.
   * \- `private` - Private repositories in an organization can access the secret.
   * \- `selected` - Only specific repositories can access the secret.
   */
  visibility?: "all" | "private" | "selected";
};

export type ActionsCreateOrUpdateOrgSecretVariables = {
  body?: ActionsCreateOrUpdateOrgSecretRequestBody;
  pathParams: ActionsCreateOrUpdateOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
 * use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchActionsCreateOrUpdateOrgSecret = (
  variables: ActionsCreateOrUpdateOrgSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsCreateOrUpdateOrgSecretError,
    ActionsCreateOrUpdateOrgSecretRequestBody,
    {},
    {},
    ActionsCreateOrUpdateOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}",
    method: "put",
    ...variables,
  });

/**
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
 * use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useActionsCreateOrUpdateOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsCreateOrUpdateOrgSecretError,
      ActionsCreateOrUpdateOrgSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsCreateOrUpdateOrgSecretError,
    ActionsCreateOrUpdateOrgSecretVariables
  >(
    (variables: ActionsCreateOrUpdateOrgSecretVariables) =>
      fetchActionsCreateOrUpdateOrgSecret({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsListSelectedReposForOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsListSelectedReposForOrgSecretQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ActionsListSelectedReposForOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelectedReposForOrgSecretResponse = {
  repositories: Schemas.MinimalRepository[];
  total_count: number;
};

export type ActionsListSelectedReposForOrgSecretVariables = {
  pathParams: ActionsListSelectedReposForOrgSecretPathParams;
  queryParams?: ActionsListSelectedReposForOrgSecretQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsListSelectedReposForOrgSecret = (
  variables: ActionsListSelectedReposForOrgSecretVariables
) =>
  githubFetch<
    ActionsListSelectedReposForOrgSecretResponse,
    ActionsListSelectedReposForOrgSecretError,
    undefined,
    {},
    ActionsListSelectedReposForOrgSecretQueryParams,
    ActionsListSelectedReposForOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories",
    method: "get",
    ...variables,
  });

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsListSelectedReposForOrgSecret = <
  TData = ActionsListSelectedReposForOrgSecretResponse
>(
  variables: ActionsListSelectedReposForOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelectedReposForOrgSecretResponse,
      ActionsListSelectedReposForOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelectedReposForOrgSecretResponse,
    ActionsListSelectedReposForOrgSecretError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/secrets/{secret_name}/repositories",
      operationId: "actionsListSelectedReposForOrgSecret",
      variables,
    }),
    () =>
      fetchActionsListSelectedReposForOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetSelectedReposForOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsSetSelectedReposForOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetSelectedReposForOrgSecretRequestBody = {
  /*
   * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids?: number[];
};

export type ActionsSetSelectedReposForOrgSecretVariables = {
  body?: ActionsSetSelectedReposForOrgSecretRequestBody;
  pathParams: ActionsSetSelectedReposForOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsSetSelectedReposForOrgSecret = (
  variables: ActionsSetSelectedReposForOrgSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsSetSelectedReposForOrgSecretError,
    ActionsSetSelectedReposForOrgSecretRequestBody,
    {},
    {},
    ActionsSetSelectedReposForOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories",
    method: "put",
    ...variables,
  });

/**
 * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsSetSelectedReposForOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetSelectedReposForOrgSecretError,
      ActionsSetSelectedReposForOrgSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetSelectedReposForOrgSecretError,
    ActionsSetSelectedReposForOrgSecretVariables
  >(
    (variables: ActionsSetSelectedReposForOrgSecretVariables) =>
      fetchActionsSetSelectedReposForOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsRemoveSelectedRepoFromOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
  repositoryId: number;
};

export type ActionsRemoveSelectedRepoFromOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsRemoveSelectedRepoFromOrgSecretVariables = {
  pathParams: ActionsRemoveSelectedRepoFromOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsRemoveSelectedRepoFromOrgSecret = (
  variables: ActionsRemoveSelectedRepoFromOrgSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsRemoveSelectedRepoFromOrgSecretError,
    undefined,
    {},
    {},
    ActionsRemoveSelectedRepoFromOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
  });

/**
 * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsRemoveSelectedRepoFromOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsRemoveSelectedRepoFromOrgSecretError,
      ActionsRemoveSelectedRepoFromOrgSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsRemoveSelectedRepoFromOrgSecretError,
    ActionsRemoveSelectedRepoFromOrgSecretVariables
  >(
    (variables: ActionsRemoveSelectedRepoFromOrgSecretVariables) =>
      fetchActionsRemoveSelectedRepoFromOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsAddSelectedRepoToOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
  repositoryId: number;
};

export type ActionsAddSelectedRepoToOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsAddSelectedRepoToOrgSecretVariables = {
  pathParams: ActionsAddSelectedRepoToOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsAddSelectedRepoToOrgSecret = (
  variables: ActionsAddSelectedRepoToOrgSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsAddSelectedRepoToOrgSecretError,
    undefined,
    {},
    {},
    ActionsAddSelectedRepoToOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories/{repositoryId}",
    method: "put",
    ...variables,
  });

/**
 * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsAddSelectedRepoToOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsAddSelectedRepoToOrgSecretError,
      ActionsAddSelectedRepoToOrgSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsAddSelectedRepoToOrgSecretError,
    ActionsAddSelectedRepoToOrgSecretVariables
  >(
    (variables: ActionsAddSelectedRepoToOrgSecretVariables) =>
      fetchActionsAddSelectedRepoToOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrgsGetAuditLogPathParams = {
  org: string;
};

export type OrgsGetAuditLogQueryParams = {
  /*
   * A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
   */
  phrase?: string;
  /*
   * The event types to include:
   *
   * - `web` - returns web (non-Git) events
   * - `git` - returns Git events
   * - `all` - returns both web and Git events
   *
   * The default is `web`.
   */
  include?: "web" | "git" | "all";
  /*
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
   */
  after?: string;
  /*
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
   */
  before?: string;
  /*
   * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
   *
   * The default is `desc`.
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsGetAuditLogError = Fetcher.ErrorWrapper<undefined>;

export type OrgsGetAuditLogResponse = Schemas.AuditLogEvent[];

export type OrgsGetAuditLogVariables = {
  pathParams: OrgsGetAuditLogPathParams;
  queryParams?: OrgsGetAuditLogQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The audit log REST API is currently in beta and is subject to change.
 *
 * Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
 *
 * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
 */
export const fetchOrgsGetAuditLog = (variables: OrgsGetAuditLogVariables) =>
  githubFetch<
    OrgsGetAuditLogResponse,
    OrgsGetAuditLogError,
    undefined,
    {},
    OrgsGetAuditLogQueryParams,
    OrgsGetAuditLogPathParams
  >({ url: "/orgs/{org}/audit-log", method: "get", ...variables });

/**
 * **Note:** The audit log REST API is currently in beta and is subject to change.
 *
 * Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
 *
 * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
 */
export const useOrgsGetAuditLog = <TData = OrgsGetAuditLogResponse>(
  variables: OrgsGetAuditLogVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsGetAuditLogResponse,
      OrgsGetAuditLogError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsGetAuditLogResponse,
    OrgsGetAuditLogError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/audit-log",
      operationId: "orgsGetAuditLog",
      variables,
    }),
    () => fetchOrgsGetAuditLog({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListBlockedUsersPathParams = {
  org: string;
};

export type OrgsListBlockedUsersError = Fetcher.ErrorWrapper<{
  status: 415;
  payload: Responses.PreviewHeaderMissing;
}>;

export type OrgsListBlockedUsersResponse = Schemas.SimpleUser[];

export type OrgsListBlockedUsersVariables = {
  pathParams: OrgsListBlockedUsersPathParams;
} & GithubContext["fetcherOptions"];

/**
 * List the users blocked by an organization.
 */
export const fetchOrgsListBlockedUsers = (
  variables: OrgsListBlockedUsersVariables
) =>
  githubFetch<
    OrgsListBlockedUsersResponse,
    OrgsListBlockedUsersError,
    undefined,
    {},
    {},
    OrgsListBlockedUsersPathParams
  >({ url: "/orgs/{org}/blocks", method: "get", ...variables });

/**
 * List the users blocked by an organization.
 */
export const useOrgsListBlockedUsers = <TData = OrgsListBlockedUsersResponse>(
  variables: OrgsListBlockedUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListBlockedUsersResponse,
      OrgsListBlockedUsersError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListBlockedUsersResponse,
    OrgsListBlockedUsersError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/blocks",
      operationId: "orgsListBlockedUsers",
      variables,
    }),
    () => fetchOrgsListBlockedUsers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsUnblockUserPathParams = {
  org: string;
  username: string;
};

export type OrgsUnblockUserError = Fetcher.ErrorWrapper<undefined>;

export type OrgsUnblockUserVariables = {
  pathParams: OrgsUnblockUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsUnblockUser = (variables: OrgsUnblockUserVariables) =>
  githubFetch<
    undefined,
    OrgsUnblockUserError,
    undefined,
    {},
    {},
    OrgsUnblockUserPathParams
  >({ url: "/orgs/{org}/blocks/{username}", method: "delete", ...variables });

export const useOrgsUnblockUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsUnblockUserError,
      OrgsUnblockUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsUnblockUserError,
    OrgsUnblockUserVariables
  >(
    (variables: OrgsUnblockUserVariables) =>
      fetchOrgsUnblockUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsCheckBlockedUserPathParams = {
  org: string;
  username: string;
};

export type OrgsCheckBlockedUserError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.BasicError;
}>;

export type OrgsCheckBlockedUserVariables = {
  pathParams: OrgsCheckBlockedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsCheckBlockedUser = (
  variables: OrgsCheckBlockedUserVariables
) =>
  githubFetch<
    undefined,
    OrgsCheckBlockedUserError,
    undefined,
    {},
    {},
    OrgsCheckBlockedUserPathParams
  >({ url: "/orgs/{org}/blocks/{username}", method: "get", ...variables });

export const useOrgsCheckBlockedUser = <TData = undefined>(
  variables: OrgsCheckBlockedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, OrgsCheckBlockedUserError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, OrgsCheckBlockedUserError, TData>(
    queryKeyFn({
      path: "/orgs/{org}/blocks/{username}",
      operationId: "orgsCheckBlockedUser",
      variables,
    }),
    () => fetchOrgsCheckBlockedUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsBlockUserPathParams = {
  org: string;
  username: string;
};

export type OrgsBlockUserError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type OrgsBlockUserVariables = {
  pathParams: OrgsBlockUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsBlockUser = (variables: OrgsBlockUserVariables) =>
  githubFetch<
    undefined,
    OrgsBlockUserError,
    undefined,
    {},
    {},
    OrgsBlockUserPathParams
  >({ url: "/orgs/{org}/blocks/{username}", method: "put", ...variables });

export const useOrgsBlockUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsBlockUserError,
      OrgsBlockUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsBlockUserError,
    OrgsBlockUserVariables
  >(
    (variables: OrgsBlockUserVariables) =>
      fetchOrgsBlockUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsListSamlSsoAuthorizationsPathParams = {
  org: string;
};

export type OrgsListSamlSsoAuthorizationsError =
  Fetcher.ErrorWrapper<undefined>;

export type OrgsListSamlSsoAuthorizationsResponse =
  Schemas.CredentialAuthorization[];

export type OrgsListSamlSsoAuthorizationsVariables = {
  pathParams: OrgsListSamlSsoAuthorizationsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
 */
export const fetchOrgsListSamlSsoAuthorizations = (
  variables: OrgsListSamlSsoAuthorizationsVariables
) =>
  githubFetch<
    OrgsListSamlSsoAuthorizationsResponse,
    OrgsListSamlSsoAuthorizationsError,
    undefined,
    {},
    {},
    OrgsListSamlSsoAuthorizationsPathParams
  >({
    url: "/orgs/{org}/credential-authorizations",
    method: "get",
    ...variables,
  });

/**
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
 */
export const useOrgsListSamlSsoAuthorizations = <
  TData = OrgsListSamlSsoAuthorizationsResponse
>(
  variables: OrgsListSamlSsoAuthorizationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListSamlSsoAuthorizationsResponse,
      OrgsListSamlSsoAuthorizationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListSamlSsoAuthorizationsResponse,
    OrgsListSamlSsoAuthorizationsError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/credential-authorizations",
      operationId: "orgsListSamlSsoAuthorizations",
      variables,
    }),
    () =>
      fetchOrgsListSamlSsoAuthorizations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsRemoveSamlSsoAuthorizationPathParams = {
  org: string;
  credentialId: number;
};

export type OrgsRemoveSamlSsoAuthorizationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsRemoveSamlSsoAuthorizationVariables = {
  pathParams: OrgsRemoveSamlSsoAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
 */
export const fetchOrgsRemoveSamlSsoAuthorization = (
  variables: OrgsRemoveSamlSsoAuthorizationVariables
) =>
  githubFetch<
    undefined,
    OrgsRemoveSamlSsoAuthorizationError,
    undefined,
    {},
    {},
    OrgsRemoveSamlSsoAuthorizationPathParams
  >({
    url: "/orgs/{org}/credential-authorizations/{credentialId}",
    method: "delete",
    ...variables,
  });

/**
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
 */
export const useOrgsRemoveSamlSsoAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsRemoveSamlSsoAuthorizationError,
      OrgsRemoveSamlSsoAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsRemoveSamlSsoAuthorizationError,
    OrgsRemoveSamlSsoAuthorizationVariables
  >(
    (variables: OrgsRemoveSamlSsoAuthorizationVariables) =>
      fetchOrgsRemoveSamlSsoAuthorization({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityListPublicOrgEventsPathParams = {
  org: string;
};

export type ActivityListPublicOrgEventsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicOrgEventsError = Fetcher.ErrorWrapper<undefined>;

export type ActivityListPublicOrgEventsResponse = Schemas.Event[];

export type ActivityListPublicOrgEventsVariables = {
  pathParams: ActivityListPublicOrgEventsPathParams;
  queryParams?: ActivityListPublicOrgEventsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListPublicOrgEvents = (
  variables: ActivityListPublicOrgEventsVariables
) =>
  githubFetch<
    ActivityListPublicOrgEventsResponse,
    ActivityListPublicOrgEventsError,
    undefined,
    {},
    ActivityListPublicOrgEventsQueryParams,
    ActivityListPublicOrgEventsPathParams
  >({ url: "/orgs/{org}/events", method: "get", ...variables });

export const useActivityListPublicOrgEvents = <
  TData = ActivityListPublicOrgEventsResponse
>(
  variables: ActivityListPublicOrgEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicOrgEventsResponse,
      ActivityListPublicOrgEventsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicOrgEventsResponse,
    ActivityListPublicOrgEventsError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/events",
      operationId: "activityListPublicOrgEvents",
      variables,
    }),
    () => fetchActivityListPublicOrgEvents({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListFailedInvitationsPathParams = {
  org: string;
};

export type OrgsListFailedInvitationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListFailedInvitationsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsListFailedInvitationsResponse =
  Schemas.OrganizationInvitation[];

export type OrgsListFailedInvitationsVariables = {
  pathParams: OrgsListFailedInvitationsPathParams;
  queryParams?: OrgsListFailedInvitationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
 */
export const fetchOrgsListFailedInvitations = (
  variables: OrgsListFailedInvitationsVariables
) =>
  githubFetch<
    OrgsListFailedInvitationsResponse,
    OrgsListFailedInvitationsError,
    undefined,
    {},
    OrgsListFailedInvitationsQueryParams,
    OrgsListFailedInvitationsPathParams
  >({ url: "/orgs/{org}/failed_invitations", method: "get", ...variables });

/**
 * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
 */
export const useOrgsListFailedInvitations = <
  TData = OrgsListFailedInvitationsResponse
>(
  variables: OrgsListFailedInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListFailedInvitationsResponse,
      OrgsListFailedInvitationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListFailedInvitationsResponse,
    OrgsListFailedInvitationsError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/failed_invitations",
      operationId: "orgsListFailedInvitations",
      variables,
    }),
    () => fetchOrgsListFailedInvitations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListWebhooksPathParams = {
  org: string;
};

export type OrgsListWebhooksQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListWebhooksError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsListWebhooksResponse = Schemas.OrgHook[];

export type OrgsListWebhooksVariables = {
  pathParams: OrgsListWebhooksPathParams;
  queryParams?: OrgsListWebhooksQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsListWebhooks = (variables: OrgsListWebhooksVariables) =>
  githubFetch<
    OrgsListWebhooksResponse,
    OrgsListWebhooksError,
    undefined,
    {},
    OrgsListWebhooksQueryParams,
    OrgsListWebhooksPathParams
  >({ url: "/orgs/{org}/hooks", method: "get", ...variables });

export const useOrgsListWebhooks = <TData = OrgsListWebhooksResponse>(
  variables: OrgsListWebhooksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListWebhooksResponse,
      OrgsListWebhooksError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListWebhooksResponse,
    OrgsListWebhooksError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/hooks",
      operationId: "orgsListWebhooks",
      variables,
    }),
    () => fetchOrgsListWebhooks({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsCreateWebhookPathParams = {
  org: string;
};

export type OrgsCreateWebhookError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsCreateWebhookRequestBody = {
  /*
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   *
   * @default true
   */
  active?: boolean;
  /*
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
   */
  config: {
    content_type?: Schemas.WebhookConfigContentType;
    insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
    /*
     * @example "password"
     */
    password?: string;
    secret?: Schemas.WebhookConfigSecret;
    url: Schemas.WebhookConfigUrl;
    /*
     * @example "kdaigle"
     */
    username?: string;
  };
  /*
   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
   *
   * @default push
   */
  events?: string[];
  /*
   * Must be passed as "web".
   */
  name: string;
};

export type OrgsCreateWebhookVariables = {
  body: OrgsCreateWebhookRequestBody;
  pathParams: OrgsCreateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Here's how you can create a hook that posts payloads in JSON format:
 */
export const fetchOrgsCreateWebhook = (variables: OrgsCreateWebhookVariables) =>
  githubFetch<
    Schemas.OrgHook,
    OrgsCreateWebhookError,
    OrgsCreateWebhookRequestBody,
    {},
    {},
    OrgsCreateWebhookPathParams
  >({ url: "/orgs/{org}/hooks", method: "post", ...variables });

/**
 * Here's how you can create a hook that posts payloads in JSON format:
 */
export const useOrgsCreateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgHook,
      OrgsCreateWebhookError,
      OrgsCreateWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgHook,
    OrgsCreateWebhookError,
    OrgsCreateWebhookVariables
  >(
    (variables: OrgsCreateWebhookVariables) =>
      fetchOrgsCreateWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsDeleteWebhookPathParams = {
  org: string;
  hookId: number;
};

export type OrgsDeleteWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsDeleteWebhookVariables = {
  pathParams: OrgsDeleteWebhookPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsDeleteWebhook = (variables: OrgsDeleteWebhookVariables) =>
  githubFetch<
    undefined,
    OrgsDeleteWebhookError,
    undefined,
    {},
    {},
    OrgsDeleteWebhookPathParams
  >({ url: "/orgs/{org}/hooks/{hookId}", method: "delete", ...variables });

export const useOrgsDeleteWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsDeleteWebhookError,
      OrgsDeleteWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsDeleteWebhookError,
    OrgsDeleteWebhookVariables
  >(
    (variables: OrgsDeleteWebhookVariables) =>
      fetchOrgsDeleteWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsGetWebhookPathParams = {
  org: string;
  hookId: number;
};

export type OrgsGetWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsGetWebhookVariables = {
  pathParams: OrgsGetWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
 */
export const fetchOrgsGetWebhook = (variables: OrgsGetWebhookVariables) =>
  githubFetch<
    Schemas.OrgHook,
    OrgsGetWebhookError,
    undefined,
    {},
    {},
    OrgsGetWebhookPathParams
  >({ url: "/orgs/{org}/hooks/{hookId}", method: "get", ...variables });

/**
 * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
 */
export const useOrgsGetWebhook = <TData = Schemas.OrgHook>(
  variables: OrgsGetWebhookVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrgHook, OrgsGetWebhookError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.OrgHook, OrgsGetWebhookError, TData>(
    queryKeyFn({
      path: "/orgs/{org}/hooks/{hook_id}",
      operationId: "orgsGetWebhook",
      variables,
    }),
    () => fetchOrgsGetWebhook({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsUpdateWebhookPathParams = {
  org: string;
  hookId: number;
};

export type OrgsUpdateWebhookError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsUpdateWebhookRequestBody = {
  /*
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   *
   * @default true
   */
  active?: boolean;
  /*
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
   */
  config?: {
    content_type?: Schemas.WebhookConfigContentType;
    insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
    secret?: Schemas.WebhookConfigSecret;
    url: Schemas.WebhookConfigUrl;
  };
  /*
   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
   *
   * @default push
   */
  events?: string[];
  /*
   * @example "web"
   */
  name?: string;
};

export type OrgsUpdateWebhookVariables = {
  body?: OrgsUpdateWebhookRequestBody;
  pathParams: OrgsUpdateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
 */
export const fetchOrgsUpdateWebhook = (variables: OrgsUpdateWebhookVariables) =>
  githubFetch<
    Schemas.OrgHook,
    OrgsUpdateWebhookError,
    OrgsUpdateWebhookRequestBody,
    {},
    {},
    OrgsUpdateWebhookPathParams
  >({ url: "/orgs/{org}/hooks/{hookId}", method: "patch", ...variables });

/**
 * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
 */
export const useOrgsUpdateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgHook,
      OrgsUpdateWebhookError,
      OrgsUpdateWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgHook,
    OrgsUpdateWebhookError,
    OrgsUpdateWebhookVariables
  >(
    (variables: OrgsUpdateWebhookVariables) =>
      fetchOrgsUpdateWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsGetWebhookConfigForOrgPathParams = {
  org: string;
  hookId: number;
};

export type OrgsGetWebhookConfigForOrgError = Fetcher.ErrorWrapper<undefined>;

export type OrgsGetWebhookConfigForOrgVariables = {
  pathParams: OrgsGetWebhookConfigForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
 */
export const fetchOrgsGetWebhookConfigForOrg = (
  variables: OrgsGetWebhookConfigForOrgVariables
) =>
  githubFetch<
    Schemas.WebhookConfig,
    OrgsGetWebhookConfigForOrgError,
    undefined,
    {},
    {},
    OrgsGetWebhookConfigForOrgPathParams
  >({ url: "/orgs/{org}/hooks/{hookId}/config", method: "get", ...variables });

/**
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
 */
export const useOrgsGetWebhookConfigForOrg = <TData = Schemas.WebhookConfig>(
  variables: OrgsGetWebhookConfigForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      OrgsGetWebhookConfigForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WebhookConfig,
    OrgsGetWebhookConfigForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/hooks/{hook_id}/config",
      operationId: "orgsGetWebhookConfigForOrg",
      variables,
    }),
    () => fetchOrgsGetWebhookConfigForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsUpdateWebhookConfigForOrgPathParams = {
  org: string;
  hookId: number;
};

export type OrgsUpdateWebhookConfigForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type OrgsUpdateWebhookConfigForOrgRequestBody = {
  content_type?: Schemas.WebhookConfigContentType;
  insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
  secret?: Schemas.WebhookConfigSecret;
  url?: Schemas.WebhookConfigUrl;
};

export type OrgsUpdateWebhookConfigForOrgVariables = {
  body?: OrgsUpdateWebhookConfigForOrgRequestBody;
  pathParams: OrgsUpdateWebhookConfigForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
 */
export const fetchOrgsUpdateWebhookConfigForOrg = (
  variables: OrgsUpdateWebhookConfigForOrgVariables
) =>
  githubFetch<
    Schemas.WebhookConfig,
    OrgsUpdateWebhookConfigForOrgError,
    OrgsUpdateWebhookConfigForOrgRequestBody,
    {},
    {},
    OrgsUpdateWebhookConfigForOrgPathParams
  >({
    url: "/orgs/{org}/hooks/{hookId}/config",
    method: "patch",
    ...variables,
  });

/**
 * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
 */
export const useOrgsUpdateWebhookConfigForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.WebhookConfig,
      OrgsUpdateWebhookConfigForOrgError,
      OrgsUpdateWebhookConfigForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.WebhookConfig,
    OrgsUpdateWebhookConfigForOrgError,
    OrgsUpdateWebhookConfigForOrgVariables
  >(
    (variables: OrgsUpdateWebhookConfigForOrgVariables) =>
      fetchOrgsUpdateWebhookConfigForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsPingWebhookPathParams = {
  org: string;
  hookId: number;
};

export type OrgsPingWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsPingWebhookVariables = {
  pathParams: OrgsPingWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const fetchOrgsPingWebhook = (variables: OrgsPingWebhookVariables) =>
  githubFetch<
    undefined,
    OrgsPingWebhookError,
    undefined,
    {},
    {},
    OrgsPingWebhookPathParams
  >({ url: "/orgs/{org}/hooks/{hookId}/pings", method: "post", ...variables });

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const useOrgsPingWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsPingWebhookError,
      OrgsPingWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsPingWebhookError,
    OrgsPingWebhookVariables
  >(
    (variables: OrgsPingWebhookVariables) =>
      fetchOrgsPingWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetOrgInstallationPathParams = {
  org: string;
};

export type AppsGetOrgInstallationError = Fetcher.ErrorWrapper<undefined>;

export type AppsGetOrgInstallationVariables = {
  pathParams: AppsGetOrgInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find the organization's installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetOrgInstallation = (
  variables: AppsGetOrgInstallationVariables
) =>
  githubFetch<
    Schemas.Installation,
    AppsGetOrgInstallationError,
    undefined,
    {},
    {},
    AppsGetOrgInstallationPathParams
  >({ url: "/orgs/{org}/installation", method: "get", ...variables });

/**
 * Enables an authenticated GitHub App to find the organization's installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetOrgInstallation = <TData = Schemas.Installation>(
  variables: AppsGetOrgInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetOrgInstallationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    AppsGetOrgInstallationError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/installation",
      operationId: "appsGetOrgInstallation",
      variables,
    }),
    () => fetchAppsGetOrgInstallation({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListAppInstallationsPathParams = {
  org: string;
};

export type OrgsListAppInstallationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListAppInstallationsError = Fetcher.ErrorWrapper<undefined>;

export type OrgsListAppInstallationsResponse = {
  installations: Schemas.Installation[];
  total_count: number;
};

export type OrgsListAppInstallationsVariables = {
  pathParams: OrgsListAppInstallationsPathParams;
  queryParams?: OrgsListAppInstallationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
 */
export const fetchOrgsListAppInstallations = (
  variables: OrgsListAppInstallationsVariables
) =>
  githubFetch<
    OrgsListAppInstallationsResponse,
    OrgsListAppInstallationsError,
    undefined,
    {},
    OrgsListAppInstallationsQueryParams,
    OrgsListAppInstallationsPathParams
  >({ url: "/orgs/{org}/installations", method: "get", ...variables });

/**
 * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
 */
export const useOrgsListAppInstallations = <
  TData = OrgsListAppInstallationsResponse
>(
  variables: OrgsListAppInstallationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListAppInstallationsResponse,
      OrgsListAppInstallationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListAppInstallationsResponse,
    OrgsListAppInstallationsError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/installations",
      operationId: "orgsListAppInstallations",
      variables,
    }),
    () => fetchOrgsListAppInstallations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InteractionsRemoveRestrictionsForOrgPathParams = {
  org: string;
};

export type InteractionsRemoveRestrictionsForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsRemoveRestrictionsForOrgVariables = {
  pathParams: InteractionsRemoveRestrictionsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
 */
export const fetchInteractionsRemoveRestrictionsForOrg = (
  variables: InteractionsRemoveRestrictionsForOrgVariables
) =>
  githubFetch<
    undefined,
    InteractionsRemoveRestrictionsForOrgError,
    undefined,
    {},
    {},
    InteractionsRemoveRestrictionsForOrgPathParams
  >({ url: "/orgs/{org}/interaction-limits", method: "delete", ...variables });

/**
 * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
 */
export const useInteractionsRemoveRestrictionsForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InteractionsRemoveRestrictionsForOrgError,
      InteractionsRemoveRestrictionsForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    InteractionsRemoveRestrictionsForOrgError,
    InteractionsRemoveRestrictionsForOrgVariables
  >(
    (variables: InteractionsRemoveRestrictionsForOrgVariables) =>
      fetchInteractionsRemoveRestrictionsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InteractionsGetRestrictionsForOrgPathParams = {
  org: string;
};

export type InteractionsGetRestrictionsForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsGetRestrictionsForOrgVariables = {
  pathParams: InteractionsGetRestrictionsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
 */
export const fetchInteractionsGetRestrictionsForOrg = (
  variables: InteractionsGetRestrictionsForOrgVariables
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    InteractionsGetRestrictionsForOrgError,
    undefined,
    {},
    {},
    InteractionsGetRestrictionsForOrgPathParams
  >({ url: "/orgs/{org}/interaction-limits", method: "get", ...variables });

/**
 * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
 */
export const useInteractionsGetRestrictionsForOrg = <
  TData = Schemas.InteractionLimitResponse
>(
  variables: InteractionsGetRestrictionsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse,
      InteractionsGetRestrictionsForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.InteractionLimitResponse,
    InteractionsGetRestrictionsForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/interaction-limits",
      operationId: "interactionsGetRestrictionsForOrg",
      variables,
    }),
    () =>
      fetchInteractionsGetRestrictionsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InteractionsSetRestrictionsForOrgPathParams = {
  org: string;
};

export type InteractionsSetRestrictionsForOrgError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type InteractionsSetRestrictionsForOrgVariables = {
  body: Schemas.InteractionLimit;
  pathParams: InteractionsSetRestrictionsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
 */
export const fetchInteractionsSetRestrictionsForOrg = (
  variables: InteractionsSetRestrictionsForOrgVariables
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForOrgError,
    Schemas.InteractionLimit,
    {},
    {},
    InteractionsSetRestrictionsForOrgPathParams
  >({ url: "/orgs/{org}/interaction-limits", method: "put", ...variables });

/**
 * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
 */
export const useInteractionsSetRestrictionsForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InteractionLimitResponse,
      InteractionsSetRestrictionsForOrgError,
      InteractionsSetRestrictionsForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForOrgError,
    InteractionsSetRestrictionsForOrgVariables
  >(
    (variables: InteractionsSetRestrictionsForOrgVariables) =>
      fetchInteractionsSetRestrictionsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrgsListPendingInvitationsPathParams = {
  org: string;
};

export type OrgsListPendingInvitationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListPendingInvitationsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsListPendingInvitationsResponse =
  Schemas.OrganizationInvitation[];

export type OrgsListPendingInvitationsVariables = {
  pathParams: OrgsListPendingInvitationsPathParams;
  queryParams?: OrgsListPendingInvitationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const fetchOrgsListPendingInvitations = (
  variables: OrgsListPendingInvitationsVariables
) =>
  githubFetch<
    OrgsListPendingInvitationsResponse,
    OrgsListPendingInvitationsError,
    undefined,
    {},
    OrgsListPendingInvitationsQueryParams,
    OrgsListPendingInvitationsPathParams
  >({ url: "/orgs/{org}/invitations", method: "get", ...variables });

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const useOrgsListPendingInvitations = <
  TData = OrgsListPendingInvitationsResponse
>(
  variables: OrgsListPendingInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListPendingInvitationsResponse,
      OrgsListPendingInvitationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListPendingInvitationsResponse,
    OrgsListPendingInvitationsError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/invitations",
      operationId: "orgsListPendingInvitations",
      variables,
    }),
    () => fetchOrgsListPendingInvitations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsCreateInvitationPathParams = {
  org: string;
};

export type OrgsCreateInvitationError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsCreateInvitationRequestBody = {
  /*
   * **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
   */
  email?: string;
  /*
   * **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
   */
  invitee_id?: number;
  /*
   * Specify role for new member. Can be one of:
   * \* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
   * \* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
   * \* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
   *
   * @default direct_member
   */
  role?: "admin" | "direct_member" | "billing_manager";
  /*
   * Specify IDs for the teams you want to invite new members to.
   */
  team_ids?: number[];
};

export type OrgsCreateInvitationVariables = {
  body?: OrgsCreateInvitationRequestBody;
  pathParams: OrgsCreateInvitationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchOrgsCreateInvitation = (
  variables: OrgsCreateInvitationVariables
) =>
  githubFetch<
    Schemas.OrganizationInvitation,
    OrgsCreateInvitationError,
    OrgsCreateInvitationRequestBody,
    {},
    {},
    OrgsCreateInvitationPathParams
  >({ url: "/orgs/{org}/invitations", method: "post", ...variables });

/**
 * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const useOrgsCreateInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganizationInvitation,
      OrgsCreateInvitationError,
      OrgsCreateInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrganizationInvitation,
    OrgsCreateInvitationError,
    OrgsCreateInvitationVariables
  >(
    (variables: OrgsCreateInvitationVariables) =>
      fetchOrgsCreateInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsCancelInvitationPathParams = {
  org: string;
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type OrgsCancelInvitationError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsCancelInvitationVariables = {
  pathParams: OrgsCancelInvitationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 */
export const fetchOrgsCancelInvitation = (
  variables: OrgsCancelInvitationVariables
) =>
  githubFetch<
    undefined,
    OrgsCancelInvitationError,
    undefined,
    {},
    {},
    OrgsCancelInvitationPathParams
  >({
    url: "/orgs/{org}/invitations/{invitationId}",
    method: "delete",
    ...variables,
  });

/**
 * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 */
export const useOrgsCancelInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsCancelInvitationError,
      OrgsCancelInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsCancelInvitationError,
    OrgsCancelInvitationVariables
  >(
    (variables: OrgsCancelInvitationVariables) =>
      fetchOrgsCancelInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsListInvitationTeamsPathParams = {
  org: string;
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type OrgsListInvitationTeamsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListInvitationTeamsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsListInvitationTeamsResponse = Schemas.Team[];

export type OrgsListInvitationTeamsVariables = {
  pathParams: OrgsListInvitationTeamsPathParams;
  queryParams?: OrgsListInvitationTeamsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
 */
export const fetchOrgsListInvitationTeams = (
  variables: OrgsListInvitationTeamsVariables
) =>
  githubFetch<
    OrgsListInvitationTeamsResponse,
    OrgsListInvitationTeamsError,
    undefined,
    {},
    OrgsListInvitationTeamsQueryParams,
    OrgsListInvitationTeamsPathParams
  >({
    url: "/orgs/{org}/invitations/{invitationId}/teams",
    method: "get",
    ...variables,
  });

/**
 * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
 */
export const useOrgsListInvitationTeams = <
  TData = OrgsListInvitationTeamsResponse
>(
  variables: OrgsListInvitationTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListInvitationTeamsResponse,
      OrgsListInvitationTeamsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListInvitationTeamsResponse,
    OrgsListInvitationTeamsError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/invitations/{invitation_id}/teams",
      operationId: "orgsListInvitationTeams",
      variables,
    }),
    () => fetchOrgsListInvitationTeams({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesListForOrgPathParams = {
  org: string;
};

export type IssuesListForOrgQueryParams = {
  /*
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all`: All issues the authenticated user can see, regardless of participation or creation
   *
   * @default assigned
   */
  filter?:
    | "assigned"
    | "created"
    | "mentioned"
    | "subscribed"
    | "repos"
    | "all";
  /*
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /*
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesListForOrgResponse = Schemas.Issue[];

export type IssuesListForOrgVariables = {
  pathParams: IssuesListForOrgPathParams;
  queryParams?: IssuesListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues in an organization assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesListForOrg = (variables: IssuesListForOrgVariables) =>
  githubFetch<
    IssuesListForOrgResponse,
    IssuesListForOrgError,
    undefined,
    {},
    IssuesListForOrgQueryParams,
    IssuesListForOrgPathParams
  >({ url: "/orgs/{org}/issues", method: "get", ...variables });

/**
 * List issues in an organization assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesListForOrg = <TData = IssuesListForOrgResponse>(
  variables: IssuesListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForOrgResponse,
      IssuesListForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListForOrgResponse,
    IssuesListForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/issues",
      operationId: "issuesListForOrg",
      variables,
    }),
    () => fetchIssuesListForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListMembersPathParams = {
  org: string;
};

export type OrgsListMembersQueryParams = {
  /*
   * Filter members returned in the list. Can be one of:
   * \* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.
   * \* `all` - All members the authenticated user can see.
   *
   * @default all
   */
  filter?: "2fa_disabled" | "all";
  /*
   * Filter members returned by their role. Can be one of:
   * \* `all` - All members of the organization, regardless of role.
   * \* `admin` - Organization owners.
   * \* `member` - Non-owner organization members.
   *
   * @default all
   */
  role?: "all" | "admin" | "member";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListMembersError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type OrgsListMembersResponse = Schemas.SimpleUser[];

export type OrgsListMembersVariables = {
  pathParams: OrgsListMembersPathParams;
  queryParams?: OrgsListMembersQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
 */
export const fetchOrgsListMembers = (variables: OrgsListMembersVariables) =>
  githubFetch<
    OrgsListMembersResponse,
    OrgsListMembersError,
    undefined,
    {},
    OrgsListMembersQueryParams,
    OrgsListMembersPathParams
  >({ url: "/orgs/{org}/members", method: "get", ...variables });

/**
 * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
 */
export const useOrgsListMembers = <TData = OrgsListMembersResponse>(
  variables: OrgsListMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListMembersResponse,
      OrgsListMembersError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListMembersResponse,
    OrgsListMembersError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/members",
      operationId: "orgsListMembers",
      variables,
    }),
    () => fetchOrgsListMembers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsRemoveMemberPathParams = {
  org: string;
  username: string;
};

export type OrgsRemoveMemberError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type OrgsRemoveMemberVariables = {
  pathParams: OrgsRemoveMemberPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
 */
export const fetchOrgsRemoveMember = (variables: OrgsRemoveMemberVariables) =>
  githubFetch<
    undefined,
    OrgsRemoveMemberError,
    undefined,
    {},
    {},
    OrgsRemoveMemberPathParams
  >({ url: "/orgs/{org}/members/{username}", method: "delete", ...variables });

/**
 * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
 */
export const useOrgsRemoveMember = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsRemoveMemberError,
      OrgsRemoveMemberVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsRemoveMemberError,
    OrgsRemoveMemberVariables
  >(
    (variables: OrgsRemoveMemberVariables) =>
      fetchOrgsRemoveMember({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsCheckMembershipForUserPathParams = {
  org: string;
  username: string;
};

export type OrgsCheckMembershipForUserError = Fetcher.ErrorWrapper<undefined>;

export type OrgsCheckMembershipForUserVariables = {
  pathParams: OrgsCheckMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Check if a user is, publicly or privately, a member of the organization.
 */
export const fetchOrgsCheckMembershipForUser = (
  variables: OrgsCheckMembershipForUserVariables
) =>
  githubFetch<
    undefined,
    OrgsCheckMembershipForUserError,
    undefined,
    {},
    {},
    OrgsCheckMembershipForUserPathParams
  >({ url: "/orgs/{org}/members/{username}", method: "get", ...variables });

/**
 * Check if a user is, publicly or privately, a member of the organization.
 */
export const useOrgsCheckMembershipForUser = <TData = undefined>(
  variables: OrgsCheckMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      OrgsCheckMembershipForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, OrgsCheckMembershipForUserError, TData>(
    queryKeyFn({
      path: "/orgs/{org}/members/{username}",
      operationId: "orgsCheckMembershipForUser",
      variables,
    }),
    () => fetchOrgsCheckMembershipForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsRemoveMembershipForUserPathParams = {
  org: string;
  username: string;
};

export type OrgsRemoveMembershipForUserError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type OrgsRemoveMembershipForUserVariables = {
  pathParams: OrgsRemoveMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
 *
 * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
 */
export const fetchOrgsRemoveMembershipForUser = (
  variables: OrgsRemoveMembershipForUserVariables
) =>
  githubFetch<
    undefined,
    OrgsRemoveMembershipForUserError,
    undefined,
    {},
    {},
    OrgsRemoveMembershipForUserPathParams
  >({
    url: "/orgs/{org}/memberships/{username}",
    method: "delete",
    ...variables,
  });

/**
 * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
 *
 * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
 */
export const useOrgsRemoveMembershipForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsRemoveMembershipForUserError,
      OrgsRemoveMembershipForUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsRemoveMembershipForUserError,
    OrgsRemoveMembershipForUserVariables
  >(
    (variables: OrgsRemoveMembershipForUserVariables) =>
      fetchOrgsRemoveMembershipForUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsGetMembershipForUserPathParams = {
  org: string;
  username: string;
};

export type OrgsGetMembershipForUserError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type OrgsGetMembershipForUserVariables = {
  pathParams: OrgsGetMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * In order to get a user's membership with an organization, the authenticated user must be an organization member.
 */
export const fetchOrgsGetMembershipForUser = (
  variables: OrgsGetMembershipForUserVariables
) =>
  githubFetch<
    Schemas.OrgMembership,
    OrgsGetMembershipForUserError,
    undefined,
    {},
    {},
    OrgsGetMembershipForUserPathParams
  >({ url: "/orgs/{org}/memberships/{username}", method: "get", ...variables });

/**
 * In order to get a user's membership with an organization, the authenticated user must be an organization member.
 */
export const useOrgsGetMembershipForUser = <TData = Schemas.OrgMembership>(
  variables: OrgsGetMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrgMembership,
      OrgsGetMembershipForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrgMembership,
    OrgsGetMembershipForUserError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/memberships/{username}",
      operationId: "orgsGetMembershipForUser",
      variables,
    }),
    () => fetchOrgsGetMembershipForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsSetMembershipForUserPathParams = {
  org: string;
  username: string;
};

export type OrgsSetMembershipForUserError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsSetMembershipForUserRequestBody = {
  /*
   * The role to give the user in the organization. Can be one of:
   * \* `admin` - The user will become an owner of the organization.
   * \* `member` - The user will become a non-owner member of the organization.
   *
   * @default member
   */
  role?: "admin" | "member";
};

export type OrgsSetMembershipForUserVariables = {
  body?: OrgsSetMembershipForUserRequestBody;
  pathParams: OrgsSetMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Only authenticated organization owners can add a member to the organization or update the member's role.
 *
 * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
 *
 * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
 *
 * **Rate limits**
 *
 * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
 */
export const fetchOrgsSetMembershipForUser = (
  variables: OrgsSetMembershipForUserVariables
) =>
  githubFetch<
    Schemas.OrgMembership,
    OrgsSetMembershipForUserError,
    OrgsSetMembershipForUserRequestBody,
    {},
    {},
    OrgsSetMembershipForUserPathParams
  >({ url: "/orgs/{org}/memberships/{username}", method: "put", ...variables });

/**
 * Only authenticated organization owners can add a member to the organization or update the member's role.
 *
 * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
 *
 * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
 *
 * **Rate limits**
 *
 * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
 */
export const useOrgsSetMembershipForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgMembership,
      OrgsSetMembershipForUserError,
      OrgsSetMembershipForUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgMembership,
    OrgsSetMembershipForUserError,
    OrgsSetMembershipForUserVariables
  >(
    (variables: OrgsSetMembershipForUserVariables) =>
      fetchOrgsSetMembershipForUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsListForOrgPathParams = {
  org: string;
};

export type MigrationsListForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Exclude attributes from the API response to improve performance
   */
  exclude?: "repositories"[];
};

export type MigrationsListForOrgError = Fetcher.ErrorWrapper<undefined>;

export type MigrationsListForOrgResponse = Schemas.Migration[];

export type MigrationsListForOrgVariables = {
  pathParams: MigrationsListForOrgPathParams;
  queryParams?: MigrationsListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the most recent migrations.
 */
export const fetchMigrationsListForOrg = (
  variables: MigrationsListForOrgVariables
) =>
  githubFetch<
    MigrationsListForOrgResponse,
    MigrationsListForOrgError,
    undefined,
    {},
    MigrationsListForOrgQueryParams,
    MigrationsListForOrgPathParams
  >({ url: "/orgs/{org}/migrations", method: "get", ...variables });

/**
 * Lists the most recent migrations.
 */
export const useMigrationsListForOrg = <TData = MigrationsListForOrgResponse>(
  variables: MigrationsListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListForOrgResponse,
      MigrationsListForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListForOrgResponse,
    MigrationsListForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/migrations",
      operationId: "migrationsListForOrg",
      variables,
    }),
    () => fetchMigrationsListForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsStartForOrgPathParams = {
  org: string;
};

export type MigrationsStartForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type MigrationsStartForOrgRequestBody = {
  exclude?: string[];
  /*
   * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
   *
   * @default false
   */
  exclude_attachments?: boolean;
  /*
   * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
   *
   * @default false
   */
  lock_repositories?: boolean;
  /*
   * A list of arrays indicating which repositories should be migrated.
   */
  repositories: string[];
};

export type MigrationsStartForOrgVariables = {
  body: MigrationsStartForOrgRequestBody;
  pathParams: MigrationsStartForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Initiates the generation of a migration archive.
 */
export const fetchMigrationsStartForOrg = (
  variables: MigrationsStartForOrgVariables
) =>
  githubFetch<
    Schemas.Migration,
    MigrationsStartForOrgError,
    MigrationsStartForOrgRequestBody,
    {},
    {},
    MigrationsStartForOrgPathParams
  >({ url: "/orgs/{org}/migrations", method: "post", ...variables });

/**
 * Initiates the generation of a migration archive.
 */
export const useMigrationsStartForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Migration,
      MigrationsStartForOrgError,
      MigrationsStartForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Migration,
    MigrationsStartForOrgError,
    MigrationsStartForOrgVariables
  >(
    (variables: MigrationsStartForOrgVariables) =>
      fetchMigrationsStartForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsGetStatusForOrgPathParams = {
  org: string;
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsGetStatusForOrgQueryParams = {
  /*
   * Exclude attributes from the API response to improve performance
   */
  exclude?: "repositories"[];
};

export type MigrationsGetStatusForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsGetStatusForOrgVariables = {
  pathParams: MigrationsGetStatusForOrgPathParams;
  queryParams?: MigrationsGetStatusForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches the status of a migration.
 *
 * The `state` of a migration can be one of the following values:
 *
 * *   `pending`, which means the migration hasn't started yet.
 * *   `exporting`, which means the migration is in progress.
 * *   `exported`, which means the migration finished successfully.
 * *   `failed`, which means the migration failed.
 */
export const fetchMigrationsGetStatusForOrg = (
  variables: MigrationsGetStatusForOrgVariables
) =>
  githubFetch<
    Schemas.Migration,
    MigrationsGetStatusForOrgError,
    undefined,
    {},
    MigrationsGetStatusForOrgQueryParams,
    MigrationsGetStatusForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}",
    method: "get",
    ...variables,
  });

/**
 * Fetches the status of a migration.
 *
 * The `state` of a migration can be one of the following values:
 *
 * *   `pending`, which means the migration hasn't started yet.
 * *   `exporting`, which means the migration is in progress.
 * *   `exported`, which means the migration finished successfully.
 * *   `failed`, which means the migration failed.
 */
export const useMigrationsGetStatusForOrg = <TData = Schemas.Migration>(
  variables: MigrationsGetStatusForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Migration,
      MigrationsGetStatusForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Migration,
    MigrationsGetStatusForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/migrations/{migration_id}",
      operationId: "migrationsGetStatusForOrg",
      variables,
    }),
    () => fetchMigrationsGetStatusForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsDeleteArchiveForOrgPathParams = {
  org: string;
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsDeleteArchiveForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsDeleteArchiveForOrgVariables = {
  pathParams: MigrationsDeleteArchiveForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
 */
export const fetchMigrationsDeleteArchiveForOrg = (
  variables: MigrationsDeleteArchiveForOrgVariables
) =>
  githubFetch<
    undefined,
    MigrationsDeleteArchiveForOrgError,
    undefined,
    {},
    {},
    MigrationsDeleteArchiveForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/archive",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
 */
export const useMigrationsDeleteArchiveForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MigrationsDeleteArchiveForOrgError,
      MigrationsDeleteArchiveForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MigrationsDeleteArchiveForOrgError,
    MigrationsDeleteArchiveForOrgVariables
  >(
    (variables: MigrationsDeleteArchiveForOrgVariables) =>
      fetchMigrationsDeleteArchiveForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsDownloadArchiveForOrgPathParams = {
  org: string;
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsDownloadArchiveForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsDownloadArchiveForOrgVariables = {
  pathParams: MigrationsDownloadArchiveForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches the URL to a migration archive.
 */
export const fetchMigrationsDownloadArchiveForOrg = (
  variables: MigrationsDownloadArchiveForOrgVariables
) =>
  githubFetch<
    undefined,
    MigrationsDownloadArchiveForOrgError,
    undefined,
    {},
    {},
    MigrationsDownloadArchiveForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/archive",
    method: "get",
    ...variables,
  });

/**
 * Fetches the URL to a migration archive.
 */
export const useMigrationsDownloadArchiveForOrg = <TData = undefined>(
  variables: MigrationsDownloadArchiveForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      MigrationsDownloadArchiveForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    MigrationsDownloadArchiveForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/migrations/{migration_id}/archive",
      operationId: "migrationsDownloadArchiveForOrg",
      variables,
    }),
    () =>
      fetchMigrationsDownloadArchiveForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsUnlockRepoForOrgPathParams = {
  org: string;
  /*
   * migration_id parameter
   */
  migrationId: number;
  /*
   * repo_name parameter
   */
  repoName: string;
};

export type MigrationsUnlockRepoForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsUnlockRepoForOrgVariables = {
  pathParams: MigrationsUnlockRepoForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
 */
export const fetchMigrationsUnlockRepoForOrg = (
  variables: MigrationsUnlockRepoForOrgVariables
) =>
  githubFetch<
    undefined,
    MigrationsUnlockRepoForOrgError,
    undefined,
    {},
    {},
    MigrationsUnlockRepoForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/repos/{repoName}/lock",
    method: "delete",
    ...variables,
  });

/**
 * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
 */
export const useMigrationsUnlockRepoForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MigrationsUnlockRepoForOrgError,
      MigrationsUnlockRepoForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MigrationsUnlockRepoForOrgError,
    MigrationsUnlockRepoForOrgVariables
  >(
    (variables: MigrationsUnlockRepoForOrgVariables) =>
      fetchMigrationsUnlockRepoForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsListReposForOrgPathParams = {
  org: string;
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsListReposForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type MigrationsListReposForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsListReposForOrgResponse = Schemas.MinimalRepository[];

export type MigrationsListReposForOrgVariables = {
  pathParams: MigrationsListReposForOrgPathParams;
  queryParams?: MigrationsListReposForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all the repositories for this organization migration.
 */
export const fetchMigrationsListReposForOrg = (
  variables: MigrationsListReposForOrgVariables
) =>
  githubFetch<
    MigrationsListReposForOrgResponse,
    MigrationsListReposForOrgError,
    undefined,
    {},
    MigrationsListReposForOrgQueryParams,
    MigrationsListReposForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/repositories",
    method: "get",
    ...variables,
  });

/**
 * List all the repositories for this organization migration.
 */
export const useMigrationsListReposForOrg = <
  TData = MigrationsListReposForOrgResponse
>(
  variables: MigrationsListReposForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListReposForOrgResponse,
      MigrationsListReposForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListReposForOrgResponse,
    MigrationsListReposForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/migrations/{migration_id}/repositories",
      operationId: "migrationsListReposForOrg",
      variables,
    }),
    () => fetchMigrationsListReposForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListOutsideCollaboratorsPathParams = {
  org: string;
};

export type OrgsListOutsideCollaboratorsQueryParams = {
  /*
   * Filter the list of outside collaborators. Can be one of:
   * \* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
   * \* `all`: All outside collaborators.
   *
   * @default all
   */
  filter?: "2fa_disabled" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListOutsideCollaboratorsError = Fetcher.ErrorWrapper<undefined>;

export type OrgsListOutsideCollaboratorsResponse = Schemas.SimpleUser[];

export type OrgsListOutsideCollaboratorsVariables = {
  pathParams: OrgsListOutsideCollaboratorsPathParams;
  queryParams?: OrgsListOutsideCollaboratorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all users who are outside collaborators of an organization.
 */
export const fetchOrgsListOutsideCollaborators = (
  variables: OrgsListOutsideCollaboratorsVariables
) =>
  githubFetch<
    OrgsListOutsideCollaboratorsResponse,
    OrgsListOutsideCollaboratorsError,
    undefined,
    {},
    OrgsListOutsideCollaboratorsQueryParams,
    OrgsListOutsideCollaboratorsPathParams
  >({ url: "/orgs/{org}/outside_collaborators", method: "get", ...variables });

/**
 * List all users who are outside collaborators of an organization.
 */
export const useOrgsListOutsideCollaborators = <
  TData = OrgsListOutsideCollaboratorsResponse
>(
  variables: OrgsListOutsideCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListOutsideCollaboratorsResponse,
      OrgsListOutsideCollaboratorsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListOutsideCollaboratorsResponse,
    OrgsListOutsideCollaboratorsError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/outside_collaborators",
      operationId: "orgsListOutsideCollaborators",
      variables,
    }),
    () =>
      fetchOrgsListOutsideCollaborators({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsRemoveOutsideCollaboratorPathParams = {
  org: string;
  username: string;
};

export type OrgsRemoveOutsideCollaboratorError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: {
    documentation_url?: string;
    message?: string;
  };
}>;

export type OrgsRemoveOutsideCollaboratorVariables = {
  pathParams: OrgsRemoveOutsideCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removing a user from this list will remove them from all the organization's repositories.
 */
export const fetchOrgsRemoveOutsideCollaborator = (
  variables: OrgsRemoveOutsideCollaboratorVariables
) =>
  githubFetch<
    undefined,
    OrgsRemoveOutsideCollaboratorError,
    undefined,
    {},
    {},
    OrgsRemoveOutsideCollaboratorPathParams
  >({
    url: "/orgs/{org}/outside_collaborators/{username}",
    method: "delete",
    ...variables,
  });

/**
 * Removing a user from this list will remove them from all the organization's repositories.
 */
export const useOrgsRemoveOutsideCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsRemoveOutsideCollaboratorError,
      OrgsRemoveOutsideCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsRemoveOutsideCollaboratorError,
    OrgsRemoveOutsideCollaboratorVariables
  >(
    (variables: OrgsRemoveOutsideCollaboratorVariables) =>
      fetchOrgsRemoveOutsideCollaborator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsConvertMemberToOutsideCollaboratorPathParams = {
  org: string;
  username: string;
};

export type OrgsConvertMemberToOutsideCollaboratorError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: {
        documentation_url?: string;
        message?: string;
      };
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type OrgsConvertMemberToOutsideCollaboratorVariables = {
  pathParams: OrgsConvertMemberToOutsideCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
 */
export const fetchOrgsConvertMemberToOutsideCollaborator = (
  variables: OrgsConvertMemberToOutsideCollaboratorVariables
) =>
  githubFetch<
    undefined,
    OrgsConvertMemberToOutsideCollaboratorError,
    undefined,
    {},
    {},
    OrgsConvertMemberToOutsideCollaboratorPathParams
  >({
    url: "/orgs/{org}/outside_collaborators/{username}",
    method: "put",
    ...variables,
  });

/**
 * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
 */
export const useOrgsConvertMemberToOutsideCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsConvertMemberToOutsideCollaboratorError,
      OrgsConvertMemberToOutsideCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsConvertMemberToOutsideCollaboratorError,
    OrgsConvertMemberToOutsideCollaboratorVariables
  >(
    (variables: OrgsConvertMemberToOutsideCollaboratorVariables) =>
      fetchOrgsConvertMemberToOutsideCollaborator({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PackagesDeletePackageForOrgPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
};

export type PackagesDeletePackageForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesDeletePackageForOrgVariables = {
  pathParams: PackagesDeletePackageForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
 */
export const fetchPackagesDeletePackageForOrg = (
  variables: PackagesDeletePackageForOrgVariables
) =>
  githubFetch<
    undefined,
    PackagesDeletePackageForOrgError,
    undefined,
    {},
    {},
    PackagesDeletePackageForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
 */
export const usePackagesDeletePackageForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesDeletePackageForOrgError,
      PackagesDeletePackageForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesDeletePackageForOrgError,
    PackagesDeletePackageForOrgVariables
  >(
    (variables: PackagesDeletePackageForOrgVariables) =>
      fetchPackagesDeletePackageForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PackagesGetPackageForOrganizationPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
};

export type PackagesGetPackageForOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageForOrganizationVariables = {
  pathParams: PackagesGetPackageForOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package in an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageForOrganization = (
  variables: PackagesGetPackageForOrganizationVariables
) =>
  githubFetch<
    Schemas.Package,
    PackagesGetPackageForOrganizationError,
    undefined,
    {},
    {},
    PackagesGetPackageForOrganizationPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package in an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageForOrganization = <TData = Schemas.Package>(
  variables: PackagesGetPackageForOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Package,
      PackagesGetPackageForOrganizationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Package,
    PackagesGetPackageForOrganizationError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/packages/{package_type}/{package_name}",
      operationId: "packagesGetPackageForOrganization",
      variables,
    }),
    () =>
      fetchPackagesGetPackageForOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesRestorePackageForOrgPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
};

export type PackagesRestorePackageForOrgQueryParams = {
  /*
   * package token
   */
  token?: string;
};

export type PackagesRestorePackageForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesRestorePackageForOrgVariables = {
  pathParams: PackagesRestorePackageForOrgPathParams;
  queryParams?: PackagesRestorePackageForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores an entire package in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
 */
export const fetchPackagesRestorePackageForOrg = (
  variables: PackagesRestorePackageForOrgVariables
) =>
  githubFetch<
    undefined,
    PackagesRestorePackageForOrgError,
    undefined,
    {},
    PackagesRestorePackageForOrgQueryParams,
    PackagesRestorePackageForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/restore",
    method: "post",
    ...variables,
  });

/**
 * Restores an entire package in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
 */
export const usePackagesRestorePackageForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesRestorePackageForOrgError,
      PackagesRestorePackageForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesRestorePackageForOrgError,
    PackagesRestorePackageForOrgVariables
  >(
    (variables: PackagesRestorePackageForOrgVariables) =>
      fetchPackagesRestorePackageForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
};

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * The state of the package, either active or deleted.
   *
   * @default active
   */
  state?: "active" | "deleted";
};

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse =
  Schemas.PackageVersion[];

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables = {
  pathParams: PackagesGetAllPackageVersionsForPackageOwnedByOrgPathParams;
  queryParams?: PackagesGetAllPackageVersionsForPackageOwnedByOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns all package versions for a package owned by an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetAllPackageVersionsForPackageOwnedByOrg = (
  variables: PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables
) =>
  githubFetch<
    PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
    PackagesGetAllPackageVersionsForPackageOwnedByOrgError,
    undefined,
    {},
    PackagesGetAllPackageVersionsForPackageOwnedByOrgQueryParams,
    PackagesGetAllPackageVersionsForPackageOwnedByOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions",
    method: "get",
    ...variables,
  });

/**
 * Returns all package versions for a package owned by an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetAllPackageVersionsForPackageOwnedByOrg = <
  TData = PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse
>(
  variables: PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
      PackagesGetAllPackageVersionsForPackageOwnedByOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
    PackagesGetAllPackageVersionsForPackageOwnedByOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/packages/{package_type}/{package_name}/versions",
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByOrg",
      variables,
    }),
    () =>
      fetchPackagesGetAllPackageVersionsForPackageOwnedByOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesDeletePackageVersionForOrgPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesDeletePackageVersionForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesDeletePackageVersionForOrgVariables = {
  pathParams: PackagesDeletePackageVersionForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a specific package version in an organization. If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
 */
export const fetchPackagesDeletePackageVersionForOrg = (
  variables: PackagesDeletePackageVersionForOrgVariables
) =>
  githubFetch<
    undefined,
    PackagesDeletePackageVersionForOrgError,
    undefined,
    {},
    {},
    PackagesDeletePackageVersionForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a specific package version in an organization. If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
 */
export const usePackagesDeletePackageVersionForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesDeletePackageVersionForOrgError,
      PackagesDeletePackageVersionForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesDeletePackageVersionForOrgError,
    PackagesDeletePackageVersionForOrgVariables
  >(
    (variables: PackagesDeletePackageVersionForOrgVariables) =>
      fetchPackagesDeletePackageVersionForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PackagesGetPackageVersionForOrganizationPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesGetPackageVersionForOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageVersionForOrganizationVariables = {
  pathParams: PackagesGetPackageVersionForOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package version in an organization.
 *
 * You must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageVersionForOrganization = (
  variables: PackagesGetPackageVersionForOrganizationVariables
) =>
  githubFetch<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForOrganizationError,
    undefined,
    {},
    {},
    PackagesGetPackageVersionForOrganizationPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package version in an organization.
 *
 * You must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageVersionForOrganization = <
  TData = Schemas.PackageVersion
>(
  variables: PackagesGetPackageVersionForOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      PackagesGetPackageVersionForOrganizationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForOrganizationError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
      operationId: "packagesGetPackageVersionForOrganization",
      variables,
    }),
    () =>
      fetchPackagesGetPackageVersionForOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesRestorePackageVersionForOrgPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesRestorePackageVersionForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesRestorePackageVersionForOrgVariables = {
  pathParams: PackagesRestorePackageVersionForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores a specific package version in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
 */
export const fetchPackagesRestorePackageVersionForOrg = (
  variables: PackagesRestorePackageVersionForOrgVariables
) =>
  githubFetch<
    undefined,
    PackagesRestorePackageVersionForOrgError,
    undefined,
    {},
    {},
    PackagesRestorePackageVersionForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}/restore",
    method: "post",
    ...variables,
  });

/**
 * Restores a specific package version in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
 */
export const usePackagesRestorePackageVersionForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesRestorePackageVersionForOrgError,
      PackagesRestorePackageVersionForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesRestorePackageVersionForOrgError,
    PackagesRestorePackageVersionForOrgVariables
  >(
    (variables: PackagesRestorePackageVersionForOrgVariables) =>
      fetchPackagesRestorePackageVersionForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProjectsListForOrgPathParams = {
  org: string;
};

export type ProjectsListForOrgQueryParams = {
  /*
   * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListForOrgError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailedSimple;
}>;

export type ProjectsListForOrgResponse = Schemas.Project[];

export type ProjectsListForOrgVariables = {
  pathParams: ProjectsListForOrgPathParams;
  queryParams?: ProjectsListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsListForOrg = (
  variables: ProjectsListForOrgVariables
) =>
  githubFetch<
    ProjectsListForOrgResponse,
    ProjectsListForOrgError,
    undefined,
    {},
    ProjectsListForOrgQueryParams,
    ProjectsListForOrgPathParams
  >({ url: "/orgs/{org}/projects", method: "get", ...variables });

/**
 * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsListForOrg = <TData = ProjectsListForOrgResponse>(
  variables: ProjectsListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForOrgResponse,
      ProjectsListForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListForOrgResponse,
    ProjectsListForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/projects",
      operationId: "projectsListForOrg",
      variables,
    }),
    () => fetchProjectsListForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsCreateForOrgPathParams = {
  org: string;
};

export type ProjectsCreateForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsCreateForOrgRequestBody = {
  /*
   * The description of the project.
   */
  body?: string;
  /*
   * The name of the project.
   */
  name: string;
};

export type ProjectsCreateForOrgVariables = {
  body: ProjectsCreateForOrgRequestBody;
  pathParams: ProjectsCreateForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsCreateForOrg = (
  variables: ProjectsCreateForOrgVariables
) =>
  githubFetch<
    Schemas.Project,
    ProjectsCreateForOrgError,
    ProjectsCreateForOrgRequestBody,
    {},
    {},
    ProjectsCreateForOrgPathParams
  >({ url: "/orgs/{org}/projects", method: "post", ...variables });

/**
 * Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsCreateForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectsCreateForOrgError,
      ProjectsCreateForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectsCreateForOrgError,
    ProjectsCreateForOrgVariables
  >(
    (variables: ProjectsCreateForOrgVariables) =>
      fetchProjectsCreateForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsListPublicMembersPathParams = {
  org: string;
};

export type OrgsListPublicMembersQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListPublicMembersError = Fetcher.ErrorWrapper<undefined>;

export type OrgsListPublicMembersResponse = Schemas.SimpleUser[];

export type OrgsListPublicMembersVariables = {
  pathParams: OrgsListPublicMembersPathParams;
  queryParams?: OrgsListPublicMembersQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Members of an organization can choose to have their membership publicized or not.
 */
export const fetchOrgsListPublicMembers = (
  variables: OrgsListPublicMembersVariables
) =>
  githubFetch<
    OrgsListPublicMembersResponse,
    OrgsListPublicMembersError,
    undefined,
    {},
    OrgsListPublicMembersQueryParams,
    OrgsListPublicMembersPathParams
  >({ url: "/orgs/{org}/public_members", method: "get", ...variables });

/**
 * Members of an organization can choose to have their membership publicized or not.
 */
export const useOrgsListPublicMembers = <TData = OrgsListPublicMembersResponse>(
  variables: OrgsListPublicMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListPublicMembersResponse,
      OrgsListPublicMembersError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListPublicMembersResponse,
    OrgsListPublicMembersError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/public_members",
      operationId: "orgsListPublicMembers",
      variables,
    }),
    () => fetchOrgsListPublicMembers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsRemovePublicMembershipForAuthenticatedUserPathParams = {
  org: string;
  username: string;
};

export type OrgsRemovePublicMembershipForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type OrgsRemovePublicMembershipForAuthenticatedUserVariables = {
  pathParams: OrgsRemovePublicMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsRemovePublicMembershipForAuthenticatedUser = (
  variables: OrgsRemovePublicMembershipForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    OrgsRemovePublicMembershipForAuthenticatedUserError,
    undefined,
    {},
    {},
    OrgsRemovePublicMembershipForAuthenticatedUserPathParams
  >({
    url: "/orgs/{org}/public_members/{username}",
    method: "delete",
    ...variables,
  });

export const useOrgsRemovePublicMembershipForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsRemovePublicMembershipForAuthenticatedUserError,
      OrgsRemovePublicMembershipForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsRemovePublicMembershipForAuthenticatedUserError,
    OrgsRemovePublicMembershipForAuthenticatedUserVariables
  >(
    (variables: OrgsRemovePublicMembershipForAuthenticatedUserVariables) =>
      fetchOrgsRemovePublicMembershipForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrgsCheckPublicMembershipForUserPathParams = {
  org: string;
  username: string;
};

export type OrgsCheckPublicMembershipForUserError =
  Fetcher.ErrorWrapper<undefined>;

export type OrgsCheckPublicMembershipForUserVariables = {
  pathParams: OrgsCheckPublicMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsCheckPublicMembershipForUser = (
  variables: OrgsCheckPublicMembershipForUserVariables
) =>
  githubFetch<
    undefined,
    OrgsCheckPublicMembershipForUserError,
    undefined,
    {},
    {},
    OrgsCheckPublicMembershipForUserPathParams
  >({
    url: "/orgs/{org}/public_members/{username}",
    method: "get",
    ...variables,
  });

export const useOrgsCheckPublicMembershipForUser = <TData = undefined>(
  variables: OrgsCheckPublicMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      OrgsCheckPublicMembershipForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    OrgsCheckPublicMembershipForUserError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/public_members/{username}",
      operationId: "orgsCheckPublicMembershipForUser",
      variables,
    }),
    () =>
      fetchOrgsCheckPublicMembershipForUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsSetPublicMembershipForAuthenticatedUserPathParams = {
  org: string;
  username: string;
};

export type OrgsSetPublicMembershipForAuthenticatedUserError =
  Fetcher.ErrorWrapper<{
    status: 403;
    payload: Responses.Forbidden;
  }>;

export type OrgsSetPublicMembershipForAuthenticatedUserVariables = {
  pathParams: OrgsSetPublicMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchOrgsSetPublicMembershipForAuthenticatedUser = (
  variables: OrgsSetPublicMembershipForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    OrgsSetPublicMembershipForAuthenticatedUserError,
    undefined,
    {},
    {},
    OrgsSetPublicMembershipForAuthenticatedUserPathParams
  >({
    url: "/orgs/{org}/public_members/{username}",
    method: "put",
    ...variables,
  });

/**
 * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useOrgsSetPublicMembershipForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsSetPublicMembershipForAuthenticatedUserError,
      OrgsSetPublicMembershipForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsSetPublicMembershipForAuthenticatedUserError,
    OrgsSetPublicMembershipForAuthenticatedUserVariables
  >(
    (variables: OrgsSetPublicMembershipForAuthenticatedUserVariables) =>
      fetchOrgsSetPublicMembershipForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposListForOrgPathParams = {
  org: string;
};

export type ReposListForOrgQueryParams = {
  /*
   * Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Note: For GitHub AE, can be one of `all`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`.
   */
  type?:
    | "all"
    | "public"
    | "private"
    | "forks"
    | "sources"
    | "member"
    | "internal";
  /*
   * Can be one of `created`, `updated`, `pushed`, `full_name`.
   *
   * @default created
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /*
   * Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListForOrgError = Fetcher.ErrorWrapper<undefined>;

export type ReposListForOrgResponse = Schemas.MinimalRepository[];

export type ReposListForOrgVariables = {
  pathParams: ReposListForOrgPathParams;
  queryParams?: ReposListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories for the specified organization.
 */
export const fetchReposListForOrg = (variables: ReposListForOrgVariables) =>
  githubFetch<
    ReposListForOrgResponse,
    ReposListForOrgError,
    undefined,
    {},
    ReposListForOrgQueryParams,
    ReposListForOrgPathParams
  >({ url: "/orgs/{org}/repos", method: "get", ...variables });

/**
 * Lists repositories for the specified organization.
 */
export const useReposListForOrg = <TData = ReposListForOrgResponse>(
  variables: ReposListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForOrgResponse,
      ReposListForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForOrgResponse,
    ReposListForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/repos",
      operationId: "reposListForOrg",
      variables,
    }),
    () => fetchReposListForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateInOrgPathParams = {
  org: string;
};

export type ReposCreateInOrgError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateInOrgRequestBody = {
  /*
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   *
   * @default true
   */
  allow_merge_commit?: boolean;
  /*
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   *
   * @default true
   */
  allow_rebase_merge?: boolean;
  /*
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   *
   * @default true
   */
  allow_squash_merge?: boolean;
  /*
   * Pass `true` to create an initial commit with empty README.
   *
   * @default false
   */
  auto_init?: boolean;
  /*
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   *
   * @default false
   */
  delete_branch_on_merge?: boolean;
  /*
   * A short description of the repository.
   */
  description?: string;
  /*
   * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
   */
  gitignore_template?: string;
  /*
   * Either `true` to enable issues for this repository or `false` to disable them.
   *
   * @default true
   */
  has_issues?: boolean;
  /*
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   *
   * @default true
   */
  has_projects?: boolean;
  /*
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   *
   * @default true
   */
  has_wiki?: boolean;
  /*
   * A URL with more information about the repository.
   */
  homepage?: string;
  /*
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   *
   * @default false
   */
  is_template?: boolean;
  /*
   * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
   */
  license_template?: string;
  /*
   * The name of the repository.
   */
  name: string;
  /*
   * Whether the repository is private.
   *
   * @default false
   */
  private?: boolean;
  /*
   * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
   */
  team_id?: number;
  /*
   * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
   * The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
   */
  visibility?: "public" | "private" | "visibility" | "internal";
};

export type ReposCreateInOrgVariables = {
  body: ReposCreateInOrgRequestBody;
  pathParams: ReposCreateInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const fetchReposCreateInOrg = (variables: ReposCreateInOrgVariables) =>
  githubFetch<
    Schemas.Repository,
    ReposCreateInOrgError,
    ReposCreateInOrgRequestBody,
    {},
    {},
    ReposCreateInOrgPathParams
  >({ url: "/orgs/{org}/repos", method: "post", ...variables });

/**
 * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const useReposCreateInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      ReposCreateInOrgError,
      ReposCreateInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    ReposCreateInOrgError,
    ReposCreateInOrgVariables
  >(
    (variables: ReposCreateInOrgVariables) =>
      fetchReposCreateInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type BillingGetGithubActionsBillingOrgPathParams = {
  org: string;
};

export type BillingGetGithubActionsBillingOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetGithubActionsBillingOrgVariables = {
  pathParams: BillingGetGithubActionsBillingOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const fetchBillingGetGithubActionsBillingOrg = (
  variables: BillingGetGithubActionsBillingOrgVariables
) =>
  githubFetch<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingOrgError,
    undefined,
    {},
    {},
    BillingGetGithubActionsBillingOrgPathParams
  >({
    url: "/orgs/{org}/settings/billing/actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useBillingGetGithubActionsBillingOrg = <
  TData = Schemas.ActionsBillingUsage
>(
  variables: BillingGetGithubActionsBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsBillingUsage,
      BillingGetGithubActionsBillingOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/settings/billing/actions",
      operationId: "billingGetGithubActionsBillingOrg",
      variables,
    }),
    () =>
      fetchBillingGetGithubActionsBillingOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetGithubPackagesBillingOrgPathParams = {
  org: string;
};

export type BillingGetGithubPackagesBillingOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetGithubPackagesBillingOrgVariables = {
  pathParams: BillingGetGithubPackagesBillingOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the free and paid storage usued for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const fetchBillingGetGithubPackagesBillingOrg = (
  variables: BillingGetGithubPackagesBillingOrgVariables
) =>
  githubFetch<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingOrgError,
    undefined,
    {},
    {},
    BillingGetGithubPackagesBillingOrgPathParams
  >({
    url: "/orgs/{org}/settings/billing/packages",
    method: "get",
    ...variables,
  });

/**
 * Gets the free and paid storage usued for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useBillingGetGithubPackagesBillingOrg = <
  TData = Schemas.PackagesBillingUsage
>(
  variables: BillingGetGithubPackagesBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackagesBillingUsage,
      BillingGetGithubPackagesBillingOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/settings/billing/packages",
      operationId: "billingGetGithubPackagesBillingOrg",
      variables,
    }),
    () =>
      fetchBillingGetGithubPackagesBillingOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetSharedStorageBillingOrgPathParams = {
  org: string;
};

export type BillingGetSharedStorageBillingOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetSharedStorageBillingOrgVariables = {
  pathParams: BillingGetSharedStorageBillingOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const fetchBillingGetSharedStorageBillingOrg = (
  variables: BillingGetSharedStorageBillingOrgVariables
) =>
  githubFetch<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingOrgError,
    undefined,
    {},
    {},
    BillingGetSharedStorageBillingOrgPathParams
  >({
    url: "/orgs/{org}/settings/billing/shared-storage",
    method: "get",
    ...variables,
  });

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useBillingGetSharedStorageBillingOrg = <
  TData = Schemas.CombinedBillingUsage
>(
  variables: BillingGetSharedStorageBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedBillingUsage,
      BillingGetSharedStorageBillingOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/settings/billing/shared-storage",
      operationId: "billingGetSharedStorageBillingOrg",
      variables,
    }),
    () =>
      fetchBillingGetSharedStorageBillingOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsListIdpGroupsForOrgPathParams = {
  org: string;
};

export type TeamsListIdpGroupsForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page token
   */
  page?: string;
};

export type TeamsListIdpGroupsForOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListIdpGroupsForOrgVariables = {
  pathParams: TeamsListIdpGroupsForOrgPathParams;
  queryParams?: TeamsListIdpGroupsForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
 *
 * The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:
 */
export const fetchTeamsListIdpGroupsForOrg = (
  variables: TeamsListIdpGroupsForOrgVariables
) =>
  githubFetch<
    Schemas.GroupMapping,
    TeamsListIdpGroupsForOrgError,
    undefined,
    {},
    TeamsListIdpGroupsForOrgQueryParams,
    TeamsListIdpGroupsForOrgPathParams
  >({ url: "/orgs/{org}/team-sync/groups", method: "get", ...variables });

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
 *
 * The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:
 */
export const useTeamsListIdpGroupsForOrg = <TData = Schemas.GroupMapping>(
  variables: TeamsListIdpGroupsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GroupMapping,
      TeamsListIdpGroupsForOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GroupMapping,
    TeamsListIdpGroupsForOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/team-sync/groups",
      operationId: "teamsListIdpGroupsForOrg",
      variables,
    }),
    () => fetchTeamsListIdpGroupsForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsListPathParams = {
  org: string;
};

export type TeamsListQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type TeamsListResponse = Schemas.Team[];

export type TeamsListVariables = {
  pathParams: TeamsListPathParams;
  queryParams?: TeamsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all teams in an organization that are visible to the authenticated user.
 */
export const fetchTeamsList = (variables: TeamsListVariables) =>
  githubFetch<
    TeamsListResponse,
    TeamsListError,
    undefined,
    {},
    TeamsListQueryParams,
    TeamsListPathParams
  >({ url: "/orgs/{org}/teams", method: "get", ...variables });

/**
 * Lists all teams in an organization that are visible to the authenticated user.
 */
export const useTeamsList = <TData = TeamsListResponse>(
  variables: TeamsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<TeamsListResponse, TeamsListError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<TeamsListResponse, TeamsListError, TData>(
    queryKeyFn({
      path: "/orgs/{org}/teams",
      operationId: "teamsList",
      variables,
    }),
    () => fetchTeamsList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreatePathParams = {
  org: string;
};

export type TeamsCreateError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsCreateRequestBody = {
  /*
   * The description of the team.
   */
  description?: string;
  /*
   * List GitHub IDs for organization members who will become team maintainers.
   */
  maintainers?: string[];
  /*
   * The name of the team.
   */
  name: string;
  /*
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number;
  /*
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
   * \* `push` - team members can pull and push, but not administer newly-added repositories.
   * \* `admin` - team members can pull, push and administer newly-added repositories.
   *
   * @default pull
   */
  permission?: "pull" | "push" | "admin";
  /*
   * The level of privacy this team should have. The options are:
   * **For a non-nested team:**
   * \* `secret` - only visible to organization owners and members of this team.
   * \* `closed` - visible to all members of this organization.
   * Default: `secret`
   * **For a parent or child team:**
   * \* `closed` - visible to all members of this organization.
   * Default for child team: `closed`
   */
  privacy?: "secret" | "closed";
  /*
   * The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
   */
  repo_names?: string[];
};

export type TeamsCreateVariables = {
  body: TeamsCreateRequestBody;
  pathParams: TeamsCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
 *
 * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
 */
export const fetchTeamsCreate = (variables: TeamsCreateVariables) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsCreateError,
    TeamsCreateRequestBody,
    {},
    {},
    TeamsCreatePathParams
  >({ url: "/orgs/{org}/teams", method: "post", ...variables });

/**
 * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
 *
 * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
 */
export const useTeamsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamFull,
      TeamsCreateError,
      TeamsCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamFull,
    TeamsCreateError,
    TeamsCreateVariables
  >(
    (variables: TeamsCreateVariables) =>
      fetchTeamsCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsDeleteInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsDeleteInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsDeleteInOrgVariables = {
  pathParams: TeamsDeleteInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
 */
export const fetchTeamsDeleteInOrg = (variables: TeamsDeleteInOrgVariables) =>
  githubFetch<
    undefined,
    TeamsDeleteInOrgError,
    undefined,
    {},
    {},
    TeamsDeleteInOrgPathParams
  >({ url: "/orgs/{org}/teams/{teamSlug}", method: "delete", ...variables });

/**
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
 */
export const useTeamsDeleteInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteInOrgError,
      TeamsDeleteInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteInOrgError,
    TeamsDeleteInOrgVariables
  >(
    (variables: TeamsDeleteInOrgVariables) =>
      fetchTeamsDeleteInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsGetByNamePathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsGetByNameError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type TeamsGetByNameVariables = {
  pathParams: TeamsGetByNamePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
 */
export const fetchTeamsGetByName = (variables: TeamsGetByNameVariables) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsGetByNameError,
    undefined,
    {},
    {},
    TeamsGetByNamePathParams
  >({ url: "/orgs/{org}/teams/{teamSlug}", method: "get", ...variables });

/**
 * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
 */
export const useTeamsGetByName = <TData = Schemas.TeamFull>(
  variables: TeamsGetByNameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TeamFull, TeamsGetByNameError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.TeamFull, TeamsGetByNameError, TData>(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}",
      operationId: "teamsGetByName",
      variables,
    }),
    () => fetchTeamsGetByName({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsUpdateInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsUpdateInOrgRequestBody = {
  /*
   * The description of the team.
   */
  description?: string;
  /*
   * The name of the team.
   */
  name?: string;
  /*
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number | null;
  /*
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
   * \* `push` - team members can pull and push, but not administer newly-added repositories.
   * \* `admin` - team members can pull, push and administer newly-added repositories.
   *
   * @default pull
   */
  permission?: "pull" | "push" | "admin";
  /*
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
   * **For a non-nested team:**
   * \* `secret` - only visible to organization owners and members of this team.
   * \* `closed` - visible to all members of this organization.
   * **For a parent or child team:**
   * \* `closed` - visible to all members of this organization.
   */
  privacy?: "secret" | "closed";
};

export type TeamsUpdateInOrgVariables = {
  body?: TeamsUpdateInOrgRequestBody;
  pathParams: TeamsUpdateInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
 */
export const fetchTeamsUpdateInOrg = (variables: TeamsUpdateInOrgVariables) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsUpdateInOrgError,
    TeamsUpdateInOrgRequestBody,
    {},
    {},
    TeamsUpdateInOrgPathParams
  >({ url: "/orgs/{org}/teams/{teamSlug}", method: "patch", ...variables });

/**
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
 */
export const useTeamsUpdateInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamFull,
      TeamsUpdateInOrgError,
      TeamsUpdateInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamFull,
    TeamsUpdateInOrgError,
    TeamsUpdateInOrgVariables
  >(
    (variables: TeamsUpdateInOrgVariables) =>
      fetchTeamsUpdateInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsListDiscussionsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListDiscussionsInOrgQueryParams = {
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Pinned discussions only filter
   */
  pinned?: string;
};

export type TeamsListDiscussionsInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListDiscussionsInOrgResponse = Schemas.TeamDiscussion[];

export type TeamsListDiscussionsInOrgVariables = {
  pathParams: TeamsListDiscussionsInOrgPathParams;
  queryParams?: TeamsListDiscussionsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const fetchTeamsListDiscussionsInOrg = (
  variables: TeamsListDiscussionsInOrgVariables
) =>
  githubFetch<
    TeamsListDiscussionsInOrgResponse,
    TeamsListDiscussionsInOrgError,
    undefined,
    {},
    TeamsListDiscussionsInOrgQueryParams,
    TeamsListDiscussionsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions",
    method: "get",
    ...variables,
  });

/**
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const useTeamsListDiscussionsInOrg = <
  TData = TeamsListDiscussionsInOrgResponse
>(
  variables: TeamsListDiscussionsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionsInOrgResponse,
      TeamsListDiscussionsInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionsInOrgResponse,
    TeamsListDiscussionsInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions",
      operationId: "teamsListDiscussionsInOrg",
      variables,
    }),
    () => fetchTeamsListDiscussionsInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsCreateDiscussionInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsCreateDiscussionInOrgRequestBody = {
  /*
   * The discussion post's body text.
   */
  body: string;
  /*
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   *
   * @default false
   */
  private?: boolean;
  /*
   * The discussion post's title.
   */
  title: string;
};

export type TeamsCreateDiscussionInOrgVariables = {
  body: TeamsCreateDiscussionInOrgRequestBody;
  pathParams: TeamsCreateDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const fetchTeamsCreateDiscussionInOrg = (
  variables: TeamsCreateDiscussionInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsCreateDiscussionInOrgError,
    TeamsCreateDiscussionInOrgRequestBody,
    {},
    {},
    TeamsCreateDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions",
    method: "post",
    ...variables,
  });

/**
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const useTeamsCreateDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      TeamsCreateDiscussionInOrgError,
      TeamsCreateDiscussionInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    TeamsCreateDiscussionInOrgError,
    TeamsCreateDiscussionInOrgVariables
  >(
    (variables: TeamsCreateDiscussionInOrgVariables) =>
      fetchTeamsCreateDiscussionInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsDeleteDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type TeamsDeleteDiscussionInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsDeleteDiscussionInOrgVariables = {
  pathParams: TeamsDeleteDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const fetchTeamsDeleteDiscussionInOrg = (
  variables: TeamsDeleteDiscussionInOrgVariables
) =>
  githubFetch<
    undefined,
    TeamsDeleteDiscussionInOrgError,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    method: "delete",
    ...variables,
  });

/**
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const useTeamsDeleteDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteDiscussionInOrgError,
      TeamsDeleteDiscussionInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteDiscussionInOrgError,
    TeamsDeleteDiscussionInOrgVariables
  >(
    (variables: TeamsDeleteDiscussionInOrgVariables) =>
      fetchTeamsDeleteDiscussionInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsGetDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type TeamsGetDiscussionInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsGetDiscussionInOrgVariables = {
  pathParams: TeamsGetDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const fetchTeamsGetDiscussionInOrg = (
  variables: TeamsGetDiscussionInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsGetDiscussionInOrgError,
    undefined,
    {},
    {},
    TeamsGetDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    method: "get",
    ...variables,
  });

/**
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const useTeamsGetDiscussionInOrg = <TData = Schemas.TeamDiscussion>(
  variables: TeamsGetDiscussionInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussion,
      TeamsGetDiscussionInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussion,
    TeamsGetDiscussionInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
      operationId: "teamsGetDiscussionInOrg",
      variables,
    }),
    () => fetchTeamsGetDiscussionInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type TeamsUpdateDiscussionInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsUpdateDiscussionInOrgRequestBody = {
  /*
   * The discussion post's body text.
   */
  body?: string;
  /*
   * The discussion post's title.
   */
  title?: string;
};

export type TeamsUpdateDiscussionInOrgVariables = {
  body?: TeamsUpdateDiscussionInOrgRequestBody;
  pathParams: TeamsUpdateDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const fetchTeamsUpdateDiscussionInOrg = (
  variables: TeamsUpdateDiscussionInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsUpdateDiscussionInOrgError,
    TeamsUpdateDiscussionInOrgRequestBody,
    {},
    {},
    TeamsUpdateDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const useTeamsUpdateDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      TeamsUpdateDiscussionInOrgError,
      TeamsUpdateDiscussionInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    TeamsUpdateDiscussionInOrgError,
    TeamsUpdateDiscussionInOrgVariables
  >(
    (variables: TeamsUpdateDiscussionInOrgVariables) =>
      fetchTeamsUpdateDiscussionInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsListDiscussionCommentsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type TeamsListDiscussionCommentsInOrgQueryParams = {
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListDiscussionCommentsInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsListDiscussionCommentsInOrgResponse =
  Schemas.TeamDiscussionComment[];

export type TeamsListDiscussionCommentsInOrgVariables = {
  pathParams: TeamsListDiscussionCommentsInOrgPathParams;
  queryParams?: TeamsListDiscussionCommentsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const fetchTeamsListDiscussionCommentsInOrg = (
  variables: TeamsListDiscussionCommentsInOrgVariables
) =>
  githubFetch<
    TeamsListDiscussionCommentsInOrgResponse,
    TeamsListDiscussionCommentsInOrgError,
    undefined,
    {},
    TeamsListDiscussionCommentsInOrgQueryParams,
    TeamsListDiscussionCommentsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments",
    method: "get",
    ...variables,
  });

/**
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const useTeamsListDiscussionCommentsInOrg = <
  TData = TeamsListDiscussionCommentsInOrgResponse
>(
  variables: TeamsListDiscussionCommentsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionCommentsInOrgResponse,
      TeamsListDiscussionCommentsInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionCommentsInOrgResponse,
    TeamsListDiscussionCommentsInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
      operationId: "teamsListDiscussionCommentsInOrg",
      variables,
    }),
    () =>
      fetchTeamsListDiscussionCommentsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type TeamsCreateDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCreateDiscussionCommentInOrgRequestBody = {
  /*
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsCreateDiscussionCommentInOrgVariables = {
  body: TeamsCreateDiscussionCommentInOrgRequestBody;
  pathParams: TeamsCreateDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const fetchTeamsCreateDiscussionCommentInOrg = (
  variables: TeamsCreateDiscussionCommentInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsCreateDiscussionCommentInOrgError,
    TeamsCreateDiscussionCommentInOrgRequestBody,
    {},
    {},
    TeamsCreateDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments",
    method: "post",
    ...variables,
  });

/**
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const useTeamsCreateDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      TeamsCreateDiscussionCommentInOrgError,
      TeamsCreateDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    TeamsCreateDiscussionCommentInOrgError,
    TeamsCreateDiscussionCommentInOrgVariables
  >(
    (variables: TeamsCreateDiscussionCommentInOrgVariables) =>
      fetchTeamsCreateDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsDeleteDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsDeleteDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsDeleteDiscussionCommentInOrgVariables = {
  pathParams: TeamsDeleteDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const fetchTeamsDeleteDiscussionCommentInOrg = (
  variables: TeamsDeleteDiscussionCommentInOrgVariables
) =>
  githubFetch<
    undefined,
    TeamsDeleteDiscussionCommentInOrgError,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const useTeamsDeleteDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteDiscussionCommentInOrgError,
      TeamsDeleteDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteDiscussionCommentInOrgError,
    TeamsDeleteDiscussionCommentInOrgVariables
  >(
    (variables: TeamsDeleteDiscussionCommentInOrgVariables) =>
      fetchTeamsDeleteDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsGetDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsGetDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsGetDiscussionCommentInOrgVariables = {
  pathParams: TeamsGetDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const fetchTeamsGetDiscussionCommentInOrg = (
  variables: TeamsGetDiscussionCommentInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsGetDiscussionCommentInOrgError,
    undefined,
    {},
    {},
    TeamsGetDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "get",
    ...variables,
  });

/**
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const useTeamsGetDiscussionCommentInOrg = <
  TData = Schemas.TeamDiscussionComment
>(
  variables: TeamsGetDiscussionCommentInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussionComment,
      TeamsGetDiscussionCommentInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussionComment,
    TeamsGetDiscussionCommentInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
      operationId: "teamsGetDiscussionCommentInOrg",
      variables,
    }),
    () =>
      fetchTeamsGetDiscussionCommentInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsUpdateDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsUpdateDiscussionCommentInOrgRequestBody = {
  /*
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsUpdateDiscussionCommentInOrgVariables = {
  body: TeamsUpdateDiscussionCommentInOrgRequestBody;
  pathParams: TeamsUpdateDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const fetchTeamsUpdateDiscussionCommentInOrg = (
  variables: TeamsUpdateDiscussionCommentInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsUpdateDiscussionCommentInOrgError,
    TeamsUpdateDiscussionCommentInOrgRequestBody,
    {},
    {},
    TeamsUpdateDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const useTeamsUpdateDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      TeamsUpdateDiscussionCommentInOrgError,
      TeamsUpdateDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    TeamsUpdateDiscussionCommentInOrgError,
    TeamsUpdateDiscussionCommentInOrgVariables
  >(
    (variables: TeamsUpdateDiscussionCommentInOrgVariables) =>
      fetchTeamsUpdateDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsListForTeamDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
};

export type ReactionsListForTeamDiscussionCommentInOrgQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsListForTeamDiscussionCommentInOrgResponse =
  Schemas.Reaction[];

export type ReactionsListForTeamDiscussionCommentInOrgVariables = {
  pathParams: ReactionsListForTeamDiscussionCommentInOrgPathParams;
  queryParams?: ReactionsListForTeamDiscussionCommentInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const fetchReactionsListForTeamDiscussionCommentInOrg = (
  variables: ReactionsListForTeamDiscussionCommentInOrgVariables
) =>
  githubFetch<
    ReactionsListForTeamDiscussionCommentInOrgResponse,
    ReactionsListForTeamDiscussionCommentInOrgError,
    undefined,
    {},
    ReactionsListForTeamDiscussionCommentInOrgQueryParams,
    ReactionsListForTeamDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const useReactionsListForTeamDiscussionCommentInOrg = <
  TData = ReactionsListForTeamDiscussionCommentInOrgResponse
>(
  variables: ReactionsListForTeamDiscussionCommentInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionCommentInOrgResponse,
      ReactionsListForTeamDiscussionCommentInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionCommentInOrgResponse,
    ReactionsListForTeamDiscussionCommentInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      operationId: "reactionsListForTeamDiscussionCommentInOrg",
      variables,
    }),
    () =>
      fetchReactionsListForTeamDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForTeamDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
};

export type ReactionsCreateForTeamDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsCreateForTeamDiscussionCommentInOrgRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionCommentInOrgVariables = {
  body: ReactionsCreateForTeamDiscussionCommentInOrgRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const fetchReactionsCreateForTeamDiscussionCommentInOrg = (
  variables: ReactionsCreateForTeamDiscussionCommentInOrgVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionCommentInOrgError,
    ReactionsCreateForTeamDiscussionCommentInOrgRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const useReactionsCreateForTeamDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForTeamDiscussionCommentInOrgError,
      ReactionsCreateForTeamDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionCommentInOrgError,
    ReactionsCreateForTeamDiscussionCommentInOrgVariables
  >(
    (variables: ReactionsCreateForTeamDiscussionCommentInOrgVariables) =>
      fetchReactionsCreateForTeamDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsDeleteForTeamDiscussionCommentPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
  reactionId: number;
};

export type ReactionsDeleteForTeamDiscussionCommentError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForTeamDiscussionCommentVariables = {
  pathParams: ReactionsDeleteForTeamDiscussionCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsDeleteForTeamDiscussionComment = (
  variables: ReactionsDeleteForTeamDiscussionCommentVariables
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForTeamDiscussionCommentError,
    undefined,
    {},
    {},
    ReactionsDeleteForTeamDiscussionCommentPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsDeleteForTeamDiscussionComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForTeamDiscussionCommentError,
      ReactionsDeleteForTeamDiscussionCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForTeamDiscussionCommentError,
    ReactionsDeleteForTeamDiscussionCommentVariables
  >(
    (variables: ReactionsDeleteForTeamDiscussionCommentVariables) =>
      fetchReactionsDeleteForTeamDiscussionComment({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsListForTeamDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type ReactionsListForTeamDiscussionInOrgQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsListForTeamDiscussionInOrgResponse = Schemas.Reaction[];

export type ReactionsListForTeamDiscussionInOrgVariables = {
  pathParams: ReactionsListForTeamDiscussionInOrgPathParams;
  queryParams?: ReactionsListForTeamDiscussionInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const fetchReactionsListForTeamDiscussionInOrg = (
  variables: ReactionsListForTeamDiscussionInOrgVariables
) =>
  githubFetch<
    ReactionsListForTeamDiscussionInOrgResponse,
    ReactionsListForTeamDiscussionInOrgError,
    undefined,
    {},
    ReactionsListForTeamDiscussionInOrgQueryParams,
    ReactionsListForTeamDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const useReactionsListForTeamDiscussionInOrg = <
  TData = ReactionsListForTeamDiscussionInOrgResponse
>(
  variables: ReactionsListForTeamDiscussionInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionInOrgResponse,
      ReactionsListForTeamDiscussionInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionInOrgResponse,
    ReactionsListForTeamDiscussionInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
      operationId: "reactionsListForTeamDiscussionInOrg",
      variables,
    }),
    () =>
      fetchReactionsListForTeamDiscussionInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForTeamDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type ReactionsCreateForTeamDiscussionInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsCreateForTeamDiscussionInOrgRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionInOrgVariables = {
  body: ReactionsCreateForTeamDiscussionInOrgRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const fetchReactionsCreateForTeamDiscussionInOrg = (
  variables: ReactionsCreateForTeamDiscussionInOrgVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionInOrgError,
    ReactionsCreateForTeamDiscussionInOrgRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const useReactionsCreateForTeamDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForTeamDiscussionInOrgError,
      ReactionsCreateForTeamDiscussionInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionInOrgError,
    ReactionsCreateForTeamDiscussionInOrgVariables
  >(
    (variables: ReactionsCreateForTeamDiscussionInOrgVariables) =>
      fetchReactionsCreateForTeamDiscussionInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsDeleteForTeamDiscussionPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  reactionId: number;
};

export type ReactionsDeleteForTeamDiscussionError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForTeamDiscussionVariables = {
  pathParams: ReactionsDeleteForTeamDiscussionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsDeleteForTeamDiscussion = (
  variables: ReactionsDeleteForTeamDiscussionVariables
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForTeamDiscussionError,
    undefined,
    {},
    {},
    ReactionsDeleteForTeamDiscussionPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsDeleteForTeamDiscussion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForTeamDiscussionError,
      ReactionsDeleteForTeamDiscussionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForTeamDiscussionError,
    ReactionsDeleteForTeamDiscussionVariables
  >(
    (variables: ReactionsDeleteForTeamDiscussionVariables) =>
      fetchReactionsDeleteForTeamDiscussion({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListPendingInvitationsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListPendingInvitationsInOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListPendingInvitationsInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsListPendingInvitationsInOrgResponse =
  Schemas.OrganizationInvitation[];

export type TeamsListPendingInvitationsInOrgVariables = {
  pathParams: TeamsListPendingInvitationsInOrgPathParams;
  queryParams?: TeamsListPendingInvitationsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
 */
export const fetchTeamsListPendingInvitationsInOrg = (
  variables: TeamsListPendingInvitationsInOrgVariables
) =>
  githubFetch<
    TeamsListPendingInvitationsInOrgResponse,
    TeamsListPendingInvitationsInOrgError,
    undefined,
    {},
    TeamsListPendingInvitationsInOrgQueryParams,
    TeamsListPendingInvitationsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/invitations",
    method: "get",
    ...variables,
  });

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
 */
export const useTeamsListPendingInvitationsInOrg = <
  TData = TeamsListPendingInvitationsInOrgResponse
>(
  variables: TeamsListPendingInvitationsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListPendingInvitationsInOrgResponse,
      TeamsListPendingInvitationsInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListPendingInvitationsInOrgResponse,
    TeamsListPendingInvitationsInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/invitations",
      operationId: "teamsListPendingInvitationsInOrg",
      variables,
    }),
    () =>
      fetchTeamsListPendingInvitationsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsListMembersInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListMembersInOrgQueryParams = {
  /*
   * Filters members returned by their role in the team. Can be one of:
   * \* `member` - normal members of the team.
   * \* `maintainer` - team maintainers.
   * \* `all` - all members of the team.
   *
   * @default all
   */
  role?: "member" | "maintainer" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListMembersInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListMembersInOrgResponse = Schemas.SimpleUser[];

export type TeamsListMembersInOrgVariables = {
  pathParams: TeamsListMembersInOrgPathParams;
  queryParams?: TeamsListMembersInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Team members will include the members of child teams.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const fetchTeamsListMembersInOrg = (
  variables: TeamsListMembersInOrgVariables
) =>
  githubFetch<
    TeamsListMembersInOrgResponse,
    TeamsListMembersInOrgError,
    undefined,
    {},
    TeamsListMembersInOrgQueryParams,
    TeamsListMembersInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/members",
    method: "get",
    ...variables,
  });

/**
 * Team members will include the members of child teams.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const useTeamsListMembersInOrg = <TData = TeamsListMembersInOrgResponse>(
  variables: TeamsListMembersInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListMembersInOrgResponse,
      TeamsListMembersInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListMembersInOrgResponse,
    TeamsListMembersInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/members",
      operationId: "teamsListMembersInOrg",
      variables,
    }),
    () => fetchTeamsListMembersInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveMembershipForUserInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  username: string;
};

export type TeamsRemoveMembershipForUserInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveMembershipForUserInOrgVariables = {
  pathParams: TeamsRemoveMembershipForUserInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const fetchTeamsRemoveMembershipForUserInOrg = (
  variables: TeamsRemoveMembershipForUserInOrgVariables
) =>
  githubFetch<
    undefined,
    TeamsRemoveMembershipForUserInOrgError,
    undefined,
    {},
    {},
    TeamsRemoveMembershipForUserInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    method: "delete",
    ...variables,
  });

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const useTeamsRemoveMembershipForUserInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveMembershipForUserInOrgError,
      TeamsRemoveMembershipForUserInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveMembershipForUserInOrgError,
    TeamsRemoveMembershipForUserInOrgVariables
  >(
    (variables: TeamsRemoveMembershipForUserInOrgVariables) =>
      fetchTeamsRemoveMembershipForUserInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsGetMembershipForUserInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  username: string;
};

export type TeamsGetMembershipForUserInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsGetMembershipForUserInOrgVariables = {
  pathParams: TeamsGetMembershipForUserInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 *
 * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const fetchTeamsGetMembershipForUserInOrg = (
  variables: TeamsGetMembershipForUserInOrgVariables
) =>
  githubFetch<
    Schemas.TeamMembership,
    TeamsGetMembershipForUserInOrgError,
    undefined,
    {},
    {},
    TeamsGetMembershipForUserInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    method: "get",
    ...variables,
  });

/**
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 *
 * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const useTeamsGetMembershipForUserInOrg = <
  TData = Schemas.TeamMembership
>(
  variables: TeamsGetMembershipForUserInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamMembership,
      TeamsGetMembershipForUserInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamMembership,
    TeamsGetMembershipForUserInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/memberships/{username}",
      operationId: "teamsGetMembershipForUserInOrg",
      variables,
    }),
    () =>
      fetchTeamsGetMembershipForUserInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateMembershipForUserInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  username: string;
};

export type TeamsAddOrUpdateMembershipForUserInOrgError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: {
    errors?: {
      code?: string;
      field?: string;
      resource?: string;
    }[];
    message?: string;
  };
}>;

export type TeamsAddOrUpdateMembershipForUserInOrgRequestBody = {
  /*
   * The role that this user should have in the team. Can be one of:
   * \* `member` - a normal member of the team.
   * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
   *
   * @default member
   */
  role?: "member" | "maintainer";
};

export type TeamsAddOrUpdateMembershipForUserInOrgVariables = {
  body?: TeamsAddOrUpdateMembershipForUserInOrgRequestBody;
  pathParams: TeamsAddOrUpdateMembershipForUserInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const fetchTeamsAddOrUpdateMembershipForUserInOrg = (
  variables: TeamsAddOrUpdateMembershipForUserInOrgVariables
) =>
  githubFetch<
    Schemas.TeamMembership,
    TeamsAddOrUpdateMembershipForUserInOrgError,
    TeamsAddOrUpdateMembershipForUserInOrgRequestBody,
    {},
    {},
    TeamsAddOrUpdateMembershipForUserInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    method: "put",
    ...variables,
  });

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const useTeamsAddOrUpdateMembershipForUserInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamMembership,
      TeamsAddOrUpdateMembershipForUserInOrgError,
      TeamsAddOrUpdateMembershipForUserInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamMembership,
    TeamsAddOrUpdateMembershipForUserInOrgError,
    TeamsAddOrUpdateMembershipForUserInOrgVariables
  >(
    (variables: TeamsAddOrUpdateMembershipForUserInOrgVariables) =>
      fetchTeamsAddOrUpdateMembershipForUserInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListProjectsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListProjectsInOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListProjectsInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListProjectsInOrgResponse = Schemas.TeamProject[];

export type TeamsListProjectsInOrgVariables = {
  pathParams: TeamsListProjectsInOrgPathParams;
  queryParams?: TeamsListProjectsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the organization projects for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
 */
export const fetchTeamsListProjectsInOrg = (
  variables: TeamsListProjectsInOrgVariables
) =>
  githubFetch<
    TeamsListProjectsInOrgResponse,
    TeamsListProjectsInOrgError,
    undefined,
    {},
    TeamsListProjectsInOrgQueryParams,
    TeamsListProjectsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/projects",
    method: "get",
    ...variables,
  });

/**
 * Lists the organization projects for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
 */
export const useTeamsListProjectsInOrg = <
  TData = TeamsListProjectsInOrgResponse
>(
  variables: TeamsListProjectsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListProjectsInOrgResponse,
      TeamsListProjectsInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListProjectsInOrgResponse,
    TeamsListProjectsInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/projects",
      operationId: "teamsListProjectsInOrg",
      variables,
    }),
    () => fetchTeamsListProjectsInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveProjectInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  projectId: number;
};

export type TeamsRemoveProjectInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveProjectInOrgVariables = {
  pathParams: TeamsRemoveProjectInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const fetchTeamsRemoveProjectInOrg = (
  variables: TeamsRemoveProjectInOrgVariables
) =>
  githubFetch<
    undefined,
    TeamsRemoveProjectInOrgError,
    undefined,
    {},
    {},
    TeamsRemoveProjectInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    method: "delete",
    ...variables,
  });

/**
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const useTeamsRemoveProjectInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveProjectInOrgError,
      TeamsRemoveProjectInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveProjectInOrgError,
    TeamsRemoveProjectInOrgVariables
  >(
    (variables: TeamsRemoveProjectInOrgVariables) =>
      fetchTeamsRemoveProjectInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsCheckPermissionsForProjectInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  projectId: number;
};

export type TeamsCheckPermissionsForProjectInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCheckPermissionsForProjectInOrgVariables = {
  pathParams: TeamsCheckPermissionsForProjectInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const fetchTeamsCheckPermissionsForProjectInOrg = (
  variables: TeamsCheckPermissionsForProjectInOrgVariables
) =>
  githubFetch<
    Schemas.TeamProject,
    TeamsCheckPermissionsForProjectInOrgError,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForProjectInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    method: "get",
    ...variables,
  });

/**
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const useTeamsCheckPermissionsForProjectInOrg = <
  TData = Schemas.TeamProject
>(
  variables: TeamsCheckPermissionsForProjectInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamProject,
      TeamsCheckPermissionsForProjectInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamProject,
    TeamsCheckPermissionsForProjectInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
      operationId: "teamsCheckPermissionsForProjectInOrg",
      variables,
    }),
    () =>
      fetchTeamsCheckPermissionsForProjectInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateProjectPermissionsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  projectId: number;
};

export type TeamsAddOrUpdateProjectPermissionsInOrgError =
  Fetcher.ErrorWrapper<{
    status: 403;
    payload: {
      documentation_url?: string;
      message?: string;
    };
  }>;

export type TeamsAddOrUpdateProjectPermissionsInOrgVariables = {
  body?: {
    /*
     * The permission to grant to the team for this project. Can be one of:
     * \* `read` - team members can read, but not write to or administer this project.
     * \* `write` - team members can read and write, but not administer this project.
     * \* `admin` - team members can read, write and administer this project.
     * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    permission?: "read" | "write" | "admin";
  } | null;
  pathParams: TeamsAddOrUpdateProjectPermissionsInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const fetchTeamsAddOrUpdateProjectPermissionsInOrg = (
  variables: TeamsAddOrUpdateProjectPermissionsInOrgVariables
) =>
  githubFetch<
    undefined,
    TeamsAddOrUpdateProjectPermissionsInOrgError,
    {
      /*
       * The permission to grant to the team for this project. Can be one of:
       * \* `read` - team members can read, but not write to or administer this project.
       * \* `write` - team members can read and write, but not administer this project.
       * \* `admin` - team members can read, write and administer this project.
       * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
       */
      permission?: "read" | "write" | "admin";
    } | null,
    {},
    {},
    TeamsAddOrUpdateProjectPermissionsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    method: "put",
    ...variables,
  });

/**
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const useTeamsAddOrUpdateProjectPermissionsInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsAddOrUpdateProjectPermissionsInOrgError,
      TeamsAddOrUpdateProjectPermissionsInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsAddOrUpdateProjectPermissionsInOrgError,
    TeamsAddOrUpdateProjectPermissionsInOrgVariables
  >(
    (variables: TeamsAddOrUpdateProjectPermissionsInOrgVariables) =>
      fetchTeamsAddOrUpdateProjectPermissionsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListReposInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListReposInOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListReposInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListReposInOrgResponse = Schemas.MinimalRepository[];

export type TeamsListReposInOrgVariables = {
  pathParams: TeamsListReposInOrgPathParams;
  queryParams?: TeamsListReposInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists a team's repositories visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
 */
export const fetchTeamsListReposInOrg = (
  variables: TeamsListReposInOrgVariables
) =>
  githubFetch<
    TeamsListReposInOrgResponse,
    TeamsListReposInOrgError,
    undefined,
    {},
    TeamsListReposInOrgQueryParams,
    TeamsListReposInOrgPathParams
  >({ url: "/orgs/{org}/teams/{teamSlug}/repos", method: "get", ...variables });

/**
 * Lists a team's repositories visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
 */
export const useTeamsListReposInOrg = <TData = TeamsListReposInOrgResponse>(
  variables: TeamsListReposInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListReposInOrgResponse,
      TeamsListReposInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListReposInOrgResponse,
    TeamsListReposInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/repos",
      operationId: "teamsListReposInOrg",
      variables,
    }),
    () => fetchTeamsListReposInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveRepoInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  owner: string;
  repo: string;
};

export type TeamsRemoveRepoInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveRepoInOrgVariables = {
  pathParams: TeamsRemoveRepoInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const fetchTeamsRemoveRepoInOrg = (
  variables: TeamsRemoveRepoInOrgVariables
) =>
  githubFetch<
    undefined,
    TeamsRemoveRepoInOrgError,
    undefined,
    {},
    {},
    TeamsRemoveRepoInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    method: "delete",
    ...variables,
  });

/**
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const useTeamsRemoveRepoInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveRepoInOrgError,
      TeamsRemoveRepoInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveRepoInOrgError,
    TeamsRemoveRepoInOrgVariables
  >(
    (variables: TeamsRemoveRepoInOrgVariables) =>
      fetchTeamsRemoveRepoInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsCheckPermissionsForRepoInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  owner: string;
  repo: string;
};

export type TeamsCheckPermissionsForRepoInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCheckPermissionsForRepoInOrgVariables = {
  pathParams: TeamsCheckPermissionsForRepoInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
 *
 * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const fetchTeamsCheckPermissionsForRepoInOrg = (
  variables: TeamsCheckPermissionsForRepoInOrgVariables
) =>
  githubFetch<
    undefined,
    TeamsCheckPermissionsForRepoInOrgError,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForRepoInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    method: "get",
    ...variables,
  });

/**
 * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
 *
 * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const useTeamsCheckPermissionsForRepoInOrg = <TData = undefined>(
  variables: TeamsCheckPermissionsForRepoInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      TeamsCheckPermissionsForRepoInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    TeamsCheckPermissionsForRepoInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
      operationId: "teamsCheckPermissionsForRepoInOrg",
      variables,
    }),
    () =>
      fetchTeamsCheckPermissionsForRepoInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateRepoPermissionsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  owner: string;
  repo: string;
};

export type TeamsAddOrUpdateRepoPermissionsInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsAddOrUpdateRepoPermissionsInOrgRequestBody = {
  /*
   * The permission to grant the team on this repository. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer this repository.
   * \* `push` - team members can pull and push, but not administer this repository.
   * \* `admin` - team members can pull, push and administer this repository.
   * \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.
   * \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.
   *
   * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
   */
  permission?: "pull" | "push" | "admin" | "maintain" | "triage";
};

export type TeamsAddOrUpdateRepoPermissionsInOrgVariables = {
  body?: TeamsAddOrUpdateRepoPermissionsInOrgRequestBody;
  pathParams: TeamsAddOrUpdateRepoPermissionsInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 *
 * For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 */
export const fetchTeamsAddOrUpdateRepoPermissionsInOrg = (
  variables: TeamsAddOrUpdateRepoPermissionsInOrgVariables
) =>
  githubFetch<
    undefined,
    TeamsAddOrUpdateRepoPermissionsInOrgError,
    TeamsAddOrUpdateRepoPermissionsInOrgRequestBody,
    {},
    {},
    TeamsAddOrUpdateRepoPermissionsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    method: "put",
    ...variables,
  });

/**
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 *
 * For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 */
export const useTeamsAddOrUpdateRepoPermissionsInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsAddOrUpdateRepoPermissionsInOrgError,
      TeamsAddOrUpdateRepoPermissionsInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsAddOrUpdateRepoPermissionsInOrgError,
    TeamsAddOrUpdateRepoPermissionsInOrgVariables
  >(
    (variables: TeamsAddOrUpdateRepoPermissionsInOrgVariables) =>
      fetchTeamsAddOrUpdateRepoPermissionsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListIdpGroupsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListIdpGroupsInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListIdpGroupsInOrgVariables = {
  pathParams: TeamsListIdpGroupsInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
 */
export const fetchTeamsListIdpGroupsInOrg = (
  variables: TeamsListIdpGroupsInOrgVariables
) =>
  githubFetch<
    Schemas.GroupMapping,
    TeamsListIdpGroupsInOrgError,
    undefined,
    {},
    {},
    TeamsListIdpGroupsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/team-sync/group-mappings",
    method: "get",
    ...variables,
  });

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
 */
export const useTeamsListIdpGroupsInOrg = <TData = Schemas.GroupMapping>(
  variables: TeamsListIdpGroupsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GroupMapping,
      TeamsListIdpGroupsInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GroupMapping,
    TeamsListIdpGroupsInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings",
      operationId: "teamsListIdpGroupsInOrg",
      variables,
    }),
    () => fetchTeamsListIdpGroupsInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateOrUpdateIdpGroupConnectionsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsCreateOrUpdateIdpGroupConnectionsInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCreateOrUpdateIdpGroupConnectionsInOrgRequestBody = {
  /*
   * The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
   */
  groups: {
    /*
     * Description of the IdP group.
     */
    group_description: string;
    /*
     * ID of the IdP group.
     */
    group_id: string;
    /*
     * Name of the IdP group.
     */
    group_name: string;
  }[];
};

export type TeamsCreateOrUpdateIdpGroupConnectionsInOrgVariables = {
  body: TeamsCreateOrUpdateIdpGroupConnectionsInOrgRequestBody;
  pathParams: TeamsCreateOrUpdateIdpGroupConnectionsInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
 */
export const fetchTeamsCreateOrUpdateIdpGroupConnectionsInOrg = (
  variables: TeamsCreateOrUpdateIdpGroupConnectionsInOrgVariables
) =>
  githubFetch<
    Schemas.GroupMapping,
    TeamsCreateOrUpdateIdpGroupConnectionsInOrgError,
    TeamsCreateOrUpdateIdpGroupConnectionsInOrgRequestBody,
    {},
    {},
    TeamsCreateOrUpdateIdpGroupConnectionsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/team-sync/group-mappings",
    method: "patch",
    ...variables,
  });

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
 */
export const useTeamsCreateOrUpdateIdpGroupConnectionsInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GroupMapping,
      TeamsCreateOrUpdateIdpGroupConnectionsInOrgError,
      TeamsCreateOrUpdateIdpGroupConnectionsInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GroupMapping,
    TeamsCreateOrUpdateIdpGroupConnectionsInOrgError,
    TeamsCreateOrUpdateIdpGroupConnectionsInOrgVariables
  >(
    (variables: TeamsCreateOrUpdateIdpGroupConnectionsInOrgVariables) =>
      fetchTeamsCreateOrUpdateIdpGroupConnectionsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListChildInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListChildInOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListChildInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListChildInOrgResponse = Schemas.Team[];

export type TeamsListChildInOrgVariables = {
  pathParams: TeamsListChildInOrgPathParams;
  queryParams?: TeamsListChildInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the child teams of the team specified by `{team_slug}`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
 */
export const fetchTeamsListChildInOrg = (
  variables: TeamsListChildInOrgVariables
) =>
  githubFetch<
    TeamsListChildInOrgResponse,
    TeamsListChildInOrgError,
    undefined,
    {},
    TeamsListChildInOrgQueryParams,
    TeamsListChildInOrgPathParams
  >({ url: "/orgs/{org}/teams/{teamSlug}/teams", method: "get", ...variables });

/**
 * Lists the child teams of the team specified by `{team_slug}`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
 */
export const useTeamsListChildInOrg = <TData = TeamsListChildInOrgResponse>(
  variables: TeamsListChildInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListChildInOrgResponse,
      TeamsListChildInOrgError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListChildInOrgResponse,
    TeamsListChildInOrgError,
    TData
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/teams",
      operationId: "teamsListChildInOrg",
      variables,
    }),
    () => fetchTeamsListChildInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsDeleteCardPathParams = {
  /*
   * card_id parameter
   */
  cardId: number;
};

export type ProjectsDeleteCardError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: {
        documentation_url?: string;
        errors?: string[];
        message?: string;
      };
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ProjectsDeleteCardVariables = {
  pathParams: ProjectsDeleteCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsDeleteCard = (
  variables: ProjectsDeleteCardVariables
) =>
  githubFetch<
    undefined,
    ProjectsDeleteCardError,
    undefined,
    {},
    {},
    ProjectsDeleteCardPathParams
  >({
    url: "/projects/columns/cards/{cardId}",
    method: "delete",
    ...variables,
  });

export const useProjectsDeleteCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProjectsDeleteCardError,
      ProjectsDeleteCardVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ProjectsDeleteCardError,
    ProjectsDeleteCardVariables
  >(
    (variables: ProjectsDeleteCardVariables) =>
      fetchProjectsDeleteCard({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsGetCardPathParams = {
  /*
   * card_id parameter
   */
  cardId: number;
};

export type ProjectsGetCardError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ProjectsGetCardVariables = {
  pathParams: ProjectsGetCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsGetCard = (variables: ProjectsGetCardVariables) =>
  githubFetch<
    Schemas.ProjectCard,
    ProjectsGetCardError,
    undefined,
    {},
    {},
    ProjectsGetCardPathParams
  >({ url: "/projects/columns/cards/{cardId}", method: "get", ...variables });

export const useProjectsGetCard = <TData = Schemas.ProjectCard>(
  variables: ProjectsGetCardVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProjectCard,
      ProjectsGetCardError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.ProjectCard, ProjectsGetCardError, TData>(
    queryKeyFn({
      path: "/projects/columns/cards/{card_id}",
      operationId: "projectsGetCard",
      variables,
    }),
    () => fetchProjectsGetCard({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsUpdateCardPathParams = {
  /*
   * card_id parameter
   */
  cardId: number;
};

export type ProjectsUpdateCardError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsUpdateCardRequestBody = {
  /*
   * Whether or not the card is archived
   *
   * @example false
   */
  archived?: boolean;
  /*
   * The project card's note
   *
   * @example Update all gems
   */
  note?: string | null;
};

export type ProjectsUpdateCardVariables = {
  body?: ProjectsUpdateCardRequestBody;
  pathParams: ProjectsUpdateCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsUpdateCard = (
  variables: ProjectsUpdateCardVariables
) =>
  githubFetch<
    Schemas.ProjectCard,
    ProjectsUpdateCardError,
    ProjectsUpdateCardRequestBody,
    {},
    {},
    ProjectsUpdateCardPathParams
  >({ url: "/projects/columns/cards/{cardId}", method: "patch", ...variables });

export const useProjectsUpdateCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectCard,
      ProjectsUpdateCardError,
      ProjectsUpdateCardVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectCard,
    ProjectsUpdateCardError,
    ProjectsUpdateCardVariables
  >(
    (variables: ProjectsUpdateCardVariables) =>
      fetchProjectsUpdateCard({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsMoveCardPathParams = {
  /*
   * card_id parameter
   */
  cardId: number;
};

export type ProjectsMoveCardError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: {
        documentation_url?: string;
        errors?: {
          code?: string;
          field?: string;
          message?: string;
          resource?: string;
        }[];
        message?: string;
      };
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: {
        code?: string;
        documentation_url?: string;
        errors?: {
          code?: string;
          message?: string;
        }[];
        message?: string;
      };
    }
>;

export type ProjectsMoveCardRequestBody = {
  /*
   * The unique identifier of the column the card should be moved to
   *
   * @example 42
   */
  column_id?: number;
  /*
   * The position of the card in a column
   *
   * @example bottom
   * @pattern ^(?:top|bottom|after:\d+)$
   */
  position: string;
};

export type ProjectsMoveCardVariables = {
  body: ProjectsMoveCardRequestBody;
  pathParams: ProjectsMoveCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsMoveCard = (variables: ProjectsMoveCardVariables) =>
  githubFetch<
    {},
    ProjectsMoveCardError,
    ProjectsMoveCardRequestBody,
    {},
    {},
    ProjectsMoveCardPathParams
  >({
    url: "/projects/columns/cards/{cardId}/moves",
    method: "post",
    ...variables,
  });

export const useProjectsMoveCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      {},
      ProjectsMoveCardError,
      ProjectsMoveCardVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    {},
    ProjectsMoveCardError,
    ProjectsMoveCardVariables
  >(
    (variables: ProjectsMoveCardVariables) =>
      fetchProjectsMoveCard({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsDeleteColumnPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsDeleteColumnError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ProjectsDeleteColumnVariables = {
  pathParams: ProjectsDeleteColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsDeleteColumn = (
  variables: ProjectsDeleteColumnVariables
) =>
  githubFetch<
    undefined,
    ProjectsDeleteColumnError,
    undefined,
    {},
    {},
    ProjectsDeleteColumnPathParams
  >({ url: "/projects/columns/{columnId}", method: "delete", ...variables });

export const useProjectsDeleteColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProjectsDeleteColumnError,
      ProjectsDeleteColumnVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ProjectsDeleteColumnError,
    ProjectsDeleteColumnVariables
  >(
    (variables: ProjectsDeleteColumnVariables) =>
      fetchProjectsDeleteColumn({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsGetColumnPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsGetColumnError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ProjectsGetColumnVariables = {
  pathParams: ProjectsGetColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsGetColumn = (variables: ProjectsGetColumnVariables) =>
  githubFetch<
    Schemas.ProjectColumn,
    ProjectsGetColumnError,
    undefined,
    {},
    {},
    ProjectsGetColumnPathParams
  >({ url: "/projects/columns/{columnId}", method: "get", ...variables });

export const useProjectsGetColumn = <TData = Schemas.ProjectColumn>(
  variables: ProjectsGetColumnVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProjectColumn,
      ProjectsGetColumnError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProjectColumn,
    ProjectsGetColumnError,
    TData
  >(
    queryKeyFn({
      path: "/projects/columns/{column_id}",
      operationId: "projectsGetColumn",
      variables,
    }),
    () => fetchProjectsGetColumn({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsUpdateColumnPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsUpdateColumnError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ProjectsUpdateColumnRequestBody = {
  /*
   * Name of the project column
   *
   * @example Remaining tasks
   */
  name: string;
};

export type ProjectsUpdateColumnVariables = {
  body: ProjectsUpdateColumnRequestBody;
  pathParams: ProjectsUpdateColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsUpdateColumn = (
  variables: ProjectsUpdateColumnVariables
) =>
  githubFetch<
    Schemas.ProjectColumn,
    ProjectsUpdateColumnError,
    ProjectsUpdateColumnRequestBody,
    {},
    {},
    ProjectsUpdateColumnPathParams
  >({ url: "/projects/columns/{columnId}", method: "patch", ...variables });

export const useProjectsUpdateColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectColumn,
      ProjectsUpdateColumnError,
      ProjectsUpdateColumnVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectColumn,
    ProjectsUpdateColumnError,
    ProjectsUpdateColumnVariables
  >(
    (variables: ProjectsUpdateColumnVariables) =>
      fetchProjectsUpdateColumn({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsListCardsPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsListCardsQueryParams = {
  /*
   * Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.
   *
   * @default not_archived
   */
  archived_state?: "all" | "archived" | "not_archived";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListCardsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ProjectsListCardsResponse = Schemas.ProjectCard[];

export type ProjectsListCardsVariables = {
  pathParams: ProjectsListCardsPathParams;
  queryParams?: ProjectsListCardsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsListCards = (variables: ProjectsListCardsVariables) =>
  githubFetch<
    ProjectsListCardsResponse,
    ProjectsListCardsError,
    undefined,
    {},
    ProjectsListCardsQueryParams,
    ProjectsListCardsPathParams
  >({ url: "/projects/columns/{columnId}/cards", method: "get", ...variables });

export const useProjectsListCards = <TData = ProjectsListCardsResponse>(
  variables: ProjectsListCardsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListCardsResponse,
      ProjectsListCardsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListCardsResponse,
    ProjectsListCardsError,
    TData
  >(
    queryKeyFn({
      path: "/projects/columns/{column_id}/cards",
      operationId: "projectsListCards",
      variables,
    }),
    () => fetchProjectsListCards({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsCreateCardPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsCreateCardError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Schemas.ValidationError | Schemas.ValidationErrorSimple;
    }
  | {
      status: 503;
      payload: {
        code?: string;
        documentation_url?: string;
        errors?: {
          code?: string;
          message?: string;
        }[];
        message?: string;
      };
    }
>;

export type ProjectsCreateCardVariables = {
  body?:
    | {
        /*
         * The project card's note
         *
         * @example Update all gems
         */
        note: string | null;
      }
    | {
        /*
         * The unique identifier of the content associated with the card
         *
         * @example 42
         */
        content_id: number;
        /*
         * The piece of content associated with the card
         *
         * @example PullRequest
         */
        content_type: string;
      };
  pathParams: ProjectsCreateCardPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
 *
 * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchProjectsCreateCard = (
  variables: ProjectsCreateCardVariables
) =>
  githubFetch<
    Schemas.ProjectCard,
    ProjectsCreateCardError,
    | {
        /*
         * The project card's note
         *
         * @example Update all gems
         */
        note: string | null;
      }
    | {
        /*
         * The unique identifier of the content associated with the card
         *
         * @example 42
         */
        content_id: number;
        /*
         * The piece of content associated with the card
         *
         * @example PullRequest
         */
        content_type: string;
      },
    {},
    {},
    ProjectsCreateCardPathParams
  >({
    url: "/projects/columns/{columnId}/cards",
    method: "post",
    ...variables,
  });

/**
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
 *
 * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useProjectsCreateCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectCard,
      ProjectsCreateCardError,
      ProjectsCreateCardVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectCard,
    ProjectsCreateCardError,
    ProjectsCreateCardVariables
  >(
    (variables: ProjectsCreateCardVariables) =>
      fetchProjectsCreateCard({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsMoveColumnPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsMoveColumnError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsMoveColumnRequestBody = {
  /*
   * The position of the column in a project
   *
   * @example last
   * @pattern ^(?:first|last|after:\d+)$
   */
  position: string;
};

export type ProjectsMoveColumnVariables = {
  body: ProjectsMoveColumnRequestBody;
  pathParams: ProjectsMoveColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsMoveColumn = (
  variables: ProjectsMoveColumnVariables
) =>
  githubFetch<
    {},
    ProjectsMoveColumnError,
    ProjectsMoveColumnRequestBody,
    {},
    {},
    ProjectsMoveColumnPathParams
  >({
    url: "/projects/columns/{columnId}/moves",
    method: "post",
    ...variables,
  });

export const useProjectsMoveColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      {},
      ProjectsMoveColumnError,
      ProjectsMoveColumnVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    {},
    ProjectsMoveColumnError,
    ProjectsMoveColumnVariables
  >(
    (variables: ProjectsMoveColumnVariables) =>
      fetchProjectsMoveColumn({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsDeletePathParams = {
  projectId: number;
};

export type ProjectsDeleteError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: {
        documentation_url?: string;
        errors?: string[];
        message?: string;
      };
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type ProjectsDeleteVariables = {
  pathParams: ProjectsDeletePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
 */
export const fetchProjectsDelete = (variables: ProjectsDeleteVariables) =>
  githubFetch<
    undefined,
    ProjectsDeleteError,
    undefined,
    {},
    {},
    ProjectsDeletePathParams
  >({ url: "/projects/{projectId}", method: "delete", ...variables });

/**
 * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
 */
export const useProjectsDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProjectsDeleteError,
      ProjectsDeleteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ProjectsDeleteError,
    ProjectsDeleteVariables
  >(
    (variables: ProjectsDeleteVariables) =>
      fetchProjectsDelete({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsGetPathParams = {
  projectId: number;
};

export type ProjectsGetError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ProjectsGetVariables = {
  pathParams: ProjectsGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsGet = (variables: ProjectsGetVariables) =>
  githubFetch<
    Schemas.Project,
    ProjectsGetError,
    undefined,
    {},
    {},
    ProjectsGetPathParams
  >({ url: "/projects/{projectId}", method: "get", ...variables });

/**
 * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsGet = <TData = Schemas.Project>(
  variables: ProjectsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Project, ProjectsGetError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Project, ProjectsGetError, TData>(
    queryKeyFn({
      path: "/projects/{project_id}",
      operationId: "projectsGet",
      variables,
    }),
    () => fetchProjectsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsUpdatePathParams = {
  projectId: number;
};

export type ProjectsUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: {
        documentation_url?: string;
        errors?: string[];
        message?: string;
      };
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsUpdateRequestBody = {
  /*
   * Body of the project
   *
   * @example This project represents the sprint of the first week in January
   */
  body?: string | null;
  /*
   * Name of the project
   *
   * @example Week One Sprint
   */
  name?: string;
  /*
   * The baseline permission that all organization members have on this project
   */
  organization_permission?: "read" | "write" | "admin" | "none";
  /*
   * Whether or not this project can be seen by everyone.
   */
  private?: boolean;
  /*
   * State of the project; either 'open' or 'closed'
   *
   * @example open
   */
  state?: string;
};

export type ProjectsUpdateVariables = {
  body?: ProjectsUpdateRequestBody;
  pathParams: ProjectsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsUpdate = (variables: ProjectsUpdateVariables) =>
  githubFetch<
    Schemas.Project,
    ProjectsUpdateError,
    ProjectsUpdateRequestBody,
    {},
    {},
    ProjectsUpdatePathParams
  >({ url: "/projects/{projectId}", method: "patch", ...variables });

/**
 * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectsUpdateError,
      ProjectsUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectsUpdateError,
    ProjectsUpdateVariables
  >(
    (variables: ProjectsUpdateVariables) =>
      fetchProjectsUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsListCollaboratorsPathParams = {
  projectId: number;
};

export type ProjectsListCollaboratorsQueryParams = {
  /*
   * Filters the collaborators by their affiliation. Can be one of:
   * \* `outside`: Outside collaborators of a project that are not a member of the project's organization.
   * \* `direct`: Collaborators with permissions to a project, regardless of organization membership status.
   * \* `all`: All collaborators the authenticated user can see.
   *
   * @default all
   */
  affiliation?: "outside" | "direct" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListCollaboratorsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ProjectsListCollaboratorsResponse = Schemas.SimpleUser[];

export type ProjectsListCollaboratorsVariables = {
  pathParams: ProjectsListCollaboratorsPathParams;
  queryParams?: ProjectsListCollaboratorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
 */
export const fetchProjectsListCollaborators = (
  variables: ProjectsListCollaboratorsVariables
) =>
  githubFetch<
    ProjectsListCollaboratorsResponse,
    ProjectsListCollaboratorsError,
    undefined,
    {},
    ProjectsListCollaboratorsQueryParams,
    ProjectsListCollaboratorsPathParams
  >({
    url: "/projects/{projectId}/collaborators",
    method: "get",
    ...variables,
  });

/**
 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
 */
export const useProjectsListCollaborators = <
  TData = ProjectsListCollaboratorsResponse
>(
  variables: ProjectsListCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListCollaboratorsResponse,
      ProjectsListCollaboratorsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListCollaboratorsResponse,
    ProjectsListCollaboratorsError,
    TData
  >(
    queryKeyFn({
      path: "/projects/{project_id}/collaborators",
      operationId: "projectsListCollaborators",
      variables,
    }),
    () => fetchProjectsListCollaborators({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsRemoveCollaboratorPathParams = {
  projectId: number;
  username: string;
};

export type ProjectsRemoveCollaboratorError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ProjectsRemoveCollaboratorVariables = {
  pathParams: ProjectsRemoveCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
 */
export const fetchProjectsRemoveCollaborator = (
  variables: ProjectsRemoveCollaboratorVariables
) =>
  githubFetch<
    undefined,
    ProjectsRemoveCollaboratorError,
    undefined,
    {},
    {},
    ProjectsRemoveCollaboratorPathParams
  >({
    url: "/projects/{projectId}/collaborators/{username}",
    method: "delete",
    ...variables,
  });

/**
 * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
 */
export const useProjectsRemoveCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProjectsRemoveCollaboratorError,
      ProjectsRemoveCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ProjectsRemoveCollaboratorError,
    ProjectsRemoveCollaboratorVariables
  >(
    (variables: ProjectsRemoveCollaboratorVariables) =>
      fetchProjectsRemoveCollaborator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsAddCollaboratorPathParams = {
  projectId: number;
  username: string;
};

export type ProjectsAddCollaboratorError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ProjectsAddCollaboratorRequestBody = {
  /*
   * The permission to grant the collaborator.
   *
   * @default write
   * @example write
   */
  permission?: "read" | "write" | "admin";
};

export type ProjectsAddCollaboratorVariables = {
  body?: ProjectsAddCollaboratorRequestBody;
  pathParams: ProjectsAddCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
 */
export const fetchProjectsAddCollaborator = (
  variables: ProjectsAddCollaboratorVariables
) =>
  githubFetch<
    undefined,
    ProjectsAddCollaboratorError,
    ProjectsAddCollaboratorRequestBody,
    {},
    {},
    ProjectsAddCollaboratorPathParams
  >({
    url: "/projects/{projectId}/collaborators/{username}",
    method: "put",
    ...variables,
  });

/**
 * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
 */
export const useProjectsAddCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProjectsAddCollaboratorError,
      ProjectsAddCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ProjectsAddCollaboratorError,
    ProjectsAddCollaboratorVariables
  >(
    (variables: ProjectsAddCollaboratorVariables) =>
      fetchProjectsAddCollaborator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsGetPermissionForUserPathParams = {
  projectId: number;
  username: string;
};

export type ProjectsGetPermissionForUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ProjectsGetPermissionForUserVariables = {
  pathParams: ProjectsGetPermissionForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
 */
export const fetchProjectsGetPermissionForUser = (
  variables: ProjectsGetPermissionForUserVariables
) =>
  githubFetch<
    Schemas.RepositoryCollaboratorPermission,
    ProjectsGetPermissionForUserError,
    undefined,
    {},
    {},
    ProjectsGetPermissionForUserPathParams
  >({
    url: "/projects/{projectId}/collaborators/{username}/permission",
    method: "get",
    ...variables,
  });

/**
 * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
 */
export const useProjectsGetPermissionForUser = <
  TData = Schemas.RepositoryCollaboratorPermission
>(
  variables: ProjectsGetPermissionForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepositoryCollaboratorPermission,
      ProjectsGetPermissionForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RepositoryCollaboratorPermission,
    ProjectsGetPermissionForUserError,
    TData
  >(
    queryKeyFn({
      path: "/projects/{project_id}/collaborators/{username}/permission",
      operationId: "projectsGetPermissionForUser",
      variables,
    }),
    () =>
      fetchProjectsGetPermissionForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsListColumnsPathParams = {
  projectId: number;
};

export type ProjectsListColumnsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListColumnsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ProjectsListColumnsResponse = Schemas.ProjectColumn[];

export type ProjectsListColumnsVariables = {
  pathParams: ProjectsListColumnsPathParams;
  queryParams?: ProjectsListColumnsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsListColumns = (
  variables: ProjectsListColumnsVariables
) =>
  githubFetch<
    ProjectsListColumnsResponse,
    ProjectsListColumnsError,
    undefined,
    {},
    ProjectsListColumnsQueryParams,
    ProjectsListColumnsPathParams
  >({ url: "/projects/{projectId}/columns", method: "get", ...variables });

export const useProjectsListColumns = <TData = ProjectsListColumnsResponse>(
  variables: ProjectsListColumnsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListColumnsResponse,
      ProjectsListColumnsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListColumnsResponse,
    ProjectsListColumnsError,
    TData
  >(
    queryKeyFn({
      path: "/projects/{project_id}/columns",
      operationId: "projectsListColumns",
      variables,
    }),
    () => fetchProjectsListColumns({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsCreateColumnPathParams = {
  projectId: number;
};

export type ProjectsCreateColumnError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsCreateColumnRequestBody = {
  /*
   * Name of the project column
   *
   * @example Remaining tasks
   */
  name: string;
};

export type ProjectsCreateColumnVariables = {
  body: ProjectsCreateColumnRequestBody;
  pathParams: ProjectsCreateColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsCreateColumn = (
  variables: ProjectsCreateColumnVariables
) =>
  githubFetch<
    Schemas.ProjectColumn,
    ProjectsCreateColumnError,
    ProjectsCreateColumnRequestBody,
    {},
    {},
    ProjectsCreateColumnPathParams
  >({ url: "/projects/{projectId}/columns", method: "post", ...variables });

export const useProjectsCreateColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectColumn,
      ProjectsCreateColumnError,
      ProjectsCreateColumnVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectColumn,
    ProjectsCreateColumnError,
    ProjectsCreateColumnVariables
  >(
    (variables: ProjectsCreateColumnVariables) =>
      fetchProjectsCreateColumn({ ...fetcherOptions, ...variables }),
    options
  );
};

export type RateLimitGetError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type RateLimitGetVariables = GithubContext["fetcherOptions"];

/**
 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
 *
 * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
 */
export const fetchRateLimitGet = (variables: RateLimitGetVariables) =>
  githubFetch<
    Schemas.RateLimitOverview,
    RateLimitGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/rate_limit", method: "get", ...variables });

/**
 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
 *
 * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
 */
export const useRateLimitGet = <TData = Schemas.RateLimitOverview>(
  variables: RateLimitGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RateLimitOverview,
      RateLimitGetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RateLimitOverview,
    RateLimitGetError,
    TData
  >(
    queryKeyFn({ path: "/rate_limit", operationId: "rateLimitGet", variables }),
    () => fetchRateLimitGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsDeleteLegacyPathParams = {
  reactionId: number;
};

export type ReactionsDeleteLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type ReactionsDeleteLegacyVariables = {
  pathParams: ReactionsDeleteLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
 *
 * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).
 */
export const fetchReactionsDeleteLegacy = (
  variables: ReactionsDeleteLegacyVariables
) =>
  githubFetch<
    undefined,
    ReactionsDeleteLegacyError,
    undefined,
    {},
    {},
    ReactionsDeleteLegacyPathParams
  >({ url: "/reactions/{reactionId}", method: "delete", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
 *
 * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).
 */
export const useReactionsDeleteLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteLegacyError,
      ReactionsDeleteLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteLegacyError,
    ReactionsDeleteLegacyVariables
  >(
    (variables: ReactionsDeleteLegacyVariables) =>
      fetchReactionsDeleteLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeletePathParams = {
  owner: string;
  repo: string;
};

export type ReposDeleteError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: {
        documentation_url?: string;
        message?: string;
      };
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposDeleteVariables = {
  pathParams: ReposDeletePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
 *
 * If an organization owner has configured the organization to prevent members from deleting organization-owned
 * repositories, you will get a `403 Forbidden` response.
 */
export const fetchReposDelete = (variables: ReposDeleteVariables) =>
  githubFetch<
    undefined,
    ReposDeleteError,
    undefined,
    {},
    {},
    ReposDeletePathParams
  >({ url: "/repos/{owner}/{repo}", method: "delete", ...variables });

/**
 * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
 *
 * If an organization owner has configured the organization to prevent members from deleting organization-owned
 * repositories, you will get a `403 Forbidden` response.
 */
export const useReposDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteError,
      ReposDeleteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteError,
    ReposDeleteVariables
  >(
    (variables: ReposDeleteVariables) =>
      fetchReposDelete({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposGetVariables = {
  pathParams: ReposGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.
 *
 * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
 */
export const fetchReposGet = (variables: ReposGetVariables) =>
  githubFetch<
    Schemas.FullRepository,
    ReposGetError,
    undefined,
    {},
    {},
    ReposGetPathParams
  >({ url: "/repos/{owner}/{repo}", method: "get", ...variables });

/**
 * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.
 *
 * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
 */
export const useReposGet = <TData = Schemas.FullRepository>(
  variables: ReposGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FullRepository, ReposGetError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.FullRepository, ReposGetError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}",
      operationId: "reposGet",
      variables,
    }),
    () => fetchReposGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdatePathParams = {
  owner: string;
  repo: string;
};

export type ReposUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposUpdateRequestBody = {
  /*
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   *
   * @default true
   */
  allow_merge_commit?: boolean;
  /*
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   *
   * @default true
   */
  allow_rebase_merge?: boolean;
  /*
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   *
   * @default true
   */
  allow_squash_merge?: boolean;
  /*
   * `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
   *
   * @default false
   */
  archived?: boolean;
  /*
   * Updates the default branch for this repository.
   */
  default_branch?: string;
  /*
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   *
   * @default false
   */
  delete_branch_on_merge?: boolean;
  /*
   * A short description of the repository.
   */
  description?: string;
  /*
   * Either `true` to enable issues for this repository or `false` to disable them.
   *
   * @default true
   */
  has_issues?: boolean;
  /*
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   *
   * @default true
   */
  has_projects?: boolean;
  /*
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   *
   * @default true
   */
  has_wiki?: boolean;
  /*
   * A URL with more information about the repository.
   */
  homepage?: string;
  /*
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   *
   * @default false
   */
  is_template?: boolean;
  /*
   * The name of the repository.
   */
  name?: string;
  /*
   * Either `true` to make the repository private or `false` to make it public. Default: `false`.
   * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
   *
   * @default false
   */
  private?: boolean;
  /*
   * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.
   */
  visibility?: "public" | "private" | "visibility" | "internal";
};

export type ReposUpdateVariables = {
  body?: ReposUpdateRequestBody;
  pathParams: ReposUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
 */
export const fetchReposUpdate = (variables: ReposUpdateVariables) =>
  githubFetch<
    Schemas.FullRepository,
    ReposUpdateError,
    ReposUpdateRequestBody,
    {},
    {},
    ReposUpdatePathParams
  >({ url: "/repos/{owner}/{repo}", method: "patch", ...variables });

/**
 * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
 */
export const useReposUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FullRepository,
      ReposUpdateError,
      ReposUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.FullRepository,
    ReposUpdateError,
    ReposUpdateVariables
  >(
    (variables: ReposUpdateVariables) =>
      fetchReposUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsListArtifactsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListArtifactsForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListArtifactsForRepoError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListArtifactsForRepoResponse = {
  artifacts: Schemas.Artifact[];
  total_count: number;
};

export type ActionsListArtifactsForRepoVariables = {
  pathParams: ActionsListArtifactsForRepoPathParams;
  queryParams?: ActionsListArtifactsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListArtifactsForRepo = (
  variables: ActionsListArtifactsForRepoVariables
) =>
  githubFetch<
    ActionsListArtifactsForRepoResponse,
    ActionsListArtifactsForRepoError,
    undefined,
    {},
    ActionsListArtifactsForRepoQueryParams,
    ActionsListArtifactsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/artifacts",
    method: "get",
    ...variables,
  });

/**
 * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListArtifactsForRepo = <
  TData = ActionsListArtifactsForRepoResponse
>(
  variables: ActionsListArtifactsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListArtifactsForRepoResponse,
      ActionsListArtifactsForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListArtifactsForRepoResponse,
    ActionsListArtifactsForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/artifacts",
      operationId: "actionsListArtifactsForRepo",
      variables,
    }),
    () => fetchActionsListArtifactsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteArtifactPathParams = {
  owner: string;
  repo: string;
  /*
   * artifact_id parameter
   */
  artifactId: number;
};

export type ActionsDeleteArtifactError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteArtifactVariables = {
  pathParams: ActionsDeleteArtifactPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsDeleteArtifact = (
  variables: ActionsDeleteArtifactVariables
) =>
  githubFetch<
    undefined,
    ActionsDeleteArtifactError,
    undefined,
    {},
    {},
    ActionsDeleteArtifactPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsDeleteArtifact = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteArtifactError,
      ActionsDeleteArtifactVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteArtifactError,
    ActionsDeleteArtifactVariables
  >(
    (variables: ActionsDeleteArtifactVariables) =>
      fetchActionsDeleteArtifact({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetArtifactPathParams = {
  owner: string;
  repo: string;
  /*
   * artifact_id parameter
   */
  artifactId: number;
};

export type ActionsGetArtifactError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetArtifactVariables = {
  pathParams: ActionsGetArtifactPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetArtifact = (
  variables: ActionsGetArtifactVariables
) =>
  githubFetch<
    Schemas.Artifact,
    ActionsGetArtifactError,
    undefined,
    {},
    {},
    ActionsGetArtifactPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetArtifact = <TData = Schemas.Artifact>(
  variables: ActionsGetArtifactVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Artifact,
      ActionsGetArtifactError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Artifact, ActionsGetArtifactError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
      operationId: "actionsGetArtifact",
      variables,
    }),
    () => fetchActionsGetArtifact({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDownloadArtifactPathParams = {
  owner: string;
  repo: string;
  /*
   * artifact_id parameter
   */
  artifactId: number;
  archiveFormat: string;
};

export type ActionsDownloadArtifactError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDownloadArtifactVariables = {
  pathParams: ActionsDownloadArtifactPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
 * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsDownloadArtifact = (
  variables: ActionsDownloadArtifactVariables
) =>
  githubFetch<
    undefined,
    ActionsDownloadArtifactError,
    undefined,
    {},
    {},
    ActionsDownloadArtifactPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}/{archiveFormat}",
    method: "get",
    ...variables,
  });

/**
 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
 * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsDownloadArtifact = <TData = undefined>(
  variables: ActionsDownloadArtifactVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ActionsDownloadArtifactError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, ActionsDownloadArtifactError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}",
      operationId: "actionsDownloadArtifact",
      variables,
    }),
    () => fetchActionsDownloadArtifact({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetJobForWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * job_id parameter
   */
  jobId: number;
};

export type ActionsGetJobForWorkflowRunError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetJobForWorkflowRunVariables = {
  pathParams: ActionsGetJobForWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetJobForWorkflowRun = (
  variables: ActionsGetJobForWorkflowRunVariables
) =>
  githubFetch<
    Schemas.Job,
    ActionsGetJobForWorkflowRunError,
    undefined,
    {},
    {},
    ActionsGetJobForWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/jobs/{jobId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetJobForWorkflowRun = <TData = Schemas.Job>(
  variables: ActionsGetJobForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Job,
      ActionsGetJobForWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Job,
    ActionsGetJobForWorkflowRunError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/jobs/{job_id}",
      operationId: "actionsGetJobForWorkflowRun",
      variables,
    }),
    () => fetchActionsGetJobForWorkflowRun({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDownloadJobLogsForWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * job_id parameter
   */
  jobId: number;
};

export type ActionsDownloadJobLogsForWorkflowRunError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDownloadJobLogsForWorkflowRunVariables = {
  pathParams: ActionsDownloadJobLogsForWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
 * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
 * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
 * have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsDownloadJobLogsForWorkflowRun = (
  variables: ActionsDownloadJobLogsForWorkflowRunVariables
) =>
  githubFetch<
    undefined,
    ActionsDownloadJobLogsForWorkflowRunError,
    undefined,
    {},
    {},
    ActionsDownloadJobLogsForWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/jobs/{jobId}/logs",
    method: "get",
    ...variables,
  });

/**
 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
 * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
 * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
 * have the `actions:read` permission to use this endpoint.
 */
export const useActionsDownloadJobLogsForWorkflowRun = <TData = undefined>(
  variables: ActionsDownloadJobLogsForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ActionsDownloadJobLogsForWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ActionsDownloadJobLogsForWorkflowRunError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs",
      operationId: "actionsDownloadJobLogsForWorkflowRun",
      variables,
    }),
    () =>
      fetchActionsDownloadJobLogsForWorkflowRun({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetGithubActionsPermissionsRepositoryPathParams = {
  owner: string;
  repo: string;
};

export type ActionsGetGithubActionsPermissionsRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetGithubActionsPermissionsRepositoryVariables = {
  pathParams: ActionsGetGithubActionsPermissionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsGetGithubActionsPermissionsRepository = (
  variables: ActionsGetGithubActionsPermissionsRepositoryVariables
) =>
  githubFetch<
    Schemas.ActionsRepositoryPermissions,
    ActionsGetGithubActionsPermissionsRepositoryError,
    undefined,
    {},
    {},
    ActionsGetGithubActionsPermissionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions",
    method: "get",
    ...variables,
  });

/**
 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsGetGithubActionsPermissionsRepository = <
  TData = Schemas.ActionsRepositoryPermissions
>(
  variables: ActionsGetGithubActionsPermissionsRepositoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsRepositoryPermissions,
      ActionsGetGithubActionsPermissionsRepositoryError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsRepositoryPermissions,
    ActionsGetGithubActionsPermissionsRepositoryError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/permissions",
      operationId: "actionsGetGithubActionsPermissionsRepository",
      variables,
    }),
    () =>
      fetchActionsGetGithubActionsPermissionsRepository({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetGithubActionsPermissionsRepositoryPathParams = {
  owner: string;
  repo: string;
};

export type ActionsSetGithubActionsPermissionsRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetGithubActionsPermissionsRepositoryRequestBody = {
  allowed_actions?: Schemas.AllowedActions;
  enabled: Schemas.ActionsEnabled;
};

export type ActionsSetGithubActionsPermissionsRepositoryVariables = {
  body: ActionsSetGithubActionsPermissionsRepositoryRequestBody;
  pathParams: ActionsSetGithubActionsPermissionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
 *
 * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsSetGithubActionsPermissionsRepository = (
  variables: ActionsSetGithubActionsPermissionsRepositoryVariables
) =>
  githubFetch<
    undefined,
    ActionsSetGithubActionsPermissionsRepositoryError,
    ActionsSetGithubActionsPermissionsRepositoryRequestBody,
    {},
    {},
    ActionsSetGithubActionsPermissionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions",
    method: "put",
    ...variables,
  });

/**
 * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
 *
 * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsSetGithubActionsPermissionsRepository = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetGithubActionsPermissionsRepositoryError,
      ActionsSetGithubActionsPermissionsRepositoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetGithubActionsPermissionsRepositoryError,
    ActionsSetGithubActionsPermissionsRepositoryVariables
  >(
    (variables: ActionsSetGithubActionsPermissionsRepositoryVariables) =>
      fetchActionsSetGithubActionsPermissionsRepository({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsGetAllowedActionsRepositoryPathParams = {
  owner: string;
  repo: string;
};

export type ActionsGetAllowedActionsRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetAllowedActionsRepositoryVariables = {
  pathParams: ActionsGetAllowedActionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsGetAllowedActionsRepository = (
  variables: ActionsGetAllowedActionsRepositoryVariables
) =>
  githubFetch<
    Schemas.SelectedActions,
    ActionsGetAllowedActionsRepositoryError,
    undefined,
    {},
    {},
    ActionsGetAllowedActionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions/selected-actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsGetAllowedActionsRepository = <
  TData = Schemas.SelectedActions
>(
  variables: ActionsGetAllowedActionsRepositoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SelectedActions,
      ActionsGetAllowedActionsRepositoryError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SelectedActions,
    ActionsGetAllowedActionsRepositoryError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/permissions/selected-actions",
      operationId: "actionsGetAllowedActionsRepository",
      variables,
    }),
    () =>
      fetchActionsGetAllowedActionsRepository({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetAllowedActionsRepositoryPathParams = {
  owner: string;
  repo: string;
};

export type ActionsSetAllowedActionsRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetAllowedActionsRepositoryVariables = {
  body: Schemas.SelectedActions;
  pathParams: ActionsSetAllowedActionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
 *
 * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsSetAllowedActionsRepository = (
  variables: ActionsSetAllowedActionsRepositoryVariables
) =>
  githubFetch<
    undefined,
    ActionsSetAllowedActionsRepositoryError,
    Schemas.SelectedActions,
    {},
    {},
    ActionsSetAllowedActionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions/selected-actions",
    method: "put",
    ...variables,
  });

/**
 * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
 *
 * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsSetAllowedActionsRepository = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetAllowedActionsRepositoryError,
      ActionsSetAllowedActionsRepositoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetAllowedActionsRepositoryError,
    ActionsSetAllowedActionsRepositoryVariables
  >(
    (variables: ActionsSetAllowedActionsRepositoryVariables) =>
      fetchActionsSetAllowedActionsRepository({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListSelfHostedRunnersForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListSelfHostedRunnersForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListSelfHostedRunnersForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelfHostedRunnersForRepoResponse = {
  runners: Schemas.Runner[];
  total_count: number;
};

export type ActionsListSelfHostedRunnersForRepoVariables = {
  pathParams: ActionsListSelfHostedRunnersForRepoPathParams;
  queryParams?: ActionsListSelfHostedRunnersForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const fetchActionsListSelfHostedRunnersForRepo = (
  variables: ActionsListSelfHostedRunnersForRepoVariables
) =>
  githubFetch<
    ActionsListSelfHostedRunnersForRepoResponse,
    ActionsListSelfHostedRunnersForRepoError,
    undefined,
    {},
    ActionsListSelfHostedRunnersForRepoQueryParams,
    ActionsListSelfHostedRunnersForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners",
    method: "get",
    ...variables,
  });

/**
 * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const useActionsListSelfHostedRunnersForRepo = <
  TData = ActionsListSelfHostedRunnersForRepoResponse
>(
  variables: ActionsListSelfHostedRunnersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnersForRepoResponse,
      ActionsListSelfHostedRunnersForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelfHostedRunnersForRepoResponse,
    ActionsListSelfHostedRunnersForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runners",
      operationId: "actionsListSelfHostedRunnersForRepo",
      variables,
    }),
    () =>
      fetchActionsListSelfHostedRunnersForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListRunnerApplicationsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListRunnerApplicationsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListRunnerApplicationsForRepoResponse =
  Schemas.RunnerApplication[];

export type ActionsListRunnerApplicationsForRepoVariables = {
  pathParams: ActionsListRunnerApplicationsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const fetchActionsListRunnerApplicationsForRepo = (
  variables: ActionsListRunnerApplicationsForRepoVariables
) =>
  githubFetch<
    ActionsListRunnerApplicationsForRepoResponse,
    ActionsListRunnerApplicationsForRepoError,
    undefined,
    {},
    {},
    ActionsListRunnerApplicationsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/downloads",
    method: "get",
    ...variables,
  });

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const useActionsListRunnerApplicationsForRepo = <
  TData = ActionsListRunnerApplicationsForRepoResponse
>(
  variables: ActionsListRunnerApplicationsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRunnerApplicationsForRepoResponse,
      ActionsListRunnerApplicationsForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRunnerApplicationsForRepoResponse,
    ActionsListRunnerApplicationsForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runners/downloads",
      operationId: "actionsListRunnerApplicationsForRepo",
      variables,
    }),
    () =>
      fetchActionsListRunnerApplicationsForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateRegistrationTokenForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsCreateRegistrationTokenForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateRegistrationTokenForRepoVariables = {
  pathParams: ActionsCreateRegistrationTokenForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
 * using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
 * ```
 */
export const fetchActionsCreateRegistrationTokenForRepo = (
  variables: ActionsCreateRegistrationTokenForRepoVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    ActionsCreateRegistrationTokenForRepoError,
    undefined,
    {},
    {},
    ActionsCreateRegistrationTokenForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/registration-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
 * using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
 * ```
 */
export const useActionsCreateRegistrationTokenForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      ActionsCreateRegistrationTokenForRepoError,
      ActionsCreateRegistrationTokenForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    ActionsCreateRegistrationTokenForRepoError,
    ActionsCreateRegistrationTokenForRepoVariables
  >(
    (variables: ActionsCreateRegistrationTokenForRepoVariables) =>
      fetchActionsCreateRegistrationTokenForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsCreateRemoveTokenForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsCreateRemoveTokenForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateRemoveTokenForRepoVariables = {
  pathParams: ActionsCreateRemoveTokenForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const fetchActionsCreateRemoveTokenForRepo = (
  variables: ActionsCreateRemoveTokenForRepoVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    ActionsCreateRemoveTokenForRepoError,
    undefined,
    {},
    {},
    ActionsCreateRemoveTokenForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/remove-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const useActionsCreateRemoveTokenForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      ActionsCreateRemoveTokenForRepoError,
      ActionsCreateRemoveTokenForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    ActionsCreateRemoveTokenForRepoError,
    ActionsCreateRemoveTokenForRepoVariables
  >(
    (variables: ActionsCreateRemoveTokenForRepoVariables) =>
      fetchActionsCreateRemoveTokenForRepo({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsDeleteSelfHostedRunnerFromRepoPathParams = {
  owner: string;
  repo: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsDeleteSelfHostedRunnerFromRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteSelfHostedRunnerFromRepoVariables = {
  pathParams: ActionsDeleteSelfHostedRunnerFromRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `repo`
 * scope to use this endpoint.
 */
export const fetchActionsDeleteSelfHostedRunnerFromRepo = (
  variables: ActionsDeleteSelfHostedRunnerFromRepoVariables
) =>
  githubFetch<
    undefined,
    ActionsDeleteSelfHostedRunnerFromRepoError,
    undefined,
    {},
    {},
    ActionsDeleteSelfHostedRunnerFromRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/{runnerId}",
    method: "delete",
    ...variables,
  });

/**
 * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `repo`
 * scope to use this endpoint.
 */
export const useActionsDeleteSelfHostedRunnerFromRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteSelfHostedRunnerFromRepoError,
      ActionsDeleteSelfHostedRunnerFromRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteSelfHostedRunnerFromRepoError,
    ActionsDeleteSelfHostedRunnerFromRepoVariables
  >(
    (variables: ActionsDeleteSelfHostedRunnerFromRepoVariables) =>
      fetchActionsDeleteSelfHostedRunnerFromRepo({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsGetSelfHostedRunnerForRepoPathParams = {
  owner: string;
  repo: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsGetSelfHostedRunnerForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetSelfHostedRunnerForRepoVariables = {
  pathParams: ActionsGetSelfHostedRunnerForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const fetchActionsGetSelfHostedRunnerForRepo = (
  variables: ActionsGetSelfHostedRunnerForRepoVariables
) =>
  githubFetch<
    Schemas.Runner,
    ActionsGetSelfHostedRunnerForRepoError,
    undefined,
    {},
    {},
    ActionsGetSelfHostedRunnerForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/{runnerId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const useActionsGetSelfHostedRunnerForRepo = <TData = Schemas.Runner>(
  variables: ActionsGetSelfHostedRunnerForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Runner,
      ActionsGetSelfHostedRunnerForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Runner,
    ActionsGetSelfHostedRunnerForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runners/{runner_id}",
      operationId: "actionsGetSelfHostedRunnerForRepo",
      variables,
    }),
    () =>
      fetchActionsGetSelfHostedRunnerForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListWorkflowRunsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListWorkflowRunsForRepoQueryParams = {
  /*
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  actor?: string;
  /*
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  branch?: string;
  /*
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  event?: string;
  /*
   * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)."
   */
  status?:
    | "completed"
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "skipped"
    | "stale"
    | "success"
    | "timed_out"
    | "in_progress"
    | "queued"
    | "requested"
    | "waiting";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListWorkflowRunsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListWorkflowRunsForRepoResponse = {
  total_count: number;
  workflow_runs: Schemas.WorkflowRun[];
};

export type ActionsListWorkflowRunsForRepoVariables = {
  pathParams: ActionsListWorkflowRunsForRepoPathParams;
  queryParams?: ActionsListWorkflowRunsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListWorkflowRunsForRepo = (
  variables: ActionsListWorkflowRunsForRepoVariables
) =>
  githubFetch<
    ActionsListWorkflowRunsForRepoResponse,
    ActionsListWorkflowRunsForRepoError,
    undefined,
    {},
    ActionsListWorkflowRunsForRepoQueryParams,
    ActionsListWorkflowRunsForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/actions/runs", method: "get", ...variables });

/**
 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListWorkflowRunsForRepo = <
  TData = ActionsListWorkflowRunsForRepoResponse
>(
  variables: ActionsListWorkflowRunsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunsForRepoResponse,
      ActionsListWorkflowRunsForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListWorkflowRunsForRepoResponse,
    ActionsListWorkflowRunsForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs",
      operationId: "actionsListWorkflowRunsForRepo",
      variables,
    }),
    () =>
      fetchActionsListWorkflowRunsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsDeleteWorkflowRunError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteWorkflowRunVariables = {
  pathParams: ActionsDeleteWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
 * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
 * this endpoint.
 */
export const fetchActionsDeleteWorkflowRun = (
  variables: ActionsDeleteWorkflowRunVariables
) =>
  githubFetch<
    undefined,
    ActionsDeleteWorkflowRunError,
    undefined,
    {},
    {},
    ActionsDeleteWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}",
    method: "delete",
    ...variables,
  });

/**
 * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
 * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
 * this endpoint.
 */
export const useActionsDeleteWorkflowRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteWorkflowRunError,
      ActionsDeleteWorkflowRunVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteWorkflowRunError,
    ActionsDeleteWorkflowRunVariables
  >(
    (variables: ActionsDeleteWorkflowRunVariables) =>
      fetchActionsDeleteWorkflowRun({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsGetWorkflowRunError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetWorkflowRunVariables = {
  pathParams: ActionsGetWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflowRun = (
  variables: ActionsGetWorkflowRunVariables
) =>
  githubFetch<
    Schemas.WorkflowRun,
    ActionsGetWorkflowRunError,
    undefined,
    {},
    {},
    ActionsGetWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflowRun = <TData = Schemas.WorkflowRun>(
  variables: ActionsGetWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowRun,
      ActionsGetWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WorkflowRun,
    ActionsGetWorkflowRunError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}",
      operationId: "actionsGetWorkflowRun",
      variables,
    }),
    () => fetchActionsGetWorkflowRun({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetReviewsForRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsGetReviewsForRunError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetReviewsForRunResponse = Schemas.EnvironmentApprovals[];

export type ActionsGetReviewsForRunVariables = {
  pathParams: ActionsGetReviewsForRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetReviewsForRun = (
  variables: ActionsGetReviewsForRunVariables
) =>
  githubFetch<
    ActionsGetReviewsForRunResponse,
    ActionsGetReviewsForRunError,
    undefined,
    {},
    {},
    ActionsGetReviewsForRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/approvals",
    method: "get",
    ...variables,
  });

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetReviewsForRun = <
  TData = ActionsGetReviewsForRunResponse
>(
  variables: ActionsGetReviewsForRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsGetReviewsForRunResponse,
      ActionsGetReviewsForRunError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsGetReviewsForRunResponse,
    ActionsGetReviewsForRunError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals",
      operationId: "actionsGetReviewsForRun",
      variables,
    }),
    () => fetchActionsGetReviewsForRun({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListWorkflowRunArtifactsPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsListWorkflowRunArtifactsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListWorkflowRunArtifactsError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListWorkflowRunArtifactsResponse = {
  artifacts: Schemas.Artifact[];
  total_count: number;
};

export type ActionsListWorkflowRunArtifactsVariables = {
  pathParams: ActionsListWorkflowRunArtifactsPathParams;
  queryParams?: ActionsListWorkflowRunArtifactsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListWorkflowRunArtifacts = (
  variables: ActionsListWorkflowRunArtifactsVariables
) =>
  githubFetch<
    ActionsListWorkflowRunArtifactsResponse,
    ActionsListWorkflowRunArtifactsError,
    undefined,
    {},
    ActionsListWorkflowRunArtifactsQueryParams,
    ActionsListWorkflowRunArtifactsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/artifacts",
    method: "get",
    ...variables,
  });

/**
 * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListWorkflowRunArtifacts = <
  TData = ActionsListWorkflowRunArtifactsResponse
>(
  variables: ActionsListWorkflowRunArtifactsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunArtifactsResponse,
      ActionsListWorkflowRunArtifactsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListWorkflowRunArtifactsResponse,
    ActionsListWorkflowRunArtifactsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
      operationId: "actionsListWorkflowRunArtifacts",
      variables,
    }),
    () =>
      fetchActionsListWorkflowRunArtifacts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCancelWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsCancelWorkflowRunError = Fetcher.ErrorWrapper<undefined>;

export type ActionsCancelWorkflowRunVariables = {
  pathParams: ActionsCancelWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsCancelWorkflowRun = (
  variables: ActionsCancelWorkflowRunVariables
) =>
  githubFetch<
    undefined,
    ActionsCancelWorkflowRunError,
    undefined,
    {},
    {},
    ActionsCancelWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/cancel",
    method: "post",
    ...variables,
  });

/**
 * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsCancelWorkflowRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsCancelWorkflowRunError,
      ActionsCancelWorkflowRunVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsCancelWorkflowRunError,
    ActionsCancelWorkflowRunVariables
  >(
    (variables: ActionsCancelWorkflowRunVariables) =>
      fetchActionsCancelWorkflowRun({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsListJobsForWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsListJobsForWorkflowRunQueryParams = {
  /*
   * Filters jobs by their `completed_at` timestamp. Can be one of:
   * \* `latest`: Returns jobs from the most recent execution of the workflow run.
   * \* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.
   *
   * @default latest
   */
  filter?: "latest" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListJobsForWorkflowRunError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListJobsForWorkflowRunResponse = {
  jobs: Schemas.Job[];
  total_count: number;
};

export type ActionsListJobsForWorkflowRunVariables = {
  pathParams: ActionsListJobsForWorkflowRunPathParams;
  queryParams?: ActionsListJobsForWorkflowRunQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const fetchActionsListJobsForWorkflowRun = (
  variables: ActionsListJobsForWorkflowRunVariables
) =>
  githubFetch<
    ActionsListJobsForWorkflowRunResponse,
    ActionsListJobsForWorkflowRunError,
    undefined,
    {},
    ActionsListJobsForWorkflowRunQueryParams,
    ActionsListJobsForWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/jobs",
    method: "get",
    ...variables,
  });

/**
 * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const useActionsListJobsForWorkflowRun = <
  TData = ActionsListJobsForWorkflowRunResponse
>(
  variables: ActionsListJobsForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListJobsForWorkflowRunResponse,
      ActionsListJobsForWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListJobsForWorkflowRunResponse,
    ActionsListJobsForWorkflowRunError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
      operationId: "actionsListJobsForWorkflowRun",
      variables,
    }),
    () =>
      fetchActionsListJobsForWorkflowRun({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteWorkflowRunLogsPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsDeleteWorkflowRunLogsError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteWorkflowRunLogsVariables = {
  pathParams: ActionsDeleteWorkflowRunLogsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsDeleteWorkflowRunLogs = (
  variables: ActionsDeleteWorkflowRunLogsVariables
) =>
  githubFetch<
    undefined,
    ActionsDeleteWorkflowRunLogsError,
    undefined,
    {},
    {},
    ActionsDeleteWorkflowRunLogsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/logs",
    method: "delete",
    ...variables,
  });

/**
 * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsDeleteWorkflowRunLogs = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteWorkflowRunLogsError,
      ActionsDeleteWorkflowRunLogsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteWorkflowRunLogsError,
    ActionsDeleteWorkflowRunLogsVariables
  >(
    (variables: ActionsDeleteWorkflowRunLogsVariables) =>
      fetchActionsDeleteWorkflowRunLogs({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsDownloadWorkflowRunLogsPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsDownloadWorkflowRunLogsError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDownloadWorkflowRunLogsVariables = {
  pathParams: ActionsDownloadWorkflowRunLogsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
 * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
 * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
 * the `actions:read` permission to use this endpoint.
 */
export const fetchActionsDownloadWorkflowRunLogs = (
  variables: ActionsDownloadWorkflowRunLogsVariables
) =>
  githubFetch<
    undefined,
    ActionsDownloadWorkflowRunLogsError,
    undefined,
    {},
    {},
    ActionsDownloadWorkflowRunLogsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/logs",
    method: "get",
    ...variables,
  });

/**
 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
 * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
 * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
 * the `actions:read` permission to use this endpoint.
 */
export const useActionsDownloadWorkflowRunLogs = <TData = undefined>(
  variables: ActionsDownloadWorkflowRunLogsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ActionsDownloadWorkflowRunLogsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ActionsDownloadWorkflowRunLogsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/logs",
      operationId: "actionsDownloadWorkflowRunLogs",
      variables,
    }),
    () =>
      fetchActionsDownloadWorkflowRunLogs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetPendingDeploymentsForRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsGetPendingDeploymentsForRunError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetPendingDeploymentsForRunResponse =
  Schemas.PendingDeployment[];

export type ActionsGetPendingDeploymentsForRunVariables = {
  pathParams: ActionsGetPendingDeploymentsForRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetPendingDeploymentsForRun = (
  variables: ActionsGetPendingDeploymentsForRunVariables
) =>
  githubFetch<
    ActionsGetPendingDeploymentsForRunResponse,
    ActionsGetPendingDeploymentsForRunError,
    undefined,
    {},
    {},
    ActionsGetPendingDeploymentsForRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/pending_deployments",
    method: "get",
    ...variables,
  });

/**
 * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetPendingDeploymentsForRun = <
  TData = ActionsGetPendingDeploymentsForRunResponse
>(
  variables: ActionsGetPendingDeploymentsForRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsGetPendingDeploymentsForRunResponse,
      ActionsGetPendingDeploymentsForRunError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsGetPendingDeploymentsForRunResponse,
    ActionsGetPendingDeploymentsForRunError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
      operationId: "actionsGetPendingDeploymentsForRun",
      variables,
    }),
    () =>
      fetchActionsGetPendingDeploymentsForRun({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsReviewPendingDeploymentsForRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsReviewPendingDeploymentsForRunError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsReviewPendingDeploymentsForRunResponse =
  Schemas.Deployment[];

export type ActionsReviewPendingDeploymentsForRunRequestBody = {
  /*
   * A comment to accompany the deployment review
   *
   * @example Ship it!
   */
  comment: string;
  /*
   * The list of environment ids to approve or reject
   *
   * @example 161171787
   * @example 161171795
   */
  environment_ids: number[];
  /*
   * Whether to approve or reject deployment to the specified environments. Must be one of: `approved` or `rejected`
   *
   * @example approved
   */
  state: "approved" | "rejected";
};

export type ActionsReviewPendingDeploymentsForRunVariables = {
  body: ActionsReviewPendingDeploymentsForRunRequestBody;
  pathParams: ActionsReviewPendingDeploymentsForRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Approve or reject pending deployments that are waiting on approval by a required reviewer.
 *
 * Anyone with read access to the repository contents and deployments can use this endpoint.
 */
export const fetchActionsReviewPendingDeploymentsForRun = (
  variables: ActionsReviewPendingDeploymentsForRunVariables
) =>
  githubFetch<
    ActionsReviewPendingDeploymentsForRunResponse,
    ActionsReviewPendingDeploymentsForRunError,
    ActionsReviewPendingDeploymentsForRunRequestBody,
    {},
    {},
    ActionsReviewPendingDeploymentsForRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/pending_deployments",
    method: "post",
    ...variables,
  });

/**
 * Approve or reject pending deployments that are waiting on approval by a required reviewer.
 *
 * Anyone with read access to the repository contents and deployments can use this endpoint.
 */
export const useActionsReviewPendingDeploymentsForRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ActionsReviewPendingDeploymentsForRunResponse,
      ActionsReviewPendingDeploymentsForRunError,
      ActionsReviewPendingDeploymentsForRunVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ActionsReviewPendingDeploymentsForRunResponse,
    ActionsReviewPendingDeploymentsForRunError,
    ActionsReviewPendingDeploymentsForRunVariables
  >(
    (variables: ActionsReviewPendingDeploymentsForRunVariables) =>
      fetchActionsReviewPendingDeploymentsForRun({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsReRunWorkflowPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsReRunWorkflowError = Fetcher.ErrorWrapper<undefined>;

export type ActionsReRunWorkflowVariables = {
  pathParams: ActionsReRunWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsReRunWorkflow = (
  variables: ActionsReRunWorkflowVariables
) =>
  githubFetch<
    undefined,
    ActionsReRunWorkflowError,
    undefined,
    {},
    {},
    ActionsReRunWorkflowPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/rerun",
    method: "post",
    ...variables,
  });

/**
 * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsReRunWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsReRunWorkflowError,
      ActionsReRunWorkflowVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsReRunWorkflowError,
    ActionsReRunWorkflowVariables
  >(
    (variables: ActionsReRunWorkflowVariables) =>
      fetchActionsReRunWorkflow({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetWorkflowRunUsagePathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsGetWorkflowRunUsageError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetWorkflowRunUsageVariables = {
  pathParams: ActionsGetWorkflowRunUsagePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflowRunUsage = (
  variables: ActionsGetWorkflowRunUsageVariables
) =>
  githubFetch<
    Schemas.WorkflowRunUsage,
    ActionsGetWorkflowRunUsageError,
    undefined,
    {},
    {},
    ActionsGetWorkflowRunUsagePathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/timing",
    method: "get",
    ...variables,
  });

/**
 * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflowRunUsage = <TData = Schemas.WorkflowRunUsage>(
  variables: ActionsGetWorkflowRunUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowRunUsage,
      ActionsGetWorkflowRunUsageError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WorkflowRunUsage,
    ActionsGetWorkflowRunUsageError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/timing",
      operationId: "actionsGetWorkflowRunUsage",
      variables,
    }),
    () => fetchActionsGetWorkflowRunUsage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListRepoSecretsPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListRepoSecretsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListRepoSecretsError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListRepoSecretsResponse = {
  secrets: Schemas.ActionsSecret[];
  total_count: number;
};

export type ActionsListRepoSecretsVariables = {
  pathParams: ActionsListRepoSecretsPathParams;
  queryParams?: ActionsListRepoSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsListRepoSecrets = (
  variables: ActionsListRepoSecretsVariables
) =>
  githubFetch<
    ActionsListRepoSecretsResponse,
    ActionsListRepoSecretsError,
    undefined,
    {},
    ActionsListRepoSecretsQueryParams,
    ActionsListRepoSecretsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets",
    method: "get",
    ...variables,
  });

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsListRepoSecrets = <
  TData = ActionsListRepoSecretsResponse
>(
  variables: ActionsListRepoSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoSecretsResponse,
      ActionsListRepoSecretsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRepoSecretsResponse,
    ActionsListRepoSecretsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/secrets",
      operationId: "actionsListRepoSecrets",
      variables,
    }),
    () => fetchActionsListRepoSecrets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetRepoPublicKeyPathParams = {
  owner: string;
  repo: string;
};

export type ActionsGetRepoPublicKeyError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetRepoPublicKeyVariables = {
  pathParams: ActionsGetRepoPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetRepoPublicKey = (
  variables: ActionsGetRepoPublicKeyVariables
) =>
  githubFetch<
    Schemas.ActionsPublicKey,
    ActionsGetRepoPublicKeyError,
    undefined,
    {},
    {},
    ActionsGetRepoPublicKeyPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets/public-key",
    method: "get",
    ...variables,
  });

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetRepoPublicKey = <TData = Schemas.ActionsPublicKey>(
  variables: ActionsGetRepoPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      ActionsGetRepoPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsPublicKey,
    ActionsGetRepoPublicKeyError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/secrets/public-key",
      operationId: "actionsGetRepoPublicKey",
      variables,
    }),
    () => fetchActionsGetRepoPublicKey({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteRepoSecretPathParams = {
  owner: string;
  repo: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsDeleteRepoSecretError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteRepoSecretVariables = {
  pathParams: ActionsDeleteRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsDeleteRepoSecret = (
  variables: ActionsDeleteRepoSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsDeleteRepoSecretError,
    undefined,
    {},
    {},
    ActionsDeleteRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets/{secretName}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsDeleteRepoSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteRepoSecretError,
      ActionsDeleteRepoSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteRepoSecretError,
    ActionsDeleteRepoSecretVariables
  >(
    (variables: ActionsDeleteRepoSecretVariables) =>
      fetchActionsDeleteRepoSecret({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetRepoSecretPathParams = {
  owner: string;
  repo: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsGetRepoSecretError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetRepoSecretVariables = {
  pathParams: ActionsGetRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetRepoSecret = (
  variables: ActionsGetRepoSecretVariables
) =>
  githubFetch<
    Schemas.ActionsSecret,
    ActionsGetRepoSecretError,
    undefined,
    {},
    {},
    ActionsGetRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets/{secretName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetRepoSecret = <TData = Schemas.ActionsSecret>(
  variables: ActionsGetRepoSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsSecret,
      ActionsGetRepoSecretError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsSecret,
    ActionsGetRepoSecretError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
      operationId: "actionsGetRepoSecret",
      variables,
    }),
    () => fetchActionsGetRepoSecret({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateOrUpdateRepoSecretPathParams = {
  owner: string;
  repo: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsCreateOrUpdateRepoSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateOrUpdateRepoSecretRequestBody = {
  /*
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /*
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
};

export type ActionsCreateOrUpdateRepoSecretVariables = {
  body?: ActionsCreateOrUpdateRepoSecretRequestBody;
  pathParams: ActionsCreateOrUpdateRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchActionsCreateOrUpdateRepoSecret = (
  variables: ActionsCreateOrUpdateRepoSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsCreateOrUpdateRepoSecretError,
    ActionsCreateOrUpdateRepoSecretRequestBody,
    {},
    {},
    ActionsCreateOrUpdateRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets/{secretName}",
    method: "put",
    ...variables,
  });

/**
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useActionsCreateOrUpdateRepoSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsCreateOrUpdateRepoSecretError,
      ActionsCreateOrUpdateRepoSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsCreateOrUpdateRepoSecretError,
    ActionsCreateOrUpdateRepoSecretVariables
  >(
    (variables: ActionsCreateOrUpdateRepoSecretVariables) =>
      fetchActionsCreateOrUpdateRepoSecret({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsListRepoWorkflowsPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListRepoWorkflowsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListRepoWorkflowsError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListRepoWorkflowsResponse = {
  total_count: number;
  workflows: Schemas.Workflow[];
};

export type ActionsListRepoWorkflowsVariables = {
  pathParams: ActionsListRepoWorkflowsPathParams;
  queryParams?: ActionsListRepoWorkflowsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListRepoWorkflows = (
  variables: ActionsListRepoWorkflowsVariables
) =>
  githubFetch<
    ActionsListRepoWorkflowsResponse,
    ActionsListRepoWorkflowsError,
    undefined,
    {},
    ActionsListRepoWorkflowsQueryParams,
    ActionsListRepoWorkflowsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows",
    method: "get",
    ...variables,
  });

/**
 * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListRepoWorkflows = <
  TData = ActionsListRepoWorkflowsResponse
>(
  variables: ActionsListRepoWorkflowsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoWorkflowsResponse,
      ActionsListRepoWorkflowsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRepoWorkflowsResponse,
    ActionsListRepoWorkflowsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/workflows",
      operationId: "actionsListRepoWorkflows",
      variables,
    }),
    () => fetchActionsListRepoWorkflows({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetWorkflowPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsGetWorkflowError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetWorkflowVariables = {
  pathParams: ActionsGetWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflow = (
  variables: ActionsGetWorkflowVariables
) =>
  githubFetch<
    Schemas.Workflow,
    ActionsGetWorkflowError,
    undefined,
    {},
    {},
    ActionsGetWorkflowPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflow = <TData = Schemas.Workflow>(
  variables: ActionsGetWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Workflow,
      ActionsGetWorkflowError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Workflow, ActionsGetWorkflowError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}",
      operationId: "actionsGetWorkflow",
      variables,
    }),
    () => fetchActionsGetWorkflow({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDisableWorkflowPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsDisableWorkflowError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDisableWorkflowVariables = {
  pathParams: ActionsDisableWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsDisableWorkflow = (
  variables: ActionsDisableWorkflowVariables
) =>
  githubFetch<
    undefined,
    ActionsDisableWorkflowError,
    undefined,
    {},
    {},
    ActionsDisableWorkflowPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/disable",
    method: "put",
    ...variables,
  });

/**
 * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsDisableWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDisableWorkflowError,
      ActionsDisableWorkflowVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDisableWorkflowError,
    ActionsDisableWorkflowVariables
  >(
    (variables: ActionsDisableWorkflowVariables) =>
      fetchActionsDisableWorkflow({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsCreateWorkflowDispatchPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsCreateWorkflowDispatchError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateWorkflowDispatchRequestBody = {
  /*
   * Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
   *
   * @maxProperties 10
   */
  inputs?: {
    [key: string]: string;
  };
  /*
   * The git reference for the workflow. The reference can be a branch or tag name.
   */
  ref: string;
};

export type ActionsCreateWorkflowDispatchVariables = {
  body: ActionsCreateWorkflowDispatchRequestBody;
  pathParams: ActionsCreateWorkflowDispatchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
 */
export const fetchActionsCreateWorkflowDispatch = (
  variables: ActionsCreateWorkflowDispatchVariables
) =>
  githubFetch<
    undefined,
    ActionsCreateWorkflowDispatchError,
    ActionsCreateWorkflowDispatchRequestBody,
    {},
    {},
    ActionsCreateWorkflowDispatchPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/dispatches",
    method: "post",
    ...variables,
  });

/**
 * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
 */
export const useActionsCreateWorkflowDispatch = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsCreateWorkflowDispatchError,
      ActionsCreateWorkflowDispatchVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsCreateWorkflowDispatchError,
    ActionsCreateWorkflowDispatchVariables
  >(
    (variables: ActionsCreateWorkflowDispatchVariables) =>
      fetchActionsCreateWorkflowDispatch({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsEnableWorkflowPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsEnableWorkflowError = Fetcher.ErrorWrapper<undefined>;

export type ActionsEnableWorkflowVariables = {
  pathParams: ActionsEnableWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsEnableWorkflow = (
  variables: ActionsEnableWorkflowVariables
) =>
  githubFetch<
    undefined,
    ActionsEnableWorkflowError,
    undefined,
    {},
    {},
    ActionsEnableWorkflowPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/enable",
    method: "put",
    ...variables,
  });

/**
 * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsEnableWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsEnableWorkflowError,
      ActionsEnableWorkflowVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsEnableWorkflowError,
    ActionsEnableWorkflowVariables
  >(
    (variables: ActionsEnableWorkflowVariables) =>
      fetchActionsEnableWorkflow({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsListWorkflowRunsPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsListWorkflowRunsQueryParams = {
  /*
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  actor?: string;
  /*
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  branch?: string;
  /*
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  event?: string;
  /*
   * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)."
   */
  status?:
    | "completed"
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "skipped"
    | "stale"
    | "success"
    | "timed_out"
    | "in_progress"
    | "queued"
    | "requested"
    | "waiting";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListWorkflowRunsError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListWorkflowRunsResponse = {
  total_count: number;
  workflow_runs: Schemas.WorkflowRun[];
};

export type ActionsListWorkflowRunsVariables = {
  pathParams: ActionsListWorkflowRunsPathParams;
  queryParams?: ActionsListWorkflowRunsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 */
export const fetchActionsListWorkflowRuns = (
  variables: ActionsListWorkflowRunsVariables
) =>
  githubFetch<
    ActionsListWorkflowRunsResponse,
    ActionsListWorkflowRunsError,
    undefined,
    {},
    ActionsListWorkflowRunsQueryParams,
    ActionsListWorkflowRunsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/runs",
    method: "get",
    ...variables,
  });

/**
 * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 */
export const useActionsListWorkflowRuns = <
  TData = ActionsListWorkflowRunsResponse
>(
  variables: ActionsListWorkflowRunsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunsResponse,
      ActionsListWorkflowRunsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListWorkflowRunsResponse,
    ActionsListWorkflowRunsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
      operationId: "actionsListWorkflowRuns",
      variables,
    }),
    () => fetchActionsListWorkflowRuns({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetWorkflowUsagePathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsGetWorkflowUsageError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetWorkflowUsageVariables = {
  pathParams: ActionsGetWorkflowUsagePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflowUsage = (
  variables: ActionsGetWorkflowUsageVariables
) =>
  githubFetch<
    Schemas.WorkflowUsage,
    ActionsGetWorkflowUsageError,
    undefined,
    {},
    {},
    ActionsGetWorkflowUsagePathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/timing",
    method: "get",
    ...variables,
  });

/**
 * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflowUsage = <TData = Schemas.WorkflowUsage>(
  variables: ActionsGetWorkflowUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowUsage,
      ActionsGetWorkflowUsageError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WorkflowUsage,
    ActionsGetWorkflowUsageError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
      operationId: "actionsGetWorkflowUsage",
      variables,
    }),
    () => fetchActionsGetWorkflowUsage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesListAssigneesPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListAssigneesQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListAssigneesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesListAssigneesResponse = Schemas.SimpleUser[];

export type IssuesListAssigneesVariables = {
  pathParams: IssuesListAssigneesPathParams;
  queryParams?: IssuesListAssigneesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
 */
export const fetchIssuesListAssignees = (
  variables: IssuesListAssigneesVariables
) =>
  githubFetch<
    IssuesListAssigneesResponse,
    IssuesListAssigneesError,
    undefined,
    {},
    IssuesListAssigneesQueryParams,
    IssuesListAssigneesPathParams
  >({ url: "/repos/{owner}/{repo}/assignees", method: "get", ...variables });

/**
 * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
 */
export const useIssuesListAssignees = <TData = IssuesListAssigneesResponse>(
  variables: IssuesListAssigneesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListAssigneesResponse,
      IssuesListAssigneesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListAssigneesResponse,
    IssuesListAssigneesError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/assignees",
      operationId: "issuesListAssignees",
      variables,
    }),
    () => fetchIssuesListAssignees({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesCheckUserCanBeAssignedPathParams = {
  owner: string;
  repo: string;
  assignee: string;
};

export type IssuesCheckUserCanBeAssignedError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.BasicError;
}>;

export type IssuesCheckUserCanBeAssignedVariables = {
  pathParams: IssuesCheckUserCanBeAssignedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks if a user has permission to be assigned to an issue in this repository.
 *
 * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const fetchIssuesCheckUserCanBeAssigned = (
  variables: IssuesCheckUserCanBeAssignedVariables
) =>
  githubFetch<
    undefined,
    IssuesCheckUserCanBeAssignedError,
    undefined,
    {},
    {},
    IssuesCheckUserCanBeAssignedPathParams
  >({
    url: "/repos/{owner}/{repo}/assignees/{assignee}",
    method: "get",
    ...variables,
  });

/**
 * Checks if a user has permission to be assigned to an issue in this repository.
 *
 * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const useIssuesCheckUserCanBeAssigned = <TData = undefined>(
  variables: IssuesCheckUserCanBeAssignedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      IssuesCheckUserCanBeAssignedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    IssuesCheckUserCanBeAssignedError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/assignees/{assignee}",
      operationId: "issuesCheckUserCanBeAssigned",
      variables,
    }),
    () =>
      fetchIssuesCheckUserCanBeAssigned({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDisableAutomatedSecurityFixesPathParams = {
  owner: string;
  repo: string;
};

export type ReposDisableAutomatedSecurityFixesError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposDisableAutomatedSecurityFixesVariables = {
  pathParams: ReposDisableAutomatedSecurityFixesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
 */
export const fetchReposDisableAutomatedSecurityFixes = (
  variables: ReposDisableAutomatedSecurityFixesVariables
) =>
  githubFetch<
    undefined,
    ReposDisableAutomatedSecurityFixesError,
    undefined,
    {},
    {},
    ReposDisableAutomatedSecurityFixesPathParams
  >({
    url: "/repos/{owner}/{repo}/automated-security-fixes",
    method: "delete",
    ...variables,
  });

/**
 * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
 */
export const useReposDisableAutomatedSecurityFixes = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDisableAutomatedSecurityFixesError,
      ReposDisableAutomatedSecurityFixesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDisableAutomatedSecurityFixesError,
    ReposDisableAutomatedSecurityFixesVariables
  >(
    (variables: ReposDisableAutomatedSecurityFixesVariables) =>
      fetchReposDisableAutomatedSecurityFixes({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposEnableAutomatedSecurityFixesPathParams = {
  owner: string;
  repo: string;
};

export type ReposEnableAutomatedSecurityFixesError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposEnableAutomatedSecurityFixesVariables = {
  pathParams: ReposEnableAutomatedSecurityFixesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
 */
export const fetchReposEnableAutomatedSecurityFixes = (
  variables: ReposEnableAutomatedSecurityFixesVariables
) =>
  githubFetch<
    undefined,
    ReposEnableAutomatedSecurityFixesError,
    undefined,
    {},
    {},
    ReposEnableAutomatedSecurityFixesPathParams
  >({
    url: "/repos/{owner}/{repo}/automated-security-fixes",
    method: "put",
    ...variables,
  });

/**
 * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
 */
export const useReposEnableAutomatedSecurityFixes = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposEnableAutomatedSecurityFixesError,
      ReposEnableAutomatedSecurityFixesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposEnableAutomatedSecurityFixesError,
    ReposEnableAutomatedSecurityFixesVariables
  >(
    (variables: ReposEnableAutomatedSecurityFixesVariables) =>
      fetchReposEnableAutomatedSecurityFixes({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposListBranchesPathParams = {
  owner: string;
  repo: string;
};

export type ReposListBranchesQueryParams = {
  /*
   * Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
   */
  protected?: boolean;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListBranchesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposListBranchesResponse = Schemas.ShortBranch[];

export type ReposListBranchesVariables = {
  pathParams: ReposListBranchesPathParams;
  queryParams?: ReposListBranchesQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListBranches = (variables: ReposListBranchesVariables) =>
  githubFetch<
    ReposListBranchesResponse,
    ReposListBranchesError,
    undefined,
    {},
    ReposListBranchesQueryParams,
    ReposListBranchesPathParams
  >({ url: "/repos/{owner}/{repo}/branches", method: "get", ...variables });

export const useReposListBranches = <TData = ReposListBranchesResponse>(
  variables: ReposListBranchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListBranchesResponse,
      ReposListBranchesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListBranchesResponse,
    ReposListBranchesError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches",
      operationId: "reposListBranches",
      variables,
    }),
    () => fetchReposListBranches({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetBranchPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetBranchError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type ReposGetBranchVariables = {
  pathParams: ReposGetBranchPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetBranch = (variables: ReposGetBranchVariables) =>
  githubFetch<
    Schemas.BranchWithProtection,
    ReposGetBranchError,
    undefined,
    {},
    {},
    ReposGetBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}",
    method: "get",
    ...variables,
  });

export const useReposGetBranch = <TData = Schemas.BranchWithProtection>(
  variables: ReposGetBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchWithProtection,
      ReposGetBranchError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.BranchWithProtection,
    ReposGetBranchError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}",
      operationId: "reposGetBranch",
      variables,
    }),
    () => fetchReposGetBranch({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposDeleteBranchProtectionError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ReposDeleteBranchProtectionVariables = {
  pathParams: ReposDeleteBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposDeleteBranchProtection = (
  variables: ReposDeleteBranchProtectionVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteBranchProtectionError,
    undefined,
    {},
    {},
    ReposDeleteBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposDeleteBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteBranchProtectionError,
      ReposDeleteBranchProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteBranchProtectionError,
    ReposDeleteBranchProtectionVariables
  >(
    (variables: ReposDeleteBranchProtectionVariables) =>
      fetchReposDeleteBranchProtection({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetBranchProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetBranchProtectionVariables = {
  pathParams: ReposGetBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetBranchProtection = (
  variables: ReposGetBranchProtectionVariables
) =>
  githubFetch<
    Schemas.BranchProtection,
    ReposGetBranchProtectionError,
    undefined,
    {},
    {},
    ReposGetBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetBranchProtection = <TData = Schemas.BranchProtection>(
  variables: ReposGetBranchProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchProtection,
      ReposGetBranchProtectionError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.BranchProtection,
    ReposGetBranchProtectionError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection",
      operationId: "reposGetBranchProtection",
      variables,
    }),
    () => fetchReposGetBranchProtection({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposUpdateBranchProtectionError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ReposUpdateBranchProtectionRequestBody = {
  /*
   * Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
   */
  allow_deletions?: boolean;
  /*
   * Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
   */
  allow_force_pushes?: boolean | null;
  /*
   * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
   */
  enforce_admins: boolean | null;
  /*
   * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
   */
  required_linear_history?: boolean;
  /*
   * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
   */
  required_pull_request_reviews: {
    /*
     * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
     */
    dismiss_stale_reviews?: boolean;
    /*
     * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
     */
    dismissal_restrictions?: {
      /*
       * The list of team `slug`s with dismissal access
       */
      teams?: string[];
      /*
       * The list of user `login`s with dismissal access
       */
      users?: string[];
    };
    /*
     * Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them.
     */
    require_code_owner_reviews?: boolean;
    /*
     * Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.
     */
    required_approving_review_count?: number;
  } | null;
  /*
   * Require status checks to pass before merging. Set to `null` to disable.
   */
  required_status_checks: {
    /*
     * The list of status checks to require in order to merge into this branch
     */
    contexts: string[];
    /*
     * Require branches to be up to date before merging.
     */
    strict: boolean;
  } | null;
  /*
   * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
   */
  restrictions: {
    /*
     * The list of app `slug`s with push access
     */
    apps?: string[];
    /*
     * The list of team `slug`s with push access
     */
    teams: string[];
    /*
     * The list of user `login`s with push access
     */
    users: string[];
  } | null;
};

export type ReposUpdateBranchProtectionVariables = {
  body: ReposUpdateBranchProtectionRequestBody;
  pathParams: ReposUpdateBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Protecting a branch requires admin or owner permissions to the repository.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 *
 * **Note**: The list of users, apps, and teams in total is limited to 100 items.
 */
export const fetchReposUpdateBranchProtection = (
  variables: ReposUpdateBranchProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranch,
    ReposUpdateBranchProtectionError,
    ReposUpdateBranchProtectionRequestBody,
    {},
    {},
    ReposUpdateBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection",
    method: "put",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Protecting a branch requires admin or owner permissions to the repository.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 *
 * **Note**: The list of users, apps, and teams in total is limited to 100 items.
 */
export const useReposUpdateBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranch,
      ReposUpdateBranchProtectionError,
      ReposUpdateBranchProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranch,
    ReposUpdateBranchProtectionError,
    ReposUpdateBranchProtectionVariables
  >(
    (variables: ReposUpdateBranchProtectionVariables) =>
      fetchReposUpdateBranchProtection({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteAdminBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposDeleteAdminBranchProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposDeleteAdminBranchProtectionVariables = {
  pathParams: ReposDeleteAdminBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const fetchReposDeleteAdminBranchProtection = (
  variables: ReposDeleteAdminBranchProtectionVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteAdminBranchProtectionError,
    undefined,
    {},
    {},
    ReposDeleteAdminBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const useReposDeleteAdminBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteAdminBranchProtectionError,
      ReposDeleteAdminBranchProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteAdminBranchProtectionError,
    ReposDeleteAdminBranchProtectionVariables
  >(
    (variables: ReposDeleteAdminBranchProtectionVariables) =>
      fetchReposDeleteAdminBranchProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetAdminBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetAdminBranchProtectionError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposGetAdminBranchProtectionVariables = {
  pathParams: ReposGetAdminBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetAdminBranchProtection = (
  variables: ReposGetAdminBranchProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    ReposGetAdminBranchProtectionError,
    undefined,
    {},
    {},
    ReposGetAdminBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetAdminBranchProtection = <
  TData = Schemas.ProtectedBranchAdminEnforced
>(
  variables: ReposGetAdminBranchProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProtectedBranchAdminEnforced,
      ReposGetAdminBranchProtectionError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProtectedBranchAdminEnforced,
    ReposGetAdminBranchProtectionError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
      operationId: "reposGetAdminBranchProtection",
      variables,
    }),
    () =>
      fetchReposGetAdminBranchProtection({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposSetAdminBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposSetAdminBranchProtectionError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposSetAdminBranchProtectionVariables = {
  pathParams: ReposSetAdminBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const fetchReposSetAdminBranchProtection = (
  variables: ReposSetAdminBranchProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    ReposSetAdminBranchProtectionError,
    undefined,
    {},
    {},
    ReposSetAdminBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const useReposSetAdminBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranchAdminEnforced,
      ReposSetAdminBranchProtectionError,
      ReposSetAdminBranchProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranchAdminEnforced,
    ReposSetAdminBranchProtectionError,
    ReposSetAdminBranchProtectionVariables
  >(
    (variables: ReposSetAdminBranchProtectionVariables) =>
      fetchReposSetAdminBranchProtection({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeletePullRequestReviewProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposDeletePullRequestReviewProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposDeletePullRequestReviewProtectionVariables = {
  pathParams: ReposDeletePullRequestReviewProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposDeletePullRequestReviewProtection = (
  variables: ReposDeletePullRequestReviewProtectionVariables
) =>
  githubFetch<
    undefined,
    ReposDeletePullRequestReviewProtectionError,
    undefined,
    {},
    {},
    ReposDeletePullRequestReviewProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposDeletePullRequestReviewProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeletePullRequestReviewProtectionError,
      ReposDeletePullRequestReviewProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeletePullRequestReviewProtectionError,
    ReposDeletePullRequestReviewProtectionVariables
  >(
    (variables: ReposDeletePullRequestReviewProtectionVariables) =>
      fetchReposDeletePullRequestReviewProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetPullRequestReviewProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetPullRequestReviewProtectionError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposGetPullRequestReviewProtectionVariables = {
  pathParams: ReposGetPullRequestReviewProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetPullRequestReviewProtection = (
  variables: ReposGetPullRequestReviewProtectionVariables
) =>
  githubFetch<
    undefined,
    ReposGetPullRequestReviewProtectionError,
    undefined,
    {},
    {},
    ReposGetPullRequestReviewProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetPullRequestReviewProtection = <TData = undefined>(
  variables: ReposGetPullRequestReviewProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ReposGetPullRequestReviewProtectionError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ReposGetPullRequestReviewProtectionError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
      operationId: "reposGetPullRequestReviewProtection",
      variables,
    }),
    () =>
      fetchReposGetPullRequestReviewProtection({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdatePullRequestReviewProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposUpdatePullRequestReviewProtectionError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposUpdatePullRequestReviewProtectionRequestBody = {
  /*
   * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
   */
  dismiss_stale_reviews?: boolean;
  /*
   * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
   */
  dismissal_restrictions?: {
    /*
     * The list of team `slug`s with dismissal access
     */
    teams?: string[];
    /*
     * The list of user `login`s with dismissal access
     */
    users?: string[];
  };
  /*
   * Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed.
   */
  require_code_owner_reviews?: boolean;
  /*
   * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.
   */
  required_approving_review_count?: number;
};

export type ReposUpdatePullRequestReviewProtectionVariables = {
  body?: ReposUpdatePullRequestReviewProtectionRequestBody;
  pathParams: ReposUpdatePullRequestReviewProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 */
export const fetchReposUpdatePullRequestReviewProtection = (
  variables: ReposUpdatePullRequestReviewProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranchPullRequestReview,
    ReposUpdatePullRequestReviewProtectionError,
    ReposUpdatePullRequestReviewProtectionRequestBody,
    {},
    {},
    ReposUpdatePullRequestReviewProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    method: "patch",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 */
export const useReposUpdatePullRequestReviewProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranchPullRequestReview,
      ReposUpdatePullRequestReviewProtectionError,
      ReposUpdatePullRequestReviewProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranchPullRequestReview,
    ReposUpdatePullRequestReviewProtectionError,
    ReposUpdatePullRequestReviewProtectionVariables
  >(
    (variables: ReposUpdatePullRequestReviewProtectionVariables) =>
      fetchReposUpdatePullRequestReviewProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposDeleteCommitSignatureProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposDeleteCommitSignatureProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposDeleteCommitSignatureProtectionVariables = {
  pathParams: ReposDeleteCommitSignatureProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const fetchReposDeleteCommitSignatureProtection = (
  variables: ReposDeleteCommitSignatureProtectionVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteCommitSignatureProtectionError,
    undefined,
    {},
    {},
    ReposDeleteCommitSignatureProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const useReposDeleteCommitSignatureProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteCommitSignatureProtectionError,
      ReposDeleteCommitSignatureProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteCommitSignatureProtectionError,
    ReposDeleteCommitSignatureProtectionVariables
  >(
    (variables: ReposDeleteCommitSignatureProtectionVariables) =>
      fetchReposDeleteCommitSignatureProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetCommitSignatureProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetCommitSignatureProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetCommitSignatureProtectionVariables = {
  pathParams: ReposGetCommitSignatureProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.
 *
 * **Note**: You must enable branch protection to require signed commits.
 */
export const fetchReposGetCommitSignatureProtection = (
  variables: ReposGetCommitSignatureProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    ReposGetCommitSignatureProtectionError,
    undefined,
    {},
    {},
    ReposGetCommitSignatureProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.
 *
 * **Note**: You must enable branch protection to require signed commits.
 */
export const useReposGetCommitSignatureProtection = <
  TData = Schemas.ProtectedBranchAdminEnforced
>(
  variables: ReposGetCommitSignatureProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProtectedBranchAdminEnforced,
      ReposGetCommitSignatureProtectionError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProtectedBranchAdminEnforced,
    ReposGetCommitSignatureProtectionError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
      operationId: "reposGetCommitSignatureProtection",
      variables,
    }),
    () =>
      fetchReposGetCommitSignatureProtection({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateCommitSignatureProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposCreateCommitSignatureProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposCreateCommitSignatureProtectionVariables = {
  pathParams: ReposCreateCommitSignatureProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const fetchReposCreateCommitSignatureProtection = (
  variables: ReposCreateCommitSignatureProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    ReposCreateCommitSignatureProtectionError,
    undefined,
    {},
    {},
    ReposCreateCommitSignatureProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const useReposCreateCommitSignatureProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranchAdminEnforced,
      ReposCreateCommitSignatureProtectionError,
      ReposCreateCommitSignatureProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranchAdminEnforced,
    ReposCreateCommitSignatureProtectionError,
    ReposCreateCommitSignatureProtectionVariables
  >(
    (variables: ReposCreateCommitSignatureProtectionVariables) =>
      fetchReposCreateCommitSignatureProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposRemoveStatusCheckProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRemoveStatusCheckProtectionError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposRemoveStatusCheckProtectionVariables = {
  pathParams: ReposRemoveStatusCheckProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposRemoveStatusCheckProtection = (
  variables: ReposRemoveStatusCheckProtectionVariables
) =>
  githubFetch<
    undefined,
    ReposRemoveStatusCheckProtectionError,
    undefined,
    {},
    {},
    ReposRemoveStatusCheckProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposRemoveStatusCheckProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposRemoveStatusCheckProtectionError,
      ReposRemoveStatusCheckProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposRemoveStatusCheckProtectionError,
    ReposRemoveStatusCheckProtectionVariables
  >(
    (variables: ReposRemoveStatusCheckProtectionVariables) =>
      fetchReposRemoveStatusCheckProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetStatusChecksProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetStatusChecksProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetStatusChecksProtectionVariables = {
  pathParams: ReposGetStatusChecksProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetStatusChecksProtection = (
  variables: ReposGetStatusChecksProtectionVariables
) =>
  githubFetch<
    Schemas.StatusCheckPolicy,
    ReposGetStatusChecksProtectionError,
    undefined,
    {},
    {},
    ReposGetStatusChecksProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetStatusChecksProtection = <
  TData = Schemas.StatusCheckPolicy
>(
  variables: ReposGetStatusChecksProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.StatusCheckPolicy,
      ReposGetStatusChecksProtectionError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.StatusCheckPolicy,
    ReposGetStatusChecksProtectionError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
      operationId: "reposGetStatusChecksProtection",
      variables,
    }),
    () =>
      fetchReposGetStatusChecksProtection({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateStatusCheckProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposUpdateStatusCheckProtectionError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposUpdateStatusCheckProtectionRequestBody = {
  /*
   * The list of status checks to require in order to merge into this branch
   */
  contexts?: string[];
  /*
   * Require branches to be up to date before merging.
   */
  strict?: boolean;
};

export type ReposUpdateStatusCheckProtectionVariables = {
  body?: ReposUpdateStatusCheckProtectionRequestBody;
  pathParams: ReposUpdateStatusCheckProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const fetchReposUpdateStatusCheckProtection = (
  variables: ReposUpdateStatusCheckProtectionVariables
) =>
  githubFetch<
    Schemas.StatusCheckPolicy,
    ReposUpdateStatusCheckProtectionError,
    ReposUpdateStatusCheckProtectionRequestBody,
    {},
    {},
    ReposUpdateStatusCheckProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    method: "patch",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const useReposUpdateStatusCheckProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.StatusCheckPolicy,
      ReposUpdateStatusCheckProtectionError,
      ReposUpdateStatusCheckProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.StatusCheckPolicy,
    ReposUpdateStatusCheckProtectionError,
    ReposUpdateStatusCheckProtectionVariables
  >(
    (variables: ReposUpdateStatusCheckProtectionVariables) =>
      fetchReposUpdateStatusCheckProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposRemoveStatusCheckContextsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRemoveStatusCheckContextsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposRemoveStatusCheckContextsResponse = string[];

export type ReposRemoveStatusCheckContextsRequestBody = {
  /*
   * contexts parameter
   */
  contexts: string[];
};

export type ReposRemoveStatusCheckContextsVariables = {
  body: ReposRemoveStatusCheckContextsRequestBody;
  pathParams: ReposRemoveStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposRemoveStatusCheckContexts = (
  variables: ReposRemoveStatusCheckContextsVariables
) =>
  githubFetch<
    ReposRemoveStatusCheckContextsResponse,
    ReposRemoveStatusCheckContextsError,
    ReposRemoveStatusCheckContextsRequestBody,
    {},
    {},
    ReposRemoveStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposRemoveStatusCheckContexts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveStatusCheckContextsResponse,
      ReposRemoveStatusCheckContextsError,
      ReposRemoveStatusCheckContextsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveStatusCheckContextsResponse,
    ReposRemoveStatusCheckContextsError,
    ReposRemoveStatusCheckContextsVariables
  >(
    (variables: ReposRemoveStatusCheckContextsVariables) =>
      fetchReposRemoveStatusCheckContexts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetAllStatusCheckContextsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetAllStatusCheckContextsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetAllStatusCheckContextsResponse = string[];

export type ReposGetAllStatusCheckContextsVariables = {
  pathParams: ReposGetAllStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetAllStatusCheckContexts = (
  variables: ReposGetAllStatusCheckContextsVariables
) =>
  githubFetch<
    ReposGetAllStatusCheckContextsResponse,
    ReposGetAllStatusCheckContextsError,
    undefined,
    {},
    {},
    ReposGetAllStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetAllStatusCheckContexts = <
  TData = ReposGetAllStatusCheckContextsResponse
>(
  variables: ReposGetAllStatusCheckContextsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAllStatusCheckContextsResponse,
      ReposGetAllStatusCheckContextsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetAllStatusCheckContextsResponse,
    ReposGetAllStatusCheckContextsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      operationId: "reposGetAllStatusCheckContexts",
      variables,
    }),
    () =>
      fetchReposGetAllStatusCheckContexts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposAddStatusCheckContextsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposAddStatusCheckContextsError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposAddStatusCheckContextsResponse = string[];

export type ReposAddStatusCheckContextsRequestBody = {
  /*
   * contexts parameter
   */
  contexts: string[];
};

export type ReposAddStatusCheckContextsVariables = {
  body: ReposAddStatusCheckContextsRequestBody;
  pathParams: ReposAddStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposAddStatusCheckContexts = (
  variables: ReposAddStatusCheckContextsVariables
) =>
  githubFetch<
    ReposAddStatusCheckContextsResponse,
    ReposAddStatusCheckContextsError,
    ReposAddStatusCheckContextsRequestBody,
    {},
    {},
    ReposAddStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposAddStatusCheckContexts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddStatusCheckContextsResponse,
      ReposAddStatusCheckContextsError,
      ReposAddStatusCheckContextsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddStatusCheckContextsResponse,
    ReposAddStatusCheckContextsError,
    ReposAddStatusCheckContextsVariables
  >(
    (variables: ReposAddStatusCheckContextsVariables) =>
      fetchReposAddStatusCheckContexts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposSetStatusCheckContextsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposSetStatusCheckContextsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposSetStatusCheckContextsResponse = string[];

export type ReposSetStatusCheckContextsRequestBody = {
  /*
   * contexts parameter
   */
  contexts: string[];
};

export type ReposSetStatusCheckContextsVariables = {
  body: ReposSetStatusCheckContextsRequestBody;
  pathParams: ReposSetStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposSetStatusCheckContexts = (
  variables: ReposSetStatusCheckContextsVariables
) =>
  githubFetch<
    ReposSetStatusCheckContextsResponse,
    ReposSetStatusCheckContextsError,
    ReposSetStatusCheckContextsRequestBody,
    {},
    {},
    ReposSetStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "put",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposSetStatusCheckContexts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetStatusCheckContextsResponse,
      ReposSetStatusCheckContextsError,
      ReposSetStatusCheckContextsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetStatusCheckContextsResponse,
    ReposSetStatusCheckContextsError,
    ReposSetStatusCheckContextsVariables
  >(
    (variables: ReposSetStatusCheckContextsVariables) =>
      fetchReposSetStatusCheckContexts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposDeleteAccessRestrictionsError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteAccessRestrictionsVariables = {
  pathParams: ReposDeleteAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Disables the ability to restrict who can push to this branch.
 */
export const fetchReposDeleteAccessRestrictions = (
  variables: ReposDeleteAccessRestrictionsVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteAccessRestrictionsError,
    undefined,
    {},
    {},
    ReposDeleteAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Disables the ability to restrict who can push to this branch.
 */
export const useReposDeleteAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteAccessRestrictionsError,
      ReposDeleteAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteAccessRestrictionsError,
    ReposDeleteAccessRestrictionsVariables
  >(
    (variables: ReposDeleteAccessRestrictionsVariables) =>
      fetchReposDeleteAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetAccessRestrictionsVariables = {
  pathParams: ReposGetAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists who has access to this protected branch.
 *
 * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
 */
export const fetchReposGetAccessRestrictions = (
  variables: ReposGetAccessRestrictionsVariables
) =>
  githubFetch<
    Schemas.BranchRestrictionPolicy,
    ReposGetAccessRestrictionsError,
    undefined,
    {},
    {},
    ReposGetAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists who has access to this protected branch.
 *
 * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
 */
export const useReposGetAccessRestrictions = <
  TData = Schemas.BranchRestrictionPolicy
>(
  variables: ReposGetAccessRestrictionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchRestrictionPolicy,
      ReposGetAccessRestrictionsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.BranchRestrictionPolicy,
    ReposGetAccessRestrictionsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
      operationId: "reposGetAccessRestrictions",
      variables,
    }),
    () => fetchReposGetAccessRestrictions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposRemoveAppAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRemoveAppAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposRemoveAppAccessRestrictionsResponse = Schemas.Integration[];

export type ReposRemoveAppAccessRestrictionsRequestBody = {
  /*
   * apps parameter
   */
  apps: string[];
};

export type ReposRemoveAppAccessRestrictionsVariables = {
  body: ReposRemoveAppAccessRestrictionsRequestBody;
  pathParams: ReposRemoveAppAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposRemoveAppAccessRestrictions = (
  variables: ReposRemoveAppAccessRestrictionsVariables
) =>
  githubFetch<
    ReposRemoveAppAccessRestrictionsResponse,
    ReposRemoveAppAccessRestrictionsError,
    ReposRemoveAppAccessRestrictionsRequestBody,
    {},
    {},
    ReposRemoveAppAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposRemoveAppAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveAppAccessRestrictionsResponse,
      ReposRemoveAppAccessRestrictionsError,
      ReposRemoveAppAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveAppAccessRestrictionsResponse,
    ReposRemoveAppAccessRestrictionsError,
    ReposRemoveAppAccessRestrictionsVariables
  >(
    (variables: ReposRemoveAppAccessRestrictionsVariables) =>
      fetchReposRemoveAppAccessRestrictions({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetAppsWithAccessToProtectedBranchPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetAppsWithAccessToProtectedBranchError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type ReposGetAppsWithAccessToProtectedBranchResponse =
  Schemas.Integration[];

export type ReposGetAppsWithAccessToProtectedBranchVariables = {
  pathParams: ReposGetAppsWithAccessToProtectedBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const fetchReposGetAppsWithAccessToProtectedBranch = (
  variables: ReposGetAppsWithAccessToProtectedBranchVariables
) =>
  githubFetch<
    ReposGetAppsWithAccessToProtectedBranchResponse,
    ReposGetAppsWithAccessToProtectedBranchError,
    undefined,
    {},
    {},
    ReposGetAppsWithAccessToProtectedBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const useReposGetAppsWithAccessToProtectedBranch = <
  TData = ReposGetAppsWithAccessToProtectedBranchResponse
>(
  variables: ReposGetAppsWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAppsWithAccessToProtectedBranchResponse,
      ReposGetAppsWithAccessToProtectedBranchError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetAppsWithAccessToProtectedBranchResponse,
    ReposGetAppsWithAccessToProtectedBranchError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      operationId: "reposGetAppsWithAccessToProtectedBranch",
      variables,
    }),
    () =>
      fetchReposGetAppsWithAccessToProtectedBranch({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposAddAppAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposAddAppAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposAddAppAccessRestrictionsResponse = Schemas.Integration[];

export type ReposAddAppAccessRestrictionsRequestBody = {
  /*
   * apps parameter
   */
  apps: string[];
};

export type ReposAddAppAccessRestrictionsVariables = {
  body: ReposAddAppAccessRestrictionsRequestBody;
  pathParams: ReposAddAppAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposAddAppAccessRestrictions = (
  variables: ReposAddAppAccessRestrictionsVariables
) =>
  githubFetch<
    ReposAddAppAccessRestrictionsResponse,
    ReposAddAppAccessRestrictionsError,
    ReposAddAppAccessRestrictionsRequestBody,
    {},
    {},
    ReposAddAppAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposAddAppAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddAppAccessRestrictionsResponse,
      ReposAddAppAccessRestrictionsError,
      ReposAddAppAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddAppAccessRestrictionsResponse,
    ReposAddAppAccessRestrictionsError,
    ReposAddAppAccessRestrictionsVariables
  >(
    (variables: ReposAddAppAccessRestrictionsVariables) =>
      fetchReposAddAppAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposSetAppAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposSetAppAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposSetAppAccessRestrictionsResponse = Schemas.Integration[];

export type ReposSetAppAccessRestrictionsRequestBody = {
  /*
   * apps parameter
   */
  apps: string[];
};

export type ReposSetAppAccessRestrictionsVariables = {
  body: ReposSetAppAccessRestrictionsRequestBody;
  pathParams: ReposSetAppAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposSetAppAccessRestrictions = (
  variables: ReposSetAppAccessRestrictionsVariables
) =>
  githubFetch<
    ReposSetAppAccessRestrictionsResponse,
    ReposSetAppAccessRestrictionsError,
    ReposSetAppAccessRestrictionsRequestBody,
    {},
    {},
    ReposSetAppAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "put",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposSetAppAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetAppAccessRestrictionsResponse,
      ReposSetAppAccessRestrictionsError,
      ReposSetAppAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetAppAccessRestrictionsResponse,
    ReposSetAppAccessRestrictionsError,
    ReposSetAppAccessRestrictionsVariables
  >(
    (variables: ReposSetAppAccessRestrictionsVariables) =>
      fetchReposSetAppAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposRemoveTeamAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRemoveTeamAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposRemoveTeamAccessRestrictionsResponse = Schemas.Team[];

export type ReposRemoveTeamAccessRestrictionsRequestBody = {
  /*
   * teams parameter
   */
  teams: string[];
};

export type ReposRemoveTeamAccessRestrictionsVariables = {
  body: ReposRemoveTeamAccessRestrictionsRequestBody;
  pathParams: ReposRemoveTeamAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
 *
 * | Type    | Description                                                                                                                                         |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposRemoveTeamAccessRestrictions = (
  variables: ReposRemoveTeamAccessRestrictionsVariables
) =>
  githubFetch<
    ReposRemoveTeamAccessRestrictionsResponse,
    ReposRemoveTeamAccessRestrictionsError,
    ReposRemoveTeamAccessRestrictionsRequestBody,
    {},
    {},
    ReposRemoveTeamAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
 *
 * | Type    | Description                                                                                                                                         |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposRemoveTeamAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveTeamAccessRestrictionsResponse,
      ReposRemoveTeamAccessRestrictionsError,
      ReposRemoveTeamAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveTeamAccessRestrictionsResponse,
    ReposRemoveTeamAccessRestrictionsError,
    ReposRemoveTeamAccessRestrictionsVariables
  >(
    (variables: ReposRemoveTeamAccessRestrictionsVariables) =>
      fetchReposRemoveTeamAccessRestrictions({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetTeamsWithAccessToProtectedBranchPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetTeamsWithAccessToProtectedBranchError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type ReposGetTeamsWithAccessToProtectedBranchResponse = Schemas.Team[];

export type ReposGetTeamsWithAccessToProtectedBranchVariables = {
  pathParams: ReposGetTeamsWithAccessToProtectedBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the teams who have push access to this branch. The list includes child teams.
 */
export const fetchReposGetTeamsWithAccessToProtectedBranch = (
  variables: ReposGetTeamsWithAccessToProtectedBranchVariables
) =>
  githubFetch<
    ReposGetTeamsWithAccessToProtectedBranchResponse,
    ReposGetTeamsWithAccessToProtectedBranchError,
    undefined,
    {},
    {},
    ReposGetTeamsWithAccessToProtectedBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the teams who have push access to this branch. The list includes child teams.
 */
export const useReposGetTeamsWithAccessToProtectedBranch = <
  TData = ReposGetTeamsWithAccessToProtectedBranchResponse
>(
  variables: ReposGetTeamsWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTeamsWithAccessToProtectedBranchResponse,
      ReposGetTeamsWithAccessToProtectedBranchError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetTeamsWithAccessToProtectedBranchResponse,
    ReposGetTeamsWithAccessToProtectedBranchError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      operationId: "reposGetTeamsWithAccessToProtectedBranch",
      variables,
    }),
    () =>
      fetchReposGetTeamsWithAccessToProtectedBranch({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposAddTeamAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposAddTeamAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposAddTeamAccessRestrictionsResponse = Schemas.Team[];

export type ReposAddTeamAccessRestrictionsRequestBody = {
  /*
   * teams parameter
   */
  teams: string[];
};

export type ReposAddTeamAccessRestrictionsVariables = {
  body: ReposAddTeamAccessRestrictionsRequestBody;
  pathParams: ReposAddTeamAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified teams push access for this branch. You can also give push access to child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposAddTeamAccessRestrictions = (
  variables: ReposAddTeamAccessRestrictionsVariables
) =>
  githubFetch<
    ReposAddTeamAccessRestrictionsResponse,
    ReposAddTeamAccessRestrictionsError,
    ReposAddTeamAccessRestrictionsRequestBody,
    {},
    {},
    ReposAddTeamAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified teams push access for this branch. You can also give push access to child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposAddTeamAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddTeamAccessRestrictionsResponse,
      ReposAddTeamAccessRestrictionsError,
      ReposAddTeamAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddTeamAccessRestrictionsResponse,
    ReposAddTeamAccessRestrictionsError,
    ReposAddTeamAccessRestrictionsVariables
  >(
    (variables: ReposAddTeamAccessRestrictionsVariables) =>
      fetchReposAddTeamAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposSetTeamAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposSetTeamAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposSetTeamAccessRestrictionsResponse = Schemas.Team[];

export type ReposSetTeamAccessRestrictionsRequestBody = {
  /*
   * teams parameter
   */
  teams: string[];
};

export type ReposSetTeamAccessRestrictionsVariables = {
  body: ReposSetTeamAccessRestrictionsRequestBody;
  pathParams: ReposSetTeamAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposSetTeamAccessRestrictions = (
  variables: ReposSetTeamAccessRestrictionsVariables
) =>
  githubFetch<
    ReposSetTeamAccessRestrictionsResponse,
    ReposSetTeamAccessRestrictionsError,
    ReposSetTeamAccessRestrictionsRequestBody,
    {},
    {},
    ReposSetTeamAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "put",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposSetTeamAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetTeamAccessRestrictionsResponse,
      ReposSetTeamAccessRestrictionsError,
      ReposSetTeamAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetTeamAccessRestrictionsResponse,
    ReposSetTeamAccessRestrictionsError,
    ReposSetTeamAccessRestrictionsVariables
  >(
    (variables: ReposSetTeamAccessRestrictionsVariables) =>
      fetchReposSetTeamAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposRemoveUserAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRemoveUserAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposRemoveUserAccessRestrictionsResponse = Schemas.SimpleUser[];

export type ReposRemoveUserAccessRestrictionsRequestBody = {
  /*
   * users parameter
   */
  users: string[];
};

export type ReposRemoveUserAccessRestrictionsVariables = {
  body: ReposRemoveUserAccessRestrictionsRequestBody;
  pathParams: ReposRemoveUserAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a user to push to this branch.
 *
 * | Type    | Description                                                                                                                                   |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposRemoveUserAccessRestrictions = (
  variables: ReposRemoveUserAccessRestrictionsVariables
) =>
  githubFetch<
    ReposRemoveUserAccessRestrictionsResponse,
    ReposRemoveUserAccessRestrictionsError,
    ReposRemoveUserAccessRestrictionsRequestBody,
    {},
    {},
    ReposRemoveUserAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a user to push to this branch.
 *
 * | Type    | Description                                                                                                                                   |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposRemoveUserAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveUserAccessRestrictionsResponse,
      ReposRemoveUserAccessRestrictionsError,
      ReposRemoveUserAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveUserAccessRestrictionsResponse,
    ReposRemoveUserAccessRestrictionsError,
    ReposRemoveUserAccessRestrictionsVariables
  >(
    (variables: ReposRemoveUserAccessRestrictionsVariables) =>
      fetchReposRemoveUserAccessRestrictions({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetUsersWithAccessToProtectedBranchPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetUsersWithAccessToProtectedBranchError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type ReposGetUsersWithAccessToProtectedBranchResponse =
  Schemas.SimpleUser[];

export type ReposGetUsersWithAccessToProtectedBranchVariables = {
  pathParams: ReposGetUsersWithAccessToProtectedBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the people who have push access to this branch.
 */
export const fetchReposGetUsersWithAccessToProtectedBranch = (
  variables: ReposGetUsersWithAccessToProtectedBranchVariables
) =>
  githubFetch<
    ReposGetUsersWithAccessToProtectedBranchResponse,
    ReposGetUsersWithAccessToProtectedBranchError,
    undefined,
    {},
    {},
    ReposGetUsersWithAccessToProtectedBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the people who have push access to this branch.
 */
export const useReposGetUsersWithAccessToProtectedBranch = <
  TData = ReposGetUsersWithAccessToProtectedBranchResponse
>(
  variables: ReposGetUsersWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetUsersWithAccessToProtectedBranchResponse,
      ReposGetUsersWithAccessToProtectedBranchError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetUsersWithAccessToProtectedBranchResponse,
    ReposGetUsersWithAccessToProtectedBranchError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      operationId: "reposGetUsersWithAccessToProtectedBranch",
      variables,
    }),
    () =>
      fetchReposGetUsersWithAccessToProtectedBranch({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposAddUserAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposAddUserAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposAddUserAccessRestrictionsResponse = Schemas.SimpleUser[];

export type ReposAddUserAccessRestrictionsRequestBody = {
  /*
   * users parameter
   */
  users: string[];
};

export type ReposAddUserAccessRestrictionsVariables = {
  body: ReposAddUserAccessRestrictionsRequestBody;
  pathParams: ReposAddUserAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified people push access for this branch.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposAddUserAccessRestrictions = (
  variables: ReposAddUserAccessRestrictionsVariables
) =>
  githubFetch<
    ReposAddUserAccessRestrictionsResponse,
    ReposAddUserAccessRestrictionsError,
    ReposAddUserAccessRestrictionsRequestBody,
    {},
    {},
    ReposAddUserAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified people push access for this branch.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposAddUserAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddUserAccessRestrictionsResponse,
      ReposAddUserAccessRestrictionsError,
      ReposAddUserAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddUserAccessRestrictionsResponse,
    ReposAddUserAccessRestrictionsError,
    ReposAddUserAccessRestrictionsVariables
  >(
    (variables: ReposAddUserAccessRestrictionsVariables) =>
      fetchReposAddUserAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposSetUserAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposSetUserAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposSetUserAccessRestrictionsResponse = Schemas.SimpleUser[];

export type ReposSetUserAccessRestrictionsRequestBody = {
  /*
   * users parameter
   */
  users: string[];
};

export type ReposSetUserAccessRestrictionsVariables = {
  body: ReposSetUserAccessRestrictionsRequestBody;
  pathParams: ReposSetUserAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposSetUserAccessRestrictions = (
  variables: ReposSetUserAccessRestrictionsVariables
) =>
  githubFetch<
    ReposSetUserAccessRestrictionsResponse,
    ReposSetUserAccessRestrictionsError,
    ReposSetUserAccessRestrictionsRequestBody,
    {},
    {},
    ReposSetUserAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "put",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposSetUserAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetUserAccessRestrictionsResponse,
      ReposSetUserAccessRestrictionsError,
      ReposSetUserAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetUserAccessRestrictionsResponse,
    ReposSetUserAccessRestrictionsError,
    ReposSetUserAccessRestrictionsVariables
  >(
    (variables: ReposSetUserAccessRestrictionsVariables) =>
      fetchReposSetUserAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposRenameBranchPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRenameBranchError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposRenameBranchRequestBody = {
  /*
   * The new name of the branch.
   */
  new_name: string;
};

export type ReposRenameBranchVariables = {
  body: ReposRenameBranchRequestBody;
  pathParams: ReposRenameBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Renames a branch in a repository.
 *
 * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
 *
 * The permissions required to use this endpoint depends on whether you are renaming the default branch.
 *
 * To rename a non-default branch:
 *
 * * Users must have push access.
 * * GitHub Apps must have the `contents:write` repository permission.
 *
 * To rename the default branch:
 *
 * * Users must have admin or owner permissions.
 * * GitHub Apps must have the `administration:write` repository permission.
 */
export const fetchReposRenameBranch = (variables: ReposRenameBranchVariables) =>
  githubFetch<
    Schemas.BranchWithProtection,
    ReposRenameBranchError,
    ReposRenameBranchRequestBody,
    {},
    {},
    ReposRenameBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/rename",
    method: "post",
    ...variables,
  });

/**
 * Renames a branch in a repository.
 *
 * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
 *
 * The permissions required to use this endpoint depends on whether you are renaming the default branch.
 *
 * To rename a non-default branch:
 *
 * * Users must have push access.
 * * GitHub Apps must have the `contents:write` repository permission.
 *
 * To rename the default branch:
 *
 * * Users must have admin or owner permissions.
 * * GitHub Apps must have the `administration:write` repository permission.
 */
export const useReposRenameBranch = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BranchWithProtection,
      ReposRenameBranchError,
      ReposRenameBranchVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.BranchWithProtection,
    ReposRenameBranchError,
    ReposRenameBranchVariables
  >(
    (variables: ReposRenameBranchVariables) =>
      fetchReposRenameBranch({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChecksCreatePathParams = {
  owner: string;
  repo: string;
};

export type ChecksCreateError = Fetcher.ErrorWrapper<undefined>;

export type ChecksCreateVariables = {
  body:
    | ({
        status: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      });
  pathParams: ChecksCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
 *
 * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
 */
export const fetchChecksCreate = (variables: ChecksCreateVariables) =>
  githubFetch<
    Schemas.CheckRun,
    ChecksCreateError,
    | ({
        status: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      }),
    {},
    {},
    ChecksCreatePathParams
  >({ url: "/repos/{owner}/{repo}/check-runs", method: "post", ...variables });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
 *
 * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
 */
export const useChecksCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckRun,
      ChecksCreateError,
      ChecksCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckRun,
    ChecksCreateError,
    ChecksCreateVariables
  >(
    (variables: ChecksCreateVariables) =>
      fetchChecksCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChecksGetPathParams = {
  owner: string;
  repo: string;
  /*
   * check_run_id parameter
   */
  checkRunId: number;
};

export type ChecksGetError = Fetcher.ErrorWrapper<undefined>;

export type ChecksGetVariables = {
  pathParams: ChecksGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const fetchChecksGet = (variables: ChecksGetVariables) =>
  githubFetch<
    Schemas.CheckRun,
    ChecksGetError,
    undefined,
    {},
    {},
    ChecksGetPathParams
  >({
    url: "/repos/{owner}/{repo}/check-runs/{checkRunId}",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useChecksGet = <TData = Schemas.CheckRun>(
  variables: ChecksGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CheckRun, ChecksGetError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.CheckRun, ChecksGetError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/check-runs/{check_run_id}",
      operationId: "checksGet",
      variables,
    }),
    () => fetchChecksGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksUpdatePathParams = {
  owner: string;
  repo: string;
  /*
   * check_run_id parameter
   */
  checkRunId: number;
};

export type ChecksUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ChecksUpdateVariables = {
  body?:
    | ({
        status?: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      });
  pathParams: ChecksUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
 */
export const fetchChecksUpdate = (variables: ChecksUpdateVariables) =>
  githubFetch<
    Schemas.CheckRun,
    ChecksUpdateError,
    | ({
        status?: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      }),
    {},
    {},
    ChecksUpdatePathParams
  >({
    url: "/repos/{owner}/{repo}/check-runs/{checkRunId}",
    method: "patch",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
 */
export const useChecksUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckRun,
      ChecksUpdateError,
      ChecksUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckRun,
    ChecksUpdateError,
    ChecksUpdateVariables
  >(
    (variables: ChecksUpdateVariables) =>
      fetchChecksUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChecksListAnnotationsPathParams = {
  owner: string;
  repo: string;
  /*
   * check_run_id parameter
   */
  checkRunId: number;
};

export type ChecksListAnnotationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ChecksListAnnotationsError = Fetcher.ErrorWrapper<undefined>;

export type ChecksListAnnotationsResponse = Schemas.CheckAnnotation[];

export type ChecksListAnnotationsVariables = {
  pathParams: ChecksListAnnotationsPathParams;
  queryParams?: ChecksListAnnotationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
 */
export const fetchChecksListAnnotations = (
  variables: ChecksListAnnotationsVariables
) =>
  githubFetch<
    ChecksListAnnotationsResponse,
    ChecksListAnnotationsError,
    undefined,
    {},
    ChecksListAnnotationsQueryParams,
    ChecksListAnnotationsPathParams
  >({
    url: "/repos/{owner}/{repo}/check-runs/{checkRunId}/annotations",
    method: "get",
    ...variables,
  });

/**
 * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
 */
export const useChecksListAnnotations = <TData = ChecksListAnnotationsResponse>(
  variables: ChecksListAnnotationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListAnnotationsResponse,
      ChecksListAnnotationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListAnnotationsResponse,
    ChecksListAnnotationsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
      operationId: "checksListAnnotations",
      variables,
    }),
    () => fetchChecksListAnnotations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksCreateSuitePathParams = {
  owner: string;
  repo: string;
};

export type ChecksCreateSuiteError = Fetcher.ErrorWrapper<undefined>;

export type ChecksCreateSuiteRequestBody = {
  /*
   * The sha of the head commit.
   */
  head_sha: string;
};

export type ChecksCreateSuiteVariables = {
  body: ChecksCreateSuiteRequestBody;
  pathParams: ChecksCreateSuitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
 */
export const fetchChecksCreateSuite = (variables: ChecksCreateSuiteVariables) =>
  githubFetch<
    Schemas.CheckSuite,
    ChecksCreateSuiteError,
    ChecksCreateSuiteRequestBody,
    {},
    {},
    ChecksCreateSuitePathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites",
    method: "post",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
 */
export const useChecksCreateSuite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckSuite,
      ChecksCreateSuiteError,
      ChecksCreateSuiteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckSuite,
    ChecksCreateSuiteError,
    ChecksCreateSuiteVariables
  >(
    (variables: ChecksCreateSuiteVariables) =>
      fetchChecksCreateSuite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChecksSetSuitesPreferencesPathParams = {
  owner: string;
  repo: string;
};

export type ChecksSetSuitesPreferencesError = Fetcher.ErrorWrapper<undefined>;

export type ChecksSetSuitesPreferencesRequestBody = {
  /*
   * Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details.
   */
  auto_trigger_checks?: {
    /*
     * The `id` of the GitHub App.
     */
    app_id: number;
    /*
     * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
     *
     * @default true
     */
    setting: boolean;
  }[];
};

export type ChecksSetSuitesPreferencesVariables = {
  body?: ChecksSetSuitesPreferencesRequestBody;
  pathParams: ChecksSetSuitesPreferencesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
 */
export const fetchChecksSetSuitesPreferences = (
  variables: ChecksSetSuitesPreferencesVariables
) =>
  githubFetch<
    Schemas.CheckSuitePreference,
    ChecksSetSuitesPreferencesError,
    ChecksSetSuitesPreferencesRequestBody,
    {},
    {},
    ChecksSetSuitesPreferencesPathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites/preferences",
    method: "patch",
    ...variables,
  });

/**
 * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
 */
export const useChecksSetSuitesPreferences = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckSuitePreference,
      ChecksSetSuitesPreferencesError,
      ChecksSetSuitesPreferencesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckSuitePreference,
    ChecksSetSuitesPreferencesError,
    ChecksSetSuitesPreferencesVariables
  >(
    (variables: ChecksSetSuitesPreferencesVariables) =>
      fetchChecksSetSuitesPreferences({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChecksGetSuitePathParams = {
  owner: string;
  repo: string;
  /*
   * check_suite_id parameter
   */
  checkSuiteId: number;
};

export type ChecksGetSuiteError = Fetcher.ErrorWrapper<undefined>;

export type ChecksGetSuiteVariables = {
  pathParams: ChecksGetSuitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const fetchChecksGetSuite = (variables: ChecksGetSuiteVariables) =>
  githubFetch<
    Schemas.CheckSuite,
    ChecksGetSuiteError,
    undefined,
    {},
    {},
    ChecksGetSuitePathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const useChecksGetSuite = <TData = Schemas.CheckSuite>(
  variables: ChecksGetSuiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CheckSuite, ChecksGetSuiteError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.CheckSuite, ChecksGetSuiteError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/check-suites/{check_suite_id}",
      operationId: "checksGetSuite",
      variables,
    }),
    () => fetchChecksGetSuite({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksListForSuitePathParams = {
  owner: string;
  repo: string;
  /*
   * check_suite_id parameter
   */
  checkSuiteId: number;
};

export type ChecksListForSuiteQueryParams = {
  /*
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /*
   * Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: "queued" | "in_progress" | "completed";
  /*
   * Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
   *
   * @default latest
   */
  filter?: "latest" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ChecksListForSuiteError = Fetcher.ErrorWrapper<undefined>;

export type ChecksListForSuiteResponse = {
  check_runs: Schemas.CheckRun[];
  total_count: number;
};

export type ChecksListForSuiteVariables = {
  pathParams: ChecksListForSuitePathParams;
  queryParams?: ChecksListForSuiteQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const fetchChecksListForSuite = (
  variables: ChecksListForSuiteVariables
) =>
  githubFetch<
    ChecksListForSuiteResponse,
    ChecksListForSuiteError,
    undefined,
    {},
    ChecksListForSuiteQueryParams,
    ChecksListForSuitePathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}/check-runs",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useChecksListForSuite = <TData = ChecksListForSuiteResponse>(
  variables: ChecksListForSuiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListForSuiteResponse,
      ChecksListForSuiteError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListForSuiteResponse,
    ChecksListForSuiteError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
      operationId: "checksListForSuite",
      variables,
    }),
    () => fetchChecksListForSuite({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksRerequestSuitePathParams = {
  owner: string;
  repo: string;
  /*
   * check_suite_id parameter
   */
  checkSuiteId: number;
};

export type ChecksRerequestSuiteError = Fetcher.ErrorWrapper<undefined>;

export type ChecksRerequestSuiteVariables = {
  pathParams: ChecksRerequestSuitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
 *
 * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
 */
export const fetchChecksRerequestSuite = (
  variables: ChecksRerequestSuiteVariables
) =>
  githubFetch<
    undefined,
    ChecksRerequestSuiteError,
    undefined,
    {},
    {},
    ChecksRerequestSuitePathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}/rerequest",
    method: "post",
    ...variables,
  });

/**
 * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
 *
 * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
 */
export const useChecksRerequestSuite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ChecksRerequestSuiteError,
      ChecksRerequestSuiteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ChecksRerequestSuiteError,
    ChecksRerequestSuiteVariables
  >(
    (variables: ChecksRerequestSuiteVariables) =>
      fetchChecksRerequestSuite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CodeScanningListAlertsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type CodeScanningListAlertsForRepoQueryParams = {
  /*
   * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
   */
  tool_name?: Schemas.CodeScanningAnalysisToolName;
  /*
   * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
   */
  tool_guid?: Schemas.CodeScanningAnalysisToolGuid;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: Schemas.CodeScanningRef;
  /*
   * Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
   */
  state?: Schemas.CodeScanningAlertState;
};

export type CodeScanningListAlertsForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningListAlertsForRepoResponse =
  Schemas.CodeScanningAlertItems[];

export type CodeScanningListAlertsForRepoVariables = {
  pathParams: CodeScanningListAlertsForRepoPathParams;
  queryParams?: CodeScanningListAlertsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all open code scanning alerts for the default branch (usually `main`
 * or `master`). You must use an access token with the `security_events` scope to use
 * this endpoint. GitHub Apps must have the `security_events` read permission to use
 * this endpoint.
 *
 * The response includes a `most_recent_instance` object.
 * This provides details of the most recent instance of this alert
 * for the default branch or for the specified Git reference
 * (if you used `ref` in the request).
 */
export const fetchCodeScanningListAlertsForRepo = (
  variables: CodeScanningListAlertsForRepoVariables
) =>
  githubFetch<
    CodeScanningListAlertsForRepoResponse,
    CodeScanningListAlertsForRepoError,
    undefined,
    {},
    CodeScanningListAlertsForRepoQueryParams,
    CodeScanningListAlertsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts",
    method: "get",
    ...variables,
  });

/**
 * Lists all open code scanning alerts for the default branch (usually `main`
 * or `master`). You must use an access token with the `security_events` scope to use
 * this endpoint. GitHub Apps must have the `security_events` read permission to use
 * this endpoint.
 *
 * The response includes a `most_recent_instance` object.
 * This provides details of the most recent instance of this alert
 * for the default branch or for the specified Git reference
 * (if you used `ref` in the request).
 */
export const useCodeScanningListAlertsForRepo = <
  TData = CodeScanningListAlertsForRepoResponse
>(
  variables: CodeScanningListAlertsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListAlertsForRepoResponse,
      CodeScanningListAlertsForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    CodeScanningListAlertsForRepoResponse,
    CodeScanningListAlertsForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/alerts",
      operationId: "codeScanningListAlertsForRepo",
      variables,
    }),
    () =>
      fetchCodeScanningListAlertsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodeScanningGetAlertPathParams = {
  owner: string;
  repo: string;
  /*
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type CodeScanningGetAlertError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningGetAlertVariables = {
  pathParams: CodeScanningGetAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
 */
export const fetchCodeScanningGetAlert = (
  variables: CodeScanningGetAlertVariables
) =>
  githubFetch<
    Schemas.CodeScanningAlert,
    CodeScanningGetAlertError,
    undefined,
    {},
    {},
    CodeScanningGetAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}",
    method: "get",
    ...variables,
  });

/**
 * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
 */
export const useCodeScanningGetAlert = <TData = Schemas.CodeScanningAlert>(
  variables: CodeScanningGetAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningAlert,
      CodeScanningGetAlertError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeScanningAlert,
    CodeScanningGetAlertError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
      operationId: "codeScanningGetAlert",
      variables,
    }),
    () => fetchCodeScanningGetAlert({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodeScanningUpdateAlertPathParams = {
  owner: string;
  repo: string;
  /*
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type CodeScanningUpdateAlertError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenWrite;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningUpdateAlertRequestBody = {
  dismissed_reason?: Schemas.CodeScanningAlertDismissedReason;
  state: Schemas.CodeScanningAlertSetState;
};

export type CodeScanningUpdateAlertVariables = {
  body: CodeScanningUpdateAlertRequestBody;
  pathParams: CodeScanningUpdateAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
 */
export const fetchCodeScanningUpdateAlert = (
  variables: CodeScanningUpdateAlertVariables
) =>
  githubFetch<
    Schemas.CodeScanningAlert,
    CodeScanningUpdateAlertError,
    CodeScanningUpdateAlertRequestBody,
    {},
    {},
    CodeScanningUpdateAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
 */
export const useCodeScanningUpdateAlert = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CodeScanningAlert,
      CodeScanningUpdateAlertError,
      CodeScanningUpdateAlertVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CodeScanningAlert,
    CodeScanningUpdateAlertError,
    CodeScanningUpdateAlertVariables
  >(
    (variables: CodeScanningUpdateAlertVariables) =>
      fetchCodeScanningUpdateAlert({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CodeScanningListAlertsInstancesPathParams = {
  owner: string;
  repo: string;
  /*
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type CodeScanningListAlertsInstancesQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: Schemas.CodeScanningRef;
};

export type CodeScanningListAlertsInstancesError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningListAlertsInstancesResponse =
  Schemas.CodeScanningAlertInstance[];

export type CodeScanningListAlertsInstancesVariables = {
  pathParams: CodeScanningListAlertsInstancesPathParams;
  queryParams?: CodeScanningListAlertsInstancesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all instances of the specified code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const fetchCodeScanningListAlertsInstances = (
  variables: CodeScanningListAlertsInstancesVariables
) =>
  githubFetch<
    CodeScanningListAlertsInstancesResponse,
    CodeScanningListAlertsInstancesError,
    undefined,
    {},
    CodeScanningListAlertsInstancesQueryParams,
    CodeScanningListAlertsInstancesPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}/instances",
    method: "get",
    ...variables,
  });

/**
 * Lists all instances of the specified code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useCodeScanningListAlertsInstances = <
  TData = CodeScanningListAlertsInstancesResponse
>(
  variables: CodeScanningListAlertsInstancesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListAlertsInstancesResponse,
      CodeScanningListAlertsInstancesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    CodeScanningListAlertsInstancesResponse,
    CodeScanningListAlertsInstancesError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      operationId: "codeScanningListAlertsInstances",
      variables,
    }),
    () =>
      fetchCodeScanningListAlertsInstances({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodeScanningListRecentAnalysesPathParams = {
  owner: string;
  repo: string;
};

export type CodeScanningListRecentAnalysesQueryParams = {
  /*
   * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
   */
  tool_name?: Schemas.CodeScanningAnalysisToolName;
  /*
   * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
   */
  tool_guid?: Schemas.CodeScanningAnalysisToolGuid;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: Schemas.CodeScanningRef;
  /*
   * Filter analyses belonging to the same SARIF upload.
   */
  sarif_id?: Schemas.CodeScanningAnalysisSarifId;
};

export type CodeScanningListRecentAnalysesError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningListRecentAnalysesResponse =
  Schemas.CodeScanningAnalysis[];

export type CodeScanningListRecentAnalysesVariables = {
  pathParams: CodeScanningListRecentAnalysesPathParams;
  queryParams?: CodeScanningListRecentAnalysesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the details of all code scanning analyses for a repository,
 * starting with the most recent.
 * The response is paginated and you can use the `page` and `per_page` parameters
 * to list the analyses you're interested in.
 * By default 30 analyses are listed per page.
 *
 * The `rules_count` field in the response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * You must use an access token with the `security_events` scope to use this endpoint.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const fetchCodeScanningListRecentAnalyses = (
  variables: CodeScanningListRecentAnalysesVariables
) =>
  githubFetch<
    CodeScanningListRecentAnalysesResponse,
    CodeScanningListRecentAnalysesError,
    undefined,
    {},
    CodeScanningListRecentAnalysesQueryParams,
    CodeScanningListRecentAnalysesPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/analyses",
    method: "get",
    ...variables,
  });

/**
 * Lists the details of all code scanning analyses for a repository,
 * starting with the most recent.
 * The response is paginated and you can use the `page` and `per_page` parameters
 * to list the analyses you're interested in.
 * By default 30 analyses are listed per page.
 *
 * The `rules_count` field in the response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * You must use an access token with the `security_events` scope to use this endpoint.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const useCodeScanningListRecentAnalyses = <
  TData = CodeScanningListRecentAnalysesResponse
>(
  variables: CodeScanningListRecentAnalysesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListRecentAnalysesResponse,
      CodeScanningListRecentAnalysesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    CodeScanningListRecentAnalysesResponse,
    CodeScanningListRecentAnalysesError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/analyses",
      operationId: "codeScanningListRecentAnalyses",
      variables,
    }),
    () =>
      fetchCodeScanningListRecentAnalyses({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodeScanningDeleteAnalysisPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
   */
  analysisId: number;
};

export type CodeScanningDeleteAnalysisQueryParams = {
  /*
   * Allow deletion if the specified analysis is the last in a set. The parameter can be used without a value as the parameter value is not considered. If you attempt to delete the final analysis in a set without using this parameter you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
   */
  confirm_delete?: string | null;
};

export type CodeScanningDeleteAnalysisError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenWrite;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningDeleteAnalysisVariables = {
  pathParams: CodeScanningDeleteAnalysisPathParams;
  queryParams?: CodeScanningDeleteAnalysisQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a specified code scanning analysis from a repository. For
 * private repositories, you must use an access token with the `repo` scope. For public repositories,
 * you must use an access token with `public_repo` and `repo:security_events` scopes.
 * GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * You can delete one analysis at a time.
 * To delete a series of analyses, start with the most recent analysis and work backwards.
 * Conceptually, the process is similar to the undo function in a text editor.
 *
 * When you list the analyses for a repository,
 * one or more will be identified as deletable in the response:
 *
 * ```
 * "deletable": true
 * ```
 *
 * An analysis is deletable when it's the most recent in a set of analyses.
 * Typically, a repository will have multiple sets of analyses
 * for each enabled code scanning tool,
 * where a set is determined by a unique combination of analysis values:
 *
 * * `ref`
 * * `tool`
 * * `analysis_key`
 * * `environment`
 *
 * If you attempt to delete an analysis that is not the most recent in a set,
 * you'll get a 400 response with the message:
 *
 * ```
 * Analysis specified is not deletable.
 * ```
 *
 * The response from a successful `DELETE` operation provides you with
 * two alternative URLs for deleting the next analysis in the set
 * (see the example default response below).
 * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
 * in the set. This is a useful option if you want to preserve at least one analysis
 * for the specified tool in your repository.
 * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
 * When you delete the last analysis in a set the value of `next_analysis_url` and `confirm_delete_url`
 * in the 200 response is `null`.
 *
 * As an example of the deletion process,
 * let's imagine that you added a workflow that configured a particular code scanning tool
 * to analyze the code in a repository. This tool has added 15 analyses:
 * 10 on the default branch, and another 5 on a topic branch.
 * You therefore have two separate sets of analyses for this tool.
 * You've now decided that you want to remove all of the analyses for the tool.
 * To do this you must make 15 separate deletion requests.
 * To start, you must find the deletable analysis for one of the sets,
 * step through deleting the analyses in that set,
 * and then repeat the process for the second set.
 * The procedure therefore consists of a nested loop:
 *
 * **Outer loop**:
 * * List the analyses for the repository, filtered by tool.
 * * Parse this list to find a deletable analysis. If found:
 *
 *   **Inner loop**:
 *   * Delete the identified analysis.
 *   * Parse the response for the value of `next_analysis_url` and, if found, use this in the next iteration.
 *
 * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `next_analysis_url` value. Alternatively, you could use the `confirm_delete_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
 */
export const fetchCodeScanningDeleteAnalysis = (
  variables: CodeScanningDeleteAnalysisVariables
) =>
  githubFetch<
    Schemas.CodeScanningAnalysisDeletion,
    CodeScanningDeleteAnalysisError,
    undefined,
    {},
    CodeScanningDeleteAnalysisQueryParams,
    CodeScanningDeleteAnalysisPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/analyses/{analysisId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a specified code scanning analysis from a repository. For
 * private repositories, you must use an access token with the `repo` scope. For public repositories,
 * you must use an access token with `public_repo` and `repo:security_events` scopes.
 * GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * You can delete one analysis at a time.
 * To delete a series of analyses, start with the most recent analysis and work backwards.
 * Conceptually, the process is similar to the undo function in a text editor.
 *
 * When you list the analyses for a repository,
 * one or more will be identified as deletable in the response:
 *
 * ```
 * "deletable": true
 * ```
 *
 * An analysis is deletable when it's the most recent in a set of analyses.
 * Typically, a repository will have multiple sets of analyses
 * for each enabled code scanning tool,
 * where a set is determined by a unique combination of analysis values:
 *
 * * `ref`
 * * `tool`
 * * `analysis_key`
 * * `environment`
 *
 * If you attempt to delete an analysis that is not the most recent in a set,
 * you'll get a 400 response with the message:
 *
 * ```
 * Analysis specified is not deletable.
 * ```
 *
 * The response from a successful `DELETE` operation provides you with
 * two alternative URLs for deleting the next analysis in the set
 * (see the example default response below).
 * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
 * in the set. This is a useful option if you want to preserve at least one analysis
 * for the specified tool in your repository.
 * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
 * When you delete the last analysis in a set the value of `next_analysis_url` and `confirm_delete_url`
 * in the 200 response is `null`.
 *
 * As an example of the deletion process,
 * let's imagine that you added a workflow that configured a particular code scanning tool
 * to analyze the code in a repository. This tool has added 15 analyses:
 * 10 on the default branch, and another 5 on a topic branch.
 * You therefore have two separate sets of analyses for this tool.
 * You've now decided that you want to remove all of the analyses for the tool.
 * To do this you must make 15 separate deletion requests.
 * To start, you must find the deletable analysis for one of the sets,
 * step through deleting the analyses in that set,
 * and then repeat the process for the second set.
 * The procedure therefore consists of a nested loop:
 *
 * **Outer loop**:
 * * List the analyses for the repository, filtered by tool.
 * * Parse this list to find a deletable analysis. If found:
 *
 *   **Inner loop**:
 *   * Delete the identified analysis.
 *   * Parse the response for the value of `next_analysis_url` and, if found, use this in the next iteration.
 *
 * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `next_analysis_url` value. Alternatively, you could use the `confirm_delete_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
 */
export const useCodeScanningDeleteAnalysis = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CodeScanningAnalysisDeletion,
      CodeScanningDeleteAnalysisError,
      CodeScanningDeleteAnalysisVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CodeScanningAnalysisDeletion,
    CodeScanningDeleteAnalysisError,
    CodeScanningDeleteAnalysisVariables
  >(
    (variables: CodeScanningDeleteAnalysisVariables) =>
      fetchCodeScanningDeleteAnalysis({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CodeScanningGetAnalysisPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
   */
  analysisId: number;
};

export type CodeScanningGetAnalysisError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningGetAnalysisVariables = {
  pathParams: CodeScanningGetAnalysisPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specified code scanning analysis for a repository.
 * You must use an access token with the `security_events` scope to use this endpoint.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * The default JSON response contains fields that describe the analysis.
 * This includes the Git reference and commit SHA to which the analysis relates,
 * the datetime of the analysis, the name of the code scanning tool,
 * and the number of alerts.
 *
 * The `rules_count` field in the default response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * If you use the Accept header `application/sarif+json`,
 * the response contains the analysis data that was uploaded.
 * This is formatted as
 * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
 * For an example response, see "[Custom media type for code scanning](#custom-media-type-for-code-scanning)."
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const fetchCodeScanningGetAnalysis = (
  variables: CodeScanningGetAnalysisVariables
) =>
  githubFetch<
    Schemas.CodeScanningAnalysis,
    CodeScanningGetAnalysisError,
    undefined,
    {},
    {},
    CodeScanningGetAnalysisPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/analyses/{analysisId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specified code scanning analysis for a repository.
 * You must use an access token with the `security_events` scope to use this endpoint.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * The default JSON response contains fields that describe the analysis.
 * This includes the Git reference and commit SHA to which the analysis relates,
 * the datetime of the analysis, the name of the code scanning tool,
 * and the number of alerts.
 *
 * The `rules_count` field in the default response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * If you use the Accept header `application/sarif+json`,
 * the response contains the analysis data that was uploaded.
 * This is formatted as
 * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
 * For an example response, see "[Custom media type for code scanning](#custom-media-type-for-code-scanning)."
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const useCodeScanningGetAnalysis = <
  TData = Schemas.CodeScanningAnalysis
>(
  variables: CodeScanningGetAnalysisVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningAnalysis,
      CodeScanningGetAnalysisError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeScanningAnalysis,
    CodeScanningGetAnalysisError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
      operationId: "codeScanningGetAnalysis",
      variables,
    }),
    () => fetchCodeScanningGetAnalysis({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodeScanningUploadSarifPathParams = {
  owner: string;
  repo: string;
};

export type CodeScanningUploadSarifError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenWrite;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningUploadSarifRequestBody = {
  /*
   * The base directory used in the analysis, as it appears in the SARIF file.
   * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
   *
   * @example file:///github/workspace/
   * @format uri
   */
  checkout_uri?: string;
  commit_sha: Schemas.CodeScanningAnalysisCommitSha;
  ref: Schemas.CodeScanningRef;
  sarif: Schemas.CodeScanningAnalysisSarifFile;
  /*
   * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date
   */
  started_at?: string;
  /*
   * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
   */
  tool_name?: string;
};

export type CodeScanningUploadSarifVariables = {
  body: CodeScanningUploadSarifRequestBody;
  pathParams: CodeScanningUploadSarifPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * There are two places where you can upload code scanning results.
 *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/github/finding-security-vulnerabilities-and-errors-in-your-code/triaging-code-scanning-alerts-in-pull-requests)."
 *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/github/finding-security-vulnerabilities-and-errors-in-your-code/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
 *
 * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
 *
 * ```
 * gzip -c analysis-data.sarif | base64
 * ```
 *
 * SARIF upload supports a maximum of 1000 results per analysis run. Any results over this limit are ignored. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
 *
 * The `202 Accepted`, response includes an `id` value.
 * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
 * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
 */
export const fetchCodeScanningUploadSarif = (
  variables: CodeScanningUploadSarifVariables
) =>
  githubFetch<
    Schemas.CodeScanningSarifsReceipt,
    CodeScanningUploadSarifError,
    CodeScanningUploadSarifRequestBody,
    {},
    {},
    CodeScanningUploadSarifPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/sarifs",
    method: "post",
    ...variables,
  });

/**
 * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * There are two places where you can upload code scanning results.
 *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/github/finding-security-vulnerabilities-and-errors-in-your-code/triaging-code-scanning-alerts-in-pull-requests)."
 *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/github/finding-security-vulnerabilities-and-errors-in-your-code/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
 *
 * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
 *
 * ```
 * gzip -c analysis-data.sarif | base64
 * ```
 *
 * SARIF upload supports a maximum of 1000 results per analysis run. Any results over this limit are ignored. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
 *
 * The `202 Accepted`, response includes an `id` value.
 * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
 * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
 */
export const useCodeScanningUploadSarif = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CodeScanningSarifsReceipt,
      CodeScanningUploadSarifError,
      CodeScanningUploadSarifVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CodeScanningSarifsReceipt,
    CodeScanningUploadSarifError,
    CodeScanningUploadSarifVariables
  >(
    (variables: CodeScanningUploadSarifVariables) =>
      fetchCodeScanningUploadSarif({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CodeScanningGetSarifPathParams = {
  owner: string;
  repo: string;
  /*
   * The SARIF ID obtained after uploading.
   */
  sarifId: string;
};

export type CodeScanningGetSarifError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningGetSarifVariables = {
  pathParams: CodeScanningGetSarifPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const fetchCodeScanningGetSarif = (
  variables: CodeScanningGetSarifVariables
) =>
  githubFetch<
    Schemas.CodeScanningSarifsStatus,
    CodeScanningGetSarifError,
    undefined,
    {},
    {},
    CodeScanningGetSarifPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/sarifs/{sarifId}",
    method: "get",
    ...variables,
  });

/**
 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useCodeScanningGetSarif = <
  TData = Schemas.CodeScanningSarifsStatus
>(
  variables: CodeScanningGetSarifVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningSarifsStatus,
      CodeScanningGetSarifError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeScanningSarifsStatus,
    CodeScanningGetSarifError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}",
      operationId: "codeScanningGetSarif",
      variables,
    }),
    () => fetchCodeScanningGetSarif({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListCollaboratorsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListCollaboratorsQueryParams = {
  /*
   * Filter collaborators returned by their affiliation. Can be one of:
   * \* `outside`: All outside collaborators of an organization-owned repository.
   * \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.
   * \* `all`: All collaborators the authenticated user can see.
   *
   * @default all
   */
  affiliation?: "outside" | "direct" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCollaboratorsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposListCollaboratorsResponse = Schemas.Collaborator[];

export type ReposListCollaboratorsVariables = {
  pathParams: ReposListCollaboratorsPathParams;
  queryParams?: ReposListCollaboratorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 */
export const fetchReposListCollaborators = (
  variables: ReposListCollaboratorsVariables
) =>
  githubFetch<
    ReposListCollaboratorsResponse,
    ReposListCollaboratorsError,
    undefined,
    {},
    ReposListCollaboratorsQueryParams,
    ReposListCollaboratorsPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators",
    method: "get",
    ...variables,
  });

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 */
export const useReposListCollaborators = <
  TData = ReposListCollaboratorsResponse
>(
  variables: ReposListCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCollaboratorsResponse,
      ReposListCollaboratorsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCollaboratorsResponse,
    ReposListCollaboratorsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/collaborators",
      operationId: "reposListCollaborators",
      variables,
    }),
    () => fetchReposListCollaborators({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposRemoveCollaboratorPathParams = {
  owner: string;
  repo: string;
  username: string;
};

export type ReposRemoveCollaboratorError = Fetcher.ErrorWrapper<undefined>;

export type ReposRemoveCollaboratorVariables = {
  pathParams: ReposRemoveCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposRemoveCollaborator = (
  variables: ReposRemoveCollaboratorVariables
) =>
  githubFetch<
    undefined,
    ReposRemoveCollaboratorError,
    undefined,
    {},
    {},
    ReposRemoveCollaboratorPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators/{username}",
    method: "delete",
    ...variables,
  });

export const useReposRemoveCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposRemoveCollaboratorError,
      ReposRemoveCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposRemoveCollaboratorError,
    ReposRemoveCollaboratorVariables
  >(
    (variables: ReposRemoveCollaboratorVariables) =>
      fetchReposRemoveCollaborator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposCheckCollaboratorPathParams = {
  owner: string;
  repo: string;
  username: string;
};

export type ReposCheckCollaboratorError = Fetcher.ErrorWrapper<undefined>;

export type ReposCheckCollaboratorVariables = {
  pathParams: ReposCheckCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 */
export const fetchReposCheckCollaborator = (
  variables: ReposCheckCollaboratorVariables
) =>
  githubFetch<
    undefined,
    ReposCheckCollaboratorError,
    undefined,
    {},
    {},
    ReposCheckCollaboratorPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators/{username}",
    method: "get",
    ...variables,
  });

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 */
export const useReposCheckCollaborator = <TData = undefined>(
  variables: ReposCheckCollaboratorVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ReposCheckCollaboratorError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, ReposCheckCollaboratorError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/collaborators/{username}",
      operationId: "reposCheckCollaborator",
      variables,
    }),
    () => fetchReposCheckCollaborator({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposAddCollaboratorPathParams = {
  owner: string;
  repo: string;
  username: string;
};

export type ReposAddCollaboratorError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposAddCollaboratorRequestBody = {
  /*
   * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
   * \* `pull` - can pull, but not push to or administer this repository.
   * \* `push` - can pull and push, but not administer this repository.
   * \* `admin` - can pull, push and administer this repository.
   * \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
   * \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
   *
   * @default push
   */
  permission?: "pull" | "push" | "admin" | "maintain" | "triage";
  /*
   * @example "push"
   */
  permissions?: string;
};

export type ReposAddCollaboratorVariables = {
  body?: ReposAddCollaboratorRequestBody;
  pathParams: ReposAddCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * For more information the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
 *
 * **Rate limits**
 *
 * To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
 */
export const fetchReposAddCollaborator = (
  variables: ReposAddCollaboratorVariables
) =>
  githubFetch<
    Schemas.RepositoryInvitation,
    ReposAddCollaboratorError,
    ReposAddCollaboratorRequestBody,
    {},
    {},
    ReposAddCollaboratorPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators/{username}",
    method: "put",
    ...variables,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * For more information the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
 *
 * **Rate limits**
 *
 * To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
 */
export const useReposAddCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RepositoryInvitation,
      ReposAddCollaboratorError,
      ReposAddCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RepositoryInvitation,
    ReposAddCollaboratorError,
    ReposAddCollaboratorVariables
  >(
    (variables: ReposAddCollaboratorVariables) =>
      fetchReposAddCollaborator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetCollaboratorPermissionLevelPathParams = {
  owner: string;
  repo: string;
  username: string;
};

export type ReposGetCollaboratorPermissionLevelError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetCollaboratorPermissionLevelVariables = {
  pathParams: ReposGetCollaboratorPermissionLevelPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
 */
export const fetchReposGetCollaboratorPermissionLevel = (
  variables: ReposGetCollaboratorPermissionLevelVariables
) =>
  githubFetch<
    Schemas.RepositoryCollaboratorPermission,
    ReposGetCollaboratorPermissionLevelError,
    undefined,
    {},
    {},
    ReposGetCollaboratorPermissionLevelPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators/{username}/permission",
    method: "get",
    ...variables,
  });

/**
 * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
 */
export const useReposGetCollaboratorPermissionLevel = <
  TData = Schemas.RepositoryCollaboratorPermission
>(
  variables: ReposGetCollaboratorPermissionLevelVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepositoryCollaboratorPermission,
      ReposGetCollaboratorPermissionLevelError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RepositoryCollaboratorPermission,
    ReposGetCollaboratorPermissionLevelError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/collaborators/{username}/permission",
      operationId: "reposGetCollaboratorPermissionLevel",
      variables,
    }),
    () =>
      fetchReposGetCollaboratorPermissionLevel({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListCommitCommentsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ReposListCommitCommentsForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCommitCommentsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposListCommitCommentsForRepoResponse = Schemas.CommitComment[];

export type ReposListCommitCommentsForRepoVariables = {
  pathParams: ReposListCommitCommentsForRepoPathParams;
  queryParams?: ReposListCommitCommentsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
 *
 * Comments are ordered by ascending ID.
 */
export const fetchReposListCommitCommentsForRepo = (
  variables: ReposListCommitCommentsForRepoVariables
) =>
  githubFetch<
    ReposListCommitCommentsForRepoResponse,
    ReposListCommitCommentsForRepoError,
    undefined,
    {},
    ReposListCommitCommentsForRepoQueryParams,
    ReposListCommitCommentsForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/comments", method: "get", ...variables });

/**
 * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
 *
 * Comments are ordered by ascending ID.
 */
export const useReposListCommitCommentsForRepo = <
  TData = ReposListCommitCommentsForRepoResponse
>(
  variables: ReposListCommitCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitCommentsForRepoResponse,
      ReposListCommitCommentsForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommitCommentsForRepoResponse,
    ReposListCommitCommentsForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/comments",
      operationId: "reposListCommitCommentsForRepo",
      variables,
    }),
    () =>
      fetchReposListCommitCommentsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReposDeleteCommitCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposDeleteCommitCommentVariables = {
  pathParams: ReposDeleteCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteCommitComment = (
  variables: ReposDeleteCommitCommentVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteCommitCommentError,
    undefined,
    {},
    {},
    ReposDeleteCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}",
    method: "delete",
    ...variables,
  });

export const useReposDeleteCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteCommitCommentError,
      ReposDeleteCommitCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteCommitCommentError,
    ReposDeleteCommitCommentVariables
  >(
    (variables: ReposDeleteCommitCommentVariables) =>
      fetchReposDeleteCommitComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReposGetCommitCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetCommitCommentVariables = {
  pathParams: ReposGetCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetCommitComment = (
  variables: ReposGetCommitCommentVariables
) =>
  githubFetch<
    Schemas.CommitComment,
    ReposGetCommitCommentError,
    undefined,
    {},
    {},
    ReposGetCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}",
    method: "get",
    ...variables,
  });

export const useReposGetCommitComment = <TData = Schemas.CommitComment>(
  variables: ReposGetCommitCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommitComment,
      ReposGetCommitCommentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CommitComment,
    ReposGetCommitCommentError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/comments/{comment_id}",
      operationId: "reposGetCommitComment",
      variables,
    }),
    () => fetchReposGetCommitComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReposUpdateCommitCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposUpdateCommitCommentRequestBody = {
  /*
   * The contents of the comment
   */
  body: string;
};

export type ReposUpdateCommitCommentVariables = {
  body: ReposUpdateCommitCommentRequestBody;
  pathParams: ReposUpdateCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposUpdateCommitComment = (
  variables: ReposUpdateCommitCommentVariables
) =>
  githubFetch<
    Schemas.CommitComment,
    ReposUpdateCommitCommentError,
    ReposUpdateCommitCommentRequestBody,
    {},
    {},
    ReposUpdateCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}",
    method: "patch",
    ...variables,
  });

export const useReposUpdateCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CommitComment,
      ReposUpdateCommitCommentError,
      ReposUpdateCommitCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CommitComment,
    ReposUpdateCommitCommentError,
    ReposUpdateCommitCommentVariables
  >(
    (variables: ReposUpdateCommitCommentVariables) =>
      fetchReposUpdateCommitComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsListForCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsListForCommitCommentQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForCommitCommentError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type ReactionsListForCommitCommentResponse = Schemas.Reaction[];

export type ReactionsListForCommitCommentVariables = {
  pathParams: ReactionsListForCommitCommentPathParams;
  queryParams?: ReactionsListForCommitCommentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const fetchReactionsListForCommitComment = (
  variables: ReactionsListForCommitCommentVariables
) =>
  githubFetch<
    ReactionsListForCommitCommentResponse,
    ReactionsListForCommitCommentError,
    undefined,
    {},
    ReactionsListForCommitCommentQueryParams,
    ReactionsListForCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const useReactionsListForCommitComment = <
  TData = ReactionsListForCommitCommentResponse
>(
  variables: ReactionsListForCommitCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForCommitCommentResponse,
      ReactionsListForCommitCommentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForCommitCommentResponse,
    ReactionsListForCommitCommentError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
      operationId: "reactionsListForCommitComment",
      variables,
    }),
    () =>
      fetchReactionsListForCommitComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsCreateForCommitCommentError = Fetcher.ErrorWrapper<
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReactionsCreateForCommitCommentRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForCommitCommentVariables = {
  body: ReactionsCreateForCommitCommentRequestBody;
  pathParams: ReactionsCreateForCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.
 */
export const fetchReactionsCreateForCommitComment = (
  variables: ReactionsCreateForCommitCommentVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForCommitCommentError,
    ReactionsCreateForCommitCommentRequestBody,
    {},
    {},
    ReactionsCreateForCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.
 */
export const useReactionsCreateForCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForCommitCommentError,
      ReactionsCreateForCommitCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForCommitCommentError,
    ReactionsCreateForCommitCommentVariables
  >(
    (variables: ReactionsCreateForCommitCommentVariables) =>
      fetchReactionsCreateForCommitComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsDeleteForCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
  reactionId: number;
};

export type ReactionsDeleteForCommitCommentError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForCommitCommentVariables = {
  pathParams: ReactionsDeleteForCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const fetchReactionsDeleteForCommitComment = (
  variables: ReactionsDeleteForCommitCommentVariables
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForCommitCommentError,
    undefined,
    {},
    {},
    ReactionsDeleteForCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const useReactionsDeleteForCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForCommitCommentError,
      ReactionsDeleteForCommitCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForCommitCommentError,
    ReactionsDeleteForCommitCommentVariables
  >(
    (variables: ReactionsDeleteForCommitCommentVariables) =>
      fetchReactionsDeleteForCommitComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListCommitsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListCommitsQueryParams = {
  /*
   * SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).
   */
  sha?: string;
  /*
   * Only commits containing this file path will be returned.
   */
  path?: string;
  /*
   * GitHub login or email address by which to filter by commit author.
   */
  author?: string;
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  until?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * legacy parameter for pagination.
   */
  top?: string;
  /*
   * legacy parameter for pagination.
   */
  last_sha?: string;
};

export type ReposListCommitsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type ReposListCommitsResponse = Schemas.Commit[];

export type ReposListCommitsVariables = {
  pathParams: ReposListCommitsPathParams;
  queryParams?: ReposListCommitsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchReposListCommits = (variables: ReposListCommitsVariables) =>
  githubFetch<
    ReposListCommitsResponse,
    ReposListCommitsError,
    undefined,
    {},
    ReposListCommitsQueryParams,
    ReposListCommitsPathParams
  >({ url: "/repos/{owner}/{repo}/commits", method: "get", ...variables });

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useReposListCommits = <TData = ReposListCommitsResponse>(
  variables: ReposListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitsResponse,
      ReposListCommitsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommitsResponse,
    ReposListCommitsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits",
      operationId: "reposListCommits",
      variables,
    }),
    () => fetchReposListCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListBranchesForHeadCommitPathParams = {
  owner: string;
  repo: string;
  /*
   * commit_sha parameter
   */
  commitSha: string;
};

export type ReposListBranchesForHeadCommitError = Fetcher.ErrorWrapper<
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposListBranchesForHeadCommitResponse = Schemas.BranchShort[];

export type ReposListBranchesForHeadCommitVariables = {
  pathParams: ReposListBranchesForHeadCommitPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 */
export const fetchReposListBranchesForHeadCommit = (
  variables: ReposListBranchesForHeadCommitVariables
) =>
  githubFetch<
    ReposListBranchesForHeadCommitResponse,
    ReposListBranchesForHeadCommitError,
    undefined,
    {},
    {},
    ReposListBranchesForHeadCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/branches-where-head",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 */
export const useReposListBranchesForHeadCommit = <
  TData = ReposListBranchesForHeadCommitResponse
>(
  variables: ReposListBranchesForHeadCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListBranchesForHeadCommitResponse,
      ReposListBranchesForHeadCommitError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListBranchesForHeadCommitResponse,
    ReposListBranchesForHeadCommitError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
      operationId: "reposListBranchesForHeadCommit",
      variables,
    }),
    () =>
      fetchReposListBranchesForHeadCommit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListCommentsForCommitPathParams = {
  owner: string;
  repo: string;
  /*
   * commit_sha parameter
   */
  commitSha: string;
};

export type ReposListCommentsForCommitQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCommentsForCommitError = Fetcher.ErrorWrapper<undefined>;

export type ReposListCommentsForCommitResponse = Schemas.CommitComment[];

export type ReposListCommentsForCommitVariables = {
  pathParams: ReposListCommentsForCommitPathParams;
  queryParams?: ReposListCommentsForCommitQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Use the `:commit_sha` to specify the commit that will have its comments listed.
 */
export const fetchReposListCommentsForCommit = (
  variables: ReposListCommentsForCommitVariables
) =>
  githubFetch<
    ReposListCommentsForCommitResponse,
    ReposListCommentsForCommitError,
    undefined,
    {},
    ReposListCommentsForCommitQueryParams,
    ReposListCommentsForCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/comments",
    method: "get",
    ...variables,
  });

/**
 * Use the `:commit_sha` to specify the commit that will have its comments listed.
 */
export const useReposListCommentsForCommit = <
  TData = ReposListCommentsForCommitResponse
>(
  variables: ReposListCommentsForCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommentsForCommitResponse,
      ReposListCommentsForCommitError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommentsForCommitResponse,
    ReposListCommentsForCommitError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
      operationId: "reposListCommentsForCommit",
      variables,
    }),
    () => fetchReposListCommentsForCommit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * commit_sha parameter
   */
  commitSha: string;
};

export type ReposCreateCommitCommentError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateCommitCommentRequestBody = {
  /*
   * The contents of the comment.
   */
  body: string;
  /*
   * **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
   */
  line?: number;
  /*
   * Relative path of the file to comment on.
   */
  path?: string;
  /*
   * Line index in the diff to comment on.
   */
  position?: number;
};

export type ReposCreateCommitCommentVariables = {
  body: ReposCreateCommitCommentRequestBody;
  pathParams: ReposCreateCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a comment for a commit using its `:commit_sha`.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchReposCreateCommitComment = (
  variables: ReposCreateCommitCommentVariables
) =>
  githubFetch<
    Schemas.CommitComment,
    ReposCreateCommitCommentError,
    ReposCreateCommitCommentRequestBody,
    {},
    {},
    ReposCreateCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/comments",
    method: "post",
    ...variables,
  });

/**
 * Create a comment for a commit using its `:commit_sha`.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const useReposCreateCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CommitComment,
      ReposCreateCommitCommentError,
      ReposCreateCommitCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CommitComment,
    ReposCreateCommitCommentError,
    ReposCreateCommitCommentVariables
  >(
    (variables: ReposCreateCommitCommentVariables) =>
      fetchReposCreateCommitComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListPullRequestsAssociatedWithCommitPathParams = {
  owner: string;
  repo: string;
  /*
   * commit_sha parameter
   */
  commitSha: string;
};

export type ReposListPullRequestsAssociatedWithCommitQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListPullRequestsAssociatedWithCommitError =
  Fetcher.ErrorWrapper<{
    status: 415;
    payload: Responses.PreviewHeaderMissing;
  }>;

export type ReposListPullRequestsAssociatedWithCommitResponse =
  Schemas.PullRequestSimple[];

export type ReposListPullRequestsAssociatedWithCommitVariables = {
  pathParams: ReposListPullRequestsAssociatedWithCommitPathParams;
  queryParams?: ReposListPullRequestsAssociatedWithCommitQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.
 */
export const fetchReposListPullRequestsAssociatedWithCommit = (
  variables: ReposListPullRequestsAssociatedWithCommitVariables
) =>
  githubFetch<
    ReposListPullRequestsAssociatedWithCommitResponse,
    ReposListPullRequestsAssociatedWithCommitError,
    undefined,
    {},
    ReposListPullRequestsAssociatedWithCommitQueryParams,
    ReposListPullRequestsAssociatedWithCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/pulls",
    method: "get",
    ...variables,
  });

/**
 * Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.
 */
export const useReposListPullRequestsAssociatedWithCommit = <
  TData = ReposListPullRequestsAssociatedWithCommitResponse
>(
  variables: ReposListPullRequestsAssociatedWithCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPullRequestsAssociatedWithCommitResponse,
      ReposListPullRequestsAssociatedWithCommitError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListPullRequestsAssociatedWithCommitResponse,
    ReposListPullRequestsAssociatedWithCommitError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/pulls",
      operationId: "reposListPullRequestsAssociatedWithCommit",
      variables,
    }),
    () =>
      fetchReposListPullRequestsAssociatedWithCommit({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetCommitPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type ReposGetCommitQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ReposGetCommitError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type ReposGetCommitVariables = {
  pathParams: ReposGetCommitPathParams;
  queryParams?: ReposGetCommitQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
 *
 * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
 *
 * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
 *
 * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchReposGetCommit = (variables: ReposGetCommitVariables) =>
  githubFetch<
    Schemas.Commit,
    ReposGetCommitError,
    undefined,
    {},
    ReposGetCommitQueryParams,
    ReposGetCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}",
    method: "get",
    ...variables,
  });

/**
 * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
 *
 * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
 *
 * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
 *
 * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useReposGetCommit = <TData = Schemas.Commit>(
  variables: ReposGetCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Commit, ReposGetCommitError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Commit, ReposGetCommitError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{ref}",
      operationId: "reposGetCommit",
      variables,
    }),
    () => fetchReposGetCommit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksListForRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type ChecksListForRefQueryParams = {
  /*
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /*
   * Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: "queued" | "in_progress" | "completed";
  /*
   * Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
   *
   * @default latest
   */
  filter?: "latest" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  app_id?: number;
};

export type ChecksListForRefError = Fetcher.ErrorWrapper<undefined>;

export type ChecksListForRefResponse = {
  check_runs: Schemas.CheckRun[];
  total_count: number;
};

export type ChecksListForRefVariables = {
  pathParams: ChecksListForRefPathParams;
  queryParams?: ChecksListForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const fetchChecksListForRef = (variables: ChecksListForRefVariables) =>
  githubFetch<
    ChecksListForRefResponse,
    ChecksListForRefError,
    undefined,
    {},
    ChecksListForRefQueryParams,
    ChecksListForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/check-runs",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useChecksListForRef = <TData = ChecksListForRefResponse>(
  variables: ChecksListForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListForRefResponse,
      ChecksListForRefError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListForRefResponse,
    ChecksListForRefError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{ref}/check-runs",
      operationId: "checksListForRef",
      variables,
    }),
    () => fetchChecksListForRef({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksListSuitesForRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type ChecksListSuitesForRefQueryParams = {
  /*
   * Filters check suites by GitHub App `id`.
   */
  app_id?: number;
  /*
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ChecksListSuitesForRefError = Fetcher.ErrorWrapper<undefined>;

export type ChecksListSuitesForRefResponse = {
  check_suites: Schemas.CheckSuite[];
  total_count: number;
};

export type ChecksListSuitesForRefVariables = {
  pathParams: ChecksListSuitesForRefPathParams;
  queryParams?: ChecksListSuitesForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const fetchChecksListSuitesForRef = (
  variables: ChecksListSuitesForRefVariables
) =>
  githubFetch<
    ChecksListSuitesForRefResponse,
    ChecksListSuitesForRefError,
    undefined,
    {},
    ChecksListSuitesForRefQueryParams,
    ChecksListSuitesForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/check-suites",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const useChecksListSuitesForRef = <
  TData = ChecksListSuitesForRefResponse
>(
  variables: ChecksListSuitesForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListSuitesForRefResponse,
      ChecksListSuitesForRefError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListSuitesForRefResponse,
    ChecksListSuitesForRefError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{ref}/check-suites",
      operationId: "checksListSuitesForRef",
      variables,
    }),
    () => fetchChecksListSuitesForRef({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetCombinedStatusForRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type ReposGetCombinedStatusForRefQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposGetCombinedStatusForRefError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetCombinedStatusForRefVariables = {
  pathParams: ReposGetCombinedStatusForRefPathParams;
  queryParams?: ReposGetCombinedStatusForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
 *
 * The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.
 *
 * Additionally, a combined `state` is returned. The `state` is one of:
 *
 * *   **failure** if any of the contexts report as `error` or `failure`
 * *   **pending** if there are no statuses or a context is `pending`
 * *   **success** if the latest status for all contexts is `success`
 */
export const fetchReposGetCombinedStatusForRef = (
  variables: ReposGetCombinedStatusForRefVariables
) =>
  githubFetch<
    Schemas.CombinedCommitStatus,
    ReposGetCombinedStatusForRefError,
    undefined,
    {},
    ReposGetCombinedStatusForRefQueryParams,
    ReposGetCombinedStatusForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/status",
    method: "get",
    ...variables,
  });

/**
 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
 *
 * The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.
 *
 * Additionally, a combined `state` is returned. The `state` is one of:
 *
 * *   **failure** if any of the contexts report as `error` or `failure`
 * *   **pending** if there are no statuses or a context is `pending`
 * *   **success** if the latest status for all contexts is `success`
 */
export const useReposGetCombinedStatusForRef = <
  TData = Schemas.CombinedCommitStatus
>(
  variables: ReposGetCombinedStatusForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedCommitStatus,
      ReposGetCombinedStatusForRefError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CombinedCommitStatus,
    ReposGetCombinedStatusForRefError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{ref}/status",
      operationId: "reposGetCombinedStatusForRef",
      variables,
    }),
    () =>
      fetchReposGetCombinedStatusForRef({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListCommitStatusesForRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type ReposListCommitStatusesForRefQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCommitStatusesForRefError = Fetcher.ErrorWrapper<{
  status: 301;
  payload: Responses.MovedPermanently;
}>;

export type ReposListCommitStatusesForRefResponse = Schemas.Status[];

export type ReposListCommitStatusesForRefVariables = {
  pathParams: ReposListCommitStatusesForRefPathParams;
  queryParams?: ReposListCommitStatusesForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
 *
 * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
 */
export const fetchReposListCommitStatusesForRef = (
  variables: ReposListCommitStatusesForRefVariables
) =>
  githubFetch<
    ReposListCommitStatusesForRefResponse,
    ReposListCommitStatusesForRefError,
    undefined,
    {},
    ReposListCommitStatusesForRefQueryParams,
    ReposListCommitStatusesForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/statuses",
    method: "get",
    ...variables,
  });

/**
 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
 *
 * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
 */
export const useReposListCommitStatusesForRef = <
  TData = ReposListCommitStatusesForRefResponse
>(
  variables: ReposListCommitStatusesForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitStatusesForRefResponse,
      ReposListCommitStatusesForRefError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommitStatusesForRefResponse,
    ReposListCommitStatusesForRefError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{ref}/statuses",
      operationId: "reposListCommitStatusesForRef",
      variables,
    }),
    () =>
      fetchReposListCommitStatusesForRef({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodesOfConductGetForRepoPathParams = {
  owner: string;
  repo: string;
};

export type CodesOfConductGetForRepoError = Fetcher.ErrorWrapper<undefined>;

export type CodesOfConductGetForRepoVariables = {
  pathParams: CodesOfConductGetForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the contents of the repository's code of conduct file, if one is detected.
 *
 * A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.
 */
export const fetchCodesOfConductGetForRepo = (
  variables: CodesOfConductGetForRepoVariables
) =>
  githubFetch<
    Schemas.CodeOfConduct,
    CodesOfConductGetForRepoError,
    undefined,
    {},
    {},
    CodesOfConductGetForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/community/code_of_conduct",
    method: "get",
    ...variables,
  });

/**
 * Returns the contents of the repository's code of conduct file, if one is detected.
 *
 * A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.
 */
export const useCodesOfConductGetForRepo = <TData = Schemas.CodeOfConduct>(
  variables: CodesOfConductGetForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeOfConduct,
      CodesOfConductGetForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeOfConduct,
    CodesOfConductGetForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/community/code_of_conduct",
      operationId: "codesOfConductGetForRepo",
      variables,
    }),
    () => fetchCodesOfConductGetForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetCommunityProfileMetricsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetCommunityProfileMetricsError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposGetCommunityProfileMetricsVariables = {
  pathParams: ReposGetCommunityProfileMetricsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint will return all community profile metrics, including an
 * overall health score, repository description, the presence of documentation, detected
 * code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
 * README, and CONTRIBUTING files.
 *
 * The `health_percentage` score is defined as a percentage of how many of
 * these four documents are present: README, CONTRIBUTING, LICENSE, and
 * CODE_OF_CONDUCT. For example, if all four documents are present, then
 * the `health_percentage` is `100`. If only one is present, then the
 * `health_percentage` is `25`.
 *
 * `content_reports_enabled` is only returned for organization-owned repositories.
 */
export const fetchReposGetCommunityProfileMetrics = (
  variables: ReposGetCommunityProfileMetricsVariables
) =>
  githubFetch<
    Schemas.CommunityProfile,
    ReposGetCommunityProfileMetricsError,
    undefined,
    {},
    {},
    ReposGetCommunityProfileMetricsPathParams
  >({
    url: "/repos/{owner}/{repo}/community/profile",
    method: "get",
    ...variables,
  });

/**
 * This endpoint will return all community profile metrics, including an
 * overall health score, repository description, the presence of documentation, detected
 * code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
 * README, and CONTRIBUTING files.
 *
 * The `health_percentage` score is defined as a percentage of how many of
 * these four documents are present: README, CONTRIBUTING, LICENSE, and
 * CODE_OF_CONDUCT. For example, if all four documents are present, then
 * the `health_percentage` is `100`. If only one is present, then the
 * `health_percentage` is `25`.
 *
 * `content_reports_enabled` is only returned for organization-owned repositories.
 */
export const useReposGetCommunityProfileMetrics = <
  TData = Schemas.CommunityProfile
>(
  variables: ReposGetCommunityProfileMetricsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommunityProfile,
      ReposGetCommunityProfileMetricsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CommunityProfile,
    ReposGetCommunityProfileMetricsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/community/profile",
      operationId: "reposGetCommunityProfileMetrics",
      variables,
    }),
    () =>
      fetchReposGetCommunityProfileMetrics({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCompareCommitsPathParams = {
  owner: string;
  repo: string;
  base: string;
  head: string;
};

export type ReposCompareCommitsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type ReposCompareCommitsVariables = {
  pathParams: ReposCompareCommitsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.
 *
 * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 *
 * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
 *
 * **Working with large comparisons**
 *
 * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) to enumerate all commits in the range.
 *
 * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long
 * to generate. You can typically resolve this error by using a smaller commit range.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchReposCompareCommits = (
  variables: ReposCompareCommitsVariables
) =>
  githubFetch<
    Schemas.CommitComparison,
    ReposCompareCommitsError,
    undefined,
    {},
    {},
    ReposCompareCommitsPathParams
  >({
    url: "/repos/{owner}/{repo}/compare/{base}...{head}",
    method: "get",
    ...variables,
  });

/**
 * Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.
 *
 * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 *
 * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
 *
 * **Working with large comparisons**
 *
 * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) to enumerate all commits in the range.
 *
 * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long
 * to generate. You can typically resolve this error by using a smaller commit range.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useReposCompareCommits = <TData = Schemas.CommitComparison>(
  variables: ReposCompareCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommitComparison,
      ReposCompareCommitsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CommitComparison,
    ReposCompareCommitsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/compare/{base}...{head}",
      operationId: "reposCompareCommits",
      variables,
    }),
    () => fetchReposCompareCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteFilePathParams = {
  owner: string;
  repo: string;
  /*
   * path parameter
   */
  path: string;
};

export type ReposDeleteFileError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type ReposDeleteFileRequestBody = {
  /*
   * object containing information about the author.
   */
  author?: {
    /*
     * The email of the author (or committer) of the commit
     */
    email?: string;
    /*
     * The name of the author (or committer) of the commit
     */
    name?: string;
  };
  /*
   * The branch name. Default: the repository’s default branch (usually `master`)
   */
  branch?: string;
  /*
   * object containing information about the committer.
   */
  committer?: {
    /*
     * The email of the author (or committer) of the commit
     */
    email?: string;
    /*
     * The name of the author (or committer) of the commit
     */
    name?: string;
  };
  /*
   * The commit message.
   */
  message: string;
  /*
   * The blob SHA of the file being replaced.
   */
  sha: string;
};

export type ReposDeleteFileVariables = {
  body: ReposDeleteFileRequestBody;
  pathParams: ReposDeleteFilePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a file in a repository.
 *
 * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
 *
 * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
 *
 * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
 */
export const fetchReposDeleteFile = (variables: ReposDeleteFileVariables) =>
  githubFetch<
    Schemas.FileCommit,
    ReposDeleteFileError,
    ReposDeleteFileRequestBody,
    {},
    {},
    ReposDeleteFilePathParams
  >({
    url: "/repos/{owner}/{repo}/contents/{path}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a file in a repository.
 *
 * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
 *
 * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
 *
 * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
 */
export const useReposDeleteFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileCommit,
      ReposDeleteFileError,
      ReposDeleteFileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.FileCommit,
    ReposDeleteFileError,
    ReposDeleteFileVariables
  >(
    (variables: ReposDeleteFileVariables) =>
      fetchReposDeleteFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetContentPathParams = {
  owner: string;
  repo: string;
  /*
   * path parameter
   */
  path: string;
};

export type ReposGetContentQueryParams = {
  /*
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string;
};

export type ReposGetContentError = Fetcher.ErrorWrapper<
  | {
      status: 302;
      payload: Responses.Found;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposGetContentVariables = {
  pathParams: ReposGetContentPathParams;
  queryParams?: ReposGetContentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
 * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
 *
 * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
 * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
 * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
 * object format.
 *
 * **Note**:
 * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
 * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
 * API](https://docs.github.com/rest/reference/git#get-a-tree).
 * *   This API supports files up to 1 megabyte in size.
 *
 * #### If the content is a directory
 * The response will be an array of objects, one object for each item in the directory.
 * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
 * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
 * In the next major version of the API, the type will be returned as "submodule".
 *
 * #### If the content is a symlink
 * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
 * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
 * describing the symlink itself.
 *
 * #### If the content is a submodule
 * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
 * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
 * the submodule at that specific commit.
 *
 * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
 * github.com URLs (`html_url` and `_links["html"]`) will have null values.
 */
export const fetchReposGetContent = (variables: ReposGetContentVariables) =>
  githubFetch<
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule,
    ReposGetContentError,
    undefined,
    {},
    ReposGetContentQueryParams,
    ReposGetContentPathParams
  >({
    url: "/repos/{owner}/{repo}/contents/{path}",
    method: "get",
    ...variables,
  });

/**
 * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
 * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
 *
 * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
 * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
 * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
 * object format.
 *
 * **Note**:
 * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
 * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
 * API](https://docs.github.com/rest/reference/git#get-a-tree).
 * *   This API supports files up to 1 megabyte in size.
 *
 * #### If the content is a directory
 * The response will be an array of objects, one object for each item in the directory.
 * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
 * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
 * In the next major version of the API, the type will be returned as "submodule".
 *
 * #### If the content is a symlink
 * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
 * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
 * describing the symlink itself.
 *
 * #### If the content is a submodule
 * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
 * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
 * the submodule at that specific commit.
 *
 * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
 * github.com URLs (`html_url` and `_links["html"]`) will have null values.
 */
export const useReposGetContent = <
  TData =
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule
>(
  variables: ReposGetContentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      | Schemas.ContentDirectory
      | Schemas.ContentFile
      | Schemas.ContentSymlink
      | Schemas.ContentSubmodule,
      ReposGetContentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule,
    ReposGetContentError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/contents/{path}",
      operationId: "reposGetContent",
      variables,
    }),
    () => fetchReposGetContent({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateOrUpdateFileContentsPathParams = {
  owner: string;
  repo: string;
  /*
   * path parameter
   */
  path: string;
};

export type ReposCreateOrUpdateFileContentsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateOrUpdateFileContentsRequestBody = {
  /*
   * The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
   */
  author?: {
    /*
     * @example "2013-01-15T17:13:22+05:00"
     */
    date?: string;
    /*
     * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
     */
    email: string;
    /*
     * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
     */
    name: string;
  };
  /*
   * The branch name. Default: the repository’s default branch (usually `master`)
   */
  branch?: string;
  /*
   * The person that committed the file. Default: the authenticated user.
   */
  committer?: {
    /*
     * @example "2013-01-05T13:13:22+05:00"
     */
    date?: string;
    /*
     * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
     */
    email: string;
    /*
     * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
     */
    name: string;
  };
  /*
   * The new file content, using Base64 encoding.
   */
  content: string;
  /*
   * The commit message.
   */
  message: string;
  /*
   * **Required if you are updating a file**. The blob SHA of the file being replaced.
   */
  sha?: string;
};

export type ReposCreateOrUpdateFileContentsVariables = {
  body: ReposCreateOrUpdateFileContentsRequestBody;
  pathParams: ReposCreateOrUpdateFileContentsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new file or replaces an existing file in a repository.
 */
export const fetchReposCreateOrUpdateFileContents = (
  variables: ReposCreateOrUpdateFileContentsVariables
) =>
  githubFetch<
    Schemas.FileCommit,
    ReposCreateOrUpdateFileContentsError,
    ReposCreateOrUpdateFileContentsRequestBody,
    {},
    {},
    ReposCreateOrUpdateFileContentsPathParams
  >({
    url: "/repos/{owner}/{repo}/contents/{path}",
    method: "put",
    ...variables,
  });

/**
 * Creates a new file or replaces an existing file in a repository.
 */
export const useReposCreateOrUpdateFileContents = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileCommit,
      ReposCreateOrUpdateFileContentsError,
      ReposCreateOrUpdateFileContentsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.FileCommit,
    ReposCreateOrUpdateFileContentsError,
    ReposCreateOrUpdateFileContentsVariables
  >(
    (variables: ReposCreateOrUpdateFileContentsVariables) =>
      fetchReposCreateOrUpdateFileContents({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListContributorsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListContributorsQueryParams = {
  /*
   * Set to `1` or `true` to include anonymous contributors in results.
   */
  anon?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListContributorsError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposListContributorsResponse = Schemas.Contributor[];

export type ReposListContributorsVariables = {
  pathParams: ReposListContributorsPathParams;
  queryParams?: ReposListContributorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
 *
 * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
 */
export const fetchReposListContributors = (
  variables: ReposListContributorsVariables
) =>
  githubFetch<
    ReposListContributorsResponse,
    ReposListContributorsError,
    undefined,
    {},
    ReposListContributorsQueryParams,
    ReposListContributorsPathParams
  >({ url: "/repos/{owner}/{repo}/contributors", method: "get", ...variables });

/**
 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
 *
 * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
 */
export const useReposListContributors = <TData = ReposListContributorsResponse>(
  variables: ReposListContributorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListContributorsResponse,
      ReposListContributorsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListContributorsResponse,
    ReposListContributorsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/contributors",
      operationId: "reposListContributors",
      variables,
    }),
    () => fetchReposListContributors({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListDeploymentsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListDeploymentsQueryParams = {
  /*
   * The SHA recorded at creation time.
   *
   * @default none
   */
  sha?: string;
  /*
   * The name of the ref. This can be a branch, tag, or SHA.
   *
   * @default none
   */
  ref?: string;
  /*
   * The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
   *
   * @default none
   */
  task?: string;
  /*
   * The name of the environment that was deployed to (e.g., `staging` or `production`).
   *
   * @default none
   */
  environment?: string | null;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListDeploymentsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListDeploymentsResponse = Schemas.Deployment[];

export type ReposListDeploymentsVariables = {
  pathParams: ReposListDeploymentsPathParams;
  queryParams?: ReposListDeploymentsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Simple filtering of deployments is available via query parameters:
 */
export const fetchReposListDeployments = (
  variables: ReposListDeploymentsVariables
) =>
  githubFetch<
    ReposListDeploymentsResponse,
    ReposListDeploymentsError,
    undefined,
    {},
    ReposListDeploymentsQueryParams,
    ReposListDeploymentsPathParams
  >({ url: "/repos/{owner}/{repo}/deployments", method: "get", ...variables });

/**
 * Simple filtering of deployments is available via query parameters:
 */
export const useReposListDeployments = <TData = ReposListDeploymentsResponse>(
  variables: ReposListDeploymentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeploymentsResponse,
      ReposListDeploymentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListDeploymentsResponse,
    ReposListDeploymentsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/deployments",
      operationId: "reposListDeployments",
      variables,
    }),
    () => fetchReposListDeployments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateDeploymentPathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateDeploymentError = Fetcher.ErrorWrapper<
  | {
      status: 409;
      payload: {
        /*
         * @example "https://docs.github.com/rest/reference/repos#create-a-deployment"
         */
        documentation_url?: string;
        message?: string;
      };
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateDeploymentRequestBody = {
  /*
   * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
   *
   * @default true
   */
  auto_merge?: boolean;
  /*
   * @example "1776-07-04T00:00:00.000-07:52"
   */
  created_at?: string;
  /*
   * Short description of the deployment.
   *
   * @default
   */
  description?: string | null;
  /*
   * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
   *
   * @default production
   */
  environment?: string;
  payload?:
    | {
        [key: string]: any;
      }
    | string;
  /*
   * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
   */
  production_environment?: boolean;
  /*
   * The ref to deploy. This can be a branch, tag, or SHA.
   */
  ref: string;
  /*
   * The [status](https://docs.github.com/rest/reference/repos#statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
   */
  required_contexts?: string[];
  /*
   * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
   *
   * @default deploy
   */
  task?: string;
  /*
   * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
   *
   * @default false
   */
  transient_environment?: boolean;
};

export type ReposCreateDeploymentVariables = {
  body: ReposCreateDeploymentRequestBody;
  pathParams: ReposCreateDeploymentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deployments offer a few configurable parameters with certain defaults.
 *
 * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
 * before we merge a pull request.
 *
 * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
 * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
 * makes it easier to track which environments have requested deployments. The default environment is `production`.
 *
 * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
 * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
 * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
 * return a failure response.
 *
 * By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`
 * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
 * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
 * not require any contexts or create any commit statuses, the deployment will always succeed.
 *
 * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
 * field that will be passed on when a deployment event is dispatched.
 *
 * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
 * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
 * application with debugging enabled.
 *
 * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
 *
 * #### Merged branch response
 * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
 * a deployment. This auto-merge happens when:
 * *   Auto-merge option is enabled in the repository
 * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
 * *   There are no merge conflicts
 *
 * If there are no new commits in the base branch, a new request to create a deployment should give a successful
 * response.
 *
 * #### Merge conflict response
 * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
 * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
 *
 * #### Failed commit status checks
 * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
 * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
 */
export const fetchReposCreateDeployment = (
  variables: ReposCreateDeploymentVariables
) =>
  githubFetch<
    | Schemas.Deployment
    | {
        message?: string;
      },
    ReposCreateDeploymentError,
    ReposCreateDeploymentRequestBody,
    {},
    {},
    ReposCreateDeploymentPathParams
  >({ url: "/repos/{owner}/{repo}/deployments", method: "post", ...variables });

/**
 * Deployments offer a few configurable parameters with certain defaults.
 *
 * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
 * before we merge a pull request.
 *
 * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
 * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
 * makes it easier to track which environments have requested deployments. The default environment is `production`.
 *
 * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
 * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
 * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
 * return a failure response.
 *
 * By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`
 * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
 * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
 * not require any contexts or create any commit statuses, the deployment will always succeed.
 *
 * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
 * field that will be passed on when a deployment event is dispatched.
 *
 * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
 * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
 * application with debugging enabled.
 *
 * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
 *
 * #### Merged branch response
 * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
 * a deployment. This auto-merge happens when:
 * *   Auto-merge option is enabled in the repository
 * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
 * *   There are no merge conflicts
 *
 * If there are no new commits in the base branch, a new request to create a deployment should give a successful
 * response.
 *
 * #### Merge conflict response
 * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
 * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
 *
 * #### Failed commit status checks
 * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
 * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
 */
export const useReposCreateDeployment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      | Schemas.Deployment
      | {
          message?: string;
        },
      ReposCreateDeploymentError,
      ReposCreateDeploymentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    | Schemas.Deployment
    | {
        message?: string;
      },
    ReposCreateDeploymentError,
    ReposCreateDeploymentVariables
  >(
    (variables: ReposCreateDeploymentVariables) =>
      fetchReposCreateDeployment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteDeploymentPathParams = {
  owner: string;
  repo: string;
  /*
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposDeleteDeploymentError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ReposDeleteDeploymentVariables = {
  pathParams: ReposDeleteDeploymentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.
 *
 * To set a deployment as inactive, you must:
 *
 * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
 * *   Mark the active deployment as inactive by adding any non-successful deployment status.
 *
 * For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
 */
export const fetchReposDeleteDeployment = (
  variables: ReposDeleteDeploymentVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteDeploymentError,
    undefined,
    {},
    {},
    ReposDeleteDeploymentPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}",
    method: "delete",
    ...variables,
  });

/**
 * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.
 *
 * To set a deployment as inactive, you must:
 *
 * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
 * *   Mark the active deployment as inactive by adding any non-successful deployment status.
 *
 * For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
 */
export const useReposDeleteDeployment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteDeploymentError,
      ReposDeleteDeploymentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteDeploymentError,
    ReposDeleteDeploymentVariables
  >(
    (variables: ReposDeleteDeploymentVariables) =>
      fetchReposDeleteDeployment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetDeploymentPathParams = {
  owner: string;
  repo: string;
  /*
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposGetDeploymentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetDeploymentVariables = {
  pathParams: ReposGetDeploymentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetDeployment = (
  variables: ReposGetDeploymentVariables
) =>
  githubFetch<
    Schemas.Deployment,
    ReposGetDeploymentError,
    undefined,
    {},
    {},
    ReposGetDeploymentPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}",
    method: "get",
    ...variables,
  });

export const useReposGetDeployment = <TData = Schemas.Deployment>(
  variables: ReposGetDeploymentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Deployment,
      ReposGetDeploymentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Deployment,
    ReposGetDeploymentError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}",
      operationId: "reposGetDeployment",
      variables,
    }),
    () => fetchReposGetDeployment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListDeploymentStatusesPathParams = {
  owner: string;
  repo: string;
  /*
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposListDeploymentStatusesQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListDeploymentStatusesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposListDeploymentStatusesResponse = Schemas.DeploymentStatus[];

export type ReposListDeploymentStatusesVariables = {
  pathParams: ReposListDeploymentStatusesPathParams;
  queryParams?: ReposListDeploymentStatusesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access can view deployment statuses for a deployment:
 */
export const fetchReposListDeploymentStatuses = (
  variables: ReposListDeploymentStatusesVariables
) =>
  githubFetch<
    ReposListDeploymentStatusesResponse,
    ReposListDeploymentStatusesError,
    undefined,
    {},
    ReposListDeploymentStatusesQueryParams,
    ReposListDeploymentStatusesPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses",
    method: "get",
    ...variables,
  });

/**
 * Users with pull access can view deployment statuses for a deployment:
 */
export const useReposListDeploymentStatuses = <
  TData = ReposListDeploymentStatusesResponse
>(
  variables: ReposListDeploymentStatusesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeploymentStatusesResponse,
      ReposListDeploymentStatusesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListDeploymentStatusesResponse,
    ReposListDeploymentStatusesError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
      operationId: "reposListDeploymentStatuses",
      variables,
    }),
    () => fetchReposListDeploymentStatuses({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateDeploymentStatusPathParams = {
  owner: string;
  repo: string;
  /*
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposCreateDeploymentStatusError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposCreateDeploymentStatusRequestBody = {
  /*
   * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
   * **Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type.
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
   */
  auto_inactive?: boolean;
  /*
   * A short description of the status. The maximum description length is 140 characters.
   *
   * @default
   */
  description?: string;
  /*
   * Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type.
   */
  environment?: "production" | "staging" | "qa";
  /*
   * Sets the URL for accessing your environment. Default: `""`
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
   *
   * @default
   */
  environment_url?: string;
  /*
   * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
   *
   * @default
   */
  log_url?: string;
  /*
   * The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
   */
  state:
    | "error"
    | "failure"
    | "inactive"
    | "in_progress"
    | "queued"
    | "pending"
    | "success";
  /*
   * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
   *
   * @default
   */
  target_url?: string;
};

export type ReposCreateDeploymentStatusVariables = {
  body: ReposCreateDeploymentStatusRequestBody;
  pathParams: ReposCreateDeploymentStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with `push` access can create deployment statuses for a given deployment.
 *
 * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
 */
export const fetchReposCreateDeploymentStatus = (
  variables: ReposCreateDeploymentStatusVariables
) =>
  githubFetch<
    Schemas.DeploymentStatus,
    ReposCreateDeploymentStatusError,
    ReposCreateDeploymentStatusRequestBody,
    {},
    {},
    ReposCreateDeploymentStatusPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses",
    method: "post",
    ...variables,
  });

/**
 * Users with `push` access can create deployment statuses for a given deployment.
 *
 * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
 */
export const useReposCreateDeploymentStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeploymentStatus,
      ReposCreateDeploymentStatusError,
      ReposCreateDeploymentStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.DeploymentStatus,
    ReposCreateDeploymentStatusError,
    ReposCreateDeploymentStatusVariables
  >(
    (variables: ReposCreateDeploymentStatusVariables) =>
      fetchReposCreateDeploymentStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetDeploymentStatusPathParams = {
  owner: string;
  repo: string;
  /*
   * deployment_id parameter
   */
  deploymentId: number;
  statusId: number;
};

export type ReposGetDeploymentStatusError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type ReposGetDeploymentStatusVariables = {
  pathParams: ReposGetDeploymentStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access can view a deployment status for a deployment:
 */
export const fetchReposGetDeploymentStatus = (
  variables: ReposGetDeploymentStatusVariables
) =>
  githubFetch<
    Schemas.DeploymentStatus,
    ReposGetDeploymentStatusError,
    undefined,
    {},
    {},
    ReposGetDeploymentStatusPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses/{statusId}",
    method: "get",
    ...variables,
  });

/**
 * Users with pull access can view a deployment status for a deployment:
 */
export const useReposGetDeploymentStatus = <TData = Schemas.DeploymentStatus>(
  variables: ReposGetDeploymentStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeploymentStatus,
      ReposGetDeploymentStatusError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.DeploymentStatus,
    ReposGetDeploymentStatusError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
      operationId: "reposGetDeploymentStatus",
      variables,
    }),
    () => fetchReposGetDeploymentStatus({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateDispatchEventPathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateDispatchEventError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposCreateDispatchEventRequestBody = {
  /*
   * JSON payload with extra information about the webhook event that your action or worklow may use.
   */
  client_payload?: {
    [key: string]: any;
  };
  /*
   * A custom webhook event name.
   */
  event_type: string;
};

export type ReposCreateDispatchEventVariables = {
  body: ReposCreateDispatchEventRequestBody;
  pathParams: ReposCreateDispatchEventPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
 *
 * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
 *
 * This endpoint requires write access to the repository by providing either:
 *
 *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
 *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
 *
 * This input example shows how you can use the `client_payload` as a test to debug your workflow.
 */
export const fetchReposCreateDispatchEvent = (
  variables: ReposCreateDispatchEventVariables
) =>
  githubFetch<
    undefined,
    ReposCreateDispatchEventError,
    ReposCreateDispatchEventRequestBody,
    {},
    {},
    ReposCreateDispatchEventPathParams
  >({ url: "/repos/{owner}/{repo}/dispatches", method: "post", ...variables });

/**
 * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
 *
 * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
 *
 * This endpoint requires write access to the repository by providing either:
 *
 *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
 *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
 *
 * This input example shows how you can use the `client_payload` as a test to debug your workflow.
 */
export const useReposCreateDispatchEvent = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposCreateDispatchEventError,
      ReposCreateDispatchEventVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposCreateDispatchEventError,
    ReposCreateDispatchEventVariables
  >(
    (variables: ReposCreateDispatchEventVariables) =>
      fetchReposCreateDispatchEvent({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetAllEnvironmentsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetAllEnvironmentsError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetAllEnvironmentsResponse = {
  environments?: Schemas.Environment[];
  /*
   * The number of environments in this repository
   *
   * @example 5
   */
  total_count?: number;
};

export type ReposGetAllEnvironmentsVariables = {
  pathParams: ReposGetAllEnvironmentsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get all environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchReposGetAllEnvironments = (
  variables: ReposGetAllEnvironmentsVariables
) =>
  githubFetch<
    ReposGetAllEnvironmentsResponse,
    ReposGetAllEnvironmentsError,
    undefined,
    {},
    {},
    ReposGetAllEnvironmentsPathParams
  >({ url: "/repos/{owner}/{repo}/environments", method: "get", ...variables });

/**
 * Get all environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useReposGetAllEnvironments = <
  TData = ReposGetAllEnvironmentsResponse
>(
  variables: ReposGetAllEnvironmentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAllEnvironmentsResponse,
      ReposGetAllEnvironmentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetAllEnvironmentsResponse,
    ReposGetAllEnvironmentsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/environments",
      operationId: "reposGetAllEnvironments",
      variables,
    }),
    () => fetchReposGetAllEnvironments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteAnEnvironmentPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the environment
   */
  environmentName: string;
};

export type ReposDeleteAnEnvironmentError = Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteAnEnvironmentVariables = {
  pathParams: ReposDeleteAnEnvironmentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const fetchReposDeleteAnEnvironment = (
  variables: ReposDeleteAnEnvironmentVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteAnEnvironmentError,
    undefined,
    {},
    {},
    ReposDeleteAnEnvironmentPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}",
    method: "delete",
    ...variables,
  });

/**
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const useReposDeleteAnEnvironment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteAnEnvironmentError,
      ReposDeleteAnEnvironmentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteAnEnvironmentError,
    ReposDeleteAnEnvironmentVariables
  >(
    (variables: ReposDeleteAnEnvironmentVariables) =>
      fetchReposDeleteAnEnvironment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetEnvironmentPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the environment
   */
  environmentName: string;
};

export type ReposGetEnvironmentError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetEnvironmentVariables = {
  pathParams: ReposGetEnvironmentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchReposGetEnvironment = (
  variables: ReposGetEnvironmentVariables
) =>
  githubFetch<
    Schemas.Environment,
    ReposGetEnvironmentError,
    undefined,
    {},
    {},
    ReposGetEnvironmentPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}",
    method: "get",
    ...variables,
  });

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useReposGetEnvironment = <TData = Schemas.Environment>(
  variables: ReposGetEnvironmentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Environment,
      ReposGetEnvironmentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Environment,
    ReposGetEnvironmentError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/environments/{environment_name}",
      operationId: "reposGetEnvironment",
      variables,
    }),
    () => fetchReposGetEnvironment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateOrUpdateEnvironmentPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the environment
   */
  environmentName: string;
};

export type ReposCreateOrUpdateEnvironmentError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.BasicError;
}>;

export type ReposCreateOrUpdateEnvironmentVariables = {
  body?: {
    deployment_branch_policy?: Schemas.DeploymentBranchPolicy;
    /*
     * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
     */
    reviewers?:
      | {
          /*
           * The id of the user or team who can review the deployment
           *
           * @example 4532992
           */
          id?: number;
          type?: Schemas.DeploymentReviewerType;
        }[]
      | null;
    wait_timer?: Schemas.WaitTimer;
  } | null;
  pathParams: ReposCreateOrUpdateEnvironmentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
 *
 * **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see "[Environments](/actions/reference/environments#deployment-branches)."
 *
 * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
 *
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const fetchReposCreateOrUpdateEnvironment = (
  variables: ReposCreateOrUpdateEnvironmentVariables
) =>
  githubFetch<
    Schemas.Environment,
    ReposCreateOrUpdateEnvironmentError,
    {
      deployment_branch_policy?: Schemas.DeploymentBranchPolicy;
      /*
       * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
       */
      reviewers?:
        | {
            /*
             * The id of the user or team who can review the deployment
             *
             * @example 4532992
             */
            id?: number;
            type?: Schemas.DeploymentReviewerType;
          }[]
        | null;
      wait_timer?: Schemas.WaitTimer;
    } | null,
    {},
    {},
    ReposCreateOrUpdateEnvironmentPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}",
    method: "put",
    ...variables,
  });

/**
 * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
 *
 * **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see "[Environments](/actions/reference/environments#deployment-branches)."
 *
 * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
 *
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const useReposCreateOrUpdateEnvironment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Environment,
      ReposCreateOrUpdateEnvironmentError,
      ReposCreateOrUpdateEnvironmentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Environment,
    ReposCreateOrUpdateEnvironmentError,
    ReposCreateOrUpdateEnvironmentVariables
  >(
    (variables: ReposCreateOrUpdateEnvironmentVariables) =>
      fetchReposCreateOrUpdateEnvironment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityListRepoEventsPathParams = {
  owner: string;
  repo: string;
};

export type ActivityListRepoEventsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListRepoEventsError = Fetcher.ErrorWrapper<undefined>;

export type ActivityListRepoEventsResponse = Schemas.Event[];

export type ActivityListRepoEventsVariables = {
  pathParams: ActivityListRepoEventsPathParams;
  queryParams?: ActivityListRepoEventsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListRepoEvents = (
  variables: ActivityListRepoEventsVariables
) =>
  githubFetch<
    ActivityListRepoEventsResponse,
    ActivityListRepoEventsError,
    undefined,
    {},
    ActivityListRepoEventsQueryParams,
    ActivityListRepoEventsPathParams
  >({ url: "/repos/{owner}/{repo}/events", method: "get", ...variables });

export const useActivityListRepoEvents = <
  TData = ActivityListRepoEventsResponse
>(
  variables: ActivityListRepoEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListRepoEventsResponse,
      ActivityListRepoEventsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListRepoEventsResponse,
    ActivityListRepoEventsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/events",
      operationId: "activityListRepoEvents",
      variables,
    }),
    () => fetchActivityListRepoEvents({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListForksPathParams = {
  owner: string;
  repo: string;
};

export type ReposListForksQueryParams = {
  /*
   * The sort order. Can be either `newest`, `oldest`, or `stargazers`.
   *
   * @default newest
   */
  sort?: "newest" | "oldest" | "stargazers" | "watchers";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * legacy query parameter for specifying the org.
   */
  org?: string;
  /*
   * legacy query parameter for specifying the org.
   */
  organization?: string;
};

export type ReposListForksError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.BadRequest;
}>;

export type ReposListForksResponse = Schemas.MinimalRepository[];

export type ReposListForksVariables = {
  pathParams: ReposListForksPathParams;
  queryParams?: ReposListForksQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListForks = (variables: ReposListForksVariables) =>
  githubFetch<
    ReposListForksResponse,
    ReposListForksError,
    undefined,
    {},
    ReposListForksQueryParams,
    ReposListForksPathParams
  >({ url: "/repos/{owner}/{repo}/forks", method: "get", ...variables });

export const useReposListForks = <TData = ReposListForksResponse>(
  variables: ReposListForksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForksResponse,
      ReposListForksError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForksResponse,
    ReposListForksError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/forks",
      operationId: "reposListForks",
      variables,
    }),
    () => fetchReposListForks({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateForkPathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateForkQueryParams = {
  /*
   * legacy query parameter for specifying the org.
   */
  org?: string;
  /*
   * legacy query parameter for specifying the org.
   */
  organization?: string;
};

export type ReposCreateForkError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateForkVariables = {
  body?: {
    /*
     * Optional parameter to specify the organization name if forking into an organization.
     */
    organization?: string;
  } | null;
  pathParams: ReposCreateForkPathParams;
  queryParams?: ReposCreateForkQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a fork for the authenticated user.
 *
 * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).
 */
export const fetchReposCreateFork = (variables: ReposCreateForkVariables) =>
  githubFetch<
    Schemas.Repository,
    ReposCreateForkError,
    {
      /*
       * Optional parameter to specify the organization name if forking into an organization.
       */
      organization?: string;
    } | null,
    {},
    ReposCreateForkQueryParams,
    ReposCreateForkPathParams
  >({ url: "/repos/{owner}/{repo}/forks", method: "post", ...variables });

/**
 * Create a fork for the authenticated user.
 *
 * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).
 */
export const useReposCreateFork = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      ReposCreateForkError,
      ReposCreateForkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    ReposCreateForkError,
    ReposCreateForkVariables
  >(
    (variables: ReposCreateForkVariables) =>
      fetchReposCreateFork({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitCreateBlobPathParams = {
  owner: string;
  repo: string;
};

export type GitCreateBlobError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GitCreateBlobRequestBody = {
  /*
   * The new blob's content.
   */
  content: string;
  /*
   * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
   *
   * @default utf-8
   */
  encoding?: string;
};

export type GitCreateBlobVariables = {
  body: GitCreateBlobRequestBody;
  pathParams: GitCreateBlobPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGitCreateBlob = (variables: GitCreateBlobVariables) =>
  githubFetch<
    Schemas.ShortBlob,
    GitCreateBlobError,
    GitCreateBlobRequestBody,
    {},
    {},
    GitCreateBlobPathParams
  >({ url: "/repos/{owner}/{repo}/git/blobs", method: "post", ...variables });

export const useGitCreateBlob = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ShortBlob,
      GitCreateBlobError,
      GitCreateBlobVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ShortBlob,
    GitCreateBlobError,
    GitCreateBlobVariables
  >(
    (variables: GitCreateBlobVariables) =>
      fetchGitCreateBlob({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitGetBlobPathParams = {
  owner: string;
  repo: string;
  fileSha: string;
};

export type GitGetBlobError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GitGetBlobVariables = {
  pathParams: GitGetBlobPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The `content` in the response will always be Base64 encoded.
 *
 * _Note_: This API supports blobs up to 100 megabytes in size.
 */
export const fetchGitGetBlob = (variables: GitGetBlobVariables) =>
  githubFetch<
    Schemas.Blob,
    GitGetBlobError,
    undefined,
    {},
    {},
    GitGetBlobPathParams
  >({
    url: "/repos/{owner}/{repo}/git/blobs/{fileSha}",
    method: "get",
    ...variables,
  });

/**
 * The `content` in the response will always be Base64 encoded.
 *
 * _Note_: This API supports blobs up to 100 megabytes in size.
 */
export const useGitGetBlob = <TData = Schemas.Blob>(
  variables: GitGetBlobVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Blob, GitGetBlobError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Blob, GitGetBlobError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/blobs/{file_sha}",
      operationId: "gitGetBlob",
      variables,
    }),
    () => fetchGitGetBlob({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitCreateCommitPathParams = {
  owner: string;
  repo: string;
};

export type GitCreateCommitError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GitCreateCommitRequestBody = {
  /*
   * Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
   */
  author?: {
    /*
     * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    date?: string;
    /*
     * The email of the author (or committer) of the commit
     */
    email?: string;
    /*
     * The name of the author (or committer) of the commit
     */
    name?: string;
  };
  /*
   * Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
   */
  committer?: {
    /*
     * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    date?: string;
    /*
     * The email of the author (or committer) of the commit
     */
    email?: string;
    /*
     * The name of the author (or committer) of the commit
     */
    name?: string;
  };
  /*
   * The commit message
   */
  message: string;
  /*
   * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
   */
  parents?: string[];
  /*
   * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
   */
  signature?: string;
  /*
   * The SHA of the tree object this commit points to
   */
  tree: string;
};

export type GitCreateCommitVariables = {
  body: GitCreateCommitRequestBody;
  pathParams: GitCreateCommitPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitCreateCommit = (variables: GitCreateCommitVariables) =>
  githubFetch<
    Schemas.GitCommit,
    GitCreateCommitError,
    GitCreateCommitRequestBody,
    {},
    {},
    GitCreateCommitPathParams
  >({ url: "/repos/{owner}/{repo}/git/commits", method: "post", ...variables });

/**
 * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitCreateCommit = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitCommit,
      GitCreateCommitError,
      GitCreateCommitVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitCommit,
    GitCreateCommitError,
    GitCreateCommitVariables
  >(
    (variables: GitCreateCommitVariables) =>
      fetchGitCreateCommit({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitGetCommitPathParams = {
  owner: string;
  repo: string;
  /*
   * commit_sha parameter
   */
  commitSha: string;
};

export type GitGetCommitError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type GitGetCommitVariables = {
  pathParams: GitGetCommitPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitGetCommit = (variables: GitGetCommitVariables) =>
  githubFetch<
    Schemas.GitCommit,
    GitGetCommitError,
    undefined,
    {},
    {},
    GitGetCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/git/commits/{commitSha}",
    method: "get",
    ...variables,
  });

/**
 * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitGetCommit = <TData = Schemas.GitCommit>(
  variables: GitGetCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitCommit, GitGetCommitError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.GitCommit, GitGetCommitError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/commits/{commit_sha}",
      operationId: "gitGetCommit",
      variables,
    }),
    () => fetchGitGetCommit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitListMatchingRefsPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type GitListMatchingRefsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GitListMatchingRefsError = Fetcher.ErrorWrapper<undefined>;

export type GitListMatchingRefsResponse = Schemas.GitRef[];

export type GitListMatchingRefsVariables = {
  pathParams: GitListMatchingRefsPathParams;
  queryParams?: GitListMatchingRefsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
 *
 * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
 */
export const fetchGitListMatchingRefs = (
  variables: GitListMatchingRefsVariables
) =>
  githubFetch<
    GitListMatchingRefsResponse,
    GitListMatchingRefsError,
    undefined,
    {},
    GitListMatchingRefsQueryParams,
    GitListMatchingRefsPathParams
  >({
    url: "/repos/{owner}/{repo}/git/matching-refs/{ref}",
    method: "get",
    ...variables,
  });

/**
 * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
 *
 * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
 */
export const useGitListMatchingRefs = <TData = GitListMatchingRefsResponse>(
  variables: GitListMatchingRefsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GitListMatchingRefsResponse,
      GitListMatchingRefsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GitListMatchingRefsResponse,
    GitListMatchingRefsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/matching-refs/{ref}",
      operationId: "gitListMatchingRefs",
      variables,
    }),
    () => fetchGitListMatchingRefs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitGetRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type GitGetRefError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type GitGetRefVariables = {
  pathParams: GitGetRefPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 */
export const fetchGitGetRef = (variables: GitGetRefVariables) =>
  githubFetch<
    Schemas.GitRef,
    GitGetRefError,
    undefined,
    {},
    {},
    GitGetRefPathParams
  >({
    url: "/repos/{owner}/{repo}/git/ref/{ref}",
    method: "get",
    ...variables,
  });

/**
 * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 */
export const useGitGetRef = <TData = Schemas.GitRef>(
  variables: GitGetRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitRef, GitGetRefError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.GitRef, GitGetRefError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/ref/{ref}",
      operationId: "gitGetRef",
      variables,
    }),
    () => fetchGitGetRef({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitCreateRefPathParams = {
  owner: string;
  repo: string;
};

export type GitCreateRefError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type GitCreateRefRequestBody = {
  /*
   * @example "refs/heads/newbranch"
   */
  key?: string;
  /*
   * The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
   */
  ref: string;
  /*
   * The SHA1 value for this reference.
   */
  sha: string;
};

export type GitCreateRefVariables = {
  body: GitCreateRefRequestBody;
  pathParams: GitCreateRefPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
 */
export const fetchGitCreateRef = (variables: GitCreateRefVariables) =>
  githubFetch<
    Schemas.GitRef,
    GitCreateRefError,
    GitCreateRefRequestBody,
    {},
    {},
    GitCreateRefPathParams
  >({ url: "/repos/{owner}/{repo}/git/refs", method: "post", ...variables });

/**
 * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
 */
export const useGitCreateRef = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitRef,
      GitCreateRefError,
      GitCreateRefVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitRef,
    GitCreateRefError,
    GitCreateRefVariables
  >(
    (variables: GitCreateRefVariables) =>
      fetchGitCreateRef({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitDeleteRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type GitDeleteRefError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type GitDeleteRefVariables = {
  pathParams: GitDeleteRefPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGitDeleteRef = (variables: GitDeleteRefVariables) =>
  githubFetch<
    undefined,
    GitDeleteRefError,
    undefined,
    {},
    {},
    GitDeleteRefPathParams
  >({
    url: "/repos/{owner}/{repo}/git/refs/{ref}",
    method: "delete",
    ...variables,
  });

export const useGitDeleteRef = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GitDeleteRefError,
      GitDeleteRefVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    GitDeleteRefError,
    GitDeleteRefVariables
  >(
    (variables: GitDeleteRefVariables) =>
      fetchGitDeleteRef({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitUpdateRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type GitUpdateRefError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type GitUpdateRefRequestBody = {
  /*
   * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
   *
   * @default false
   */
  force?: boolean;
  /*
   * The SHA1 value to set this reference to
   */
  sha: string;
};

export type GitUpdateRefVariables = {
  body: GitUpdateRefRequestBody;
  pathParams: GitUpdateRefPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGitUpdateRef = (variables: GitUpdateRefVariables) =>
  githubFetch<
    Schemas.GitRef,
    GitUpdateRefError,
    GitUpdateRefRequestBody,
    {},
    {},
    GitUpdateRefPathParams
  >({
    url: "/repos/{owner}/{repo}/git/refs/{ref}",
    method: "patch",
    ...variables,
  });

export const useGitUpdateRef = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitRef,
      GitUpdateRefError,
      GitUpdateRefVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitRef,
    GitUpdateRefError,
    GitUpdateRefVariables
  >(
    (variables: GitUpdateRefVariables) =>
      fetchGitUpdateRef({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitCreateTagPathParams = {
  owner: string;
  repo: string;
};

export type GitCreateTagError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type GitCreateTagRequestBody = {
  /*
   * The tag message.
   */
  message: string;
  /*
   * The SHA of the git object this is tagging.
   */
  object: string;
  /*
   * The tag's name. This is typically a version (e.g., "v0.0.1").
   */
  tag: string;
  /*
   * An object with information about the individual creating the tag.
   */
  tagger?: {
    /*
     * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    date?: string;
    /*
     * The email of the author of the tag
     */
    email?: string;
    /*
     * The name of the author of the tag
     */
    name?: string;
  };
  /*
   * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
   */
  type: "commit" | "tree" | "blob";
};

export type GitCreateTagVariables = {
  body: GitCreateTagRequestBody;
  pathParams: GitCreateTagPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitCreateTag = (variables: GitCreateTagVariables) =>
  githubFetch<
    Schemas.GitTag,
    GitCreateTagError,
    GitCreateTagRequestBody,
    {},
    {},
    GitCreateTagPathParams
  >({ url: "/repos/{owner}/{repo}/git/tags", method: "post", ...variables });

/**
 * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitCreateTag = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitTag,
      GitCreateTagError,
      GitCreateTagVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitTag,
    GitCreateTagError,
    GitCreateTagVariables
  >(
    (variables: GitCreateTagVariables) =>
      fetchGitCreateTag({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitGetTagPathParams = {
  owner: string;
  repo: string;
  tagSha: string;
};

export type GitGetTagError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type GitGetTagVariables = {
  pathParams: GitGetTagPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitGetTag = (variables: GitGetTagVariables) =>
  githubFetch<
    Schemas.GitTag,
    GitGetTagError,
    undefined,
    {},
    {},
    GitGetTagPathParams
  >({
    url: "/repos/{owner}/{repo}/git/tags/{tagSha}",
    method: "get",
    ...variables,
  });

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitGetTag = <TData = Schemas.GitTag>(
  variables: GitGetTagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitTag, GitGetTagError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.GitTag, GitGetTagError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/tags/{tag_sha}",
      operationId: "gitGetTag",
      variables,
    }),
    () => fetchGitGetTag({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitCreateTreePathParams = {
  owner: string;
  repo: string;
};

export type GitCreateTreeError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GitCreateTreeRequestBody = {
  /*
   * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
   * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
   */
  base_tree?: string;
  /*
   * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
   */
  tree: {
    /*
     * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
     *
     * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
     */
    content?: string;
    /*
     * The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
     */
    mode?: "100644" | "100755" | "040000" | "160000" | "120000";
    /*
     * The file referenced in the tree.
     */
    path?: string;
    /*
     * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
     *
     * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
     */
    sha?: string | null;
    /*
     * Either `blob`, `tree`, or `commit`.
     */
    type?: "blob" | "tree" | "commit";
  }[];
};

export type GitCreateTreeVariables = {
  body: GitCreateTreeRequestBody;
  pathParams: GitCreateTreePathParams;
} & GithubContext["fetcherOptions"];

/**
 * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
 *
 * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
 */
export const fetchGitCreateTree = (variables: GitCreateTreeVariables) =>
  githubFetch<
    Schemas.GitTree,
    GitCreateTreeError,
    GitCreateTreeRequestBody,
    {},
    {},
    GitCreateTreePathParams
  >({ url: "/repos/{owner}/{repo}/git/trees", method: "post", ...variables });

/**
 * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
 *
 * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
 */
export const useGitCreateTree = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitTree,
      GitCreateTreeError,
      GitCreateTreeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitTree,
    GitCreateTreeError,
    GitCreateTreeVariables
  >(
    (variables: GitCreateTreeVariables) =>
      fetchGitCreateTree({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitGetTreePathParams = {
  owner: string;
  repo: string;
  treeSha: string;
};

export type GitGetTreeQueryParams = {
  /*
   * Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.
   */
  recursive?: string;
};

export type GitGetTreeError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GitGetTreeVariables = {
  pathParams: GitGetTreePathParams;
  queryParams?: GitGetTreeQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a single tree using the SHA1 value for that tree.
 *
 * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 */
export const fetchGitGetTree = (variables: GitGetTreeVariables) =>
  githubFetch<
    Schemas.GitTree,
    GitGetTreeError,
    undefined,
    {},
    GitGetTreeQueryParams,
    GitGetTreePathParams
  >({
    url: "/repos/{owner}/{repo}/git/trees/{treeSha}",
    method: "get",
    ...variables,
  });

/**
 * Returns a single tree using the SHA1 value for that tree.
 *
 * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 */
export const useGitGetTree = <TData = Schemas.GitTree>(
  variables: GitGetTreeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitTree, GitGetTreeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.GitTree, GitGetTreeError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/trees/{tree_sha}",
      operationId: "gitGetTree",
      variables,
    }),
    () => fetchGitGetTree({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListWebhooksPathParams = {
  owner: string;
  repo: string;
};

export type ReposListWebhooksQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListWebhooksError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposListWebhooksResponse = Schemas.Hook[];

export type ReposListWebhooksVariables = {
  pathParams: ReposListWebhooksPathParams;
  queryParams?: ReposListWebhooksQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListWebhooks = (variables: ReposListWebhooksVariables) =>
  githubFetch<
    ReposListWebhooksResponse,
    ReposListWebhooksError,
    undefined,
    {},
    ReposListWebhooksQueryParams,
    ReposListWebhooksPathParams
  >({ url: "/repos/{owner}/{repo}/hooks", method: "get", ...variables });

export const useReposListWebhooks = <TData = ReposListWebhooksResponse>(
  variables: ReposListWebhooksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListWebhooksResponse,
      ReposListWebhooksError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListWebhooksResponse,
    ReposListWebhooksError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/hooks",
      operationId: "reposListWebhooks",
      variables,
    }),
    () => fetchReposListWebhooks({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateWebhookPathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateWebhookError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateWebhookRequestBody = {
  /*
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   *
   * @default true
   */
  active?: boolean;
  /*
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
   */
  config: {
    content_type?: Schemas.WebhookConfigContentType;
    /*
     * @example "sha256"
     */
    digest?: string;
    insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
    secret?: Schemas.WebhookConfigSecret;
    /*
     * @example "abc"
     */
    token?: string;
    url: Schemas.WebhookConfigUrl;
  };
  /*
   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
   *
   * @default push
   */
  events?: string[];
  /*
   * Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
   */
  name?: string;
};

export type ReposCreateWebhookVariables = {
  body: ReposCreateWebhookRequestBody;
  pathParams: ReposCreateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
 * share the same `config` as long as those webhooks do not have any `events` that overlap.
 */
export const fetchReposCreateWebhook = (
  variables: ReposCreateWebhookVariables
) =>
  githubFetch<
    Schemas.Hook,
    ReposCreateWebhookError,
    ReposCreateWebhookRequestBody,
    {},
    {},
    ReposCreateWebhookPathParams
  >({ url: "/repos/{owner}/{repo}/hooks", method: "post", ...variables });

/**
 * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
 * share the same `config` as long as those webhooks do not have any `events` that overlap.
 */
export const useReposCreateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Hook,
      ReposCreateWebhookError,
      ReposCreateWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Hook,
    ReposCreateWebhookError,
    ReposCreateWebhookVariables
  >(
    (variables: ReposCreateWebhookVariables) =>
      fetchReposCreateWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteWebhookPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposDeleteWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposDeleteWebhookVariables = {
  pathParams: ReposDeleteWebhookPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteWebhook = (
  variables: ReposDeleteWebhookVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteWebhookError,
    undefined,
    {},
    {},
    ReposDeleteWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}",
    method: "delete",
    ...variables,
  });

export const useReposDeleteWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteWebhookError,
      ReposDeleteWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteWebhookError,
    ReposDeleteWebhookVariables
  >(
    (variables: ReposDeleteWebhookVariables) =>
      fetchReposDeleteWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetWebhookPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposGetWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetWebhookVariables = {
  pathParams: ReposGetWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
 */
export const fetchReposGetWebhook = (variables: ReposGetWebhookVariables) =>
  githubFetch<
    Schemas.Hook,
    ReposGetWebhookError,
    undefined,
    {},
    {},
    ReposGetWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}",
    method: "get",
    ...variables,
  });

/**
 * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
 */
export const useReposGetWebhook = <TData = Schemas.Hook>(
  variables: ReposGetWebhookVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Hook, ReposGetWebhookError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Hook, ReposGetWebhookError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/hooks/{hook_id}",
      operationId: "reposGetWebhook",
      variables,
    }),
    () => fetchReposGetWebhook({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateWebhookPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposUpdateWebhookError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposUpdateWebhookRequestBody = {
  /*
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   *
   * @default true
   */
  active?: boolean;
  /*
   * Determines a list of events to be added to the list of events that the Hook triggers for.
   */
  add_events?: string[];
  /*
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
   */
  config?: {
    /*
     * @example "bar@example.com"
     */
    address?: string;
    content_type?: Schemas.WebhookConfigContentType;
    insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
    /*
     * @example "The Serious Room"
     */
    room?: string;
    secret?: Schemas.WebhookConfigSecret;
    url: Schemas.WebhookConfigUrl;
  };
  /*
   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
   *
   * @default push
   */
  events?: string[];
  /*
   * Determines a list of events to be removed from the list of events that the Hook triggers for.
   */
  remove_events?: string[];
};

export type ReposUpdateWebhookVariables = {
  body?: ReposUpdateWebhookRequestBody;
  pathParams: ReposUpdateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
 */
export const fetchReposUpdateWebhook = (
  variables: ReposUpdateWebhookVariables
) =>
  githubFetch<
    Schemas.Hook,
    ReposUpdateWebhookError,
    ReposUpdateWebhookRequestBody,
    {},
    {},
    ReposUpdateWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}",
    method: "patch",
    ...variables,
  });

/**
 * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
 */
export const useReposUpdateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Hook,
      ReposUpdateWebhookError,
      ReposUpdateWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Hook,
    ReposUpdateWebhookError,
    ReposUpdateWebhookVariables
  >(
    (variables: ReposUpdateWebhookVariables) =>
      fetchReposUpdateWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetWebhookConfigForRepoPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposGetWebhookConfigForRepoError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetWebhookConfigForRepoVariables = {
  pathParams: ReposGetWebhookConfigForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
 *
 * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
 */
export const fetchReposGetWebhookConfigForRepo = (
  variables: ReposGetWebhookConfigForRepoVariables
) =>
  githubFetch<
    Schemas.WebhookConfig,
    ReposGetWebhookConfigForRepoError,
    undefined,
    {},
    {},
    ReposGetWebhookConfigForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/config",
    method: "get",
    ...variables,
  });

/**
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
 *
 * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
 */
export const useReposGetWebhookConfigForRepo = <TData = Schemas.WebhookConfig>(
  variables: ReposGetWebhookConfigForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      ReposGetWebhookConfigForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WebhookConfig,
    ReposGetWebhookConfigForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/hooks/{hook_id}/config",
      operationId: "reposGetWebhookConfigForRepo",
      variables,
    }),
    () =>
      fetchReposGetWebhookConfigForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateWebhookConfigForRepoPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposUpdateWebhookConfigForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposUpdateWebhookConfigForRepoRequestBody = {
  content_type?: Schemas.WebhookConfigContentType;
  insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
  secret?: Schemas.WebhookConfigSecret;
  url?: Schemas.WebhookConfigUrl;
};

export type ReposUpdateWebhookConfigForRepoVariables = {
  body?: ReposUpdateWebhookConfigForRepoRequestBody;
  pathParams: ReposUpdateWebhookConfigForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
 *
 * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
 */
export const fetchReposUpdateWebhookConfigForRepo = (
  variables: ReposUpdateWebhookConfigForRepoVariables
) =>
  githubFetch<
    Schemas.WebhookConfig,
    ReposUpdateWebhookConfigForRepoError,
    ReposUpdateWebhookConfigForRepoRequestBody,
    {},
    {},
    ReposUpdateWebhookConfigForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/config",
    method: "patch",
    ...variables,
  });

/**
 * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
 *
 * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
 */
export const useReposUpdateWebhookConfigForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.WebhookConfig,
      ReposUpdateWebhookConfigForRepoError,
      ReposUpdateWebhookConfigForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.WebhookConfig,
    ReposUpdateWebhookConfigForRepoError,
    ReposUpdateWebhookConfigForRepoVariables
  >(
    (variables: ReposUpdateWebhookConfigForRepoVariables) =>
      fetchReposUpdateWebhookConfigForRepo({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposPingWebhookPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposPingWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposPingWebhookVariables = {
  pathParams: ReposPingWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const fetchReposPingWebhook = (variables: ReposPingWebhookVariables) =>
  githubFetch<
    undefined,
    ReposPingWebhookError,
    undefined,
    {},
    {},
    ReposPingWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/pings",
    method: "post",
    ...variables,
  });

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const useReposPingWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposPingWebhookError,
      ReposPingWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposPingWebhookError,
    ReposPingWebhookVariables
  >(
    (variables: ReposPingWebhookVariables) =>
      fetchReposPingWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposTestPushWebhookPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposTestPushWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposTestPushWebhookVariables = {
  pathParams: ReposTestPushWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
 *
 * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
 */
export const fetchReposTestPushWebhook = (
  variables: ReposTestPushWebhookVariables
) =>
  githubFetch<
    undefined,
    ReposTestPushWebhookError,
    undefined,
    {},
    {},
    ReposTestPushWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/tests",
    method: "post",
    ...variables,
  });

/**
 * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
 *
 * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
 */
export const useReposTestPushWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposTestPushWebhookError,
      ReposTestPushWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposTestPushWebhookError,
    ReposTestPushWebhookVariables
  >(
    (variables: ReposTestPushWebhookVariables) =>
      fetchReposTestPushWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsCancelImportPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsCancelImportError = Fetcher.ErrorWrapper<undefined>;

export type MigrationsCancelImportVariables = {
  pathParams: MigrationsCancelImportPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Stop an import for a repository.
 */
export const fetchMigrationsCancelImport = (
  variables: MigrationsCancelImportVariables
) =>
  githubFetch<
    undefined,
    MigrationsCancelImportError,
    undefined,
    {},
    {},
    MigrationsCancelImportPathParams
  >({ url: "/repos/{owner}/{repo}/import", method: "delete", ...variables });

/**
 * Stop an import for a repository.
 */
export const useMigrationsCancelImport = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MigrationsCancelImportError,
      MigrationsCancelImportVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MigrationsCancelImportError,
    MigrationsCancelImportVariables
  >(
    (variables: MigrationsCancelImportVariables) =>
      fetchMigrationsCancelImport({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsGetImportStatusPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsGetImportStatusError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsGetImportStatusVariables = {
  pathParams: MigrationsGetImportStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * View the progress of an import.
 *
 * **Import status**
 *
 * This section includes details about the possible values of the `status` field of the Import Progress response.
 *
 * An import that does not have errors will progress through these steps:
 *
 * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
 * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
 * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
 * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
 * *   `complete` - the import is complete, and the repository is ready on GitHub.
 *
 * If there are problems, you will see one of these in the `status` field:
 *
 * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.
 * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
 * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 *
 * **The project_choices field**
 *
 * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
 *
 * **Git LFS related fields**
 *
 * This section includes details about Git LFS related fields that may be present in the Import Progress response.
 *
 * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
 * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
 * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
 * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
 */
export const fetchMigrationsGetImportStatus = (
  variables: MigrationsGetImportStatusVariables
) =>
  githubFetch<
    Schemas.Import,
    MigrationsGetImportStatusError,
    undefined,
    {},
    {},
    MigrationsGetImportStatusPathParams
  >({ url: "/repos/{owner}/{repo}/import", method: "get", ...variables });

/**
 * View the progress of an import.
 *
 * **Import status**
 *
 * This section includes details about the possible values of the `status` field of the Import Progress response.
 *
 * An import that does not have errors will progress through these steps:
 *
 * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
 * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
 * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
 * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
 * *   `complete` - the import is complete, and the repository is ready on GitHub.
 *
 * If there are problems, you will see one of these in the `status` field:
 *
 * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.
 * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
 * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 *
 * **The project_choices field**
 *
 * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
 *
 * **Git LFS related fields**
 *
 * This section includes details about Git LFS related fields that may be present in the Import Progress response.
 *
 * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
 * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
 * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
 * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
 */
export const useMigrationsGetImportStatus = <TData = Schemas.Import>(
  variables: MigrationsGetImportStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Import,
      MigrationsGetImportStatusError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Import,
    MigrationsGetImportStatusError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/import",
      operationId: "migrationsGetImportStatus",
      variables,
    }),
    () => fetchMigrationsGetImportStatus({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsUpdateImportPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsUpdateImportError = Fetcher.ErrorWrapper<undefined>;

export type MigrationsUpdateImportRequestBody = {
  /*
   * @example "project1"
   */
  tfvc_project?: string;
  /*
   * @example "git"
   */
  vcs?: string;
  /*
   * The password to provide to the originating repository.
   */
  vcs_password?: string;
  /*
   * The username to provide to the originating repository.
   */
  vcs_username?: string;
};

export type MigrationsUpdateImportVariables = {
  body?: MigrationsUpdateImportRequestBody;
  pathParams: MigrationsUpdateImportPathParams;
} & GithubContext["fetcherOptions"];

/**
 * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
 * request. If no parameters are provided, the import will be restarted.
 */
export const fetchMigrationsUpdateImport = (
  variables: MigrationsUpdateImportVariables
) =>
  githubFetch<
    Schemas.Import,
    MigrationsUpdateImportError,
    MigrationsUpdateImportRequestBody,
    {},
    {},
    MigrationsUpdateImportPathParams
  >({ url: "/repos/{owner}/{repo}/import", method: "patch", ...variables });

/**
 * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
 * request. If no parameters are provided, the import will be restarted.
 */
export const useMigrationsUpdateImport = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Import,
      MigrationsUpdateImportError,
      MigrationsUpdateImportVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Import,
    MigrationsUpdateImportError,
    MigrationsUpdateImportVariables
  >(
    (variables: MigrationsUpdateImportVariables) =>
      fetchMigrationsUpdateImport({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsStartImportPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsStartImportError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type MigrationsStartImportRequestBody = {
  /*
   * For a tfvc import, the name of the project that is being imported.
   */
  tfvc_project?: string;
  /*
   * The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
   */
  vcs?: "subversion" | "git" | "mercurial" | "tfvc";
  /*
   * If authentication is required, the password to provide to `vcs_url`.
   */
  vcs_password?: string;
  /*
   * The URL of the originating repository.
   */
  vcs_url: string;
  /*
   * If authentication is required, the username to provide to `vcs_url`.
   */
  vcs_username?: string;
};

export type MigrationsStartImportVariables = {
  body: MigrationsStartImportRequestBody;
  pathParams: MigrationsStartImportPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Start a source import to a GitHub repository using GitHub Importer.
 */
export const fetchMigrationsStartImport = (
  variables: MigrationsStartImportVariables
) =>
  githubFetch<
    Schemas.Import,
    MigrationsStartImportError,
    MigrationsStartImportRequestBody,
    {},
    {},
    MigrationsStartImportPathParams
  >({ url: "/repos/{owner}/{repo}/import", method: "put", ...variables });

/**
 * Start a source import to a GitHub repository using GitHub Importer.
 */
export const useMigrationsStartImport = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Import,
      MigrationsStartImportError,
      MigrationsStartImportVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Import,
    MigrationsStartImportError,
    MigrationsStartImportVariables
  >(
    (variables: MigrationsStartImportVariables) =>
      fetchMigrationsStartImport({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsGetCommitAuthorsPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsGetCommitAuthorsQueryParams = {
  /*
   * A user ID. Only return users with an ID greater than this ID.
   */
  since?: number;
};

export type MigrationsGetCommitAuthorsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsGetCommitAuthorsResponse = Schemas.PorterAuthor[];

export type MigrationsGetCommitAuthorsVariables = {
  pathParams: MigrationsGetCommitAuthorsPathParams;
  queryParams?: MigrationsGetCommitAuthorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
 *
 * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
 */
export const fetchMigrationsGetCommitAuthors = (
  variables: MigrationsGetCommitAuthorsVariables
) =>
  githubFetch<
    MigrationsGetCommitAuthorsResponse,
    MigrationsGetCommitAuthorsError,
    undefined,
    {},
    MigrationsGetCommitAuthorsQueryParams,
    MigrationsGetCommitAuthorsPathParams
  >({
    url: "/repos/{owner}/{repo}/import/authors",
    method: "get",
    ...variables,
  });

/**
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
 *
 * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
 */
export const useMigrationsGetCommitAuthors = <
  TData = MigrationsGetCommitAuthorsResponse
>(
  variables: MigrationsGetCommitAuthorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsGetCommitAuthorsResponse,
      MigrationsGetCommitAuthorsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsGetCommitAuthorsResponse,
    MigrationsGetCommitAuthorsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/import/authors",
      operationId: "migrationsGetCommitAuthors",
      variables,
    }),
    () => fetchMigrationsGetCommitAuthors({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsMapCommitAuthorPathParams = {
  owner: string;
  repo: string;
  authorId: number;
};

export type MigrationsMapCommitAuthorError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type MigrationsMapCommitAuthorRequestBody = {
  /*
   * The new Git author email.
   */
  email?: string;
  /*
   * The new Git author name.
   */
  name?: string;
  /*
   * @example "can't touch this"
   */
  remote_id?: string;
};

export type MigrationsMapCommitAuthorVariables = {
  body?: MigrationsMapCommitAuthorRequestBody;
  pathParams: MigrationsMapCommitAuthorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
 */
export const fetchMigrationsMapCommitAuthor = (
  variables: MigrationsMapCommitAuthorVariables
) =>
  githubFetch<
    Schemas.PorterAuthor,
    MigrationsMapCommitAuthorError,
    MigrationsMapCommitAuthorRequestBody,
    {},
    {},
    MigrationsMapCommitAuthorPathParams
  >({
    url: "/repos/{owner}/{repo}/import/authors/{authorId}",
    method: "patch",
    ...variables,
  });

/**
 * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
 */
export const useMigrationsMapCommitAuthor = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PorterAuthor,
      MigrationsMapCommitAuthorError,
      MigrationsMapCommitAuthorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PorterAuthor,
    MigrationsMapCommitAuthorError,
    MigrationsMapCommitAuthorVariables
  >(
    (variables: MigrationsMapCommitAuthorVariables) =>
      fetchMigrationsMapCommitAuthor({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsGetLargeFilesPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsGetLargeFilesError = Fetcher.ErrorWrapper<undefined>;

export type MigrationsGetLargeFilesResponse = Schemas.PorterLargeFile[];

export type MigrationsGetLargeFilesVariables = {
  pathParams: MigrationsGetLargeFilesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * List files larger than 100MB found during the import
 */
export const fetchMigrationsGetLargeFiles = (
  variables: MigrationsGetLargeFilesVariables
) =>
  githubFetch<
    MigrationsGetLargeFilesResponse,
    MigrationsGetLargeFilesError,
    undefined,
    {},
    {},
    MigrationsGetLargeFilesPathParams
  >({
    url: "/repos/{owner}/{repo}/import/large_files",
    method: "get",
    ...variables,
  });

/**
 * List files larger than 100MB found during the import
 */
export const useMigrationsGetLargeFiles = <
  TData = MigrationsGetLargeFilesResponse
>(
  variables: MigrationsGetLargeFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsGetLargeFilesResponse,
      MigrationsGetLargeFilesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsGetLargeFilesResponse,
    MigrationsGetLargeFilesError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/import/large_files",
      operationId: "migrationsGetLargeFiles",
      variables,
    }),
    () => fetchMigrationsGetLargeFiles({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsSetLfsPreferencePathParams = {
  owner: string;
  repo: string;
};

export type MigrationsSetLfsPreferenceError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type MigrationsSetLfsPreferenceRequestBody = {
  /*
   * Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).
   */
  use_lfs: "opt_in" | "opt_out";
};

export type MigrationsSetLfsPreferenceVariables = {
  body: MigrationsSetLfsPreferenceRequestBody;
  pathParams: MigrationsSetLfsPreferencePathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).
 */
export const fetchMigrationsSetLfsPreference = (
  variables: MigrationsSetLfsPreferenceVariables
) =>
  githubFetch<
    Schemas.Import,
    MigrationsSetLfsPreferenceError,
    MigrationsSetLfsPreferenceRequestBody,
    {},
    {},
    MigrationsSetLfsPreferencePathParams
  >({ url: "/repos/{owner}/{repo}/import/lfs", method: "patch", ...variables });

/**
 * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).
 */
export const useMigrationsSetLfsPreference = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Import,
      MigrationsSetLfsPreferenceError,
      MigrationsSetLfsPreferenceVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Import,
    MigrationsSetLfsPreferenceError,
    MigrationsSetLfsPreferenceVariables
  >(
    (variables: MigrationsSetLfsPreferenceVariables) =>
      fetchMigrationsSetLfsPreference({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetRepoInstallationPathParams = {
  owner: string;
  repo: string;
};

export type AppsGetRepoInstallationError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type AppsGetRepoInstallationVariables = {
  pathParams: AppsGetRepoInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetRepoInstallation = (
  variables: AppsGetRepoInstallationVariables
) =>
  githubFetch<
    Schemas.Installation,
    AppsGetRepoInstallationError,
    undefined,
    {},
    {},
    AppsGetRepoInstallationPathParams
  >({ url: "/repos/{owner}/{repo}/installation", method: "get", ...variables });

/**
 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetRepoInstallation = <TData = Schemas.Installation>(
  variables: AppsGetRepoInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetRepoInstallationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    AppsGetRepoInstallationError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/installation",
      operationId: "appsGetRepoInstallation",
      variables,
    }),
    () => fetchAppsGetRepoInstallation({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InteractionsRemoveRestrictionsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type InteractionsRemoveRestrictionsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsRemoveRestrictionsForRepoVariables = {
  pathParams: InteractionsRemoveRestrictionsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const fetchInteractionsRemoveRestrictionsForRepo = (
  variables: InteractionsRemoveRestrictionsForRepoVariables
) =>
  githubFetch<
    undefined,
    InteractionsRemoveRestrictionsForRepoError,
    undefined,
    {},
    {},
    InteractionsRemoveRestrictionsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/interaction-limits",
    method: "delete",
    ...variables,
  });

/**
 * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const useInteractionsRemoveRestrictionsForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InteractionsRemoveRestrictionsForRepoError,
      InteractionsRemoveRestrictionsForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    InteractionsRemoveRestrictionsForRepoError,
    InteractionsRemoveRestrictionsForRepoVariables
  >(
    (variables: InteractionsRemoveRestrictionsForRepoVariables) =>
      fetchInteractionsRemoveRestrictionsForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InteractionsGetRestrictionsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type InteractionsGetRestrictionsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsGetRestrictionsForRepoVariables = {
  pathParams: InteractionsGetRestrictionsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const fetchInteractionsGetRestrictionsForRepo = (
  variables: InteractionsGetRestrictionsForRepoVariables
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    InteractionsGetRestrictionsForRepoError,
    undefined,
    {},
    {},
    InteractionsGetRestrictionsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/interaction-limits",
    method: "get",
    ...variables,
  });

/**
 * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const useInteractionsGetRestrictionsForRepo = <
  TData = Schemas.InteractionLimitResponse
>(
  variables: InteractionsGetRestrictionsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse,
      InteractionsGetRestrictionsForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.InteractionLimitResponse,
    InteractionsGetRestrictionsForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/interaction-limits",
      operationId: "interactionsGetRestrictionsForRepo",
      variables,
    }),
    () =>
      fetchInteractionsGetRestrictionsForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InteractionsSetRestrictionsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type InteractionsSetRestrictionsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsSetRestrictionsForRepoVariables = {
  body: Schemas.InteractionLimit;
  pathParams: InteractionsSetRestrictionsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const fetchInteractionsSetRestrictionsForRepo = (
  variables: InteractionsSetRestrictionsForRepoVariables
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForRepoError,
    Schemas.InteractionLimit,
    {},
    {},
    InteractionsSetRestrictionsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/interaction-limits",
    method: "put",
    ...variables,
  });

/**
 * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const useInteractionsSetRestrictionsForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InteractionLimitResponse,
      InteractionsSetRestrictionsForRepoError,
      InteractionsSetRestrictionsForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForRepoError,
    InteractionsSetRestrictionsForRepoVariables
  >(
    (variables: InteractionsSetRestrictionsForRepoVariables) =>
      fetchInteractionsSetRestrictionsForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposListInvitationsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListInvitationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListInvitationsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListInvitationsResponse = Schemas.RepositoryInvitation[];

export type ReposListInvitationsVariables = {
  pathParams: ReposListInvitationsPathParams;
  queryParams?: ReposListInvitationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 */
export const fetchReposListInvitations = (
  variables: ReposListInvitationsVariables
) =>
  githubFetch<
    ReposListInvitationsResponse,
    ReposListInvitationsError,
    undefined,
    {},
    ReposListInvitationsQueryParams,
    ReposListInvitationsPathParams
  >({ url: "/repos/{owner}/{repo}/invitations", method: "get", ...variables });

/**
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 */
export const useReposListInvitations = <TData = ReposListInvitationsResponse>(
  variables: ReposListInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListInvitationsResponse,
      ReposListInvitationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListInvitationsResponse,
    ReposListInvitationsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/invitations",
      operationId: "reposListInvitations",
      variables,
    }),
    () => fetchReposListInvitations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteInvitationPathParams = {
  owner: string;
  repo: string;
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type ReposDeleteInvitationError = Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteInvitationVariables = {
  pathParams: ReposDeleteInvitationPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteInvitation = (
  variables: ReposDeleteInvitationVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteInvitationError,
    undefined,
    {},
    {},
    ReposDeleteInvitationPathParams
  >({
    url: "/repos/{owner}/{repo}/invitations/{invitationId}",
    method: "delete",
    ...variables,
  });

export const useReposDeleteInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteInvitationError,
      ReposDeleteInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteInvitationError,
    ReposDeleteInvitationVariables
  >(
    (variables: ReposDeleteInvitationVariables) =>
      fetchReposDeleteInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposUpdateInvitationPathParams = {
  owner: string;
  repo: string;
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type ReposUpdateInvitationError = Fetcher.ErrorWrapper<undefined>;

export type ReposUpdateInvitationRequestBody = {
  /*
   * The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
   */
  permissions?: "read" | "write" | "maintain" | "triage" | "admin";
};

export type ReposUpdateInvitationVariables = {
  body?: ReposUpdateInvitationRequestBody;
  pathParams: ReposUpdateInvitationPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposUpdateInvitation = (
  variables: ReposUpdateInvitationVariables
) =>
  githubFetch<
    Schemas.RepositoryInvitation,
    ReposUpdateInvitationError,
    ReposUpdateInvitationRequestBody,
    {},
    {},
    ReposUpdateInvitationPathParams
  >({
    url: "/repos/{owner}/{repo}/invitations/{invitationId}",
    method: "patch",
    ...variables,
  });

export const useReposUpdateInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RepositoryInvitation,
      ReposUpdateInvitationError,
      ReposUpdateInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RepositoryInvitation,
    ReposUpdateInvitationError,
    ReposUpdateInvitationVariables
  >(
    (variables: ReposUpdateInvitationVariables) =>
      fetchReposUpdateInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListForRepoPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListForRepoQueryParams = {
  /*
   * If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
   */
  milestone?: string;
  /*
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
   */
  assignee?: string;
  /*
   * The user that created the issue.
   */
  creator?: string;
  /*
   * A user that's mentioned in the issue.
   */
  mentioned?: string;
  /*
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /*
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesListForRepoResponse = Schemas.IssueSimple[];

export type IssuesListForRepoVariables = {
  pathParams: IssuesListForRepoPathParams;
  queryParams?: IssuesListForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues in a repository.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesListForRepo = (variables: IssuesListForRepoVariables) =>
  githubFetch<
    IssuesListForRepoResponse,
    IssuesListForRepoError,
    undefined,
    {},
    IssuesListForRepoQueryParams,
    IssuesListForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/issues", method: "get", ...variables });

/**
 * List issues in a repository.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesListForRepo = <TData = IssuesListForRepoResponse>(
  variables: IssuesListForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForRepoResponse,
      IssuesListForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListForRepoResponse,
    IssuesListForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues",
      operationId: "issuesListForRepo",
      variables,
    }),
    () => fetchIssuesListForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesCreatePathParams = {
  owner: string;
  repo: string;
};

export type IssuesCreateError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type IssuesCreateRequestBody = {
  /*
   * Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
   */
  assignee?: string | null;
  /*
   * Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
   */
  assignees?: string[];
  /*
   * The contents of the issue.
   */
  body?: string;
  /*
   * Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
   */
  labels?: (
    | string
    | {
        color?: string | null;
        description?: string | null;
        id?: number;
        name?: string;
      }
  )[];
  milestone?: string | number | null;
  /*
   * The title of the issue.
   */
  title: string | number;
};

export type IssuesCreateVariables = {
  body: IssuesCreateRequestBody;
  pathParams: IssuesCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const fetchIssuesCreate = (variables: IssuesCreateVariables) =>
  githubFetch<
    Schemas.Issue,
    IssuesCreateError,
    IssuesCreateRequestBody,
    {},
    {},
    IssuesCreatePathParams
  >({ url: "/repos/{owner}/{repo}/issues", method: "post", ...variables });

/**
 * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const useIssuesCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Issue,
      IssuesCreateError,
      IssuesCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Issue,
    IssuesCreateError,
    IssuesCreateVariables
  >(
    (variables: IssuesCreateVariables) =>
      fetchIssuesCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListCommentsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListCommentsForRepoQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * Either `asc` or `desc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListCommentsForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesListCommentsForRepoResponse = Schemas.IssueComment[];

export type IssuesListCommentsForRepoVariables = {
  pathParams: IssuesListCommentsForRepoPathParams;
  queryParams?: IssuesListCommentsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * By default, Issue Comments are ordered by ascending ID.
 */
export const fetchIssuesListCommentsForRepo = (
  variables: IssuesListCommentsForRepoVariables
) =>
  githubFetch<
    IssuesListCommentsForRepoResponse,
    IssuesListCommentsForRepoError,
    undefined,
    {},
    IssuesListCommentsForRepoQueryParams,
    IssuesListCommentsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments",
    method: "get",
    ...variables,
  });

/**
 * By default, Issue Comments are ordered by ascending ID.
 */
export const useIssuesListCommentsForRepo = <
  TData = IssuesListCommentsForRepoResponse
>(
  variables: IssuesListCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListCommentsForRepoResponse,
      IssuesListCommentsForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListCommentsForRepoResponse,
    IssuesListCommentsForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/comments",
      operationId: "issuesListCommentsForRepo",
      variables,
    }),
    () => fetchIssuesListCommentsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesDeleteCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type IssuesDeleteCommentError = Fetcher.ErrorWrapper<undefined>;

export type IssuesDeleteCommentVariables = {
  pathParams: IssuesDeleteCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesDeleteComment = (
  variables: IssuesDeleteCommentVariables
) =>
  githubFetch<
    undefined,
    IssuesDeleteCommentError,
    undefined,
    {},
    {},
    IssuesDeleteCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}",
    method: "delete",
    ...variables,
  });

export const useIssuesDeleteComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesDeleteCommentError,
      IssuesDeleteCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesDeleteCommentError,
    IssuesDeleteCommentVariables
  >(
    (variables: IssuesDeleteCommentVariables) =>
      fetchIssuesDeleteComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesGetCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type IssuesGetCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesGetCommentVariables = {
  pathParams: IssuesGetCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetComment = (variables: IssuesGetCommentVariables) =>
  githubFetch<
    Schemas.IssueComment,
    IssuesGetCommentError,
    undefined,
    {},
    {},
    IssuesGetCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}",
    method: "get",
    ...variables,
  });

export const useIssuesGetComment = <TData = Schemas.IssueComment>(
  variables: IssuesGetCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.IssueComment,
      IssuesGetCommentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.IssueComment,
    IssuesGetCommentError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/comments/{comment_id}",
      operationId: "issuesGetComment",
      variables,
    }),
    () => fetchIssuesGetComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesUpdateCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type IssuesUpdateCommentError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type IssuesUpdateCommentRequestBody = {
  /*
   * The contents of the comment.
   */
  body: string;
};

export type IssuesUpdateCommentVariables = {
  body: IssuesUpdateCommentRequestBody;
  pathParams: IssuesUpdateCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesUpdateComment = (
  variables: IssuesUpdateCommentVariables
) =>
  githubFetch<
    Schemas.IssueComment,
    IssuesUpdateCommentError,
    IssuesUpdateCommentRequestBody,
    {},
    {},
    IssuesUpdateCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}",
    method: "patch",
    ...variables,
  });

export const useIssuesUpdateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.IssueComment,
      IssuesUpdateCommentError,
      IssuesUpdateCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.IssueComment,
    IssuesUpdateCommentError,
    IssuesUpdateCommentVariables
  >(
    (variables: IssuesUpdateCommentVariables) =>
      fetchIssuesUpdateComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsListForIssueCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsListForIssueCommentQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForIssueCommentError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type ReactionsListForIssueCommentResponse = Schemas.Reaction[];

export type ReactionsListForIssueCommentVariables = {
  pathParams: ReactionsListForIssueCommentPathParams;
  queryParams?: ReactionsListForIssueCommentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const fetchReactionsListForIssueComment = (
  variables: ReactionsListForIssueCommentVariables
) =>
  githubFetch<
    ReactionsListForIssueCommentResponse,
    ReactionsListForIssueCommentError,
    undefined,
    {},
    ReactionsListForIssueCommentQueryParams,
    ReactionsListForIssueCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const useReactionsListForIssueComment = <
  TData = ReactionsListForIssueCommentResponse
>(
  variables: ReactionsListForIssueCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForIssueCommentResponse,
      ReactionsListForIssueCommentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForIssueCommentResponse,
    ReactionsListForIssueCommentError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
      operationId: "reactionsListForIssueComment",
      variables,
    }),
    () =>
      fetchReactionsListForIssueComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForIssueCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsCreateForIssueCommentError = Fetcher.ErrorWrapper<
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReactionsCreateForIssueCommentRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForIssueCommentVariables = {
  body: ReactionsCreateForIssueCommentRequestBody;
  pathParams: ReactionsCreateForIssueCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.
 */
export const fetchReactionsCreateForIssueComment = (
  variables: ReactionsCreateForIssueCommentVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForIssueCommentError,
    ReactionsCreateForIssueCommentRequestBody,
    {},
    {},
    ReactionsCreateForIssueCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.
 */
export const useReactionsCreateForIssueComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForIssueCommentError,
      ReactionsCreateForIssueCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForIssueCommentError,
    ReactionsCreateForIssueCommentVariables
  >(
    (variables: ReactionsCreateForIssueCommentVariables) =>
      fetchReactionsCreateForIssueComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsDeleteForIssueCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
  reactionId: number;
};

export type ReactionsDeleteForIssueCommentError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForIssueCommentVariables = {
  pathParams: ReactionsDeleteForIssueCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const fetchReactionsDeleteForIssueComment = (
  variables: ReactionsDeleteForIssueCommentVariables
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForIssueCommentError,
    undefined,
    {},
    {},
    ReactionsDeleteForIssueCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const useReactionsDeleteForIssueComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForIssueCommentError,
      ReactionsDeleteForIssueCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForIssueCommentError,
    ReactionsDeleteForIssueCommentVariables
  >(
    (variables: ReactionsDeleteForIssueCommentVariables) =>
      fetchReactionsDeleteForIssueComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListEventsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListEventsForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListEventsForRepoError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type IssuesListEventsForRepoResponse = Schemas.IssueEvent[];

export type IssuesListEventsForRepoVariables = {
  pathParams: IssuesListEventsForRepoPathParams;
  queryParams?: IssuesListEventsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListEventsForRepo = (
  variables: IssuesListEventsForRepoVariables
) =>
  githubFetch<
    IssuesListEventsForRepoResponse,
    IssuesListEventsForRepoError,
    undefined,
    {},
    IssuesListEventsForRepoQueryParams,
    IssuesListEventsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/events",
    method: "get",
    ...variables,
  });

export const useIssuesListEventsForRepo = <
  TData = IssuesListEventsForRepoResponse
>(
  variables: IssuesListEventsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsForRepoResponse,
      IssuesListEventsForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListEventsForRepoResponse,
    IssuesListEventsForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/events",
      operationId: "issuesListEventsForRepo",
      variables,
    }),
    () => fetchIssuesListEventsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesGetEventPathParams = {
  owner: string;
  repo: string;
  eventId: number;
};

export type IssuesGetEventError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type IssuesGetEventVariables = {
  pathParams: IssuesGetEventPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetEvent = (variables: IssuesGetEventVariables) =>
  githubFetch<
    Schemas.IssueEvent,
    IssuesGetEventError,
    undefined,
    {},
    {},
    IssuesGetEventPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/events/{eventId}",
    method: "get",
    ...variables,
  });

export const useIssuesGetEvent = <TData = Schemas.IssueEvent>(
  variables: IssuesGetEventVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.IssueEvent, IssuesGetEventError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.IssueEvent, IssuesGetEventError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/events/{event_id}",
      operationId: "issuesGetEvent",
      variables,
    }),
    () => fetchIssuesGetEvent({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesGetPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesGetError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type IssuesGetVariables = {
  pathParams: IssuesGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
 * [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
 * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
 * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
 * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesGet = (variables: IssuesGetVariables) =>
  githubFetch<
    Schemas.Issue,
    IssuesGetError,
    undefined,
    {},
    {},
    IssuesGetPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}",
    method: "get",
    ...variables,
  });

/**
 * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
 * [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
 * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
 * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
 * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesGet = <TData = Schemas.Issue>(
  variables: IssuesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Issue, IssuesGetError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Issue, IssuesGetError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}",
      operationId: "issuesGet",
      variables,
    }),
    () => fetchIssuesGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesUpdatePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type IssuesUpdateRequestBody = {
  /*
   * Login for the user that this issue should be assigned to. **This field is deprecated.**
   */
  assignee?: string | null;
  /*
   * Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
   */
  assignees?: string[];
  /*
   * The contents of the issue.
   */
  body?: string | null;
  /*
   * Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
   */
  labels?: (
    | string
    | {
        color?: string | null;
        description?: string | null;
        id?: number;
        name?: string;
      }
  )[];
  milestone?: string | number | null;
  /*
   * State of the issue. Either `open` or `closed`.
   */
  state?: "open" | "closed";
  /*
   * The title of the issue.
   */
  title?: string | number | null;
};

export type IssuesUpdateVariables = {
  body?: IssuesUpdateRequestBody;
  pathParams: IssuesUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Issue owners and users with push access can edit an issue.
 */
export const fetchIssuesUpdate = (variables: IssuesUpdateVariables) =>
  githubFetch<
    Schemas.Issue,
    IssuesUpdateError,
    IssuesUpdateRequestBody,
    {},
    {},
    IssuesUpdatePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Issue owners and users with push access can edit an issue.
 */
export const useIssuesUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Issue,
      IssuesUpdateError,
      IssuesUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Issue,
    IssuesUpdateError,
    IssuesUpdateVariables
  >(
    (variables: IssuesUpdateVariables) =>
      fetchIssuesUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesRemoveAssigneesPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesRemoveAssigneesError = Fetcher.ErrorWrapper<undefined>;

export type IssuesRemoveAssigneesRequestBody = {
  /*
   * Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
   */
  assignees?: string[];
};

export type IssuesRemoveAssigneesVariables = {
  body?: IssuesRemoveAssigneesRequestBody;
  pathParams: IssuesRemoveAssigneesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes one or more assignees from an issue.
 */
export const fetchIssuesRemoveAssignees = (
  variables: IssuesRemoveAssigneesVariables
) =>
  githubFetch<
    Schemas.IssueSimple,
    IssuesRemoveAssigneesError,
    IssuesRemoveAssigneesRequestBody,
    {},
    {},
    IssuesRemoveAssigneesPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/assignees",
    method: "delete",
    ...variables,
  });

/**
 * Removes one or more assignees from an issue.
 */
export const useIssuesRemoveAssignees = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.IssueSimple,
      IssuesRemoveAssigneesError,
      IssuesRemoveAssigneesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.IssueSimple,
    IssuesRemoveAssigneesError,
    IssuesRemoveAssigneesVariables
  >(
    (variables: IssuesRemoveAssigneesVariables) =>
      fetchIssuesRemoveAssignees({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesAddAssigneesPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesAddAssigneesError = Fetcher.ErrorWrapper<undefined>;

export type IssuesAddAssigneesRequestBody = {
  /*
   * Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
   */
  assignees?: string[];
};

export type IssuesAddAssigneesVariables = {
  body?: IssuesAddAssigneesRequestBody;
  pathParams: IssuesAddAssigneesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
 */
export const fetchIssuesAddAssignees = (
  variables: IssuesAddAssigneesVariables
) =>
  githubFetch<
    Schemas.IssueSimple,
    IssuesAddAssigneesError,
    IssuesAddAssigneesRequestBody,
    {},
    {},
    IssuesAddAssigneesPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/assignees",
    method: "post",
    ...variables,
  });

/**
 * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
 */
export const useIssuesAddAssignees = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.IssueSimple,
      IssuesAddAssigneesError,
      IssuesAddAssigneesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.IssueSimple,
    IssuesAddAssigneesError,
    IssuesAddAssigneesVariables
  >(
    (variables: IssuesAddAssigneesVariables) =>
      fetchIssuesAddAssignees({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListCommentsPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesListCommentsQueryParams = {
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListCommentsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type IssuesListCommentsResponse = Schemas.IssueComment[];

export type IssuesListCommentsVariables = {
  pathParams: IssuesListCommentsPathParams;
  queryParams?: IssuesListCommentsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Issue Comments are ordered by ascending ID.
 */
export const fetchIssuesListComments = (
  variables: IssuesListCommentsVariables
) =>
  githubFetch<
    IssuesListCommentsResponse,
    IssuesListCommentsError,
    undefined,
    {},
    IssuesListCommentsQueryParams,
    IssuesListCommentsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/comments",
    method: "get",
    ...variables,
  });

/**
 * Issue Comments are ordered by ascending ID.
 */
export const useIssuesListComments = <TData = IssuesListCommentsResponse>(
  variables: IssuesListCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListCommentsResponse,
      IssuesListCommentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListCommentsResponse,
    IssuesListCommentsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}/comments",
      operationId: "issuesListComments",
      variables,
    }),
    () => fetchIssuesListComments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesCreateCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesCreateCommentError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesCreateCommentRequestBody = {
  /*
   * The contents of the comment.
   */
  body: string;
};

export type IssuesCreateCommentVariables = {
  body: IssuesCreateCommentRequestBody;
  pathParams: IssuesCreateCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const fetchIssuesCreateComment = (
  variables: IssuesCreateCommentVariables
) =>
  githubFetch<
    Schemas.IssueComment,
    IssuesCreateCommentError,
    IssuesCreateCommentRequestBody,
    {},
    {},
    IssuesCreateCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/comments",
    method: "post",
    ...variables,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const useIssuesCreateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.IssueComment,
      IssuesCreateCommentError,
      IssuesCreateCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.IssueComment,
    IssuesCreateCommentError,
    IssuesCreateCommentVariables
  >(
    (variables: IssuesCreateCommentVariables) =>
      fetchIssuesCreateComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListEventsPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesListEventsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListEventsError = Fetcher.ErrorWrapper<{
  status: 410;
  payload: Responses.Gone;
}>;

export type IssuesListEventsResponse = Schemas.IssueEventForIssue[];

export type IssuesListEventsVariables = {
  pathParams: IssuesListEventsPathParams;
  queryParams?: IssuesListEventsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListEvents = (variables: IssuesListEventsVariables) =>
  githubFetch<
    IssuesListEventsResponse,
    IssuesListEventsError,
    undefined,
    {},
    IssuesListEventsQueryParams,
    IssuesListEventsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/events",
    method: "get",
    ...variables,
  });

export const useIssuesListEvents = <TData = IssuesListEventsResponse>(
  variables: IssuesListEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsResponse,
      IssuesListEventsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListEventsResponse,
    IssuesListEventsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}/events",
      operationId: "issuesListEvents",
      variables,
    }),
    () => fetchIssuesListEvents({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesRemoveAllLabelsPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesRemoveAllLabelsError = Fetcher.ErrorWrapper<{
  status: 410;
  payload: Responses.Gone;
}>;

export type IssuesRemoveAllLabelsVariables = {
  pathParams: IssuesRemoveAllLabelsPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesRemoveAllLabels = (
  variables: IssuesRemoveAllLabelsVariables
) =>
  githubFetch<
    undefined,
    IssuesRemoveAllLabelsError,
    undefined,
    {},
    {},
    IssuesRemoveAllLabelsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "delete",
    ...variables,
  });

export const useIssuesRemoveAllLabels = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesRemoveAllLabelsError,
      IssuesRemoveAllLabelsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesRemoveAllLabelsError,
    IssuesRemoveAllLabelsVariables
  >(
    (variables: IssuesRemoveAllLabelsVariables) =>
      fetchIssuesRemoveAllLabels({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListLabelsOnIssuePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesListLabelsOnIssueQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListLabelsOnIssueError = Fetcher.ErrorWrapper<{
  status: 410;
  payload: Responses.Gone;
}>;

export type IssuesListLabelsOnIssueResponse = Schemas.Label[];

export type IssuesListLabelsOnIssueVariables = {
  pathParams: IssuesListLabelsOnIssuePathParams;
  queryParams?: IssuesListLabelsOnIssueQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListLabelsOnIssue = (
  variables: IssuesListLabelsOnIssueVariables
) =>
  githubFetch<
    IssuesListLabelsOnIssueResponse,
    IssuesListLabelsOnIssueError,
    undefined,
    {},
    IssuesListLabelsOnIssueQueryParams,
    IssuesListLabelsOnIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "get",
    ...variables,
  });

export const useIssuesListLabelsOnIssue = <
  TData = IssuesListLabelsOnIssueResponse
>(
  variables: IssuesListLabelsOnIssueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsOnIssueResponse,
      IssuesListLabelsOnIssueError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListLabelsOnIssueResponse,
    IssuesListLabelsOnIssueError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}/labels",
      operationId: "issuesListLabelsOnIssue",
      variables,
    }),
    () => fetchIssuesListLabelsOnIssue({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesAddLabelsPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesAddLabelsError = Fetcher.ErrorWrapper<
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesAddLabelsResponse = Schemas.Label[];

export type IssuesAddLabelsRequestBody = {
  /*
   * The name of the label to add to the issue. Must contain at least one label. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.
   */
  labels: string[];
};

export type IssuesAddLabelsVariables = {
  body: IssuesAddLabelsRequestBody;
  pathParams: IssuesAddLabelsPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesAddLabels = (variables: IssuesAddLabelsVariables) =>
  githubFetch<
    IssuesAddLabelsResponse,
    IssuesAddLabelsError,
    IssuesAddLabelsRequestBody,
    {},
    {},
    IssuesAddLabelsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "post",
    ...variables,
  });

export const useIssuesAddLabels = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      IssuesAddLabelsResponse,
      IssuesAddLabelsError,
      IssuesAddLabelsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    IssuesAddLabelsResponse,
    IssuesAddLabelsError,
    IssuesAddLabelsVariables
  >(
    (variables: IssuesAddLabelsVariables) =>
      fetchIssuesAddLabels({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesSetLabelsPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesSetLabelsError = Fetcher.ErrorWrapper<
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesSetLabelsResponse = Schemas.Label[];

export type IssuesSetLabelsRequestBody = {
  /*
   * The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.
   */
  labels?: string[];
};

export type IssuesSetLabelsVariables = {
  body?: IssuesSetLabelsRequestBody;
  pathParams: IssuesSetLabelsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes any previous labels and sets the new labels for an issue.
 */
export const fetchIssuesSetLabels = (variables: IssuesSetLabelsVariables) =>
  githubFetch<
    IssuesSetLabelsResponse,
    IssuesSetLabelsError,
    IssuesSetLabelsRequestBody,
    {},
    {},
    IssuesSetLabelsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "put",
    ...variables,
  });

/**
 * Removes any previous labels and sets the new labels for an issue.
 */
export const useIssuesSetLabels = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      IssuesSetLabelsResponse,
      IssuesSetLabelsError,
      IssuesSetLabelsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    IssuesSetLabelsResponse,
    IssuesSetLabelsError,
    IssuesSetLabelsVariables
  >(
    (variables: IssuesSetLabelsVariables) =>
      fetchIssuesSetLabels({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesRemoveLabelPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
  name: string;
};

export type IssuesRemoveLabelError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type IssuesRemoveLabelResponse = Schemas.Label[];

export type IssuesRemoveLabelVariables = {
  pathParams: IssuesRemoveLabelPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
 */
export const fetchIssuesRemoveLabel = (variables: IssuesRemoveLabelVariables) =>
  githubFetch<
    IssuesRemoveLabelResponse,
    IssuesRemoveLabelError,
    undefined,
    {},
    {},
    IssuesRemoveLabelPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels/{name}",
    method: "delete",
    ...variables,
  });

/**
 * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
 */
export const useIssuesRemoveLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      IssuesRemoveLabelResponse,
      IssuesRemoveLabelError,
      IssuesRemoveLabelVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    IssuesRemoveLabelResponse,
    IssuesRemoveLabelError,
    IssuesRemoveLabelVariables
  >(
    (variables: IssuesRemoveLabelVariables) =>
      fetchIssuesRemoveLabel({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesUnlockPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesUnlockError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type IssuesUnlockVariables = {
  pathParams: IssuesUnlockPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access can unlock an issue's conversation.
 */
export const fetchIssuesUnlock = (variables: IssuesUnlockVariables) =>
  githubFetch<
    undefined,
    IssuesUnlockError,
    undefined,
    {},
    {},
    IssuesUnlockPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/lock",
    method: "delete",
    ...variables,
  });

/**
 * Users with push access can unlock an issue's conversation.
 */
export const useIssuesUnlock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesUnlockError,
      IssuesUnlockVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesUnlockError,
    IssuesUnlockVariables
  >(
    (variables: IssuesUnlockVariables) =>
      fetchIssuesUnlock({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesLockPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesLockError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesLockVariables = {
  body?: {
    /*
     * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
     * \* `off-topic`
     * \* `too heated`
     * \* `resolved`
     * \* `spam`
     */
    lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
  } | null;
  pathParams: IssuesLockPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access can lock an issue or pull request's conversation.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchIssuesLock = (variables: IssuesLockVariables) =>
  githubFetch<
    undefined,
    IssuesLockError,
    {
      /*
       * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
       * \* `off-topic`
       * \* `too heated`
       * \* `resolved`
       * \* `spam`
       */
      lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
    } | null,
    {},
    {},
    IssuesLockPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/lock",
    method: "put",
    ...variables,
  });

/**
 * Users with push access can lock an issue or pull request's conversation.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useIssuesLock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesLockError,
      IssuesLockVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesLockError,
    IssuesLockVariables
  >(
    (variables: IssuesLockVariables) =>
      fetchIssuesLock({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsListForIssuePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type ReactionsListForIssueQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForIssueError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type ReactionsListForIssueResponse = Schemas.Reaction[];

export type ReactionsListForIssueVariables = {
  pathParams: ReactionsListForIssuePathParams;
  queryParams?: ReactionsListForIssueQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
 */
export const fetchReactionsListForIssue = (
  variables: ReactionsListForIssueVariables
) =>
  githubFetch<
    ReactionsListForIssueResponse,
    ReactionsListForIssueError,
    undefined,
    {},
    ReactionsListForIssueQueryParams,
    ReactionsListForIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
 */
export const useReactionsListForIssue = <TData = ReactionsListForIssueResponse>(
  variables: ReactionsListForIssueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForIssueResponse,
      ReactionsListForIssueError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForIssueResponse,
    ReactionsListForIssueError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
      operationId: "reactionsListForIssue",
      variables,
    }),
    () => fetchReactionsListForIssue({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForIssuePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type ReactionsCreateForIssueError = Fetcher.ErrorWrapper<
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReactionsCreateForIssueRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForIssueVariables = {
  body: ReactionsCreateForIssueRequestBody;
  pathParams: ReactionsCreateForIssuePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.
 */
export const fetchReactionsCreateForIssue = (
  variables: ReactionsCreateForIssueVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForIssueError,
    ReactionsCreateForIssueRequestBody,
    {},
    {},
    ReactionsCreateForIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.
 */
export const useReactionsCreateForIssue = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForIssueError,
      ReactionsCreateForIssueVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForIssueError,
    ReactionsCreateForIssueVariables
  >(
    (variables: ReactionsCreateForIssueVariables) =>
      fetchReactionsCreateForIssue({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsDeleteForIssuePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
  reactionId: number;
};

export type ReactionsDeleteForIssueError = Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForIssueVariables = {
  pathParams: ReactionsDeleteForIssuePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
 */
export const fetchReactionsDeleteForIssue = (
  variables: ReactionsDeleteForIssueVariables
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForIssueError,
    undefined,
    {},
    {},
    ReactionsDeleteForIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
 */
export const useReactionsDeleteForIssue = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForIssueError,
      ReactionsDeleteForIssueVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForIssueError,
    ReactionsDeleteForIssueVariables
  >(
    (variables: ReactionsDeleteForIssueVariables) =>
      fetchReactionsDeleteForIssue({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListEventsForTimelinePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesListEventsForTimelineQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListEventsForTimelineError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type IssuesListEventsForTimelineResponse = Schemas.IssueEventForIssue[];

export type IssuesListEventsForTimelineVariables = {
  pathParams: IssuesListEventsForTimelinePathParams;
  queryParams?: IssuesListEventsForTimelineQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListEventsForTimeline = (
  variables: IssuesListEventsForTimelineVariables
) =>
  githubFetch<
    IssuesListEventsForTimelineResponse,
    IssuesListEventsForTimelineError,
    undefined,
    {},
    IssuesListEventsForTimelineQueryParams,
    IssuesListEventsForTimelinePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/timeline",
    method: "get",
    ...variables,
  });

export const useIssuesListEventsForTimeline = <
  TData = IssuesListEventsForTimelineResponse
>(
  variables: IssuesListEventsForTimelineVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsForTimelineResponse,
      IssuesListEventsForTimelineError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListEventsForTimelineResponse,
    IssuesListEventsForTimelineError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}/timeline",
      operationId: "issuesListEventsForTimeline",
      variables,
    }),
    () => fetchIssuesListEventsForTimeline({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListDeployKeysPathParams = {
  owner: string;
  repo: string;
};

export type ReposListDeployKeysQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListDeployKeysError = Fetcher.ErrorWrapper<undefined>;

export type ReposListDeployKeysResponse = Schemas.DeployKey[];

export type ReposListDeployKeysVariables = {
  pathParams: ReposListDeployKeysPathParams;
  queryParams?: ReposListDeployKeysQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListDeployKeys = (
  variables: ReposListDeployKeysVariables
) =>
  githubFetch<
    ReposListDeployKeysResponse,
    ReposListDeployKeysError,
    undefined,
    {},
    ReposListDeployKeysQueryParams,
    ReposListDeployKeysPathParams
  >({ url: "/repos/{owner}/{repo}/keys", method: "get", ...variables });

export const useReposListDeployKeys = <TData = ReposListDeployKeysResponse>(
  variables: ReposListDeployKeysVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeployKeysResponse,
      ReposListDeployKeysError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListDeployKeysResponse,
    ReposListDeployKeysError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/keys",
      operationId: "reposListDeployKeys",
      variables,
    }),
    () => fetchReposListDeployKeys({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateDeployKeyPathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateDeployKeyError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposCreateDeployKeyRequestBody = {
  /*
   * The contents of the key.
   */
  key: string;
  /*
   * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
   *
   * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/)."
   */
  read_only?: boolean;
  /*
   * A name for the key.
   */
  title?: string;
};

export type ReposCreateDeployKeyVariables = {
  body: ReposCreateDeployKeyRequestBody;
  pathParams: ReposCreateDeployKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can create a read-only deploy key.
 */
export const fetchReposCreateDeployKey = (
  variables: ReposCreateDeployKeyVariables
) =>
  githubFetch<
    Schemas.DeployKey,
    ReposCreateDeployKeyError,
    ReposCreateDeployKeyRequestBody,
    {},
    {},
    ReposCreateDeployKeyPathParams
  >({ url: "/repos/{owner}/{repo}/keys", method: "post", ...variables });

/**
 * You can create a read-only deploy key.
 */
export const useReposCreateDeployKey = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeployKey,
      ReposCreateDeployKeyError,
      ReposCreateDeployKeyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.DeployKey,
    ReposCreateDeployKeyError,
    ReposCreateDeployKeyVariables
  >(
    (variables: ReposCreateDeployKeyVariables) =>
      fetchReposCreateDeployKey({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteDeployKeyPathParams = {
  owner: string;
  repo: string;
  /*
   * key_id parameter
   */
  keyId: number;
};

export type ReposDeleteDeployKeyError = Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteDeployKeyVariables = {
  pathParams: ReposDeleteDeployKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
 */
export const fetchReposDeleteDeployKey = (
  variables: ReposDeleteDeployKeyVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteDeployKeyError,
    undefined,
    {},
    {},
    ReposDeleteDeployKeyPathParams
  >({
    url: "/repos/{owner}/{repo}/keys/{keyId}",
    method: "delete",
    ...variables,
  });

/**
 * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
 */
export const useReposDeleteDeployKey = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteDeployKeyError,
      ReposDeleteDeployKeyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteDeployKeyError,
    ReposDeleteDeployKeyVariables
  >(
    (variables: ReposDeleteDeployKeyVariables) =>
      fetchReposDeleteDeployKey({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetDeployKeyPathParams = {
  owner: string;
  repo: string;
  /*
   * key_id parameter
   */
  keyId: number;
};

export type ReposGetDeployKeyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetDeployKeyVariables = {
  pathParams: ReposGetDeployKeyPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetDeployKey = (variables: ReposGetDeployKeyVariables) =>
  githubFetch<
    Schemas.DeployKey,
    ReposGetDeployKeyError,
    undefined,
    {},
    {},
    ReposGetDeployKeyPathParams
  >({ url: "/repos/{owner}/{repo}/keys/{keyId}", method: "get", ...variables });

export const useReposGetDeployKey = <TData = Schemas.DeployKey>(
  variables: ReposGetDeployKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeployKey,
      ReposGetDeployKeyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.DeployKey, ReposGetDeployKeyError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/keys/{key_id}",
      operationId: "reposGetDeployKey",
      variables,
    }),
    () => fetchReposGetDeployKey({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesListLabelsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListLabelsForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListLabelsForRepoError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesListLabelsForRepoResponse = Schemas.Label[];

export type IssuesListLabelsForRepoVariables = {
  pathParams: IssuesListLabelsForRepoPathParams;
  queryParams?: IssuesListLabelsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListLabelsForRepo = (
  variables: IssuesListLabelsForRepoVariables
) =>
  githubFetch<
    IssuesListLabelsForRepoResponse,
    IssuesListLabelsForRepoError,
    undefined,
    {},
    IssuesListLabelsForRepoQueryParams,
    IssuesListLabelsForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/labels", method: "get", ...variables });

export const useIssuesListLabelsForRepo = <
  TData = IssuesListLabelsForRepoResponse
>(
  variables: IssuesListLabelsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsForRepoResponse,
      IssuesListLabelsForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListLabelsForRepoResponse,
    IssuesListLabelsForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/labels",
      operationId: "issuesListLabelsForRepo",
      variables,
    }),
    () => fetchIssuesListLabelsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesCreateLabelPathParams = {
  owner: string;
  repo: string;
};

export type IssuesCreateLabelError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesCreateLabelRequestBody = {
  /*
   * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
   */
  color?: string;
  /*
   * A short description of the label.
   */
  description?: string;
  /*
   * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).
   */
  name: string;
};

export type IssuesCreateLabelVariables = {
  body: IssuesCreateLabelRequestBody;
  pathParams: IssuesCreateLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesCreateLabel = (variables: IssuesCreateLabelVariables) =>
  githubFetch<
    Schemas.Label,
    IssuesCreateLabelError,
    IssuesCreateLabelRequestBody,
    {},
    {},
    IssuesCreateLabelPathParams
  >({ url: "/repos/{owner}/{repo}/labels", method: "post", ...variables });

export const useIssuesCreateLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Label,
      IssuesCreateLabelError,
      IssuesCreateLabelVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Label,
    IssuesCreateLabelError,
    IssuesCreateLabelVariables
  >(
    (variables: IssuesCreateLabelVariables) =>
      fetchIssuesCreateLabel({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesDeleteLabelPathParams = {
  owner: string;
  repo: string;
  name: string;
};

export type IssuesDeleteLabelError = Fetcher.ErrorWrapper<undefined>;

export type IssuesDeleteLabelVariables = {
  pathParams: IssuesDeleteLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesDeleteLabel = (variables: IssuesDeleteLabelVariables) =>
  githubFetch<
    undefined,
    IssuesDeleteLabelError,
    undefined,
    {},
    {},
    IssuesDeleteLabelPathParams
  >({
    url: "/repos/{owner}/{repo}/labels/{name}",
    method: "delete",
    ...variables,
  });

export const useIssuesDeleteLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesDeleteLabelError,
      IssuesDeleteLabelVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesDeleteLabelError,
    IssuesDeleteLabelVariables
  >(
    (variables: IssuesDeleteLabelVariables) =>
      fetchIssuesDeleteLabel({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesGetLabelPathParams = {
  owner: string;
  repo: string;
  name: string;
};

export type IssuesGetLabelError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesGetLabelVariables = {
  pathParams: IssuesGetLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetLabel = (variables: IssuesGetLabelVariables) =>
  githubFetch<
    Schemas.Label,
    IssuesGetLabelError,
    undefined,
    {},
    {},
    IssuesGetLabelPathParams
  >({
    url: "/repos/{owner}/{repo}/labels/{name}",
    method: "get",
    ...variables,
  });

export const useIssuesGetLabel = <TData = Schemas.Label>(
  variables: IssuesGetLabelVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Label, IssuesGetLabelError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Label, IssuesGetLabelError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/labels/{name}",
      operationId: "issuesGetLabel",
      variables,
    }),
    () => fetchIssuesGetLabel({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesUpdateLabelPathParams = {
  owner: string;
  repo: string;
  name: string;
};

export type IssuesUpdateLabelError = Fetcher.ErrorWrapper<undefined>;

export type IssuesUpdateLabelRequestBody = {
  /*
   * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
   */
  color?: string;
  /*
   * A short description of the label.
   */
  description?: string;
  /*
   * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).
   */
  new_name?: string;
};

export type IssuesUpdateLabelVariables = {
  body?: IssuesUpdateLabelRequestBody;
  pathParams: IssuesUpdateLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesUpdateLabel = (variables: IssuesUpdateLabelVariables) =>
  githubFetch<
    Schemas.Label,
    IssuesUpdateLabelError,
    IssuesUpdateLabelRequestBody,
    {},
    {},
    IssuesUpdateLabelPathParams
  >({
    url: "/repos/{owner}/{repo}/labels/{name}",
    method: "patch",
    ...variables,
  });

export const useIssuesUpdateLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Label,
      IssuesUpdateLabelError,
      IssuesUpdateLabelVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Label,
    IssuesUpdateLabelError,
    IssuesUpdateLabelVariables
  >(
    (variables: IssuesUpdateLabelVariables) =>
      fetchIssuesUpdateLabel({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListLanguagesPathParams = {
  owner: string;
  repo: string;
};

export type ReposListLanguagesError = Fetcher.ErrorWrapper<undefined>;

export type ReposListLanguagesVariables = {
  pathParams: ReposListLanguagesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
 */
export const fetchReposListLanguages = (
  variables: ReposListLanguagesVariables
) =>
  githubFetch<
    Schemas.Language,
    ReposListLanguagesError,
    undefined,
    {},
    {},
    ReposListLanguagesPathParams
  >({ url: "/repos/{owner}/{repo}/languages", method: "get", ...variables });

/**
 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
 */
export const useReposListLanguages = <TData = Schemas.Language>(
  variables: ReposListLanguagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Language,
      ReposListLanguagesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Language, ReposListLanguagesError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/languages",
      operationId: "reposListLanguages",
      variables,
    }),
    () => fetchReposListLanguages({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type LicensesGetForRepoPathParams = {
  owner: string;
  repo: string;
};

export type LicensesGetForRepoError = Fetcher.ErrorWrapper<undefined>;

export type LicensesGetForRepoVariables = {
  pathParams: LicensesGetForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This method returns the contents of the repository's license file, if one is detected.
 *
 * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
 */
export const fetchLicensesGetForRepo = (
  variables: LicensesGetForRepoVariables
) =>
  githubFetch<
    Schemas.LicenseContent,
    LicensesGetForRepoError,
    undefined,
    {},
    {},
    LicensesGetForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/license", method: "get", ...variables });

/**
 * This method returns the contents of the repository's license file, if one is detected.
 *
 * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
 */
export const useLicensesGetForRepo = <TData = Schemas.LicenseContent>(
  variables: LicensesGetForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.LicenseContent,
      LicensesGetForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.LicenseContent,
    LicensesGetForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/license",
      operationId: "licensesGetForRepo",
      variables,
    }),
    () => fetchLicensesGetForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposMergePathParams = {
  owner: string;
  repo: string;
};

export type ReposMergeError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: {
        /*
         * @example "https://docs.github.com/rest/reference/repos#perform-a-merge"
         */
        documentation_url?: string;
        message?: string;
      };
    }
  | {
      status: 409;
      payload: {
        /*
         * @example "https://docs.github.com/rest/reference/repos#perform-a-merge"
         */
        documentation_url?: string;
        message?: string;
      };
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposMergeRequestBody = {
  /*
   * The name of the base branch that the head will be merged into.
   */
  base: string;
  /*
   * Commit message to use for the merge commit. If omitted, a default message will be used.
   */
  commit_message?: string;
  /*
   * The head to merge. This can be a branch name or a commit SHA1.
   */
  head: string;
};

export type ReposMergeVariables = {
  body: ReposMergeRequestBody;
  pathParams: ReposMergePathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposMerge = (variables: ReposMergeVariables) =>
  githubFetch<
    Schemas.Commit,
    ReposMergeError,
    ReposMergeRequestBody,
    {},
    {},
    ReposMergePathParams
  >({ url: "/repos/{owner}/{repo}/merges", method: "post", ...variables });

export const useReposMerge = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Commit,
      ReposMergeError,
      ReposMergeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Commit,
    ReposMergeError,
    ReposMergeVariables
  >(
    (variables: ReposMergeVariables) =>
      fetchReposMerge({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListMilestonesPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListMilestonesQueryParams = {
  /*
   * The state of the milestone. Either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * What to sort results by. Either `due_on` or `completeness`.
   *
   * @default due_on
   */
  sort?: "due_on" | "completeness";
  /*
   * The direction of the sort. Either `asc` or `desc`.
   *
   * @default asc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListMilestonesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesListMilestonesResponse = Schemas.Milestone[];

export type IssuesListMilestonesVariables = {
  pathParams: IssuesListMilestonesPathParams;
  queryParams?: IssuesListMilestonesQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListMilestones = (
  variables: IssuesListMilestonesVariables
) =>
  githubFetch<
    IssuesListMilestonesResponse,
    IssuesListMilestonesError,
    undefined,
    {},
    IssuesListMilestonesQueryParams,
    IssuesListMilestonesPathParams
  >({ url: "/repos/{owner}/{repo}/milestones", method: "get", ...variables });

export const useIssuesListMilestones = <TData = IssuesListMilestonesResponse>(
  variables: IssuesListMilestonesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListMilestonesResponse,
      IssuesListMilestonesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListMilestonesResponse,
    IssuesListMilestonesError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/milestones",
      operationId: "issuesListMilestones",
      variables,
    }),
    () => fetchIssuesListMilestones({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesCreateMilestonePathParams = {
  owner: string;
  repo: string;
};

export type IssuesCreateMilestoneError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesCreateMilestoneRequestBody = {
  /*
   * A description of the milestone.
   */
  description?: string;
  /*
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  due_on?: string;
  /*
   * The state of the milestone. Either `open` or `closed`.
   *
   * @default open
   */
  state?: "open" | "closed";
  /*
   * The title of the milestone.
   */
  title: string;
};

export type IssuesCreateMilestoneVariables = {
  body: IssuesCreateMilestoneRequestBody;
  pathParams: IssuesCreateMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesCreateMilestone = (
  variables: IssuesCreateMilestoneVariables
) =>
  githubFetch<
    Schemas.Milestone,
    IssuesCreateMilestoneError,
    IssuesCreateMilestoneRequestBody,
    {},
    {},
    IssuesCreateMilestonePathParams
  >({ url: "/repos/{owner}/{repo}/milestones", method: "post", ...variables });

export const useIssuesCreateMilestone = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Milestone,
      IssuesCreateMilestoneError,
      IssuesCreateMilestoneVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Milestone,
    IssuesCreateMilestoneError,
    IssuesCreateMilestoneVariables
  >(
    (variables: IssuesCreateMilestoneVariables) =>
      fetchIssuesCreateMilestone({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesDeleteMilestonePathParams = {
  owner: string;
  repo: string;
  /*
   * milestone_number parameter
   */
  milestoneNumber: number;
};

export type IssuesDeleteMilestoneError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesDeleteMilestoneVariables = {
  pathParams: IssuesDeleteMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesDeleteMilestone = (
  variables: IssuesDeleteMilestoneVariables
) =>
  githubFetch<
    undefined,
    IssuesDeleteMilestoneError,
    undefined,
    {},
    {},
    IssuesDeleteMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    method: "delete",
    ...variables,
  });

export const useIssuesDeleteMilestone = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesDeleteMilestoneError,
      IssuesDeleteMilestoneVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesDeleteMilestoneError,
    IssuesDeleteMilestoneVariables
  >(
    (variables: IssuesDeleteMilestoneVariables) =>
      fetchIssuesDeleteMilestone({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesGetMilestonePathParams = {
  owner: string;
  repo: string;
  /*
   * milestone_number parameter
   */
  milestoneNumber: number;
};

export type IssuesGetMilestoneError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesGetMilestoneVariables = {
  pathParams: IssuesGetMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetMilestone = (
  variables: IssuesGetMilestoneVariables
) =>
  githubFetch<
    Schemas.Milestone,
    IssuesGetMilestoneError,
    undefined,
    {},
    {},
    IssuesGetMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    method: "get",
    ...variables,
  });

export const useIssuesGetMilestone = <TData = Schemas.Milestone>(
  variables: IssuesGetMilestoneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Milestone,
      IssuesGetMilestoneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Milestone, IssuesGetMilestoneError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/milestones/{milestone_number}",
      operationId: "issuesGetMilestone",
      variables,
    }),
    () => fetchIssuesGetMilestone({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesUpdateMilestonePathParams = {
  owner: string;
  repo: string;
  /*
   * milestone_number parameter
   */
  milestoneNumber: number;
};

export type IssuesUpdateMilestoneError = Fetcher.ErrorWrapper<undefined>;

export type IssuesUpdateMilestoneRequestBody = {
  /*
   * A description of the milestone.
   */
  description?: string;
  /*
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  due_on?: string;
  /*
   * The state of the milestone. Either `open` or `closed`.
   *
   * @default open
   */
  state?: "open" | "closed";
  /*
   * The title of the milestone.
   */
  title?: string;
};

export type IssuesUpdateMilestoneVariables = {
  body?: IssuesUpdateMilestoneRequestBody;
  pathParams: IssuesUpdateMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesUpdateMilestone = (
  variables: IssuesUpdateMilestoneVariables
) =>
  githubFetch<
    Schemas.Milestone,
    IssuesUpdateMilestoneError,
    IssuesUpdateMilestoneRequestBody,
    {},
    {},
    IssuesUpdateMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    method: "patch",
    ...variables,
  });

export const useIssuesUpdateMilestone = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Milestone,
      IssuesUpdateMilestoneError,
      IssuesUpdateMilestoneVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Milestone,
    IssuesUpdateMilestoneError,
    IssuesUpdateMilestoneVariables
  >(
    (variables: IssuesUpdateMilestoneVariables) =>
      fetchIssuesUpdateMilestone({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListLabelsForMilestonePathParams = {
  owner: string;
  repo: string;
  /*
   * milestone_number parameter
   */
  milestoneNumber: number;
};

export type IssuesListLabelsForMilestoneQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListLabelsForMilestoneError = Fetcher.ErrorWrapper<undefined>;

export type IssuesListLabelsForMilestoneResponse = Schemas.Label[];

export type IssuesListLabelsForMilestoneVariables = {
  pathParams: IssuesListLabelsForMilestonePathParams;
  queryParams?: IssuesListLabelsForMilestoneQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListLabelsForMilestone = (
  variables: IssuesListLabelsForMilestoneVariables
) =>
  githubFetch<
    IssuesListLabelsForMilestoneResponse,
    IssuesListLabelsForMilestoneError,
    undefined,
    {},
    IssuesListLabelsForMilestoneQueryParams,
    IssuesListLabelsForMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}/labels",
    method: "get",
    ...variables,
  });

export const useIssuesListLabelsForMilestone = <
  TData = IssuesListLabelsForMilestoneResponse
>(
  variables: IssuesListLabelsForMilestoneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsForMilestoneResponse,
      IssuesListLabelsForMilestoneError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListLabelsForMilestoneResponse,
    IssuesListLabelsForMilestoneError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/milestones/{milestone_number}/labels",
      operationId: "issuesListLabelsForMilestone",
      variables,
    }),
    () =>
      fetchIssuesListLabelsForMilestone({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListRepoNotificationsForAuthenticatedUserPathParams = {
  owner: string;
  repo: string;
};

export type ActivityListRepoNotificationsForAuthenticatedUserQueryParams = {
  /*
   * If `true`, show notifications marked as read.
   *
   * @default false
   */
  all?: boolean;
  /*
   * If `true`, only shows notifications in which the user is directly participating or mentioned.
   *
   * @default false
   */
  participating?: boolean;
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  before?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListRepoNotificationsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListRepoNotificationsForAuthenticatedUserResponse =
  Schemas.Thread[];

export type ActivityListRepoNotificationsForAuthenticatedUserVariables = {
  pathParams: ActivityListRepoNotificationsForAuthenticatedUserPathParams;
  queryParams?: ActivityListRepoNotificationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all notifications for the current user.
 */
export const fetchActivityListRepoNotificationsForAuthenticatedUser = (
  variables: ActivityListRepoNotificationsForAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListRepoNotificationsForAuthenticatedUserResponse,
    ActivityListRepoNotificationsForAuthenticatedUserError,
    undefined,
    {},
    ActivityListRepoNotificationsForAuthenticatedUserQueryParams,
    ActivityListRepoNotificationsForAuthenticatedUserPathParams
  >({
    url: "/repos/{owner}/{repo}/notifications",
    method: "get",
    ...variables,
  });

/**
 * List all notifications for the current user.
 */
export const useActivityListRepoNotificationsForAuthenticatedUser = <
  TData = ActivityListRepoNotificationsForAuthenticatedUserResponse
>(
  variables: ActivityListRepoNotificationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListRepoNotificationsForAuthenticatedUserResponse,
      ActivityListRepoNotificationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListRepoNotificationsForAuthenticatedUserResponse,
    ActivityListRepoNotificationsForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/notifications",
      operationId: "activityListRepoNotificationsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListRepoNotificationsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityMarkRepoNotificationsAsReadPathParams = {
  owner: string;
  repo: string;
};

export type ActivityMarkRepoNotificationsAsReadError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityMarkRepoNotificationsAsReadRequestBody = {
  /*
   * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
   */
  last_read_at?: string;
};

export type ActivityMarkRepoNotificationsAsReadVariables = {
  body?: ActivityMarkRepoNotificationsAsReadRequestBody;
  pathParams: ActivityMarkRepoNotificationsAsReadPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const fetchActivityMarkRepoNotificationsAsRead = (
  variables: ActivityMarkRepoNotificationsAsReadVariables
) =>
  githubFetch<
    undefined,
    ActivityMarkRepoNotificationsAsReadError,
    ActivityMarkRepoNotificationsAsReadRequestBody,
    {},
    {},
    ActivityMarkRepoNotificationsAsReadPathParams
  >({
    url: "/repos/{owner}/{repo}/notifications",
    method: "put",
    ...variables,
  });

/**
 * Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const useActivityMarkRepoNotificationsAsRead = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivityMarkRepoNotificationsAsReadError,
      ActivityMarkRepoNotificationsAsReadVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActivityMarkRepoNotificationsAsReadError,
    ActivityMarkRepoNotificationsAsReadVariables
  >(
    (variables: ActivityMarkRepoNotificationsAsReadVariables) =>
      fetchActivityMarkRepoNotificationsAsRead({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposDeletePagesSitePathParams = {
  owner: string;
  repo: string;
};

export type ReposDeletePagesSiteError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposDeletePagesSiteVariables = {
  pathParams: ReposDeletePagesSitePathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeletePagesSite = (
  variables: ReposDeletePagesSiteVariables
) =>
  githubFetch<
    undefined,
    ReposDeletePagesSiteError,
    undefined,
    {},
    {},
    ReposDeletePagesSitePathParams
  >({ url: "/repos/{owner}/{repo}/pages", method: "delete", ...variables });

export const useReposDeletePagesSite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeletePagesSiteError,
      ReposDeletePagesSiteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeletePagesSiteError,
    ReposDeletePagesSiteVariables
  >(
    (variables: ReposDeletePagesSiteVariables) =>
      fetchReposDeletePagesSite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetPagesPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetPagesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetPagesVariables = {
  pathParams: ReposGetPagesPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetPages = (variables: ReposGetPagesVariables) =>
  githubFetch<
    Schemas.Page,
    ReposGetPagesError,
    undefined,
    {},
    {},
    ReposGetPagesPathParams
  >({ url: "/repos/{owner}/{repo}/pages", method: "get", ...variables });

export const useReposGetPages = <TData = Schemas.Page>(
  variables: ReposGetPagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Page, ReposGetPagesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Page, ReposGetPagesError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pages",
      operationId: "reposGetPages",
      variables,
    }),
    () => fetchReposGetPages({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreatePagesSitePathParams = {
  owner: string;
  repo: string;
};

export type ReposCreatePagesSiteError = Fetcher.ErrorWrapper<
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreatePagesSiteRequestBody = {
  /*
   * The source branch and directory used to publish your Pages site.
   */
  source: {
    /*
     * The repository branch used to publish your site's source files.
     */
    branch: string;
    /*
     * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
     *
     * @default /
     */
    path?: "/" | "/docs";
  };
};

export type ReposCreatePagesSiteVariables = {
  body: ReposCreatePagesSiteRequestBody;
  pathParams: ReposCreatePagesSitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
 */
export const fetchReposCreatePagesSite = (
  variables: ReposCreatePagesSiteVariables
) =>
  githubFetch<
    Schemas.Page,
    ReposCreatePagesSiteError,
    ReposCreatePagesSiteRequestBody,
    {},
    {},
    ReposCreatePagesSitePathParams
  >({ url: "/repos/{owner}/{repo}/pages", method: "post", ...variables });

/**
 * Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
 */
export const useReposCreatePagesSite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Page,
      ReposCreatePagesSiteError,
      ReposCreatePagesSiteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Page,
    ReposCreatePagesSiteError,
    ReposCreatePagesSiteVariables
  >(
    (variables: ReposCreatePagesSiteVariables) =>
      fetchReposCreatePagesSite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposUpdateInformationAboutPagesSitePathParams = {
  owner: string;
  repo: string;
};

export type ReposUpdateInformationAboutPagesSiteError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposUpdateInformationAboutPagesSiteRequestBody = {
  /*
   * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)."
   */
  cname?: string | null;
  /*
   * Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
   */
  public?: boolean;
  source:
    | ("gh-pages" | "master" | "master /docs")
    | {
        /*
         * The repository branch used to publish your site's source files.
         */
        branch: string;
        /*
         * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
         */
        path: "/" | "/docs";
      };
};

export type ReposUpdateInformationAboutPagesSiteVariables = {
  body: ReposUpdateInformationAboutPagesSiteRequestBody;
  pathParams: ReposUpdateInformationAboutPagesSitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
 */
export const fetchReposUpdateInformationAboutPagesSite = (
  variables: ReposUpdateInformationAboutPagesSiteVariables
) =>
  githubFetch<
    undefined,
    ReposUpdateInformationAboutPagesSiteError,
    ReposUpdateInformationAboutPagesSiteRequestBody,
    {},
    {},
    ReposUpdateInformationAboutPagesSitePathParams
  >({ url: "/repos/{owner}/{repo}/pages", method: "put", ...variables });

/**
 * Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
 */
export const useReposUpdateInformationAboutPagesSite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposUpdateInformationAboutPagesSiteError,
      ReposUpdateInformationAboutPagesSiteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposUpdateInformationAboutPagesSiteError,
    ReposUpdateInformationAboutPagesSiteVariables
  >(
    (variables: ReposUpdateInformationAboutPagesSiteVariables) =>
      fetchReposUpdateInformationAboutPagesSite({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposListPagesBuildsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListPagesBuildsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListPagesBuildsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListPagesBuildsResponse = Schemas.PageBuild[];

export type ReposListPagesBuildsVariables = {
  pathParams: ReposListPagesBuildsPathParams;
  queryParams?: ReposListPagesBuildsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListPagesBuilds = (
  variables: ReposListPagesBuildsVariables
) =>
  githubFetch<
    ReposListPagesBuildsResponse,
    ReposListPagesBuildsError,
    undefined,
    {},
    ReposListPagesBuildsQueryParams,
    ReposListPagesBuildsPathParams
  >({ url: "/repos/{owner}/{repo}/pages/builds", method: "get", ...variables });

export const useReposListPagesBuilds = <TData = ReposListPagesBuildsResponse>(
  variables: ReposListPagesBuildsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPagesBuildsResponse,
      ReposListPagesBuildsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListPagesBuildsResponse,
    ReposListPagesBuildsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pages/builds",
      operationId: "reposListPagesBuilds",
      variables,
    }),
    () => fetchReposListPagesBuilds({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposRequestPagesBuildPathParams = {
  owner: string;
  repo: string;
};

export type ReposRequestPagesBuildError = Fetcher.ErrorWrapper<undefined>;

export type ReposRequestPagesBuildVariables = {
  pathParams: ReposRequestPagesBuildPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
 *
 * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
 */
export const fetchReposRequestPagesBuild = (
  variables: ReposRequestPagesBuildVariables
) =>
  githubFetch<
    Schemas.PageBuildStatus,
    ReposRequestPagesBuildError,
    undefined,
    {},
    {},
    ReposRequestPagesBuildPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/builds",
    method: "post",
    ...variables,
  });

/**
 * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
 *
 * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
 */
export const useReposRequestPagesBuild = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PageBuildStatus,
      ReposRequestPagesBuildError,
      ReposRequestPagesBuildVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PageBuildStatus,
    ReposRequestPagesBuildError,
    ReposRequestPagesBuildVariables
  >(
    (variables: ReposRequestPagesBuildVariables) =>
      fetchReposRequestPagesBuild({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetLatestPagesBuildPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetLatestPagesBuildError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetLatestPagesBuildVariables = {
  pathParams: ReposGetLatestPagesBuildPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetLatestPagesBuild = (
  variables: ReposGetLatestPagesBuildVariables
) =>
  githubFetch<
    Schemas.PageBuild,
    ReposGetLatestPagesBuildError,
    undefined,
    {},
    {},
    ReposGetLatestPagesBuildPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/builds/latest",
    method: "get",
    ...variables,
  });

export const useReposGetLatestPagesBuild = <TData = Schemas.PageBuild>(
  variables: ReposGetLatestPagesBuildVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PageBuild,
      ReposGetLatestPagesBuildError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PageBuild,
    ReposGetLatestPagesBuildError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pages/builds/latest",
      operationId: "reposGetLatestPagesBuild",
      variables,
    }),
    () => fetchReposGetLatestPagesBuild({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetPagesBuildPathParams = {
  owner: string;
  repo: string;
  buildId: number;
};

export type ReposGetPagesBuildError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetPagesBuildVariables = {
  pathParams: ReposGetPagesBuildPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetPagesBuild = (
  variables: ReposGetPagesBuildVariables
) =>
  githubFetch<
    Schemas.PageBuild,
    ReposGetPagesBuildError,
    undefined,
    {},
    {},
    ReposGetPagesBuildPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/builds/{buildId}",
    method: "get",
    ...variables,
  });

export const useReposGetPagesBuild = <TData = Schemas.PageBuild>(
  variables: ReposGetPagesBuildVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PageBuild,
      ReposGetPagesBuildError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.PageBuild, ReposGetPagesBuildError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pages/builds/{build_id}",
      operationId: "reposGetPagesBuild",
      variables,
    }),
    () => fetchReposGetPagesBuild({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsListForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ProjectsListForRepoQueryParams = {
  /*
   * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsListForRepoResponse = Schemas.Project[];

export type ProjectsListForRepoVariables = {
  pathParams: ProjectsListForRepoPathParams;
  queryParams?: ProjectsListForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsListForRepo = (
  variables: ProjectsListForRepoVariables
) =>
  githubFetch<
    ProjectsListForRepoResponse,
    ProjectsListForRepoError,
    undefined,
    {},
    ProjectsListForRepoQueryParams,
    ProjectsListForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/projects", method: "get", ...variables });

/**
 * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsListForRepo = <TData = ProjectsListForRepoResponse>(
  variables: ProjectsListForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForRepoResponse,
      ProjectsListForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListForRepoResponse,
    ProjectsListForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/projects",
      operationId: "projectsListForRepo",
      variables,
    }),
    () => fetchProjectsListForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsCreateForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ProjectsCreateForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsCreateForRepoRequestBody = {
  /*
   * The description of the project.
   */
  body?: string;
  /*
   * The name of the project.
   */
  name: string;
};

export type ProjectsCreateForRepoVariables = {
  body: ProjectsCreateForRepoRequestBody;
  pathParams: ProjectsCreateForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsCreateForRepo = (
  variables: ProjectsCreateForRepoVariables
) =>
  githubFetch<
    Schemas.Project,
    ProjectsCreateForRepoError,
    ProjectsCreateForRepoRequestBody,
    {},
    {},
    ProjectsCreateForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/projects", method: "post", ...variables });

/**
 * Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsCreateForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectsCreateForRepoError,
      ProjectsCreateForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectsCreateForRepoError,
    ProjectsCreateForRepoVariables
  >(
    (variables: ProjectsCreateForRepoVariables) =>
      fetchProjectsCreateForRepo({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListPathParams = {
  owner: string;
  repo: string;
};

export type PullsListQueryParams = {
  /*
   * Either `open`, `closed`, or `all` to filter by state.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
   */
  head?: string;
  /*
   * Filter pulls by base branch name. Example: `gh-pages`.
   */
  base?: string;
  /*
   * What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
   *
   * @default created
   */
  sort?: "created" | "updated" | "popularity" | "long-running";
  /*
   * The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsListResponse = Schemas.PullRequestSimple[];

export type PullsListVariables = {
  pathParams: PullsListPathParams;
  queryParams?: PullsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchPullsList = (variables: PullsListVariables) =>
  githubFetch<
    PullsListResponse,
    PullsListError,
    undefined,
    {},
    PullsListQueryParams,
    PullsListPathParams
  >({ url: "/repos/{owner}/{repo}/pulls", method: "get", ...variables });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const usePullsList = <TData = PullsListResponse>(
  variables: PullsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<PullsListResponse, PullsListError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<PullsListResponse, PullsListError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls",
      operationId: "pullsList",
      variables,
    }),
    () => fetchPullsList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsCreatePathParams = {
  owner: string;
  repo: string;
};

export type PullsCreateError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsCreateRequestBody = {
  /*
   * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
   */
  base: string;
  /*
   * The contents of the pull request.
   */
  body?: string;
  /*
   * Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
   */
  draft?: boolean;
  /*
   * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
   */
  head: string;
  /*
   * @example 1
   */
  issue?: number;
  /*
   * Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
   */
  maintainer_can_modify?: boolean;
  /*
   * The title of the new pull request.
   */
  title?: string;
};

export type PullsCreateVariables = {
  body: PullsCreateRequestBody;
  pathParams: PullsCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 *
 * You can create a new pull request.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchPullsCreate = (variables: PullsCreateVariables) =>
  githubFetch<
    Schemas.PullRequest,
    PullsCreateError,
    PullsCreateRequestBody,
    {},
    {},
    PullsCreatePathParams
  >({ url: "/repos/{owner}/{repo}/pulls", method: "post", ...variables });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 *
 * You can create a new pull request.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const usePullsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequest,
      PullsCreateError,
      PullsCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequest,
    PullsCreateError,
    PullsCreateVariables
  >(
    (variables: PullsCreateVariables) =>
      fetchPullsCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListReviewCommentsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type PullsListReviewCommentsForRepoQueryParams = {
  sort?: "created" | "updated" | "created_at";
  /*
   * Can be either `asc` or `desc`. Ignored without `sort` parameter.
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListReviewCommentsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type PullsListReviewCommentsForRepoResponse =
  Schemas.PullRequestReviewComment[];

export type PullsListReviewCommentsForRepoVariables = {
  pathParams: PullsListReviewCommentsForRepoPathParams;
  queryParams?: PullsListReviewCommentsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
 */
export const fetchPullsListReviewCommentsForRepo = (
  variables: PullsListReviewCommentsForRepoVariables
) =>
  githubFetch<
    PullsListReviewCommentsForRepoResponse,
    PullsListReviewCommentsForRepoError,
    undefined,
    {},
    PullsListReviewCommentsForRepoQueryParams,
    PullsListReviewCommentsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments",
    method: "get",
    ...variables,
  });

/**
 * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
 */
export const usePullsListReviewCommentsForRepo = <
  TData = PullsListReviewCommentsForRepoResponse
>(
  variables: PullsListReviewCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewCommentsForRepoResponse,
      PullsListReviewCommentsForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListReviewCommentsForRepoResponse,
    PullsListReviewCommentsForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/comments",
      operationId: "pullsListReviewCommentsForRepo",
      variables,
    }),
    () =>
      fetchPullsListReviewCommentsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsDeleteReviewCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type PullsDeleteReviewCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type PullsDeleteReviewCommentVariables = {
  pathParams: PullsDeleteReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a review comment.
 */
export const fetchPullsDeleteReviewComment = (
  variables: PullsDeleteReviewCommentVariables
) =>
  githubFetch<
    undefined,
    PullsDeleteReviewCommentError,
    undefined,
    {},
    {},
    PullsDeleteReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a review comment.
 */
export const usePullsDeleteReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PullsDeleteReviewCommentError,
      PullsDeleteReviewCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PullsDeleteReviewCommentError,
    PullsDeleteReviewCommentVariables
  >(
    (variables: PullsDeleteReviewCommentVariables) =>
      fetchPullsDeleteReviewComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsGetReviewCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type PullsGetReviewCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type PullsGetReviewCommentVariables = {
  pathParams: PullsGetReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Provides details for a review comment.
 */
export const fetchPullsGetReviewComment = (
  variables: PullsGetReviewCommentVariables
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    PullsGetReviewCommentError,
    undefined,
    {},
    {},
    PullsGetReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}",
    method: "get",
    ...variables,
  });

/**
 * Provides details for a review comment.
 */
export const usePullsGetReviewComment = <
  TData = Schemas.PullRequestReviewComment
>(
  variables: PullsGetReviewCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReviewComment,
      PullsGetReviewCommentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PullRequestReviewComment,
    PullsGetReviewCommentError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
      operationId: "pullsGetReviewComment",
      variables,
    }),
    () => fetchPullsGetReviewComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsUpdateReviewCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type PullsUpdateReviewCommentError = Fetcher.ErrorWrapper<undefined>;

export type PullsUpdateReviewCommentRequestBody = {
  /*
   * The text of the reply to the review comment.
   */
  body: string;
};

export type PullsUpdateReviewCommentVariables = {
  body: PullsUpdateReviewCommentRequestBody;
  pathParams: PullsUpdateReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables you to edit a review comment.
 */
export const fetchPullsUpdateReviewComment = (
  variables: PullsUpdateReviewCommentVariables
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    PullsUpdateReviewCommentError,
    PullsUpdateReviewCommentRequestBody,
    {},
    {},
    PullsUpdateReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}",
    method: "patch",
    ...variables,
  });

/**
 * Enables you to edit a review comment.
 */
export const usePullsUpdateReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReviewComment,
      PullsUpdateReviewCommentError,
      PullsUpdateReviewCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReviewComment,
    PullsUpdateReviewCommentError,
    PullsUpdateReviewCommentVariables
  >(
    (variables: PullsUpdateReviewCommentVariables) =>
      fetchPullsUpdateReviewComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsListForPullRequestReviewCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsListForPullRequestReviewCommentQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForPullRequestReviewCommentError =
  Fetcher.ErrorWrapper<
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 415;
        payload: Responses.PreviewHeaderMissing;
      }
  >;

export type ReactionsListForPullRequestReviewCommentResponse =
  Schemas.Reaction[];

export type ReactionsListForPullRequestReviewCommentVariables = {
  pathParams: ReactionsListForPullRequestReviewCommentPathParams;
  queryParams?: ReactionsListForPullRequestReviewCommentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const fetchReactionsListForPullRequestReviewComment = (
  variables: ReactionsListForPullRequestReviewCommentVariables
) =>
  githubFetch<
    ReactionsListForPullRequestReviewCommentResponse,
    ReactionsListForPullRequestReviewCommentError,
    undefined,
    {},
    ReactionsListForPullRequestReviewCommentQueryParams,
    ReactionsListForPullRequestReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const useReactionsListForPullRequestReviewComment = <
  TData = ReactionsListForPullRequestReviewCommentResponse
>(
  variables: ReactionsListForPullRequestReviewCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForPullRequestReviewCommentResponse,
      ReactionsListForPullRequestReviewCommentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForPullRequestReviewCommentResponse,
    ReactionsListForPullRequestReviewCommentError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
      operationId: "reactionsListForPullRequestReviewComment",
      variables,
    }),
    () =>
      fetchReactionsListForPullRequestReviewComment({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForPullRequestReviewCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsCreateForPullRequestReviewCommentError =
  Fetcher.ErrorWrapper<
    | {
        status: 415;
        payload: Responses.PreviewHeaderMissing;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type ReactionsCreateForPullRequestReviewCommentRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForPullRequestReviewCommentVariables = {
  body: ReactionsCreateForPullRequestReviewCommentRequestBody;
  pathParams: ReactionsCreateForPullRequestReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.
 */
export const fetchReactionsCreateForPullRequestReviewComment = (
  variables: ReactionsCreateForPullRequestReviewCommentVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForPullRequestReviewCommentError,
    ReactionsCreateForPullRequestReviewCommentRequestBody,
    {},
    {},
    ReactionsCreateForPullRequestReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.
 */
export const useReactionsCreateForPullRequestReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForPullRequestReviewCommentError,
      ReactionsCreateForPullRequestReviewCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForPullRequestReviewCommentError,
    ReactionsCreateForPullRequestReviewCommentVariables
  >(
    (variables: ReactionsCreateForPullRequestReviewCommentVariables) =>
      fetchReactionsCreateForPullRequestReviewComment({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsDeleteForPullRequestCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
  reactionId: number;
};

export type ReactionsDeleteForPullRequestCommentError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForPullRequestCommentVariables = {
  pathParams: ReactionsDeleteForPullRequestCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
 *
 * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const fetchReactionsDeleteForPullRequestComment = (
  variables: ReactionsDeleteForPullRequestCommentVariables
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForPullRequestCommentError,
    undefined,
    {},
    {},
    ReactionsDeleteForPullRequestCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
 *
 * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const useReactionsDeleteForPullRequestComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForPullRequestCommentError,
      ReactionsDeleteForPullRequestCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForPullRequestCommentError,
    ReactionsDeleteForPullRequestCommentVariables
  >(
    (variables: ReactionsDeleteForPullRequestCommentVariables) =>
      fetchReactionsDeleteForPullRequestComment({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PullsGetPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsGetError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type PullsGetVariables = {
  pathParams: PullsGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists details of a pull request by providing its number.
 *
 * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
 *
 * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
 *
 * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
 * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
 * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
 *
 * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 */
export const fetchPullsGet = (variables: PullsGetVariables) =>
  githubFetch<
    Schemas.PullRequest,
    PullsGetError,
    undefined,
    {},
    {},
    PullsGetPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}",
    method: "get",
    ...variables,
  });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists details of a pull request by providing its number.
 *
 * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
 *
 * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
 *
 * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
 * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
 * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
 *
 * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 */
export const usePullsGet = <TData = Schemas.PullRequest>(
  variables: PullsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PullRequest, PullsGetError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.PullRequest, PullsGetError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}",
      operationId: "pullsGet",
      variables,
    }),
    () => fetchPullsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsUpdatePathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsUpdateRequestBody = {
  /*
   * The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
   */
  base?: string;
  /*
   * The contents of the pull request.
   */
  body?: string;
  /*
   * Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
   */
  maintainer_can_modify?: boolean;
  /*
   * State of this Pull Request. Either `open` or `closed`.
   */
  state?: "open" | "closed";
  /*
   * The title of the pull request.
   */
  title?: string;
};

export type PullsUpdateVariables = {
  body?: PullsUpdateRequestBody;
  pathParams: PullsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 */
export const fetchPullsUpdate = (variables: PullsUpdateVariables) =>
  githubFetch<
    Schemas.PullRequest,
    PullsUpdateError,
    PullsUpdateRequestBody,
    {},
    {},
    PullsUpdatePathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 */
export const usePullsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequest,
      PullsUpdateError,
      PullsUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequest,
    PullsUpdateError,
    PullsUpdateVariables
  >(
    (variables: PullsUpdateVariables) =>
      fetchPullsUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListReviewCommentsPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsListReviewCommentsQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * Can be either `asc` or `desc`. Ignored without `sort` parameter.
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListReviewCommentsError = Fetcher.ErrorWrapper<undefined>;

export type PullsListReviewCommentsResponse =
  Schemas.PullRequestReviewComment[];

export type PullsListReviewCommentsVariables = {
  pathParams: PullsListReviewCommentsPathParams;
  queryParams?: PullsListReviewCommentsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
 */
export const fetchPullsListReviewComments = (
  variables: PullsListReviewCommentsVariables
) =>
  githubFetch<
    PullsListReviewCommentsResponse,
    PullsListReviewCommentsError,
    undefined,
    {},
    PullsListReviewCommentsQueryParams,
    PullsListReviewCommentsPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/comments",
    method: "get",
    ...variables,
  });

/**
 * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
 */
export const usePullsListReviewComments = <
  TData = PullsListReviewCommentsResponse
>(
  variables: PullsListReviewCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewCommentsResponse,
      PullsListReviewCommentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListReviewCommentsResponse,
    PullsListReviewCommentsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
      operationId: "pullsListReviewComments",
      variables,
    }),
    () => fetchPullsListReviewComments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsCreateReviewCommentPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsCreateReviewCommentError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsCreateReviewCommentRequestBody = {
  /*
   * The text of the review comment.
   */
  body: string;
  /*
   * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
   */
  commit_id?: string;
  /*
   * @example 2
   */
  in_reply_to?: number;
  /*
   * **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
   */
  line?: number;
  /*
   * The relative path to the file that necessitates a comment.
   */
  path?: string;
  /*
   * **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
   */
  position?: number;
  /*
   * **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
   */
  side?: "LEFT" | "RIGHT";
  /*
   * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
   */
  start_line?: number;
  /*
   * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
   */
  start_side?: "LEFT" | "RIGHT" | "side";
};

export type PullsCreateReviewCommentVariables = {
  body: PullsCreateReviewCommentRequestBody;
  pathParams: PullsCreateReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
 *
 * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).
 *
 * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchPullsCreateReviewComment = (
  variables: PullsCreateReviewCommentVariables
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    PullsCreateReviewCommentError,
    PullsCreateReviewCommentRequestBody,
    {},
    {},
    PullsCreateReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/comments",
    method: "post",
    ...variables,
  });

/**
 * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
 *
 * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).
 *
 * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const usePullsCreateReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReviewComment,
      PullsCreateReviewCommentError,
      PullsCreateReviewCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReviewComment,
    PullsCreateReviewCommentError,
    PullsCreateReviewCommentVariables
  >(
    (variables: PullsCreateReviewCommentVariables) =>
      fetchPullsCreateReviewComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsCreateReplyForReviewCommentPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type PullsCreateReplyForReviewCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type PullsCreateReplyForReviewCommentRequestBody = {
  /*
   * The text of the review comment.
   */
  body: string;
};

export type PullsCreateReplyForReviewCommentVariables = {
  body: PullsCreateReplyForReviewCommentRequestBody;
  pathParams: PullsCreateReplyForReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchPullsCreateReplyForReviewComment = (
  variables: PullsCreateReplyForReviewCommentVariables
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    PullsCreateReplyForReviewCommentError,
    PullsCreateReplyForReviewCommentRequestBody,
    {},
    {},
    PullsCreateReplyForReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/comments/{commentId}/replies",
    method: "post",
    ...variables,
  });

/**
 * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const usePullsCreateReplyForReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReviewComment,
      PullsCreateReplyForReviewCommentError,
      PullsCreateReplyForReviewCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReviewComment,
    PullsCreateReplyForReviewCommentError,
    PullsCreateReplyForReviewCommentVariables
  >(
    (variables: PullsCreateReplyForReviewCommentVariables) =>
      fetchPullsCreateReplyForReviewComment({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PullsListCommitsPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsListCommitsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListCommitsError = Fetcher.ErrorWrapper<undefined>;

export type PullsListCommitsResponse = Schemas.Commit[];

export type PullsListCommitsVariables = {
  pathParams: PullsListCommitsPathParams;
  queryParams?: PullsListCommitsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
 */
export const fetchPullsListCommits = (variables: PullsListCommitsVariables) =>
  githubFetch<
    PullsListCommitsResponse,
    PullsListCommitsError,
    undefined,
    {},
    PullsListCommitsQueryParams,
    PullsListCommitsPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/commits",
    method: "get",
    ...variables,
  });

/**
 * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
 */
export const usePullsListCommits = <TData = PullsListCommitsResponse>(
  variables: PullsListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListCommitsResponse,
      PullsListCommitsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListCommitsResponse,
    PullsListCommitsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/commits",
      operationId: "pullsListCommits",
      variables,
    }),
    () => fetchPullsListCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsListFilesPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsListFilesQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListFilesError = Fetcher.ErrorWrapper<
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type PullsListFilesResponse = Schemas.DiffEntry[];

export type PullsListFilesVariables = {
  pathParams: PullsListFilesPathParams;
  queryParams?: PullsListFilesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 */
export const fetchPullsListFiles = (variables: PullsListFilesVariables) =>
  githubFetch<
    PullsListFilesResponse,
    PullsListFilesError,
    undefined,
    {},
    PullsListFilesQueryParams,
    PullsListFilesPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/files",
    method: "get",
    ...variables,
  });

/**
 * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 */
export const usePullsListFiles = <TData = PullsListFilesResponse>(
  variables: PullsListFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListFilesResponse,
      PullsListFilesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListFilesResponse,
    PullsListFilesError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/files",
      operationId: "pullsListFiles",
      variables,
    }),
    () => fetchPullsListFiles({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsCheckIfMergedPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsCheckIfMergedError = Fetcher.ErrorWrapper<undefined>;

export type PullsCheckIfMergedVariables = {
  pathParams: PullsCheckIfMergedPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsCheckIfMerged = (
  variables: PullsCheckIfMergedVariables
) =>
  githubFetch<
    undefined,
    PullsCheckIfMergedError,
    undefined,
    {},
    {},
    PullsCheckIfMergedPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/merge",
    method: "get",
    ...variables,
  });

export const usePullsCheckIfMerged = <TData = undefined>(
  variables: PullsCheckIfMergedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, PullsCheckIfMergedError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, PullsCheckIfMergedError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
      operationId: "pullsCheckIfMerged",
      variables,
    }),
    () => fetchPullsCheckIfMerged({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsMergePathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsMergeError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 405;
      payload: {
        documentation_url?: string;
        message?: string;
      };
    }
  | {
      status: 409;
      payload: {
        documentation_url?: string;
        message?: string;
      };
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsMergeVariables = {
  body?: {
    /*
     * Extra detail to append to automatic commit message.
     */
    commit_message?: string;
    /*
     * Title for the automatic commit message.
     */
    commit_title?: string;
    /*
     * Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
     */
    merge_method?: "merge" | "squash" | "rebase";
    /*
     * SHA that pull request head must match to allow merge.
     */
    sha?: string;
  } | null;
  pathParams: PullsMergePathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const fetchPullsMerge = (variables: PullsMergeVariables) =>
  githubFetch<
    Schemas.PullRequestMergeResult,
    PullsMergeError,
    {
      /*
       * Extra detail to append to automatic commit message.
       */
      commit_message?: string;
      /*
       * Title for the automatic commit message.
       */
      commit_title?: string;
      /*
       * Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
       */
      merge_method?: "merge" | "squash" | "rebase";
      /*
       * SHA that pull request head must match to allow merge.
       */
      sha?: string;
    } | null,
    {},
    {},
    PullsMergePathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/merge",
    method: "put",
    ...variables,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const usePullsMerge = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestMergeResult,
      PullsMergeError,
      PullsMergeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestMergeResult,
    PullsMergeError,
    PullsMergeVariables
  >(
    (variables: PullsMergeVariables) =>
      fetchPullsMerge({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsRemoveRequestedReviewersPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsRemoveRequestedReviewersError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type PullsRemoveRequestedReviewersRequestBody = {
  /*
   * An array of user `login`s that will be removed.
   */
  reviewers: string[];
  /*
   * An array of team `slug`s that will be removed.
   */
  team_reviewers?: string[];
};

export type PullsRemoveRequestedReviewersVariables = {
  body: PullsRemoveRequestedReviewersRequestBody;
  pathParams: PullsRemoveRequestedReviewersPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsRemoveRequestedReviewers = (
  variables: PullsRemoveRequestedReviewersVariables
) =>
  githubFetch<
    undefined,
    PullsRemoveRequestedReviewersError,
    PullsRemoveRequestedReviewersRequestBody,
    {},
    {},
    PullsRemoveRequestedReviewersPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    method: "delete",
    ...variables,
  });

export const usePullsRemoveRequestedReviewers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PullsRemoveRequestedReviewersError,
      PullsRemoveRequestedReviewersVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PullsRemoveRequestedReviewersError,
    PullsRemoveRequestedReviewersVariables
  >(
    (variables: PullsRemoveRequestedReviewersVariables) =>
      fetchPullsRemoveRequestedReviewers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListRequestedReviewersPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsListRequestedReviewersQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListRequestedReviewersError = Fetcher.ErrorWrapper<undefined>;

export type PullsListRequestedReviewersVariables = {
  pathParams: PullsListRequestedReviewersPathParams;
  queryParams?: PullsListRequestedReviewersQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsListRequestedReviewers = (
  variables: PullsListRequestedReviewersVariables
) =>
  githubFetch<
    Schemas.PullRequestReviewRequest,
    PullsListRequestedReviewersError,
    undefined,
    {},
    PullsListRequestedReviewersQueryParams,
    PullsListRequestedReviewersPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    method: "get",
    ...variables,
  });

export const usePullsListRequestedReviewers = <
  TData = Schemas.PullRequestReviewRequest
>(
  variables: PullsListRequestedReviewersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReviewRequest,
      PullsListRequestedReviewersError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PullRequestReviewRequest,
    PullsListRequestedReviewersError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
      operationId: "pullsListRequestedReviewers",
      variables,
    }),
    () => fetchPullsListRequestedReviewers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsRequestReviewersPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsRequestReviewersError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type PullsRequestReviewersVariables = {
  body?:
    | {
        /*
         * An array of user `login`s that will be requested.
         */
        reviewers: string[];
        /*
         * An array of team `slug`s that will be requested.
         */
        team_reviewers?: string[];
      }
    | {
        /*
         * An array of user `login`s that will be requested.
         */
        reviewers?: string[];
        /*
         * An array of team `slug`s that will be requested.
         */
        team_reviewers: string[];
      };
  pathParams: PullsRequestReviewersPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const fetchPullsRequestReviewers = (
  variables: PullsRequestReviewersVariables
) =>
  githubFetch<
    Schemas.PullRequestSimple,
    PullsRequestReviewersError,
    | {
        /*
         * An array of user `login`s that will be requested.
         */
        reviewers: string[];
        /*
         * An array of team `slug`s that will be requested.
         */
        team_reviewers?: string[];
      }
    | {
        /*
         * An array of user `login`s that will be requested.
         */
        reviewers?: string[];
        /*
         * An array of team `slug`s that will be requested.
         */
        team_reviewers: string[];
      },
    {},
    {},
    PullsRequestReviewersPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    method: "post",
    ...variables,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const usePullsRequestReviewers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestSimple,
      PullsRequestReviewersError,
      PullsRequestReviewersVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestSimple,
    PullsRequestReviewersError,
    PullsRequestReviewersVariables
  >(
    (variables: PullsRequestReviewersVariables) =>
      fetchPullsRequestReviewers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListReviewsPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsListReviewsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListReviewsError = Fetcher.ErrorWrapper<undefined>;

export type PullsListReviewsResponse = Schemas.PullRequestReview[];

export type PullsListReviewsVariables = {
  pathParams: PullsListReviewsPathParams;
  queryParams?: PullsListReviewsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The list of reviews returns in chronological order.
 */
export const fetchPullsListReviews = (variables: PullsListReviewsVariables) =>
  githubFetch<
    PullsListReviewsResponse,
    PullsListReviewsError,
    undefined,
    {},
    PullsListReviewsQueryParams,
    PullsListReviewsPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews",
    method: "get",
    ...variables,
  });

/**
 * The list of reviews returns in chronological order.
 */
export const usePullsListReviews = <TData = PullsListReviewsResponse>(
  variables: PullsListReviewsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewsResponse,
      PullsListReviewsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListReviewsResponse,
    PullsListReviewsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
      operationId: "pullsListReviews",
      variables,
    }),
    () => fetchPullsListReviews({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsCreateReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsCreateReviewError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type PullsCreateReviewRequestBody = {
  /*
   * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
   */
  body?: string;
  /*
   * Use the following table to specify the location, destination, and contents of the draft review comment.
   */
  comments?: {
    /*
     * Text of the review comment.
     */
    body: string;
    /*
     * @example 28
     */
    line?: number;
    /*
     * The relative path to the file that necessitates a review comment.
     */
    path: string;
    /*
     * The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
     */
    position?: number;
    /*
     * @example RIGHT
     */
    side?: string;
    /*
     * @example 26
     */
    start_line?: number;
    /*
     * @example LEFT
     */
    start_side?: string;
  }[];
  /*
   * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
   */
  commit_id?: string;
  /*
   * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
   */
  event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
};

export type PullsCreateReviewVariables = {
  body?: PullsCreateReviewRequestBody;
  pathParams: PullsCreateReviewPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
 *
 * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
 *
 * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 */
export const fetchPullsCreateReview = (variables: PullsCreateReviewVariables) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsCreateReviewError,
    PullsCreateReviewRequestBody,
    {},
    {},
    PullsCreateReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews",
    method: "post",
    ...variables,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
 *
 * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
 *
 * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 */
export const usePullsCreateReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      PullsCreateReviewError,
      PullsCreateReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    PullsCreateReviewError,
    PullsCreateReviewVariables
  >(
    (variables: PullsCreateReviewVariables) =>
      fetchPullsCreateReview({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsDeletePendingReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsDeletePendingReviewError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type PullsDeletePendingReviewVariables = {
  pathParams: PullsDeletePendingReviewPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsDeletePendingReview = (
  variables: PullsDeletePendingReviewVariables
) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsDeletePendingReviewError,
    undefined,
    {},
    {},
    PullsDeletePendingReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    method: "delete",
    ...variables,
  });

export const usePullsDeletePendingReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      PullsDeletePendingReviewError,
      PullsDeletePendingReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    PullsDeletePendingReviewError,
    PullsDeletePendingReviewVariables
  >(
    (variables: PullsDeletePendingReviewVariables) =>
      fetchPullsDeletePendingReview({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsGetReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsGetReviewError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type PullsGetReviewVariables = {
  pathParams: PullsGetReviewPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsGetReview = (variables: PullsGetReviewVariables) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsGetReviewError,
    undefined,
    {},
    {},
    PullsGetReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    method: "get",
    ...variables,
  });

export const usePullsGetReview = <TData = Schemas.PullRequestReview>(
  variables: PullsGetReviewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReview,
      PullsGetReviewError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PullRequestReview,
    PullsGetReviewError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
      operationId: "pullsGetReview",
      variables,
    }),
    () => fetchPullsGetReview({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsUpdateReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsUpdateReviewError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailedSimple;
}>;

export type PullsUpdateReviewRequestBody = {
  /*
   * The body text of the pull request review.
   */
  body: string;
};

export type PullsUpdateReviewVariables = {
  body: PullsUpdateReviewRequestBody;
  pathParams: PullsUpdateReviewPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Update the review summary comment with new text.
 */
export const fetchPullsUpdateReview = (variables: PullsUpdateReviewVariables) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsUpdateReviewError,
    PullsUpdateReviewRequestBody,
    {},
    {},
    PullsUpdateReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    method: "put",
    ...variables,
  });

/**
 * Update the review summary comment with new text.
 */
export const usePullsUpdateReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      PullsUpdateReviewError,
      PullsUpdateReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    PullsUpdateReviewError,
    PullsUpdateReviewVariables
  >(
    (variables: PullsUpdateReviewVariables) =>
      fetchPullsUpdateReview({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListCommentsForReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsListCommentsForReviewQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListCommentsForReviewError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type PullsListCommentsForReviewResponse = Schemas.ReviewComment[];

export type PullsListCommentsForReviewVariables = {
  pathParams: PullsListCommentsForReviewPathParams;
  queryParams?: PullsListCommentsForReviewQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List comments for a specific pull request review.
 */
export const fetchPullsListCommentsForReview = (
  variables: PullsListCommentsForReviewVariables
) =>
  githubFetch<
    PullsListCommentsForReviewResponse,
    PullsListCommentsForReviewError,
    undefined,
    {},
    PullsListCommentsForReviewQueryParams,
    PullsListCommentsForReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/comments",
    method: "get",
    ...variables,
  });

/**
 * List comments for a specific pull request review.
 */
export const usePullsListCommentsForReview = <
  TData = PullsListCommentsForReviewResponse
>(
  variables: PullsListCommentsForReviewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListCommentsForReviewResponse,
      PullsListCommentsForReviewError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListCommentsForReviewResponse,
    PullsListCommentsForReviewError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
      operationId: "pullsListCommentsForReview",
      variables,
    }),
    () => fetchPullsListCommentsForReview({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsDismissReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsDismissReviewError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type PullsDismissReviewRequestBody = {
  /*
   * @example "APPROVE"
   */
  event?: string;
  /*
   * The message for the pull request review dismissal
   */
  message: string;
};

export type PullsDismissReviewVariables = {
  body: PullsDismissReviewRequestBody;
  pathParams: PullsDismissReviewPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
 */
export const fetchPullsDismissReview = (
  variables: PullsDismissReviewVariables
) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsDismissReviewError,
    PullsDismissReviewRequestBody,
    {},
    {},
    PullsDismissReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/dismissals",
    method: "put",
    ...variables,
  });

/**
 * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
 */
export const usePullsDismissReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      PullsDismissReviewError,
      PullsDismissReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    PullsDismissReviewError,
    PullsDismissReviewVariables
  >(
    (variables: PullsDismissReviewVariables) =>
      fetchPullsDismissReview({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsSubmitReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsSubmitReviewError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type PullsSubmitReviewRequestBody = {
  /*
   * The body text of the pull request review
   */
  body?: string;
  /*
   * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
   */
  event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
};

export type PullsSubmitReviewVariables = {
  body: PullsSubmitReviewRequestBody;
  pathParams: PullsSubmitReviewPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsSubmitReview = (variables: PullsSubmitReviewVariables) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsSubmitReviewError,
    PullsSubmitReviewRequestBody,
    {},
    {},
    PullsSubmitReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/events",
    method: "post",
    ...variables,
  });

export const usePullsSubmitReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      PullsSubmitReviewError,
      PullsSubmitReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    PullsSubmitReviewError,
    PullsSubmitReviewVariables
  >(
    (variables: PullsSubmitReviewVariables) =>
      fetchPullsSubmitReview({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsUpdateBranchPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsUpdateBranchError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsUpdateBranchResponse = {
  message?: string;
  url?: string;
};

export type PullsUpdateBranchVariables = {
  body?: {
    /*
     * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
     */
    expected_head_sha?: string;
  } | null;
  pathParams: PullsUpdateBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
 */
export const fetchPullsUpdateBranch = (variables: PullsUpdateBranchVariables) =>
  githubFetch<
    PullsUpdateBranchResponse,
    PullsUpdateBranchError,
    {
      /*
       * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
       */
      expected_head_sha?: string;
    } | null,
    {},
    {},
    PullsUpdateBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/update-branch",
    method: "put",
    ...variables,
  });

/**
 * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
 */
export const usePullsUpdateBranch = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PullsUpdateBranchResponse,
      PullsUpdateBranchError,
      PullsUpdateBranchVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    PullsUpdateBranchResponse,
    PullsUpdateBranchError,
    PullsUpdateBranchVariables
  >(
    (variables: PullsUpdateBranchVariables) =>
      fetchPullsUpdateBranch({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetReadmePathParams = {
  owner: string;
  repo: string;
};

export type ReposGetReadmeQueryParams = {
  /*
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string;
};

export type ReposGetReadmeError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposGetReadmeVariables = {
  pathParams: ReposGetReadmePathParams;
  queryParams?: ReposGetReadmeQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const fetchReposGetReadme = (variables: ReposGetReadmeVariables) =>
  githubFetch<
    Schemas.ContentFile,
    ReposGetReadmeError,
    undefined,
    {},
    ReposGetReadmeQueryParams,
    ReposGetReadmePathParams
  >({ url: "/repos/{owner}/{repo}/readme", method: "get", ...variables });

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const useReposGetReadme = <TData = Schemas.ContentFile>(
  variables: ReposGetReadmeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ContentFile, ReposGetReadmeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.ContentFile, ReposGetReadmeError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/readme",
      operationId: "reposGetReadme",
      variables,
    }),
    () => fetchReposGetReadme({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetReadmeFromAltPathPathParams = {
  owner: string;
  repo: string;
  /*
   * The alternate path to look for a README file
   */
  dir: string;
};

export type ReposGetReadmeFromAltPathQueryParams = {
  /*
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string;
};

export type ReposGetReadmeFromAltPathError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposGetReadmeFromAltPathVariables = {
  pathParams: ReposGetReadmeFromAltPathPathParams;
  queryParams?: ReposGetReadmeFromAltPathQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const fetchReposGetReadmeFromAltPath = (
  variables: ReposGetReadmeFromAltPathVariables
) =>
  githubFetch<
    Schemas.ContentFile,
    ReposGetReadmeFromAltPathError,
    undefined,
    {},
    ReposGetReadmeFromAltPathQueryParams,
    ReposGetReadmeFromAltPathPathParams
  >({ url: "/repos/{owner}/{repo}/readme/{dir}", method: "get", ...variables });

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const useReposGetReadmeFromAltPath = <TData = Schemas.ContentFile>(
  variables: ReposGetReadmeFromAltPathVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ContentFile,
      ReposGetReadmeFromAltPathError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ContentFile,
    ReposGetReadmeFromAltPathError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/readme/{dir}",
      operationId: "reposGetReadmeFromAltPath",
      variables,
    }),
    () => fetchReposGetReadmeFromAltPath({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListReleasesPathParams = {
  owner: string;
  repo: string;
};

export type ReposListReleasesQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListReleasesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposListReleasesResponse = Schemas.Release[];

export type ReposListReleasesVariables = {
  pathParams: ReposListReleasesPathParams;
  queryParams?: ReposListReleasesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
 *
 * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
 */
export const fetchReposListReleases = (variables: ReposListReleasesVariables) =>
  githubFetch<
    ReposListReleasesResponse,
    ReposListReleasesError,
    undefined,
    {},
    ReposListReleasesQueryParams,
    ReposListReleasesPathParams
  >({ url: "/repos/{owner}/{repo}/releases", method: "get", ...variables });

/**
 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
 *
 * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
 */
export const useReposListReleases = <TData = ReposListReleasesResponse>(
  variables: ReposListReleasesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListReleasesResponse,
      ReposListReleasesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListReleasesResponse,
    ReposListReleasesError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases",
      operationId: "reposListReleases",
      variables,
    }),
    () => fetchReposListReleases({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateReleasePathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateReleaseError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposCreateReleaseRequestBody = {
  /*
   * Text describing the contents of the tag.
   */
  body?: string;
  /*
   * `true` to create a draft (unpublished) release, `false` to create a published one.
   *
   * @default false
   */
  draft?: boolean;
  /*
   * The name of the release.
   */
  name?: string;
  /*
   * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
   *
   * @default false
   */
  prerelease?: boolean;
  /*
   * The name of the tag.
   */
  tag_name: string;
  /*
   * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
   */
  target_commitish?: string;
};

export type ReposCreateReleaseVariables = {
  body: ReposCreateReleaseRequestBody;
  pathParams: ReposCreateReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can create a release.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchReposCreateRelease = (
  variables: ReposCreateReleaseVariables
) =>
  githubFetch<
    Schemas.Release,
    ReposCreateReleaseError,
    ReposCreateReleaseRequestBody,
    {},
    {},
    ReposCreateReleasePathParams
  >({ url: "/repos/{owner}/{repo}/releases", method: "post", ...variables });

/**
 * Users with push access to the repository can create a release.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const useReposCreateRelease = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Release,
      ReposCreateReleaseError,
      ReposCreateReleaseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Release,
    ReposCreateReleaseError,
    ReposCreateReleaseVariables
  >(
    (variables: ReposCreateReleaseVariables) =>
      fetchReposCreateRelease({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteReleaseAssetPathParams = {
  owner: string;
  repo: string;
  /*
   * asset_id parameter
   */
  assetId: number;
};

export type ReposDeleteReleaseAssetError = Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteReleaseAssetVariables = {
  pathParams: ReposDeleteReleaseAssetPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteReleaseAsset = (
  variables: ReposDeleteReleaseAssetVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteReleaseAssetError,
    undefined,
    {},
    {},
    ReposDeleteReleaseAssetPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/assets/{assetId}",
    method: "delete",
    ...variables,
  });

export const useReposDeleteReleaseAsset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteReleaseAssetError,
      ReposDeleteReleaseAssetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteReleaseAssetError,
    ReposDeleteReleaseAssetVariables
  >(
    (variables: ReposDeleteReleaseAssetVariables) =>
      fetchReposDeleteReleaseAsset({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetReleaseAssetPathParams = {
  owner: string;
  repo: string;
  /*
   * asset_id parameter
   */
  assetId: number;
};

export type ReposGetReleaseAssetError = Fetcher.ErrorWrapper<
  | {
      status: 302;
      payload: Responses.Found;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type ReposGetReleaseAssetVariables = {
  pathParams: ReposGetReleaseAssetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
 */
export const fetchReposGetReleaseAsset = (
  variables: ReposGetReleaseAssetVariables
) =>
  githubFetch<
    Schemas.ReleaseAsset,
    ReposGetReleaseAssetError,
    undefined,
    {},
    {},
    ReposGetReleaseAssetPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/assets/{assetId}",
    method: "get",
    ...variables,
  });

/**
 * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
 */
export const useReposGetReleaseAsset = <TData = Schemas.ReleaseAsset>(
  variables: ReposGetReleaseAssetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ReleaseAsset,
      ReposGetReleaseAssetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ReleaseAsset,
    ReposGetReleaseAssetError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases/assets/{asset_id}",
      operationId: "reposGetReleaseAsset",
      variables,
    }),
    () => fetchReposGetReleaseAsset({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateReleaseAssetPathParams = {
  owner: string;
  repo: string;
  /*
   * asset_id parameter
   */
  assetId: number;
};

export type ReposUpdateReleaseAssetError = Fetcher.ErrorWrapper<undefined>;

export type ReposUpdateReleaseAssetRequestBody = {
  /*
   * An alternate short description of the asset. Used in place of the filename.
   */
  label?: string;
  /*
   * The file name of the asset.
   */
  name?: string;
  /*
   * @example "uploaded"
   */
  state?: string;
};

export type ReposUpdateReleaseAssetVariables = {
  body?: ReposUpdateReleaseAssetRequestBody;
  pathParams: ReposUpdateReleaseAssetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can edit a release asset.
 */
export const fetchReposUpdateReleaseAsset = (
  variables: ReposUpdateReleaseAssetVariables
) =>
  githubFetch<
    Schemas.ReleaseAsset,
    ReposUpdateReleaseAssetError,
    ReposUpdateReleaseAssetRequestBody,
    {},
    {},
    ReposUpdateReleaseAssetPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/assets/{assetId}",
    method: "patch",
    ...variables,
  });

/**
 * Users with push access to the repository can edit a release asset.
 */
export const useReposUpdateReleaseAsset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ReleaseAsset,
      ReposUpdateReleaseAssetError,
      ReposUpdateReleaseAssetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ReleaseAsset,
    ReposUpdateReleaseAssetError,
    ReposUpdateReleaseAssetVariables
  >(
    (variables: ReposUpdateReleaseAssetVariables) =>
      fetchReposUpdateReleaseAsset({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetLatestReleasePathParams = {
  owner: string;
  repo: string;
};

export type ReposGetLatestReleaseError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetLatestReleaseVariables = {
  pathParams: ReposGetLatestReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * View the latest published full release for the repository.
 *
 * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
 */
export const fetchReposGetLatestRelease = (
  variables: ReposGetLatestReleaseVariables
) =>
  githubFetch<
    Schemas.Release,
    ReposGetLatestReleaseError,
    undefined,
    {},
    {},
    ReposGetLatestReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/latest",
    method: "get",
    ...variables,
  });

/**
 * View the latest published full release for the repository.
 *
 * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
 */
export const useReposGetLatestRelease = <TData = Schemas.Release>(
  variables: ReposGetLatestReleaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Release,
      ReposGetLatestReleaseError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Release,
    ReposGetLatestReleaseError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases/latest",
      operationId: "reposGetLatestRelease",
      variables,
    }),
    () => fetchReposGetLatestRelease({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetReleaseByTagPathParams = {
  owner: string;
  repo: string;
  /*
   * tag parameter
   */
  tag: string;
};

export type ReposGetReleaseByTagError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetReleaseByTagVariables = {
  pathParams: ReposGetReleaseByTagPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get a published release with the specified tag.
 */
export const fetchReposGetReleaseByTag = (
  variables: ReposGetReleaseByTagVariables
) =>
  githubFetch<
    Schemas.Release,
    ReposGetReleaseByTagError,
    undefined,
    {},
    {},
    ReposGetReleaseByTagPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/tags/{tag}",
    method: "get",
    ...variables,
  });

/**
 * Get a published release with the specified tag.
 */
export const useReposGetReleaseByTag = <TData = Schemas.Release>(
  variables: ReposGetReleaseByTagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Release,
      ReposGetReleaseByTagError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Release, ReposGetReleaseByTagError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases/tags/{tag}",
      operationId: "reposGetReleaseByTag",
      variables,
    }),
    () => fetchReposGetReleaseByTag({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteReleasePathParams = {
  owner: string;
  repo: string;
  /*
   * release_id parameter
   */
  releaseId: number;
};

export type ReposDeleteReleaseError = Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteReleaseVariables = {
  pathParams: ReposDeleteReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can delete a release.
 */
export const fetchReposDeleteRelease = (
  variables: ReposDeleteReleaseVariables
) =>
  githubFetch<
    undefined,
    ReposDeleteReleaseError,
    undefined,
    {},
    {},
    ReposDeleteReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}",
    method: "delete",
    ...variables,
  });

/**
 * Users with push access to the repository can delete a release.
 */
export const useReposDeleteRelease = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteReleaseError,
      ReposDeleteReleaseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteReleaseError,
    ReposDeleteReleaseVariables
  >(
    (variables: ReposDeleteReleaseVariables) =>
      fetchReposDeleteRelease({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetReleasePathParams = {
  owner: string;
  repo: string;
  /*
   * release_id parameter
   */
  releaseId: number;
};

export type ReposGetReleaseError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetReleaseVariables = {
  pathParams: ReposGetReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
 */
export const fetchReposGetRelease = (variables: ReposGetReleaseVariables) =>
  githubFetch<
    Schemas.Release,
    ReposGetReleaseError,
    undefined,
    {},
    {},
    ReposGetReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}",
    method: "get",
    ...variables,
  });

/**
 * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
 */
export const useReposGetRelease = <TData = Schemas.Release>(
  variables: ReposGetReleaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Release, ReposGetReleaseError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Release, ReposGetReleaseError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases/{release_id}",
      operationId: "reposGetRelease",
      variables,
    }),
    () => fetchReposGetRelease({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateReleasePathParams = {
  owner: string;
  repo: string;
  /*
   * release_id parameter
   */
  releaseId: number;
};

export type ReposUpdateReleaseError = Fetcher.ErrorWrapper<undefined>;

export type ReposUpdateReleaseRequestBody = {
  /*
   * Text describing the contents of the tag.
   */
  body?: string;
  /*
   * `true` makes the release a draft, and `false` publishes the release.
   */
  draft?: boolean;
  /*
   * The name of the release.
   */
  name?: string;
  /*
   * `true` to identify the release as a prerelease, `false` to identify the release as a full release.
   */
  prerelease?: boolean;
  /*
   * The name of the tag.
   */
  tag_name?: string;
  /*
   * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
   */
  target_commitish?: string;
};

export type ReposUpdateReleaseVariables = {
  body?: ReposUpdateReleaseRequestBody;
  pathParams: ReposUpdateReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can edit a release.
 */
export const fetchReposUpdateRelease = (
  variables: ReposUpdateReleaseVariables
) =>
  githubFetch<
    Schemas.Release,
    ReposUpdateReleaseError,
    ReposUpdateReleaseRequestBody,
    {},
    {},
    ReposUpdateReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}",
    method: "patch",
    ...variables,
  });

/**
 * Users with push access to the repository can edit a release.
 */
export const useReposUpdateRelease = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Release,
      ReposUpdateReleaseError,
      ReposUpdateReleaseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Release,
    ReposUpdateReleaseError,
    ReposUpdateReleaseVariables
  >(
    (variables: ReposUpdateReleaseVariables) =>
      fetchReposUpdateRelease({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListReleaseAssetsPathParams = {
  owner: string;
  repo: string;
  /*
   * release_id parameter
   */
  releaseId: number;
};

export type ReposListReleaseAssetsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListReleaseAssetsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListReleaseAssetsResponse = Schemas.ReleaseAsset[];

export type ReposListReleaseAssetsVariables = {
  pathParams: ReposListReleaseAssetsPathParams;
  queryParams?: ReposListReleaseAssetsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListReleaseAssets = (
  variables: ReposListReleaseAssetsVariables
) =>
  githubFetch<
    ReposListReleaseAssetsResponse,
    ReposListReleaseAssetsError,
    undefined,
    {},
    ReposListReleaseAssetsQueryParams,
    ReposListReleaseAssetsPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}/assets",
    method: "get",
    ...variables,
  });

export const useReposListReleaseAssets = <
  TData = ReposListReleaseAssetsResponse
>(
  variables: ReposListReleaseAssetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListReleaseAssetsResponse,
      ReposListReleaseAssetsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListReleaseAssetsResponse,
    ReposListReleaseAssetsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases/{release_id}/assets",
      operationId: "reposListReleaseAssets",
      variables,
    }),
    () => fetchReposListReleaseAssets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUploadReleaseAssetPathParams = {
  owner: string;
  repo: string;
  /*
   * release_id parameter
   */
  releaseId: number;
};

export type ReposUploadReleaseAssetQueryParams = {
  name?: string;
  label?: string;
};

export type ReposUploadReleaseAssetError = Fetcher.ErrorWrapper<undefined>;

export type ReposUploadReleaseAssetVariables = {
  body?: string;
  pathParams: ReposUploadReleaseAssetPathParams;
  queryParams?: ReposUploadReleaseAssetQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
 * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.
 *
 * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
 *
 * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
 *
 * `application/zip`
 *
 * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
 * you'll still need to pass your authentication to be able to upload an asset.
 *
 * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
 *
 * **Notes:**
 * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
 * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact).
 * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
 */
export const fetchReposUploadReleaseAsset = (
  variables: ReposUploadReleaseAssetVariables
) =>
  githubFetch<
    Schemas.ReleaseAsset,
    ReposUploadReleaseAssetError,
    string,
    {},
    ReposUploadReleaseAssetQueryParams,
    ReposUploadReleaseAssetPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}/assets",
    method: "post",
    ...variables,
  });

/**
 * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
 * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.
 *
 * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
 *
 * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
 *
 * `application/zip`
 *
 * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
 * you'll still need to pass your authentication to be able to upload an asset.
 *
 * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
 *
 * **Notes:**
 * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
 * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact).
 * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
 */
export const useReposUploadReleaseAsset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ReleaseAsset,
      ReposUploadReleaseAssetError,
      ReposUploadReleaseAssetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ReleaseAsset,
    ReposUploadReleaseAssetError,
    ReposUploadReleaseAssetVariables
  >(
    (variables: ReposUploadReleaseAssetVariables) =>
      fetchReposUploadReleaseAsset({ ...fetcherOptions, ...variables }),
    options
  );
};

export type SecretScanningListAlertsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type SecretScanningListAlertsForRepoQueryParams = {
  /*
   * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
   */
  state?: "open" | "resolved";
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type SecretScanningListAlertsForRepoError = Fetcher.ErrorWrapper<{
  status: 503;
  payload: Responses.ServiceUnavailable;
}>;

export type SecretScanningListAlertsForRepoResponse =
  Schemas.SecretScanningAlert[];

export type SecretScanningListAlertsForRepoVariables = {
  pathParams: SecretScanningListAlertsForRepoPathParams;
  queryParams?: SecretScanningListAlertsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const fetchSecretScanningListAlertsForRepo = (
  variables: SecretScanningListAlertsForRepoVariables
) =>
  githubFetch<
    SecretScanningListAlertsForRepoResponse,
    SecretScanningListAlertsForRepoError,
    undefined,
    {},
    SecretScanningListAlertsForRepoQueryParams,
    SecretScanningListAlertsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/secret-scanning/alerts",
    method: "get",
    ...variables,
  });

/**
 * Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSecretScanningListAlertsForRepo = <
  TData = SecretScanningListAlertsForRepoResponse
>(
  variables: SecretScanningListAlertsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SecretScanningListAlertsForRepoResponse,
      SecretScanningListAlertsForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    SecretScanningListAlertsForRepoResponse,
    SecretScanningListAlertsForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/secret-scanning/alerts",
      operationId: "secretScanningListAlertsForRepo",
      variables,
    }),
    () =>
      fetchSecretScanningListAlertsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SecretScanningGetAlertPathParams = {
  owner: string;
  repo: string;
  /*
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type SecretScanningGetAlertError = Fetcher.ErrorWrapper<{
  status: 503;
  payload: Responses.ServiceUnavailable;
}>;

export type SecretScanningGetAlertVariables = {
  pathParams: SecretScanningGetAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const fetchSecretScanningGetAlert = (
  variables: SecretScanningGetAlertVariables
) =>
  githubFetch<
    Schemas.SecretScanningAlert,
    SecretScanningGetAlertError,
    undefined,
    {},
    {},
    SecretScanningGetAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}",
    method: "get",
    ...variables,
  });

/**
 * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSecretScanningGetAlert = <TData = Schemas.SecretScanningAlert>(
  variables: SecretScanningGetAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SecretScanningAlert,
      SecretScanningGetAlertError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SecretScanningAlert,
    SecretScanningGetAlertError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
      operationId: "secretScanningGetAlert",
      variables,
    }),
    () => fetchSecretScanningGetAlert({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SecretScanningUpdateAlertPathParams = {
  owner: string;
  repo: string;
  /*
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type SecretScanningUpdateAlertError = Fetcher.ErrorWrapper<{
  status: 503;
  payload: Responses.ServiceUnavailable;
}>;

export type SecretScanningUpdateAlertRequestBody = {
  resolution?: Schemas.SecretScanningAlertResolution;
  state: Schemas.SecretScanningAlertState;
};

export type SecretScanningUpdateAlertVariables = {
  body: SecretScanningUpdateAlertRequestBody;
  pathParams: SecretScanningUpdateAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
 */
export const fetchSecretScanningUpdateAlert = (
  variables: SecretScanningUpdateAlertVariables
) =>
  githubFetch<
    Schemas.SecretScanningAlert,
    SecretScanningUpdateAlertError,
    SecretScanningUpdateAlertRequestBody,
    {},
    {},
    SecretScanningUpdateAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
 */
export const useSecretScanningUpdateAlert = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SecretScanningAlert,
      SecretScanningUpdateAlertError,
      SecretScanningUpdateAlertVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.SecretScanningAlert,
    SecretScanningUpdateAlertError,
    SecretScanningUpdateAlertVariables
  >(
    (variables: SecretScanningUpdateAlertVariables) =>
      fetchSecretScanningUpdateAlert({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityListStargazersForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActivityListStargazersForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListStargazersForRepoError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ActivityListStargazersForRepoResponse = Schemas.SimpleUser[];

export type ActivityListStargazersForRepoVariables = {
  pathParams: ActivityListStargazersForRepoPathParams;
  queryParams?: ActivityListStargazersForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people that have starred the repository.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const fetchActivityListStargazersForRepo = (
  variables: ActivityListStargazersForRepoVariables
) =>
  githubFetch<
    ActivityListStargazersForRepoResponse,
    ActivityListStargazersForRepoError,
    undefined,
    {},
    ActivityListStargazersForRepoQueryParams,
    ActivityListStargazersForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/stargazers", method: "get", ...variables });

/**
 * Lists the people that have starred the repository.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const useActivityListStargazersForRepo = <
  TData = ActivityListStargazersForRepoResponse
>(
  variables: ActivityListStargazersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListStargazersForRepoResponse,
      ActivityListStargazersForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListStargazersForRepoResponse,
    ActivityListStargazersForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stargazers",
      operationId: "activityListStargazersForRepo",
      variables,
    }),
    () =>
      fetchActivityListStargazersForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetCodeFrequencyStatsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetCodeFrequencyStatsError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetCodeFrequencyStatsResponse = Schemas.CodeFrequencyStat[];

export type ReposGetCodeFrequencyStatsVariables = {
  pathParams: ReposGetCodeFrequencyStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
export const fetchReposGetCodeFrequencyStats = (
  variables: ReposGetCodeFrequencyStatsVariables
) =>
  githubFetch<
    ReposGetCodeFrequencyStatsResponse,
    ReposGetCodeFrequencyStatsError,
    undefined,
    {},
    {},
    ReposGetCodeFrequencyStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/code_frequency",
    method: "get",
    ...variables,
  });

/**
 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
export const useReposGetCodeFrequencyStats = <
  TData = ReposGetCodeFrequencyStatsResponse
>(
  variables: ReposGetCodeFrequencyStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetCodeFrequencyStatsResponse,
      ReposGetCodeFrequencyStatsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetCodeFrequencyStatsResponse,
    ReposGetCodeFrequencyStatsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stats/code_frequency",
      operationId: "reposGetCodeFrequencyStats",
      variables,
    }),
    () => fetchReposGetCodeFrequencyStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetCommitActivityStatsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetCommitActivityStatsError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetCommitActivityStatsResponse = Schemas.CommitActivity[];

export type ReposGetCommitActivityStatsVariables = {
  pathParams: ReposGetCommitActivityStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
 */
export const fetchReposGetCommitActivityStats = (
  variables: ReposGetCommitActivityStatsVariables
) =>
  githubFetch<
    ReposGetCommitActivityStatsResponse,
    ReposGetCommitActivityStatsError,
    undefined,
    {},
    {},
    ReposGetCommitActivityStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/commit_activity",
    method: "get",
    ...variables,
  });

/**
 * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
 */
export const useReposGetCommitActivityStats = <
  TData = ReposGetCommitActivityStatsResponse
>(
  variables: ReposGetCommitActivityStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetCommitActivityStatsResponse,
      ReposGetCommitActivityStatsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetCommitActivityStatsResponse,
    ReposGetCommitActivityStatsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stats/commit_activity",
      operationId: "reposGetCommitActivityStats",
      variables,
    }),
    () => fetchReposGetCommitActivityStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetContributorsStatsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetContributorsStatsError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetContributorsStatsResponse = Schemas.ContributorActivity[];

export type ReposGetContributorsStatsVariables = {
  pathParams: ReposGetContributorsStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
 *
 * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   `a` - Number of additions
 * *   `d` - Number of deletions
 * *   `c` - Number of commits
 */
export const fetchReposGetContributorsStats = (
  variables: ReposGetContributorsStatsVariables
) =>
  githubFetch<
    ReposGetContributorsStatsResponse,
    ReposGetContributorsStatsError,
    undefined,
    {},
    {},
    ReposGetContributorsStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/contributors",
    method: "get",
    ...variables,
  });

/**
 * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
 *
 * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   `a` - Number of additions
 * *   `d` - Number of deletions
 * *   `c` - Number of commits
 */
export const useReposGetContributorsStats = <
  TData = ReposGetContributorsStatsResponse
>(
  variables: ReposGetContributorsStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetContributorsStatsResponse,
      ReposGetContributorsStatsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetContributorsStatsResponse,
    ReposGetContributorsStatsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stats/contributors",
      operationId: "reposGetContributorsStats",
      variables,
    }),
    () => fetchReposGetContributorsStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetParticipationStatsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetParticipationStatsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetParticipationStatsVariables = {
  pathParams: ReposGetParticipationStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
 *
 * The array order is oldest week (index 0) to most recent week.
 */
export const fetchReposGetParticipationStats = (
  variables: ReposGetParticipationStatsVariables
) =>
  githubFetch<
    Schemas.ParticipationStats,
    ReposGetParticipationStatsError,
    undefined,
    {},
    {},
    ReposGetParticipationStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/participation",
    method: "get",
    ...variables,
  });

/**
 * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
 *
 * The array order is oldest week (index 0) to most recent week.
 */
export const useReposGetParticipationStats = <
  TData = Schemas.ParticipationStats
>(
  variables: ReposGetParticipationStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ParticipationStats,
      ReposGetParticipationStatsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ParticipationStats,
    ReposGetParticipationStatsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stats/participation",
      operationId: "reposGetParticipationStats",
      variables,
    }),
    () => fetchReposGetParticipationStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetPunchCardStatsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetPunchCardStatsError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetPunchCardStatsResponse = Schemas.CodeFrequencyStat[];

export type ReposGetPunchCardStatsVariables = {
  pathParams: ReposGetPunchCardStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Each array contains the day number, hour number, and number of commits:
 *
 * *   `0-6`: Sunday - Saturday
 * *   `0-23`: Hour of day
 * *   Number of commits
 *
 * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
export const fetchReposGetPunchCardStats = (
  variables: ReposGetPunchCardStatsVariables
) =>
  githubFetch<
    ReposGetPunchCardStatsResponse,
    ReposGetPunchCardStatsError,
    undefined,
    {},
    {},
    ReposGetPunchCardStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/punch_card",
    method: "get",
    ...variables,
  });

/**
 * Each array contains the day number, hour number, and number of commits:
 *
 * *   `0-6`: Sunday - Saturday
 * *   `0-23`: Hour of day
 * *   Number of commits
 *
 * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
export const useReposGetPunchCardStats = <
  TData = ReposGetPunchCardStatsResponse
>(
  variables: ReposGetPunchCardStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetPunchCardStatsResponse,
      ReposGetPunchCardStatsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetPunchCardStatsResponse,
    ReposGetPunchCardStatsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stats/punch_card",
      operationId: "reposGetPunchCardStats",
      variables,
    }),
    () => fetchReposGetPunchCardStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateCommitStatusPathParams = {
  owner: string;
  repo: string;
  sha: string;
};

export type ReposCreateCommitStatusError = Fetcher.ErrorWrapper<undefined>;

export type ReposCreateCommitStatusRequestBody = {
  /*
   * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
   *
   * @default default
   */
  context?: string;
  /*
   * A short description of the status.
   */
  description?: string;
  /*
   * The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
   */
  state: "error" | "failure" | "pending" | "success";
  /*
   * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
   * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
   * `http://ci.example.com/user/repo/build/sha`
   */
  target_url?: string;
};

export type ReposCreateCommitStatusVariables = {
  body: ReposCreateCommitStatusRequestBody;
  pathParams: ReposCreateCommitStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access in a repository can create commit statuses for a given SHA.
 *
 * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
 */
export const fetchReposCreateCommitStatus = (
  variables: ReposCreateCommitStatusVariables
) =>
  githubFetch<
    Schemas.Status,
    ReposCreateCommitStatusError,
    ReposCreateCommitStatusRequestBody,
    {},
    {},
    ReposCreateCommitStatusPathParams
  >({
    url: "/repos/{owner}/{repo}/statuses/{sha}",
    method: "post",
    ...variables,
  });

/**
 * Users with push access in a repository can create commit statuses for a given SHA.
 *
 * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
 */
export const useReposCreateCommitStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Status,
      ReposCreateCommitStatusError,
      ReposCreateCommitStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Status,
    ReposCreateCommitStatusError,
    ReposCreateCommitStatusVariables
  >(
    (variables: ReposCreateCommitStatusVariables) =>
      fetchReposCreateCommitStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityListWatchersForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActivityListWatchersForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListWatchersForRepoError = Fetcher.ErrorWrapper<undefined>;

export type ActivityListWatchersForRepoResponse = Schemas.SimpleUser[];

export type ActivityListWatchersForRepoVariables = {
  pathParams: ActivityListWatchersForRepoPathParams;
  queryParams?: ActivityListWatchersForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people watching the specified repository.
 */
export const fetchActivityListWatchersForRepo = (
  variables: ActivityListWatchersForRepoVariables
) =>
  githubFetch<
    ActivityListWatchersForRepoResponse,
    ActivityListWatchersForRepoError,
    undefined,
    {},
    ActivityListWatchersForRepoQueryParams,
    ActivityListWatchersForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/subscribers", method: "get", ...variables });

/**
 * Lists the people watching the specified repository.
 */
export const useActivityListWatchersForRepo = <
  TData = ActivityListWatchersForRepoResponse
>(
  variables: ActivityListWatchersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListWatchersForRepoResponse,
      ActivityListWatchersForRepoError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListWatchersForRepoResponse,
    ActivityListWatchersForRepoError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/subscribers",
      operationId: "activityListWatchersForRepo",
      variables,
    }),
    () => fetchActivityListWatchersForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityDeleteRepoSubscriptionPathParams = {
  owner: string;
  repo: string;
};

export type ActivityDeleteRepoSubscriptionError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityDeleteRepoSubscriptionVariables = {
  pathParams: ActivityDeleteRepoSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
 */
export const fetchActivityDeleteRepoSubscription = (
  variables: ActivityDeleteRepoSubscriptionVariables
) =>
  githubFetch<
    undefined,
    ActivityDeleteRepoSubscriptionError,
    undefined,
    {},
    {},
    ActivityDeleteRepoSubscriptionPathParams
  >({
    url: "/repos/{owner}/{repo}/subscription",
    method: "delete",
    ...variables,
  });

/**
 * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
 */
export const useActivityDeleteRepoSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivityDeleteRepoSubscriptionError,
      ActivityDeleteRepoSubscriptionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActivityDeleteRepoSubscriptionError,
    ActivityDeleteRepoSubscriptionVariables
  >(
    (variables: ActivityDeleteRepoSubscriptionVariables) =>
      fetchActivityDeleteRepoSubscription({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityGetRepoSubscriptionPathParams = {
  owner: string;
  repo: string;
};

export type ActivityGetRepoSubscriptionError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ActivityGetRepoSubscriptionVariables = {
  pathParams: ActivityGetRepoSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityGetRepoSubscription = (
  variables: ActivityGetRepoSubscriptionVariables
) =>
  githubFetch<
    Schemas.RepositorySubscription,
    ActivityGetRepoSubscriptionError,
    undefined,
    {},
    {},
    ActivityGetRepoSubscriptionPathParams
  >({ url: "/repos/{owner}/{repo}/subscription", method: "get", ...variables });

export const useActivityGetRepoSubscription = <
  TData = Schemas.RepositorySubscription
>(
  variables: ActivityGetRepoSubscriptionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepositorySubscription,
      ActivityGetRepoSubscriptionError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RepositorySubscription,
    ActivityGetRepoSubscriptionError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/subscription",
      operationId: "activityGetRepoSubscription",
      variables,
    }),
    () => fetchActivityGetRepoSubscription({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivitySetRepoSubscriptionPathParams = {
  owner: string;
  repo: string;
};

export type ActivitySetRepoSubscriptionError = Fetcher.ErrorWrapper<undefined>;

export type ActivitySetRepoSubscriptionRequestBody = {
  /*
   * Determines if all notifications should be blocked from this repository.
   */
  ignored?: boolean;
  /*
   * Determines if notifications should be received from this repository.
   */
  subscribed?: boolean;
};

export type ActivitySetRepoSubscriptionVariables = {
  body?: ActivitySetRepoSubscriptionRequestBody;
  pathParams: ActivitySetRepoSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
 */
export const fetchActivitySetRepoSubscription = (
  variables: ActivitySetRepoSubscriptionVariables
) =>
  githubFetch<
    Schemas.RepositorySubscription,
    ActivitySetRepoSubscriptionError,
    ActivitySetRepoSubscriptionRequestBody,
    {},
    {},
    ActivitySetRepoSubscriptionPathParams
  >({ url: "/repos/{owner}/{repo}/subscription", method: "put", ...variables });

/**
 * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
 */
export const useActivitySetRepoSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RepositorySubscription,
      ActivitySetRepoSubscriptionError,
      ActivitySetRepoSubscriptionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RepositorySubscription,
    ActivitySetRepoSubscriptionError,
    ActivitySetRepoSubscriptionVariables
  >(
    (variables: ActivitySetRepoSubscriptionVariables) =>
      fetchActivitySetRepoSubscription({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListTagsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListTagsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListTagsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListTagsResponse = Schemas.Tag[];

export type ReposListTagsVariables = {
  pathParams: ReposListTagsPathParams;
  queryParams?: ReposListTagsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListTags = (variables: ReposListTagsVariables) =>
  githubFetch<
    ReposListTagsResponse,
    ReposListTagsError,
    undefined,
    {},
    ReposListTagsQueryParams,
    ReposListTagsPathParams
  >({ url: "/repos/{owner}/{repo}/tags", method: "get", ...variables });

export const useReposListTags = <TData = ReposListTagsResponse>(
  variables: ReposListTagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListTagsResponse,
      ReposListTagsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<ReposListTagsResponse, ReposListTagsError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/tags",
      operationId: "reposListTags",
      variables,
    }),
    () => fetchReposListTags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDownloadTarballArchivePathParams = {
  owner: string;
  repo: string;
  ref: string;
};

export type ReposDownloadTarballArchiveError = Fetcher.ErrorWrapper<undefined>;

export type ReposDownloadTarballArchiveVariables = {
  pathParams: ReposDownloadTarballArchivePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const fetchReposDownloadTarballArchive = (
  variables: ReposDownloadTarballArchiveVariables
) =>
  githubFetch<
    undefined,
    ReposDownloadTarballArchiveError,
    undefined,
    {},
    {},
    ReposDownloadTarballArchivePathParams
  >({
    url: "/repos/{owner}/{repo}/tarball/{ref}",
    method: "get",
    ...variables,
  });

/**
 * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const useReposDownloadTarballArchive = <TData = undefined>(
  variables: ReposDownloadTarballArchiveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ReposDownloadTarballArchiveError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ReposDownloadTarballArchiveError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/tarball/{ref}",
      operationId: "reposDownloadTarballArchive",
      variables,
    }),
    () => fetchReposDownloadTarballArchive({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListTeamsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListTeamsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListTeamsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListTeamsResponse = Schemas.Team[];

export type ReposListTeamsVariables = {
  pathParams: ReposListTeamsPathParams;
  queryParams?: ReposListTeamsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListTeams = (variables: ReposListTeamsVariables) =>
  githubFetch<
    ReposListTeamsResponse,
    ReposListTeamsError,
    undefined,
    {},
    ReposListTeamsQueryParams,
    ReposListTeamsPathParams
  >({ url: "/repos/{owner}/{repo}/teams", method: "get", ...variables });

export const useReposListTeams = <TData = ReposListTeamsResponse>(
  variables: ReposListTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListTeamsResponse,
      ReposListTeamsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListTeamsResponse,
    ReposListTeamsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/teams",
      operationId: "reposListTeams",
      variables,
    }),
    () => fetchReposListTeams({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetAllTopicsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetAllTopicsQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ReposGetAllTopicsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type ReposGetAllTopicsVariables = {
  pathParams: ReposGetAllTopicsPathParams;
  queryParams?: ReposGetAllTopicsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetAllTopics = (variables: ReposGetAllTopicsVariables) =>
  githubFetch<
    Schemas.Topic,
    ReposGetAllTopicsError,
    undefined,
    {},
    ReposGetAllTopicsQueryParams,
    ReposGetAllTopicsPathParams
  >({ url: "/repos/{owner}/{repo}/topics", method: "get", ...variables });

export const useReposGetAllTopics = <TData = Schemas.Topic>(
  variables: ReposGetAllTopicsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Topic, ReposGetAllTopicsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Topic, ReposGetAllTopicsError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/topics",
      operationId: "reposGetAllTopics",
      variables,
    }),
    () => fetchReposGetAllTopics({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposReplaceAllTopicsPathParams = {
  owner: string;
  repo: string;
};

export type ReposReplaceAllTopicsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ReposReplaceAllTopicsRequestBody = {
  /*
   * An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
   */
  names: string[];
};

export type ReposReplaceAllTopicsVariables = {
  body: ReposReplaceAllTopicsRequestBody;
  pathParams: ReposReplaceAllTopicsPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposReplaceAllTopics = (
  variables: ReposReplaceAllTopicsVariables
) =>
  githubFetch<
    Schemas.Topic,
    ReposReplaceAllTopicsError,
    ReposReplaceAllTopicsRequestBody,
    {},
    {},
    ReposReplaceAllTopicsPathParams
  >({ url: "/repos/{owner}/{repo}/topics", method: "put", ...variables });

export const useReposReplaceAllTopics = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Topic,
      ReposReplaceAllTopicsError,
      ReposReplaceAllTopicsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Topic,
    ReposReplaceAllTopicsError,
    ReposReplaceAllTopicsVariables
  >(
    (variables: ReposReplaceAllTopicsVariables) =>
      fetchReposReplaceAllTopics({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetClonesPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetClonesQueryParams = {
  /*
   * Must be one of: `day`, `week`.
   *
   * @default day
   */
  per?: "" | "day" | "week";
};

export type ReposGetClonesError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ReposGetClonesVariables = {
  pathParams: ReposGetClonesPathParams;
  queryParams?: ReposGetClonesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const fetchReposGetClones = (variables: ReposGetClonesVariables) =>
  githubFetch<
    Schemas.CloneTraffic,
    ReposGetClonesError,
    undefined,
    {},
    ReposGetClonesQueryParams,
    ReposGetClonesPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/clones",
    method: "get",
    ...variables,
  });

/**
 * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const useReposGetClones = <TData = Schemas.CloneTraffic>(
  variables: ReposGetClonesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CloneTraffic,
      ReposGetClonesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.CloneTraffic, ReposGetClonesError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/traffic/clones",
      operationId: "reposGetClones",
      variables,
    }),
    () => fetchReposGetClones({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetTopPathsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetTopPathsError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ReposGetTopPathsResponse = Schemas.ContentTraffic[];

export type ReposGetTopPathsVariables = {
  pathParams: ReposGetTopPathsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the top 10 popular contents over the last 14 days.
 */
export const fetchReposGetTopPaths = (variables: ReposGetTopPathsVariables) =>
  githubFetch<
    ReposGetTopPathsResponse,
    ReposGetTopPathsError,
    undefined,
    {},
    {},
    ReposGetTopPathsPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/popular/paths",
    method: "get",
    ...variables,
  });

/**
 * Get the top 10 popular contents over the last 14 days.
 */
export const useReposGetTopPaths = <TData = ReposGetTopPathsResponse>(
  variables: ReposGetTopPathsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTopPathsResponse,
      ReposGetTopPathsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetTopPathsResponse,
    ReposGetTopPathsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/traffic/popular/paths",
      operationId: "reposGetTopPaths",
      variables,
    }),
    () => fetchReposGetTopPaths({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetTopReferrersPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetTopReferrersError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ReposGetTopReferrersResponse = Schemas.ReferrerTraffic[];

export type ReposGetTopReferrersVariables = {
  pathParams: ReposGetTopReferrersPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the top 10 referrers over the last 14 days.
 */
export const fetchReposGetTopReferrers = (
  variables: ReposGetTopReferrersVariables
) =>
  githubFetch<
    ReposGetTopReferrersResponse,
    ReposGetTopReferrersError,
    undefined,
    {},
    {},
    ReposGetTopReferrersPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/popular/referrers",
    method: "get",
    ...variables,
  });

/**
 * Get the top 10 referrers over the last 14 days.
 */
export const useReposGetTopReferrers = <TData = ReposGetTopReferrersResponse>(
  variables: ReposGetTopReferrersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTopReferrersResponse,
      ReposGetTopReferrersError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetTopReferrersResponse,
    ReposGetTopReferrersError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/traffic/popular/referrers",
      operationId: "reposGetTopReferrers",
      variables,
    }),
    () => fetchReposGetTopReferrers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetViewsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetViewsQueryParams = {
  /*
   * Must be one of: `day`, `week`.
   *
   * @default day
   */
  per?: "" | "day" | "week";
};

export type ReposGetViewsError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ReposGetViewsVariables = {
  pathParams: ReposGetViewsPathParams;
  queryParams?: ReposGetViewsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const fetchReposGetViews = (variables: ReposGetViewsVariables) =>
  githubFetch<
    Schemas.ViewTraffic,
    ReposGetViewsError,
    undefined,
    {},
    ReposGetViewsQueryParams,
    ReposGetViewsPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/views",
    method: "get",
    ...variables,
  });

/**
 * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const useReposGetViews = <TData = Schemas.ViewTraffic>(
  variables: ReposGetViewsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ViewTraffic, ReposGetViewsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.ViewTraffic, ReposGetViewsError, TData>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/traffic/views",
      operationId: "reposGetViews",
      variables,
    }),
    () => fetchReposGetViews({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposTransferPathParams = {
  owner: string;
  repo: string;
};

export type ReposTransferError = Fetcher.ErrorWrapper<undefined>;

export type ReposTransferRequestBody = {
  /*
   * The username or organization name the repository will be transferred to.
   */
  new_owner: string;
  /*
   * ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
   */
  team_ids?: number[];
};

export type ReposTransferVariables = {
  body: ReposTransferRequestBody;
  pathParams: ReposTransferPathParams;
} & GithubContext["fetcherOptions"];

/**
 * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
 */
export const fetchReposTransfer = (variables: ReposTransferVariables) =>
  githubFetch<
    Schemas.Repository,
    ReposTransferError,
    ReposTransferRequestBody,
    {},
    {},
    ReposTransferPathParams
  >({ url: "/repos/{owner}/{repo}/transfer", method: "post", ...variables });

/**
 * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
 */
export const useReposTransfer = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      ReposTransferError,
      ReposTransferVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    ReposTransferError,
    ReposTransferVariables
  >(
    (variables: ReposTransferVariables) =>
      fetchReposTransfer({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDisableVulnerabilityAlertsPathParams = {
  owner: string;
  repo: string;
};

export type ReposDisableVulnerabilityAlertsError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposDisableVulnerabilityAlertsVariables = {
  pathParams: ReposDisableVulnerabilityAlertsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const fetchReposDisableVulnerabilityAlerts = (
  variables: ReposDisableVulnerabilityAlertsVariables
) =>
  githubFetch<
    undefined,
    ReposDisableVulnerabilityAlertsError,
    undefined,
    {},
    {},
    ReposDisableVulnerabilityAlertsPathParams
  >({
    url: "/repos/{owner}/{repo}/vulnerability-alerts",
    method: "delete",
    ...variables,
  });

/**
 * Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const useReposDisableVulnerabilityAlerts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDisableVulnerabilityAlertsError,
      ReposDisableVulnerabilityAlertsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDisableVulnerabilityAlertsError,
    ReposDisableVulnerabilityAlertsVariables
  >(
    (variables: ReposDisableVulnerabilityAlertsVariables) =>
      fetchReposDisableVulnerabilityAlerts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposCheckVulnerabilityAlertsPathParams = {
  owner: string;
  repo: string;
};

export type ReposCheckVulnerabilityAlertsError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposCheckVulnerabilityAlertsVariables = {
  pathParams: ReposCheckVulnerabilityAlertsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const fetchReposCheckVulnerabilityAlerts = (
  variables: ReposCheckVulnerabilityAlertsVariables
) =>
  githubFetch<
    undefined,
    ReposCheckVulnerabilityAlertsError,
    undefined,
    {},
    {},
    ReposCheckVulnerabilityAlertsPathParams
  >({
    url: "/repos/{owner}/{repo}/vulnerability-alerts",
    method: "get",
    ...variables,
  });

/**
 * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const useReposCheckVulnerabilityAlerts = <TData = undefined>(
  variables: ReposCheckVulnerabilityAlertsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ReposCheckVulnerabilityAlertsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ReposCheckVulnerabilityAlertsError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/vulnerability-alerts",
      operationId: "reposCheckVulnerabilityAlerts",
      variables,
    }),
    () =>
      fetchReposCheckVulnerabilityAlerts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposEnableVulnerabilityAlertsPathParams = {
  owner: string;
  repo: string;
};

export type ReposEnableVulnerabilityAlertsError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposEnableVulnerabilityAlertsVariables = {
  pathParams: ReposEnableVulnerabilityAlertsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const fetchReposEnableVulnerabilityAlerts = (
  variables: ReposEnableVulnerabilityAlertsVariables
) =>
  githubFetch<
    undefined,
    ReposEnableVulnerabilityAlertsError,
    undefined,
    {},
    {},
    ReposEnableVulnerabilityAlertsPathParams
  >({
    url: "/repos/{owner}/{repo}/vulnerability-alerts",
    method: "put",
    ...variables,
  });

/**
 * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const useReposEnableVulnerabilityAlerts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposEnableVulnerabilityAlertsError,
      ReposEnableVulnerabilityAlertsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposEnableVulnerabilityAlertsError,
    ReposEnableVulnerabilityAlertsVariables
  >(
    (variables: ReposEnableVulnerabilityAlertsVariables) =>
      fetchReposEnableVulnerabilityAlerts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDownloadZipballArchivePathParams = {
  owner: string;
  repo: string;
  ref: string;
};

export type ReposDownloadZipballArchiveError = Fetcher.ErrorWrapper<undefined>;

export type ReposDownloadZipballArchiveVariables = {
  pathParams: ReposDownloadZipballArchivePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const fetchReposDownloadZipballArchive = (
  variables: ReposDownloadZipballArchiveVariables
) =>
  githubFetch<
    undefined,
    ReposDownloadZipballArchiveError,
    undefined,
    {},
    {},
    ReposDownloadZipballArchivePathParams
  >({
    url: "/repos/{owner}/{repo}/zipball/{ref}",
    method: "get",
    ...variables,
  });

/**
 * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const useReposDownloadZipballArchive = <TData = undefined>(
  variables: ReposDownloadZipballArchiveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ReposDownloadZipballArchiveError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ReposDownloadZipballArchiveError,
    TData
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/zipball/{ref}",
      operationId: "reposDownloadZipballArchive",
      variables,
    }),
    () => fetchReposDownloadZipballArchive({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateUsingTemplatePathParams = {
  templateOwner: string;
  templateRepo: string;
};

export type ReposCreateUsingTemplateError = Fetcher.ErrorWrapper<undefined>;

export type ReposCreateUsingTemplateRequestBody = {
  /*
   * A short description of the new repository.
   */
  description?: string;
  /*
   * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
   *
   * @default false
   */
  include_all_branches?: boolean;
  /*
   * The name of the new repository.
   */
  name: string;
  /*
   * The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
   */
  owner?: string;
  /*
   * Either `true` to create a new private repository or `false` to create a new public one.
   *
   * @default false
   */
  private?: boolean;
};

export type ReposCreateUsingTemplateVariables = {
  body: ReposCreateUsingTemplateRequestBody;
  pathParams: ReposCreateUsingTemplatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const fetchReposCreateUsingTemplate = (
  variables: ReposCreateUsingTemplateVariables
) =>
  githubFetch<
    Schemas.Repository,
    ReposCreateUsingTemplateError,
    ReposCreateUsingTemplateRequestBody,
    {},
    {},
    ReposCreateUsingTemplatePathParams
  >({
    url: "/repos/{templateOwner}/{templateRepo}/generate",
    method: "post",
    ...variables,
  });

/**
 * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const useReposCreateUsingTemplate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      ReposCreateUsingTemplateError,
      ReposCreateUsingTemplateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    ReposCreateUsingTemplateError,
    ReposCreateUsingTemplateVariables
  >(
    (variables: ReposCreateUsingTemplateVariables) =>
      fetchReposCreateUsingTemplate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListPublicQueryParams = {
  /*
   * A repository ID. Only return repositories with an ID greater than this ID.
   */
  since?: number;
};

export type ReposListPublicError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposListPublicResponse = Schemas.MinimalRepository[];

export type ReposListPublicVariables = {
  queryParams?: ReposListPublicQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all public repositories in the order that they were created.
 *
 * Notes:
 * - For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise.
 * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
 */
export const fetchReposListPublic = (variables: ReposListPublicVariables) =>
  githubFetch<
    ReposListPublicResponse,
    ReposListPublicError,
    undefined,
    {},
    ReposListPublicQueryParams,
    {}
  >({ url: "/repositories", method: "get", ...variables });

/**
 * Lists all public repositories in the order that they were created.
 *
 * Notes:
 * - For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise.
 * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
 */
export const useReposListPublic = <TData = ReposListPublicResponse>(
  variables: ReposListPublicVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPublicResponse,
      ReposListPublicError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListPublicResponse,
    ReposListPublicError,
    TData
  >(
    queryKeyFn({
      path: "/repositories",
      operationId: "reposListPublic",
      variables,
    }),
    () => fetchReposListPublic({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListEnvironmentSecretsPathParams = {
  repositoryId: number;
  /*
   * The name of the environment
   */
  environmentName: string;
};

export type ActionsListEnvironmentSecretsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListEnvironmentSecretsError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListEnvironmentSecretsResponse = {
  secrets: Schemas.ActionsSecret[];
  total_count: number;
};

export type ActionsListEnvironmentSecretsVariables = {
  pathParams: ActionsListEnvironmentSecretsPathParams;
  queryParams?: ActionsListEnvironmentSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsListEnvironmentSecrets = (
  variables: ActionsListEnvironmentSecretsVariables
) =>
  githubFetch<
    ActionsListEnvironmentSecretsResponse,
    ActionsListEnvironmentSecretsError,
    undefined,
    {},
    ActionsListEnvironmentSecretsQueryParams,
    ActionsListEnvironmentSecretsPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets",
    method: "get",
    ...variables,
  });

/**
 * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsListEnvironmentSecrets = <
  TData = ActionsListEnvironmentSecretsResponse
>(
  variables: ActionsListEnvironmentSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListEnvironmentSecretsResponse,
      ActionsListEnvironmentSecretsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListEnvironmentSecretsResponse,
    ActionsListEnvironmentSecretsError,
    TData
  >(
    queryKeyFn({
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets",
      operationId: "actionsListEnvironmentSecrets",
      variables,
    }),
    () =>
      fetchActionsListEnvironmentSecrets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetEnvironmentPublicKeyPathParams = {
  repositoryId: number;
  /*
   * The name of the environment
   */
  environmentName: string;
};

export type ActionsGetEnvironmentPublicKeyError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetEnvironmentPublicKeyVariables = {
  pathParams: ActionsGetEnvironmentPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetEnvironmentPublicKey = (
  variables: ActionsGetEnvironmentPublicKeyVariables
) =>
  githubFetch<
    Schemas.ActionsPublicKey,
    ActionsGetEnvironmentPublicKeyError,
    undefined,
    {},
    {},
    ActionsGetEnvironmentPublicKeyPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/public-key",
    method: "get",
    ...variables,
  });

/**
 * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetEnvironmentPublicKey = <
  TData = Schemas.ActionsPublicKey
>(
  variables: ActionsGetEnvironmentPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      ActionsGetEnvironmentPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsPublicKey,
    ActionsGetEnvironmentPublicKeyError,
    TData
  >(
    queryKeyFn({
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key",
      operationId: "actionsGetEnvironmentPublicKey",
      variables,
    }),
    () =>
      fetchActionsGetEnvironmentPublicKey({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteEnvironmentSecretPathParams = {
  repositoryId: number;
  /*
   * The name of the environment
   */
  environmentName: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsDeleteEnvironmentSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteEnvironmentSecretVariables = {
  pathParams: ActionsDeleteEnvironmentSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsDeleteEnvironmentSecret = (
  variables: ActionsDeleteEnvironmentSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsDeleteEnvironmentSecretError,
    undefined,
    {},
    {},
    ActionsDeleteEnvironmentSecretPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/{secretName}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsDeleteEnvironmentSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteEnvironmentSecretError,
      ActionsDeleteEnvironmentSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteEnvironmentSecretError,
    ActionsDeleteEnvironmentSecretVariables
  >(
    (variables: ActionsDeleteEnvironmentSecretVariables) =>
      fetchActionsDeleteEnvironmentSecret({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetEnvironmentSecretPathParams = {
  repositoryId: number;
  /*
   * The name of the environment
   */
  environmentName: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsGetEnvironmentSecretError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetEnvironmentSecretVariables = {
  pathParams: ActionsGetEnvironmentSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetEnvironmentSecret = (
  variables: ActionsGetEnvironmentSecretVariables
) =>
  githubFetch<
    Schemas.ActionsSecret,
    ActionsGetEnvironmentSecretError,
    undefined,
    {},
    {},
    ActionsGetEnvironmentSecretPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/{secretName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetEnvironmentSecret = <TData = Schemas.ActionsSecret>(
  variables: ActionsGetEnvironmentSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsSecret,
      ActionsGetEnvironmentSecretError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsSecret,
    ActionsGetEnvironmentSecretError,
    TData
  >(
    queryKeyFn({
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
      operationId: "actionsGetEnvironmentSecret",
      variables,
    }),
    () => fetchActionsGetEnvironmentSecret({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateOrUpdateEnvironmentSecretPathParams = {
  repositoryId: number;
  /*
   * The name of the environment
   */
  environmentName: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsCreateOrUpdateEnvironmentSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateOrUpdateEnvironmentSecretRequestBody = {
  /*
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /*
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
};

export type ActionsCreateOrUpdateEnvironmentSecretVariables = {
  body?: ActionsCreateOrUpdateEnvironmentSecretRequestBody;
  pathParams: ActionsCreateOrUpdateEnvironmentSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchActionsCreateOrUpdateEnvironmentSecret = (
  variables: ActionsCreateOrUpdateEnvironmentSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsCreateOrUpdateEnvironmentSecretError,
    ActionsCreateOrUpdateEnvironmentSecretRequestBody,
    {},
    {},
    ActionsCreateOrUpdateEnvironmentSecretPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/{secretName}",
    method: "put",
    ...variables,
  });

/**
 * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useActionsCreateOrUpdateEnvironmentSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsCreateOrUpdateEnvironmentSecretError,
      ActionsCreateOrUpdateEnvironmentSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsCreateOrUpdateEnvironmentSecretError,
    ActionsCreateOrUpdateEnvironmentSecretVariables
  >(
    (variables: ActionsCreateOrUpdateEnvironmentSecretVariables) =>
      fetchActionsCreateOrUpdateEnvironmentSecret({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListProvisionedGroupsEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminListProvisionedGroupsEnterpriseQueryParams = {
  /*
   * Used for pagination: the index of the first result to return.
   */
  startIndex?: number;
  /*
   * Used for pagination: the number of results to return.
   */
  count?: number;
  /*
   * filter results
   */
  filter?: string;
  /*
   * attributes to exclude
   */
  excludedAttributes?: string;
};

export type EnterpriseAdminListProvisionedGroupsEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminListProvisionedGroupsEnterpriseVariables = {
  pathParams: EnterpriseAdminListProvisionedGroupsEnterprisePathParams;
  queryParams?: EnterpriseAdminListProvisionedGroupsEnterpriseQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const fetchEnterpriseAdminListProvisionedGroupsEnterprise = (
  variables: EnterpriseAdminListProvisionedGroupsEnterpriseVariables
) =>
  githubFetch<
    Schemas.ScimGroupListEnterprise,
    EnterpriseAdminListProvisionedGroupsEnterpriseError,
    undefined,
    {},
    EnterpriseAdminListProvisionedGroupsEnterpriseQueryParams,
    EnterpriseAdminListProvisionedGroupsEnterprisePathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Groups",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const useEnterpriseAdminListProvisionedGroupsEnterprise = <
  TData = Schemas.ScimGroupListEnterprise
>(
  variables: EnterpriseAdminListProvisionedGroupsEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ScimGroupListEnterprise,
      EnterpriseAdminListProvisionedGroupsEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ScimGroupListEnterprise,
    EnterpriseAdminListProvisionedGroupsEnterpriseError,
    TData
  >(
    queryKeyFn({
      path: "/scim/v2/enterprises/{enterprise}/Groups",
      operationId: "enterpriseAdminListProvisionedGroupsEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListProvisionedGroupsEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminProvisionAndInviteEnterpriseGroupPathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminProvisionAndInviteEnterpriseGroupError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestBody = {
  /*
   * The name of the SCIM group. This must match the GitHub organization that the group maps to.
   */
  displayName: string;
  members?: {
    /*
     * The SCIM user ID for a user.
     */
    value: string;
  }[];
  /*
   * The SCIM schema URIs.
   */
  schemas: string[];
};

export type EnterpriseAdminProvisionAndInviteEnterpriseGroupVariables = {
  body: EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestBody;
  pathParams: EnterpriseAdminProvisionAndInviteEnterpriseGroupPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
 */
export const fetchEnterpriseAdminProvisionAndInviteEnterpriseGroup = (
  variables: EnterpriseAdminProvisionAndInviteEnterpriseGroupVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseGroup,
    EnterpriseAdminProvisionAndInviteEnterpriseGroupError,
    EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestBody,
    {},
    {},
    EnterpriseAdminProvisionAndInviteEnterpriseGroupPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Groups",
    method: "post",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
 */
export const useEnterpriseAdminProvisionAndInviteEnterpriseGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseGroup,
      EnterpriseAdminProvisionAndInviteEnterpriseGroupError,
      EnterpriseAdminProvisionAndInviteEnterpriseGroupVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseGroup,
    EnterpriseAdminProvisionAndInviteEnterpriseGroupError,
    EnterpriseAdminProvisionAndInviteEnterpriseGroupVariables
  >(
    (variables: EnterpriseAdminProvisionAndInviteEnterpriseGroupVariables) =>
      fetchEnterpriseAdminProvisionAndInviteEnterpriseGroup({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminDeleteScimGroupFromEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Identifier generated by the GitHub SCIM endpoint.
   */
  scimGroupId: string;
};

export type EnterpriseAdminDeleteScimGroupFromEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminDeleteScimGroupFromEnterpriseVariables = {
  pathParams: EnterpriseAdminDeleteScimGroupFromEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const fetchEnterpriseAdminDeleteScimGroupFromEnterprise = (
  variables: EnterpriseAdminDeleteScimGroupFromEnterpriseVariables
) =>
  githubFetch<
    undefined,
    EnterpriseAdminDeleteScimGroupFromEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminDeleteScimGroupFromEnterprisePathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Groups/{scimGroupId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const useEnterpriseAdminDeleteScimGroupFromEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EnterpriseAdminDeleteScimGroupFromEnterpriseError,
      EnterpriseAdminDeleteScimGroupFromEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    EnterpriseAdminDeleteScimGroupFromEnterpriseError,
    EnterpriseAdminDeleteScimGroupFromEnterpriseVariables
  >(
    (variables: EnterpriseAdminDeleteScimGroupFromEnterpriseVariables) =>
      fetchEnterpriseAdminDeleteScimGroupFromEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupPathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Identifier generated by the GitHub SCIM endpoint.
     */
    scimGroupId: string;
  };

export type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupQueryParams =
  {
    /*
     * Attributes to exclude.
     */
    excludedAttributes?: string;
  };

export type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupVariables =
  {
    pathParams: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupPathParams;
    queryParams?: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const fetchEnterpriseAdminGetProvisioningInformationForEnterpriseGroup =
  (
    variables: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupVariables
  ) =>
    githubFetch<
      Schemas.ScimEnterpriseGroup,
      EnterpriseAdminGetProvisioningInformationForEnterpriseGroupError,
      undefined,
      {},
      EnterpriseAdminGetProvisioningInformationForEnterpriseGroupQueryParams,
      EnterpriseAdminGetProvisioningInformationForEnterpriseGroupPathParams
    >({
      url: "/scim/v2/enterprises/{enterprise}/Groups/{scimGroupId}",
      method: "get",
      ...variables,
    });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const useEnterpriseAdminGetProvisioningInformationForEnterpriseGroup = <
  TData = Schemas.ScimEnterpriseGroup
>(
  variables: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ScimEnterpriseGroup,
      EnterpriseAdminGetProvisioningInformationForEnterpriseGroupError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ScimEnterpriseGroup,
    EnterpriseAdminGetProvisioningInformationForEnterpriseGroupError,
    TData
  >(
    queryKeyFn({
      path: "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}",
      operationId:
        "enterpriseAdminGetProvisioningInformationForEnterpriseGroup",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetProvisioningInformationForEnterpriseGroup({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminUpdateAttributeForEnterpriseGroupPathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Identifier generated by the GitHub SCIM endpoint.
   */
  scimGroupId: string;
};

export type EnterpriseAdminUpdateAttributeForEnterpriseGroupError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminUpdateAttributeForEnterpriseGroupRequestBody = {
  /*
   * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   *
   * @minItems 1
   */
  Operations: {
    op: "add" | "Add" | "remove" | "Remove" | "replace" | "Replace";
    path?: string;
    value?: string | Record<string, any> | any[];
  }[];
  /*
   * The SCIM schema URIs.
   */
  schemas: string[];
};

export type EnterpriseAdminUpdateAttributeForEnterpriseGroupVariables = {
  body: EnterpriseAdminUpdateAttributeForEnterpriseGroupRequestBody;
  pathParams: EnterpriseAdminUpdateAttributeForEnterpriseGroupPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 */
export const fetchEnterpriseAdminUpdateAttributeForEnterpriseGroup = (
  variables: EnterpriseAdminUpdateAttributeForEnterpriseGroupVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseGroup,
    EnterpriseAdminUpdateAttributeForEnterpriseGroupError,
    EnterpriseAdminUpdateAttributeForEnterpriseGroupRequestBody,
    {},
    {},
    EnterpriseAdminUpdateAttributeForEnterpriseGroupPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Groups/{scimGroupId}",
    method: "patch",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 */
export const useEnterpriseAdminUpdateAttributeForEnterpriseGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseGroup,
      EnterpriseAdminUpdateAttributeForEnterpriseGroupError,
      EnterpriseAdminUpdateAttributeForEnterpriseGroupVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseGroup,
    EnterpriseAdminUpdateAttributeForEnterpriseGroupError,
    EnterpriseAdminUpdateAttributeForEnterpriseGroupVariables
  >(
    (variables: EnterpriseAdminUpdateAttributeForEnterpriseGroupVariables) =>
      fetchEnterpriseAdminUpdateAttributeForEnterpriseGroup({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupPathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Identifier generated by the GitHub SCIM endpoint.
     */
    scimGroupId: string;
  };

export type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequestBody =
  {
    /*
     * The name of the SCIM group. This must match the GitHub organization that the group maps to.
     */
    displayName: string;
    members?: {
      /*
       * The SCIM user ID for a user.
       */
      value: string;
    }[];
    /*
     * The SCIM schema URIs.
     */
    schemas: string[];
  };

export type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupVariables =
  {
    body: EnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequestBody;
    pathParams: EnterpriseAdminSetInformationForProvisionedEnterpriseGroupPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
 */
export const fetchEnterpriseAdminSetInformationForProvisionedEnterpriseGroup = (
  variables: EnterpriseAdminSetInformationForProvisionedEnterpriseGroupVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseGroup,
    EnterpriseAdminSetInformationForProvisionedEnterpriseGroupError,
    EnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequestBody,
    {},
    {},
    EnterpriseAdminSetInformationForProvisionedEnterpriseGroupPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Groups/{scimGroupId}",
    method: "put",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
 */
export const useEnterpriseAdminSetInformationForProvisionedEnterpriseGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseGroup,
      EnterpriseAdminSetInformationForProvisionedEnterpriseGroupError,
      EnterpriseAdminSetInformationForProvisionedEnterpriseGroupVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseGroup,
    EnterpriseAdminSetInformationForProvisionedEnterpriseGroupError,
    EnterpriseAdminSetInformationForProvisionedEnterpriseGroupVariables
  >(
    (
      variables: EnterpriseAdminSetInformationForProvisionedEnterpriseGroupVariables
    ) =>
      fetchEnterpriseAdminSetInformationForProvisionedEnterpriseGroup({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListProvisionedIdentitiesEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminListProvisionedIdentitiesEnterpriseQueryParams = {
  /*
   * Used for pagination: the index of the first result to return.
   */
  startIndex?: number;
  /*
   * Used for pagination: the number of results to return.
   */
  count?: number;
  /*
   * filter results
   */
  filter?: string;
};

export type EnterpriseAdminListProvisionedIdentitiesEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminListProvisionedIdentitiesEnterpriseVariables = {
  pathParams: EnterpriseAdminListProvisionedIdentitiesEnterprisePathParams;
  queryParams?: EnterpriseAdminListProvisionedIdentitiesEnterpriseQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
 *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
 *
 * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
 *    - If the user signs in, their GitHub account is linked to this entry.
 *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
 */
export const fetchEnterpriseAdminListProvisionedIdentitiesEnterprise = (
  variables: EnterpriseAdminListProvisionedIdentitiesEnterpriseVariables
) =>
  githubFetch<
    Schemas.ScimUserListEnterprise,
    EnterpriseAdminListProvisionedIdentitiesEnterpriseError,
    undefined,
    {},
    EnterpriseAdminListProvisionedIdentitiesEnterpriseQueryParams,
    EnterpriseAdminListProvisionedIdentitiesEnterprisePathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
 *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
 *
 * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
 *    - If the user signs in, their GitHub account is linked to this entry.
 *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
 */
export const useEnterpriseAdminListProvisionedIdentitiesEnterprise = <
  TData = Schemas.ScimUserListEnterprise
>(
  variables: EnterpriseAdminListProvisionedIdentitiesEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ScimUserListEnterprise,
      EnterpriseAdminListProvisionedIdentitiesEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ScimUserListEnterprise,
    EnterpriseAdminListProvisionedIdentitiesEnterpriseError,
    TData
  >(
    queryKeyFn({
      path: "/scim/v2/enterprises/{enterprise}/Users",
      operationId: "enterpriseAdminListProvisionedIdentitiesEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListProvisionedIdentitiesEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminProvisionAndInviteEnterpriseUserPathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminProvisionAndInviteEnterpriseUserError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminProvisionAndInviteEnterpriseUserRequestBody = {
  /*
   * List of user emails.
   */
  emails: {
    /*
     * Whether this email address is the primary address.
     */
    primary: boolean;
    /*
     * The type of email address.
     */
    type: string;
    /*
     * The email address.
     */
    value: string;
  }[];
  /*
   * List of SCIM group IDs the user is a member of.
   */
  groups?: {
    value?: string;
  }[];
  name: {
    /*
     * The last name of the user.
     */
    familyName: string;
    /*
     * The first name of the user.
     */
    givenName: string;
  };
  /*
   * The SCIM schema URIs.
   */
  schemas: string[];
  /*
   * The username for the user.
   */
  userName: string;
};

export type EnterpriseAdminProvisionAndInviteEnterpriseUserVariables = {
  body: EnterpriseAdminProvisionAndInviteEnterpriseUserRequestBody;
  pathParams: EnterpriseAdminProvisionAndInviteEnterpriseUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision enterprise membership for a user, and send organization invitation emails to the email address.
 *
 * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
 */
export const fetchEnterpriseAdminProvisionAndInviteEnterpriseUser = (
  variables: EnterpriseAdminProvisionAndInviteEnterpriseUserVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseUser,
    EnterpriseAdminProvisionAndInviteEnterpriseUserError,
    EnterpriseAdminProvisionAndInviteEnterpriseUserRequestBody,
    {},
    {},
    EnterpriseAdminProvisionAndInviteEnterpriseUserPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users",
    method: "post",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision enterprise membership for a user, and send organization invitation emails to the email address.
 *
 * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
 */
export const useEnterpriseAdminProvisionAndInviteEnterpriseUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseUser,
      EnterpriseAdminProvisionAndInviteEnterpriseUserError,
      EnterpriseAdminProvisionAndInviteEnterpriseUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseUser,
    EnterpriseAdminProvisionAndInviteEnterpriseUserError,
    EnterpriseAdminProvisionAndInviteEnterpriseUserVariables
  >(
    (variables: EnterpriseAdminProvisionAndInviteEnterpriseUserVariables) =>
      fetchEnterpriseAdminProvisionAndInviteEnterpriseUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminDeleteUserFromEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type EnterpriseAdminDeleteUserFromEnterpriseError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminDeleteUserFromEnterpriseVariables = {
  pathParams: EnterpriseAdminDeleteUserFromEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const fetchEnterpriseAdminDeleteUserFromEnterprise = (
  variables: EnterpriseAdminDeleteUserFromEnterpriseVariables
) =>
  githubFetch<
    undefined,
    EnterpriseAdminDeleteUserFromEnterpriseError,
    undefined,
    {},
    {},
    EnterpriseAdminDeleteUserFromEnterprisePathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users/{scimUserId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const useEnterpriseAdminDeleteUserFromEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EnterpriseAdminDeleteUserFromEnterpriseError,
      EnterpriseAdminDeleteUserFromEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    EnterpriseAdminDeleteUserFromEnterpriseError,
    EnterpriseAdminDeleteUserFromEnterpriseVariables
  >(
    (variables: EnterpriseAdminDeleteUserFromEnterpriseVariables) =>
      fetchEnterpriseAdminDeleteUserFromEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminGetProvisioningInformationForEnterpriseUserPathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * scim_user_id parameter
     */
    scimUserId: string;
  };

export type EnterpriseAdminGetProvisioningInformationForEnterpriseUserError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminGetProvisioningInformationForEnterpriseUserVariables =
  {
    pathParams: EnterpriseAdminGetProvisioningInformationForEnterpriseUserPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const fetchEnterpriseAdminGetProvisioningInformationForEnterpriseUser = (
  variables: EnterpriseAdminGetProvisioningInformationForEnterpriseUserVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseUser,
    EnterpriseAdminGetProvisioningInformationForEnterpriseUserError,
    undefined,
    {},
    {},
    EnterpriseAdminGetProvisioningInformationForEnterpriseUserPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users/{scimUserId}",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const useEnterpriseAdminGetProvisioningInformationForEnterpriseUser = <
  TData = Schemas.ScimEnterpriseUser
>(
  variables: EnterpriseAdminGetProvisioningInformationForEnterpriseUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ScimEnterpriseUser,
      EnterpriseAdminGetProvisioningInformationForEnterpriseUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ScimEnterpriseUser,
    EnterpriseAdminGetProvisioningInformationForEnterpriseUserError,
    TData
  >(
    queryKeyFn({
      path: "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}",
      operationId: "enterpriseAdminGetProvisioningInformationForEnterpriseUser",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetProvisioningInformationForEnterpriseUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminUpdateAttributeForEnterpriseUserPathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type EnterpriseAdminUpdateAttributeForEnterpriseUserError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminUpdateAttributeForEnterpriseUserRequestBody = {
  /*
   * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   */
  Operations: Record<string, any>[];
  /*
   * The SCIM schema URIs.
   */
  schemas: string[];
};

export type EnterpriseAdminUpdateAttributeForEnterpriseUserVariables = {
  body: EnterpriseAdminUpdateAttributeForEnterpriseUserRequestBody;
  pathParams: EnterpriseAdminUpdateAttributeForEnterpriseUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
 *
 * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
 *
 * ```
 * {
 *   "Operations":[{
 *     "op":"replace",
 *     "value":{
 *       "active":false
 *     }
 *   }]
 * }
 * ```
 */
export const fetchEnterpriseAdminUpdateAttributeForEnterpriseUser = (
  variables: EnterpriseAdminUpdateAttributeForEnterpriseUserVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseUser,
    EnterpriseAdminUpdateAttributeForEnterpriseUserError,
    EnterpriseAdminUpdateAttributeForEnterpriseUserRequestBody,
    {},
    {},
    EnterpriseAdminUpdateAttributeForEnterpriseUserPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users/{scimUserId}",
    method: "patch",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
 *
 * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
 *
 * ```
 * {
 *   "Operations":[{
 *     "op":"replace",
 *     "value":{
 *       "active":false
 *     }
 *   }]
 * }
 * ```
 */
export const useEnterpriseAdminUpdateAttributeForEnterpriseUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseUser,
      EnterpriseAdminUpdateAttributeForEnterpriseUserError,
      EnterpriseAdminUpdateAttributeForEnterpriseUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseUser,
    EnterpriseAdminUpdateAttributeForEnterpriseUserError,
    EnterpriseAdminUpdateAttributeForEnterpriseUserVariables
  >(
    (variables: EnterpriseAdminUpdateAttributeForEnterpriseUserVariables) =>
      fetchEnterpriseAdminUpdateAttributeForEnterpriseUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminSetInformationForProvisionedEnterpriseUserPathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * scim_user_id parameter
     */
    scimUserId: string;
  };

export type EnterpriseAdminSetInformationForProvisionedEnterpriseUserError =
  Fetcher.ErrorWrapper<undefined>;

export type EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestBody =
  {
    /*
     * List of user emails.
     */
    emails: {
      /*
       * Whether this email address is the primary address.
       */
      primary: boolean;
      /*
       * The type of email address.
       */
      type: string;
      /*
       * The email address.
       */
      value: string;
    }[];
    /*
     * List of SCIM group IDs the user is a member of.
     */
    groups?: {
      value?: string;
    }[];
    name: {
      /*
       * The last name of the user.
       */
      familyName: string;
      /*
       * The first name of the user.
       */
      givenName: string;
    };
    /*
     * The SCIM schema URIs.
     */
    schemas: string[];
    /*
     * The username for the user.
     */
    userName: string;
  };

export type EnterpriseAdminSetInformationForProvisionedEnterpriseUserVariables =
  {
    body: EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestBody;
    pathParams: EnterpriseAdminSetInformationForProvisionedEnterpriseUserPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
 *
 * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
 */
export const fetchEnterpriseAdminSetInformationForProvisionedEnterpriseUser = (
  variables: EnterpriseAdminSetInformationForProvisionedEnterpriseUserVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseUser,
    EnterpriseAdminSetInformationForProvisionedEnterpriseUserError,
    EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestBody,
    {},
    {},
    EnterpriseAdminSetInformationForProvisionedEnterpriseUserPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users/{scimUserId}",
    method: "put",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
 *
 * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
 */
export const useEnterpriseAdminSetInformationForProvisionedEnterpriseUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseUser,
      EnterpriseAdminSetInformationForProvisionedEnterpriseUserError,
      EnterpriseAdminSetInformationForProvisionedEnterpriseUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseUser,
    EnterpriseAdminSetInformationForProvisionedEnterpriseUserError,
    EnterpriseAdminSetInformationForProvisionedEnterpriseUserVariables
  >(
    (
      variables: EnterpriseAdminSetInformationForProvisionedEnterpriseUserVariables
    ) =>
      fetchEnterpriseAdminSetInformationForProvisionedEnterpriseUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ScimListProvisionedIdentitiesPathParams = {
  org: string;
};

export type ScimListProvisionedIdentitiesQueryParams = {
  /*
   * Used for pagination: the index of the first result to return.
   */
  startIndex?: number;
  /*
   * Used for pagination: the number of results to return.
   */
  count?: number;
  /*
   * Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query:
   *
   * `?filter=userName%20eq%20\"Octocat\"`.
   *
   * To filter results for the identity with the email `octocat@github.com`, you would use this query:
   *
   * `?filter=emails%20eq%20\"octocat@github.com\"`.
   */
  filter?: string;
};

export type ScimListProvisionedIdentitiesError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 400;
      payload: Responses.ScimBadRequest;
    }
  | {
      status: 403;
      payload: Responses.ScimForbidden;
    }
  | {
      status: 404;
      payload: Responses.ScimNotFound;
    }
>;

export type ScimListProvisionedIdentitiesVariables = {
  pathParams: ScimListProvisionedIdentitiesPathParams;
  queryParams?: ScimListProvisionedIdentitiesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
 *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub organization.
 *
 * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
 *    - If the user signs in, their GitHub account is linked to this entry.
 *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.
 */
export const fetchScimListProvisionedIdentities = (
  variables: ScimListProvisionedIdentitiesVariables
) =>
  githubFetch<
    undefined,
    ScimListProvisionedIdentitiesError,
    undefined,
    {},
    ScimListProvisionedIdentitiesQueryParams,
    ScimListProvisionedIdentitiesPathParams
  >({ url: "/scim/v2/organizations/{org}/Users", method: "get", ...variables });

/**
 * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
 *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub organization.
 *
 * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
 *    - If the user signs in, their GitHub account is linked to this entry.
 *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.
 */
export const useScimListProvisionedIdentities = <TData = undefined>(
  variables: ScimListProvisionedIdentitiesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ScimListProvisionedIdentitiesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ScimListProvisionedIdentitiesError,
    TData
  >(
    queryKeyFn({
      path: "/scim/v2/organizations/{org}/Users",
      operationId: "scimListProvisionedIdentities",
      variables,
    }),
    () =>
      fetchScimListProvisionedIdentities({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ScimProvisionAndInviteUserPathParams = {
  org: string;
};

export type ScimProvisionAndInviteUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 400;
      payload: Responses.ScimBadRequest;
    }
  | {
      status: 403;
      payload: Responses.ScimForbidden;
    }
  | {
      status: 404;
      payload: Responses.ScimNotFound;
    }
  | {
      status: 409;
      payload: Responses.ScimConflict;
    }
  | {
      status: 500;
      payload: Responses.ScimInternalError;
    }
>;

export type ScimProvisionAndInviteUserRequestBody = {
  active?: boolean;
  /*
   * The name of the user, suitable for display to end-users
   *
   * @example Jon Doe
   */
  displayName?: string;
  /*
   * user emails
   *
   * @example {"primary":true,"value":"someone@example.com"}
   * @example {"primary":false,"value":"another@example.com"}
   * @minItems 1
   */
  emails: {
    primary?: boolean;
    type?: string;
    value: string;
  }[];
  externalId?: string;
  groups?: string[];
  /*
   * @example {"familyName":"User","givenName":"Jane"}
   */
  name: {
    familyName: string;
    formatted?: string;
    givenName: string;
  };
  schemas?: string[];
  /*
   * Configured by the admin. Could be an email, login, or username
   *
   * @example someone@example.com
   */
  userName: string;
};

export type ScimProvisionAndInviteUserVariables = {
  body: ScimProvisionAndInviteUserRequestBody;
  pathParams: ScimProvisionAndInviteUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Provision organization membership for a user, and send an activation email to the email address.
 */
export const fetchScimProvisionAndInviteUser = (
  variables: ScimProvisionAndInviteUserVariables
) =>
  githubFetch<
    undefined,
    ScimProvisionAndInviteUserError,
    ScimProvisionAndInviteUserRequestBody,
    {},
    {},
    ScimProvisionAndInviteUserPathParams
  >({
    url: "/scim/v2/organizations/{org}/Users",
    method: "post",
    ...variables,
  });

/**
 * Provision organization membership for a user, and send an activation email to the email address.
 */
export const useScimProvisionAndInviteUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ScimProvisionAndInviteUserError,
      ScimProvisionAndInviteUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ScimProvisionAndInviteUserError,
    ScimProvisionAndInviteUserVariables
  >(
    (variables: ScimProvisionAndInviteUserVariables) =>
      fetchScimProvisionAndInviteUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ScimDeleteUserFromOrgPathParams = {
  org: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type ScimDeleteUserFromOrgError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.ScimForbidden;
    }
  | {
      status: 404;
      payload: Responses.ScimNotFound;
    }
>;

export type ScimDeleteUserFromOrgVariables = {
  pathParams: ScimDeleteUserFromOrgPathParams;
} & GithubContext["fetcherOptions"];

export const fetchScimDeleteUserFromOrg = (
  variables: ScimDeleteUserFromOrgVariables
) =>
  githubFetch<
    undefined,
    ScimDeleteUserFromOrgError,
    undefined,
    {},
    {},
    ScimDeleteUserFromOrgPathParams
  >({
    url: "/scim/v2/organizations/{org}/Users/{scimUserId}",
    method: "delete",
    ...variables,
  });

export const useScimDeleteUserFromOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ScimDeleteUserFromOrgError,
      ScimDeleteUserFromOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ScimDeleteUserFromOrgError,
    ScimDeleteUserFromOrgVariables
  >(
    (variables: ScimDeleteUserFromOrgVariables) =>
      fetchScimDeleteUserFromOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ScimGetProvisioningInformationForUserPathParams = {
  org: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type ScimGetProvisioningInformationForUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.ScimForbidden;
    }
  | {
      status: 404;
      payload: Responses.ScimNotFound;
    }
>;

export type ScimGetProvisioningInformationForUserVariables = {
  pathParams: ScimGetProvisioningInformationForUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchScimGetProvisioningInformationForUser = (
  variables: ScimGetProvisioningInformationForUserVariables
) =>
  githubFetch<
    undefined,
    ScimGetProvisioningInformationForUserError,
    undefined,
    {},
    {},
    ScimGetProvisioningInformationForUserPathParams
  >({
    url: "/scim/v2/organizations/{org}/Users/{scimUserId}",
    method: "get",
    ...variables,
  });

export const useScimGetProvisioningInformationForUser = <TData = undefined>(
  variables: ScimGetProvisioningInformationForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ScimGetProvisioningInformationForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ScimGetProvisioningInformationForUserError,
    TData
  >(
    queryKeyFn({
      path: "/scim/v2/organizations/{org}/Users/{scim_user_id}",
      operationId: "scimGetProvisioningInformationForUser",
      variables,
    }),
    () =>
      fetchScimGetProvisioningInformationForUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ScimUpdateAttributeForUserPathParams = {
  org: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type ScimUpdateAttributeForUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 400;
      payload: Responses.ScimBadRequest;
    }
  | {
      status: 403;
      payload: Responses.ScimForbidden;
    }
  | {
      status: 404;
      payload: Responses.ScimNotFound;
    }
  | {
      status: 429;
      payload: Schemas.BasicError;
    }
>;

export type ScimUpdateAttributeForUserRequestBody = {
  /*
   * Set of operations to be performed
   *
   * @example {"op":"replace","value":{"active":false}}
   * @minItems 1
   */
  Operations: {
    op: "add" | "remove" | "replace";
    path?: string;
    value?:
      | {
          active?: boolean | null;
          externalId?: string | null;
          familyName?: string | null;
          givenName?: string | null;
          userName?: string | null;
        }
      | {
          primary?: boolean;
          value?: string;
        }[]
      | string;
  }[];
  schemas?: string[];
};

export type ScimUpdateAttributeForUserVariables = {
  body: ScimUpdateAttributeForUserRequestBody;
  pathParams: ScimUpdateAttributeForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
 *
 * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
 *
 * ```
 * {
 *   "Operations":[{
 *     "op":"replace",
 *     "value":{
 *       "active":false
 *     }
 *   }]
 * }
 * ```
 */
export const fetchScimUpdateAttributeForUser = (
  variables: ScimUpdateAttributeForUserVariables
) =>
  githubFetch<
    undefined,
    ScimUpdateAttributeForUserError,
    ScimUpdateAttributeForUserRequestBody,
    {},
    {},
    ScimUpdateAttributeForUserPathParams
  >({
    url: "/scim/v2/organizations/{org}/Users/{scimUserId}",
    method: "patch",
    ...variables,
  });

/**
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
 *
 * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
 *
 * ```
 * {
 *   "Operations":[{
 *     "op":"replace",
 *     "value":{
 *       "active":false
 *     }
 *   }]
 * }
 * ```
 */
export const useScimUpdateAttributeForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ScimUpdateAttributeForUserError,
      ScimUpdateAttributeForUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ScimUpdateAttributeForUserError,
    ScimUpdateAttributeForUserVariables
  >(
    (variables: ScimUpdateAttributeForUserVariables) =>
      fetchScimUpdateAttributeForUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ScimSetInformationForProvisionedUserPathParams = {
  org: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type ScimSetInformationForProvisionedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.ScimForbidden;
    }
  | {
      status: 404;
      payload: Responses.ScimNotFound;
    }
>;

export type ScimSetInformationForProvisionedUserRequestBody = {
  active?: boolean;
  /*
   * The name of the user, suitable for display to end-users
   *
   * @example Jon Doe
   */
  displayName?: string;
  /*
   * user emails
   *
   * @example {"primary":true,"value":"someone@example.com"}
   * @example {"primary":false,"value":"another@example.com"}
   * @minItems 1
   */
  emails: {
    primary?: boolean;
    type?: string;
    value: string;
  }[];
  externalId?: string;
  groups?: string[];
  /*
   * @example {"familyName":"User","givenName":"Jane"}
   */
  name: {
    familyName: string;
    formatted?: string;
    givenName: string;
  };
  schemas?: string[];
  /*
   * Configured by the admin. Could be an email, login, or username
   *
   * @example someone@example.com
   */
  userName: string;
};

export type ScimSetInformationForProvisionedUserVariables = {
  body: ScimSetInformationForProvisionedUserRequestBody;
  pathParams: ScimSetInformationForProvisionedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
 *
 * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
 */
export const fetchScimSetInformationForProvisionedUser = (
  variables: ScimSetInformationForProvisionedUserVariables
) =>
  githubFetch<
    undefined,
    ScimSetInformationForProvisionedUserError,
    ScimSetInformationForProvisionedUserRequestBody,
    {},
    {},
    ScimSetInformationForProvisionedUserPathParams
  >({
    url: "/scim/v2/organizations/{org}/Users/{scimUserId}",
    method: "put",
    ...variables,
  });

/**
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
 *
 * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
 */
export const useScimSetInformationForProvisionedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ScimSetInformationForProvisionedUserError,
      ScimSetInformationForProvisionedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ScimSetInformationForProvisionedUserError,
    ScimSetInformationForProvisionedUserVariables
  >(
    (variables: ScimSetInformationForProvisionedUserVariables) =>
      fetchScimSetInformationForProvisionedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type SearchCodeQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://help.github.com/articles/searching-code/)" for a detailed list of qualifiers.
   */
  q: string;
  /*
   * Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "indexed";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchCodeError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type SearchCodeResponse = {
  incomplete_results: boolean;
  items: Schemas.CodeSearchResultItem[];
  total_count: number;
};

export type SearchCodeVariables = {
  queryParams: SearchCodeQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
 *
 * `q=addClass+in:file+language:js+repo:jquery/jquery`
 *
 * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
 *
 * #### Considerations for code search
 *
 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
 * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 */
export const fetchSearchCode = (variables: SearchCodeVariables) =>
  githubFetch<
    SearchCodeResponse,
    SearchCodeError,
    undefined,
    {},
    SearchCodeQueryParams,
    {}
  >({ url: "/search/code", method: "get", ...variables });

/**
 * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
 *
 * `q=addClass+in:file+language:js+repo:jquery/jquery`
 *
 * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
 *
 * #### Considerations for code search
 *
 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
 * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 */
export const useSearchCode = <TData = SearchCodeResponse>(
  variables: SearchCodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchCodeResponse, SearchCodeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<SearchCodeResponse, SearchCodeError, TData>(
    queryKeyFn({ path: "/search/code", operationId: "searchCode", variables }),
    () => fetchSearchCode({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchCommitsQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://help.github.com/articles/searching-commits/)" for a detailed list of qualifiers.
   */
  q: string;
  /*
   * Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "author-date" | "committer-date";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchCommitsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type SearchCommitsResponse = {
  incomplete_results: boolean;
  items: Schemas.CommitSearchResultItem[];
  total_count: number;
};

export type SearchCommitsVariables = {
  queryParams: SearchCommitsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
 *
 * `q=repo:octocat/Spoon-Knife+css`
 */
export const fetchSearchCommits = (variables: SearchCommitsVariables) =>
  githubFetch<
    SearchCommitsResponse,
    SearchCommitsError,
    undefined,
    {},
    SearchCommitsQueryParams,
    {}
  >({ url: "/search/commits", method: "get", ...variables });

/**
 * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
 *
 * `q=repo:octocat/Spoon-Knife+css`
 */
export const useSearchCommits = <TData = SearchCommitsResponse>(
  variables: SearchCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchCommitsResponse,
      SearchCommitsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<SearchCommitsResponse, SearchCommitsError, TData>(
    queryKeyFn({
      path: "/search/commits",
      operationId: "searchCommits",
      variables,
    }),
    () => fetchSearchCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchIssuesAndPullRequestsQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)" for a detailed list of qualifiers.
   */
  q: string;
  /*
   * Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?:
    | "comments"
    | "reactions"
    | "reactions-+1"
    | "reactions--1"
    | "reactions-smile"
    | "reactions-thinking_face"
    | "reactions-heart"
    | "reactions-tada"
    | "interactions"
    | "created"
    | "updated";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchIssuesAndPullRequestsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type SearchIssuesAndPullRequestsResponse = {
  incomplete_results: boolean;
  items: Schemas.IssueSearchResultItem[];
  total_count: number;
};

export type SearchIssuesAndPullRequestsVariables = {
  queryParams: SearchIssuesAndPullRequestsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
 * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
 *
 * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
 *
 * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
 *
 * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
 */
export const fetchSearchIssuesAndPullRequests = (
  variables: SearchIssuesAndPullRequestsVariables
) =>
  githubFetch<
    SearchIssuesAndPullRequestsResponse,
    SearchIssuesAndPullRequestsError,
    undefined,
    {},
    SearchIssuesAndPullRequestsQueryParams,
    {}
  >({ url: "/search/issues", method: "get", ...variables });

/**
 * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
 * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
 *
 * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
 *
 * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
 *
 * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
 */
export const useSearchIssuesAndPullRequests = <
  TData = SearchIssuesAndPullRequestsResponse
>(
  variables: SearchIssuesAndPullRequestsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchIssuesAndPullRequestsResponse,
      SearchIssuesAndPullRequestsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    SearchIssuesAndPullRequestsResponse,
    SearchIssuesAndPullRequestsError,
    TData
  >(
    queryKeyFn({
      path: "/search/issues",
      operationId: "searchIssuesAndPullRequests",
      variables,
    }),
    () => fetchSearchIssuesAndPullRequests({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchLabelsQueryParams = {
  /*
   * The id of the repository.
   */
  repository_id: number;
  /*
   * The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
   */
  q: string;
  /*
   * Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "created" | "updated";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
};

export type SearchLabelsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type SearchLabelsResponse = {
  incomplete_results: boolean;
  items: Schemas.LabelSearchResultItem[];
  total_count: number;
};

export type SearchLabelsVariables = {
  queryParams: SearchLabelsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
 *
 * `q=bug+defect+enhancement&repository_id=64778136`
 *
 * The labels that best match the query appear first in the search results.
 */
export const fetchSearchLabels = (variables: SearchLabelsVariables) =>
  githubFetch<
    SearchLabelsResponse,
    SearchLabelsError,
    undefined,
    {},
    SearchLabelsQueryParams,
    {}
  >({ url: "/search/labels", method: "get", ...variables });

/**
 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
 *
 * `q=bug+defect+enhancement&repository_id=64778136`
 *
 * The labels that best match the query appear first in the search results.
 */
export const useSearchLabels = <TData = SearchLabelsResponse>(
  variables: SearchLabelsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchLabelsResponse, SearchLabelsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<SearchLabelsResponse, SearchLabelsError, TData>(
    queryKeyFn({
      path: "/search/labels",
      operationId: "searchLabels",
      variables,
    }),
    () => fetchSearchLabels({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchReposQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
   */
  q: string;
  /*
   * Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchReposError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type SearchReposResponse = {
  incomplete_results: boolean;
  items: Schemas.RepoSearchResultItem[];
  total_count: number;
};

export type SearchReposVariables = {
  queryParams: SearchReposQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
 *
 * `q=tetris+language:assembly&sort=stars&order=desc`
 *
 * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
 *
 * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:
 *
 * `q=topic:ruby+topic:rails`
 */
export const fetchSearchRepos = (variables: SearchReposVariables) =>
  githubFetch<
    SearchReposResponse,
    SearchReposError,
    undefined,
    {},
    SearchReposQueryParams,
    {}
  >({ url: "/search/repositories", method: "get", ...variables });

/**
 * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
 *
 * `q=tetris+language:assembly&sort=stars&order=desc`
 *
 * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
 *
 * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:
 *
 * `q=topic:ruby+topic:rails`
 */
export const useSearchRepos = <TData = SearchReposResponse>(
  variables: SearchReposVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchReposResponse, SearchReposError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<SearchReposResponse, SearchReposError, TData>(
    queryKeyFn({
      path: "/search/repositories",
      operationId: "searchRepos",
      variables,
    }),
    () => fetchSearchRepos({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchTopicsQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
   */
  q: string;
};

export type SearchTopicsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type SearchTopicsResponse = {
  incomplete_results: boolean;
  items: Schemas.TopicSearchResultItem[];
  total_count: number;
};

export type SearchTopicsVariables = {
  queryParams: SearchTopicsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
 *
 * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
 *
 * `q=ruby+is:featured`
 *
 * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
 */
export const fetchSearchTopics = (variables: SearchTopicsVariables) =>
  githubFetch<
    SearchTopicsResponse,
    SearchTopicsError,
    undefined,
    {},
    SearchTopicsQueryParams,
    {}
  >({ url: "/search/topics", method: "get", ...variables });

/**
 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
 *
 * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
 *
 * `q=ruby+is:featured`
 *
 * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
 */
export const useSearchTopics = <TData = SearchTopicsResponse>(
  variables: SearchTopicsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchTopicsResponse, SearchTopicsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<SearchTopicsResponse, SearchTopicsError, TData>(
    queryKeyFn({
      path: "/search/topics",
      operationId: "searchTopics",
      variables,
    }),
    () => fetchSearchTopics({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchUsersQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://help.github.com/articles/searching-users/)" for a detailed list of qualifiers.
   */
  q: string;
  /*
   * Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "followers" | "repositories" | "joined";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchUsersError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type SearchUsersResponse = {
  incomplete_results: boolean;
  items: Schemas.UserSearchResultItem[];
  total_count: number;
};

export type SearchUsersVariables = {
  queryParams: SearchUsersQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you're looking for a list of popular users, you might try this query:
 *
 * `q=tom+repos:%3E42+followers:%3E1000`
 *
 * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
 */
export const fetchSearchUsers = (variables: SearchUsersVariables) =>
  githubFetch<
    SearchUsersResponse,
    SearchUsersError,
    undefined,
    {},
    SearchUsersQueryParams,
    {}
  >({ url: "/search/users", method: "get", ...variables });

/**
 * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you're looking for a list of popular users, you might try this query:
 *
 * `q=tom+repos:%3E42+followers:%3E1000`
 *
 * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
 */
export const useSearchUsers = <TData = SearchUsersResponse>(
  variables: SearchUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchUsersResponse, SearchUsersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<SearchUsersResponse, SearchUsersError, TData>(
    queryKeyFn({
      path: "/search/users",
      operationId: "searchUsers",
      variables,
    }),
    () => fetchSearchUsers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsDeleteLegacyPathParams = {
  teamId: number;
};

export type TeamsDeleteLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsDeleteLegacyVariables = {
  pathParams: TeamsDeleteLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
 *
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 */
export const fetchTeamsDeleteLegacy = (variables: TeamsDeleteLegacyVariables) =>
  githubFetch<
    undefined,
    TeamsDeleteLegacyError,
    undefined,
    {},
    {},
    TeamsDeleteLegacyPathParams
  >({ url: "/teams/{teamId}", method: "delete", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
 *
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 */
export const useTeamsDeleteLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteLegacyError,
      TeamsDeleteLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteLegacyError,
    TeamsDeleteLegacyVariables
  >(
    (variables: TeamsDeleteLegacyVariables) =>
      fetchTeamsDeleteLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsGetLegacyPathParams = {
  teamId: number;
};

export type TeamsGetLegacyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type TeamsGetLegacyVariables = {
  pathParams: TeamsGetLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
 */
export const fetchTeamsGetLegacy = (variables: TeamsGetLegacyVariables) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsGetLegacyError,
    undefined,
    {},
    {},
    TeamsGetLegacyPathParams
  >({ url: "/teams/{teamId}", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
 */
export const useTeamsGetLegacy = <TData = Schemas.TeamFull>(
  variables: TeamsGetLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TeamFull, TeamsGetLegacyError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.TeamFull, TeamsGetLegacyError, TData>(
    queryKeyFn({
      path: "/teams/{team_id}",
      operationId: "teamsGetLegacy",
      variables,
    }),
    () => fetchTeamsGetLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateLegacyPathParams = {
  teamId: number;
};

export type TeamsUpdateLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsUpdateLegacyRequestBody = {
  /*
   * The description of the team.
   */
  description?: string;
  /*
   * The name of the team.
   */
  name: string;
  /*
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number | null;
  /*
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
   * \* `push` - team members can pull and push, but not administer newly-added repositories.
   * \* `admin` - team members can pull, push and administer newly-added repositories.
   *
   * @default pull
   */
  permission?: "pull" | "push" | "admin";
  /*
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
   * **For a non-nested team:**
   * \* `secret` - only visible to organization owners and members of this team.
   * \* `closed` - visible to all members of this organization.
   * **For a parent or child team:**
   * \* `closed` - visible to all members of this organization.
   */
  privacy?: "secret" | "closed";
};

export type TeamsUpdateLegacyVariables = {
  body: TeamsUpdateLegacyRequestBody;
  pathParams: TeamsUpdateLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
 *
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
 */
export const fetchTeamsUpdateLegacy = (variables: TeamsUpdateLegacyVariables) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsUpdateLegacyError,
    TeamsUpdateLegacyRequestBody,
    {},
    {},
    TeamsUpdateLegacyPathParams
  >({ url: "/teams/{teamId}", method: "patch", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
 *
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
 */
export const useTeamsUpdateLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamFull,
      TeamsUpdateLegacyError,
      TeamsUpdateLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamFull,
    TeamsUpdateLegacyError,
    TeamsUpdateLegacyVariables
  >(
    (variables: TeamsUpdateLegacyVariables) =>
      fetchTeamsUpdateLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsListDiscussionsLegacyPathParams = {
  teamId: number;
};

export type TeamsListDiscussionsLegacyQueryParams = {
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListDiscussionsLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListDiscussionsLegacyResponse = Schemas.TeamDiscussion[];

export type TeamsListDiscussionsLegacyVariables = {
  pathParams: TeamsListDiscussionsLegacyPathParams;
  queryParams?: TeamsListDiscussionsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
 *
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsListDiscussionsLegacy = (
  variables: TeamsListDiscussionsLegacyVariables
) =>
  githubFetch<
    TeamsListDiscussionsLegacyResponse,
    TeamsListDiscussionsLegacyError,
    undefined,
    {},
    TeamsListDiscussionsLegacyQueryParams,
    TeamsListDiscussionsLegacyPathParams
  >({ url: "/teams/{teamId}/discussions", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
 *
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsListDiscussionsLegacy = <
  TData = TeamsListDiscussionsLegacyResponse
>(
  variables: TeamsListDiscussionsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionsLegacyResponse,
      TeamsListDiscussionsLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionsLegacyResponse,
    TeamsListDiscussionsLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions",
      operationId: "teamsListDiscussionsLegacy",
      variables,
    }),
    () => fetchTeamsListDiscussionsLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateDiscussionLegacyPathParams = {
  teamId: number;
};

export type TeamsCreateDiscussionLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsCreateDiscussionLegacyRequestBody = {
  /*
   * The discussion post's body text.
   */
  body: string;
  /*
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   *
   * @default false
   */
  private?: boolean;
  /*
   * The discussion post's title.
   */
  title: string;
};

export type TeamsCreateDiscussionLegacyVariables = {
  body: TeamsCreateDiscussionLegacyRequestBody;
  pathParams: TeamsCreateDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
 *
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchTeamsCreateDiscussionLegacy = (
  variables: TeamsCreateDiscussionLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsCreateDiscussionLegacyError,
    TeamsCreateDiscussionLegacyRequestBody,
    {},
    {},
    TeamsCreateDiscussionLegacyPathParams
  >({ url: "/teams/{teamId}/discussions", method: "post", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
 *
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const useTeamsCreateDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      TeamsCreateDiscussionLegacyError,
      TeamsCreateDiscussionLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    TeamsCreateDiscussionLegacyError,
    TeamsCreateDiscussionLegacyVariables
  >(
    (variables: TeamsCreateDiscussionLegacyVariables) =>
      fetchTeamsCreateDiscussionLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsDeleteDiscussionLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type TeamsDeleteDiscussionLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsDeleteDiscussionLegacyVariables = {
  pathParams: TeamsDeleteDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
 *
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsDeleteDiscussionLegacy = (
  variables: TeamsDeleteDiscussionLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsDeleteDiscussionLegacyError,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
 *
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsDeleteDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteDiscussionLegacyError,
      TeamsDeleteDiscussionLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteDiscussionLegacyError,
    TeamsDeleteDiscussionLegacyVariables
  >(
    (variables: TeamsDeleteDiscussionLegacyVariables) =>
      fetchTeamsDeleteDiscussionLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsGetDiscussionLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type TeamsGetDiscussionLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsGetDiscussionLegacyVariables = {
  pathParams: TeamsGetDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
 *
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsGetDiscussionLegacy = (
  variables: TeamsGetDiscussionLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsGetDiscussionLegacyError,
    undefined,
    {},
    {},
    TeamsGetDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
 *
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsGetDiscussionLegacy = <TData = Schemas.TeamDiscussion>(
  variables: TeamsGetDiscussionLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussion,
      TeamsGetDiscussionLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussion,
    TeamsGetDiscussionLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions/{discussion_number}",
      operationId: "teamsGetDiscussionLegacy",
      variables,
    }),
    () => fetchTeamsGetDiscussionLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateDiscussionLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type TeamsUpdateDiscussionLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsUpdateDiscussionLegacyRequestBody = {
  /*
   * The discussion post's body text.
   */
  body?: string;
  /*
   * The discussion post's title.
   */
  title?: string;
};

export type TeamsUpdateDiscussionLegacyVariables = {
  body?: TeamsUpdateDiscussionLegacyRequestBody;
  pathParams: TeamsUpdateDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
 *
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsUpdateDiscussionLegacy = (
  variables: TeamsUpdateDiscussionLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsUpdateDiscussionLegacyError,
    TeamsUpdateDiscussionLegacyRequestBody,
    {},
    {},
    TeamsUpdateDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}",
    method: "patch",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
 *
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsUpdateDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      TeamsUpdateDiscussionLegacyError,
      TeamsUpdateDiscussionLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    TeamsUpdateDiscussionLegacyError,
    TeamsUpdateDiscussionLegacyVariables
  >(
    (variables: TeamsUpdateDiscussionLegacyVariables) =>
      fetchTeamsUpdateDiscussionLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsListDiscussionCommentsLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type TeamsListDiscussionCommentsLegacyQueryParams = {
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListDiscussionCommentsLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsListDiscussionCommentsLegacyResponse =
  Schemas.TeamDiscussionComment[];

export type TeamsListDiscussionCommentsLegacyVariables = {
  pathParams: TeamsListDiscussionCommentsLegacyPathParams;
  queryParams?: TeamsListDiscussionCommentsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
 *
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsListDiscussionCommentsLegacy = (
  variables: TeamsListDiscussionCommentsLegacyVariables
) =>
  githubFetch<
    TeamsListDiscussionCommentsLegacyResponse,
    TeamsListDiscussionCommentsLegacyError,
    undefined,
    {},
    TeamsListDiscussionCommentsLegacyQueryParams,
    TeamsListDiscussionCommentsLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
 *
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsListDiscussionCommentsLegacy = <
  TData = TeamsListDiscussionCommentsLegacyResponse
>(
  variables: TeamsListDiscussionCommentsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionCommentsLegacyResponse,
      TeamsListDiscussionCommentsLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionCommentsLegacyResponse,
    TeamsListDiscussionCommentsLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions/{discussion_number}/comments",
      operationId: "teamsListDiscussionCommentsLegacy",
      variables,
    }),
    () =>
      fetchTeamsListDiscussionCommentsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type TeamsCreateDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCreateDiscussionCommentLegacyRequestBody = {
  /*
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsCreateDiscussionCommentLegacyVariables = {
  body: TeamsCreateDiscussionCommentLegacyRequestBody;
  pathParams: TeamsCreateDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
 *
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchTeamsCreateDiscussionCommentLegacy = (
  variables: TeamsCreateDiscussionCommentLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsCreateDiscussionCommentLegacyError,
    TeamsCreateDiscussionCommentLegacyRequestBody,
    {},
    {},
    TeamsCreateDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments",
    method: "post",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
 *
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const useTeamsCreateDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      TeamsCreateDiscussionCommentLegacyError,
      TeamsCreateDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    TeamsCreateDiscussionCommentLegacyError,
    TeamsCreateDiscussionCommentLegacyVariables
  >(
    (variables: TeamsCreateDiscussionCommentLegacyVariables) =>
      fetchTeamsCreateDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsDeleteDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsDeleteDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsDeleteDiscussionCommentLegacyVariables = {
  pathParams: TeamsDeleteDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
 *
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsDeleteDiscussionCommentLegacy = (
  variables: TeamsDeleteDiscussionCommentLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsDeleteDiscussionCommentLegacyError,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
 *
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsDeleteDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteDiscussionCommentLegacyError,
      TeamsDeleteDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteDiscussionCommentLegacyError,
    TeamsDeleteDiscussionCommentLegacyVariables
  >(
    (variables: TeamsDeleteDiscussionCommentLegacyVariables) =>
      fetchTeamsDeleteDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsGetDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsGetDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsGetDiscussionCommentLegacyVariables = {
  pathParams: TeamsGetDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
 *
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsGetDiscussionCommentLegacy = (
  variables: TeamsGetDiscussionCommentLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsGetDiscussionCommentLegacyError,
    undefined,
    {},
    {},
    TeamsGetDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
 *
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsGetDiscussionCommentLegacy = <
  TData = Schemas.TeamDiscussionComment
>(
  variables: TeamsGetDiscussionCommentLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussionComment,
      TeamsGetDiscussionCommentLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussionComment,
    TeamsGetDiscussionCommentLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
      operationId: "teamsGetDiscussionCommentLegacy",
      variables,
    }),
    () =>
      fetchTeamsGetDiscussionCommentLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsUpdateDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsUpdateDiscussionCommentLegacyRequestBody = {
  /*
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsUpdateDiscussionCommentLegacyVariables = {
  body: TeamsUpdateDiscussionCommentLegacyRequestBody;
  pathParams: TeamsUpdateDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
 *
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsUpdateDiscussionCommentLegacy = (
  variables: TeamsUpdateDiscussionCommentLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsUpdateDiscussionCommentLegacyError,
    TeamsUpdateDiscussionCommentLegacyRequestBody,
    {},
    {},
    TeamsUpdateDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "patch",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
 *
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsUpdateDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      TeamsUpdateDiscussionCommentLegacyError,
      TeamsUpdateDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    TeamsUpdateDiscussionCommentLegacyError,
    TeamsUpdateDiscussionCommentLegacyVariables
  >(
    (variables: TeamsUpdateDiscussionCommentLegacyVariables) =>
      fetchTeamsUpdateDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsListForTeamDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
  commentNumber: number;
};

export type ReactionsListForTeamDiscussionCommentLegacyQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsListForTeamDiscussionCommentLegacyResponse =
  Schemas.Reaction[];

export type ReactionsListForTeamDiscussionCommentLegacyVariables = {
  pathParams: ReactionsListForTeamDiscussionCommentLegacyPathParams;
  queryParams?: ReactionsListForTeamDiscussionCommentLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsListForTeamDiscussionCommentLegacy = (
  variables: ReactionsListForTeamDiscussionCommentLegacyVariables
) =>
  githubFetch<
    ReactionsListForTeamDiscussionCommentLegacyResponse,
    ReactionsListForTeamDiscussionCommentLegacyError,
    undefined,
    {},
    ReactionsListForTeamDiscussionCommentLegacyQueryParams,
    ReactionsListForTeamDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsListForTeamDiscussionCommentLegacy = <
  TData = ReactionsListForTeamDiscussionCommentLegacyResponse
>(
  variables: ReactionsListForTeamDiscussionCommentLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionCommentLegacyResponse,
      ReactionsListForTeamDiscussionCommentLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionCommentLegacyResponse,
    ReactionsListForTeamDiscussionCommentLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      operationId: "reactionsListForTeamDiscussionCommentLegacy",
      variables,
    }),
    () =>
      fetchReactionsListForTeamDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForTeamDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
  commentNumber: number;
};

export type ReactionsCreateForTeamDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsCreateForTeamDiscussionCommentLegacyRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionCommentLegacyVariables = {
  body: ReactionsCreateForTeamDiscussionCommentLegacyRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
 *
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
 */
export const fetchReactionsCreateForTeamDiscussionCommentLegacy = (
  variables: ReactionsCreateForTeamDiscussionCommentLegacyVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionCommentLegacyError,
    ReactionsCreateForTeamDiscussionCommentLegacyRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "post",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
 *
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
 */
export const useReactionsCreateForTeamDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForTeamDiscussionCommentLegacyError,
      ReactionsCreateForTeamDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionCommentLegacyError,
    ReactionsCreateForTeamDiscussionCommentLegacyVariables
  >(
    (variables: ReactionsCreateForTeamDiscussionCommentLegacyVariables) =>
      fetchReactionsCreateForTeamDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsListForTeamDiscussionLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type ReactionsListForTeamDiscussionLegacyQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsListForTeamDiscussionLegacyResponse = Schemas.Reaction[];

export type ReactionsListForTeamDiscussionLegacyVariables = {
  pathParams: ReactionsListForTeamDiscussionLegacyPathParams;
  queryParams?: ReactionsListForTeamDiscussionLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsListForTeamDiscussionLegacy = (
  variables: ReactionsListForTeamDiscussionLegacyVariables
) =>
  githubFetch<
    ReactionsListForTeamDiscussionLegacyResponse,
    ReactionsListForTeamDiscussionLegacyError,
    undefined,
    {},
    ReactionsListForTeamDiscussionLegacyQueryParams,
    ReactionsListForTeamDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/reactions",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsListForTeamDiscussionLegacy = <
  TData = ReactionsListForTeamDiscussionLegacyResponse
>(
  variables: ReactionsListForTeamDiscussionLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionLegacyResponse,
      ReactionsListForTeamDiscussionLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionLegacyResponse,
    ReactionsListForTeamDiscussionLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions/{discussion_number}/reactions",
      operationId: "reactionsListForTeamDiscussionLegacy",
      variables,
    }),
    () =>
      fetchReactionsListForTeamDiscussionLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForTeamDiscussionLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type ReactionsCreateForTeamDiscussionLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsCreateForTeamDiscussionLegacyRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionLegacyVariables = {
  body: ReactionsCreateForTeamDiscussionLegacyRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
 *
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
 */
export const fetchReactionsCreateForTeamDiscussionLegacy = (
  variables: ReactionsCreateForTeamDiscussionLegacyVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionLegacyError,
    ReactionsCreateForTeamDiscussionLegacyRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/reactions",
    method: "post",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
 *
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
 */
export const useReactionsCreateForTeamDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForTeamDiscussionLegacyError,
      ReactionsCreateForTeamDiscussionLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionLegacyError,
    ReactionsCreateForTeamDiscussionLegacyVariables
  >(
    (variables: ReactionsCreateForTeamDiscussionLegacyVariables) =>
      fetchReactionsCreateForTeamDiscussionLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListPendingInvitationsLegacyPathParams = {
  teamId: number;
};

export type TeamsListPendingInvitationsLegacyQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListPendingInvitationsLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsListPendingInvitationsLegacyResponse =
  Schemas.OrganizationInvitation[];

export type TeamsListPendingInvitationsLegacyVariables = {
  pathParams: TeamsListPendingInvitationsLegacyPathParams;
  queryParams?: TeamsListPendingInvitationsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
 *
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const fetchTeamsListPendingInvitationsLegacy = (
  variables: TeamsListPendingInvitationsLegacyVariables
) =>
  githubFetch<
    TeamsListPendingInvitationsLegacyResponse,
    TeamsListPendingInvitationsLegacyError,
    undefined,
    {},
    TeamsListPendingInvitationsLegacyQueryParams,
    TeamsListPendingInvitationsLegacyPathParams
  >({ url: "/teams/{teamId}/invitations", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
 *
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const useTeamsListPendingInvitationsLegacy = <
  TData = TeamsListPendingInvitationsLegacyResponse
>(
  variables: TeamsListPendingInvitationsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListPendingInvitationsLegacyResponse,
      TeamsListPendingInvitationsLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListPendingInvitationsLegacyResponse,
    TeamsListPendingInvitationsLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/invitations",
      operationId: "teamsListPendingInvitationsLegacy",
      variables,
    }),
    () =>
      fetchTeamsListPendingInvitationsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsListMembersLegacyPathParams = {
  teamId: number;
};

export type TeamsListMembersLegacyQueryParams = {
  /*
   * Filters members returned by their role in the team. Can be one of:
   * \* `member` - normal members of the team.
   * \* `maintainer` - team maintainers.
   * \* `all` - all members of the team.
   *
   * @default all
   */
  role?: "member" | "maintainer" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListMembersLegacyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type TeamsListMembersLegacyResponse = Schemas.SimpleUser[];

export type TeamsListMembersLegacyVariables = {
  pathParams: TeamsListMembersLegacyPathParams;
  queryParams?: TeamsListMembersLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
 *
 * Team members will include the members of child teams.
 */
export const fetchTeamsListMembersLegacy = (
  variables: TeamsListMembersLegacyVariables
) =>
  githubFetch<
    TeamsListMembersLegacyResponse,
    TeamsListMembersLegacyError,
    undefined,
    {},
    TeamsListMembersLegacyQueryParams,
    TeamsListMembersLegacyPathParams
  >({ url: "/teams/{teamId}/members", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
 *
 * Team members will include the members of child teams.
 */
export const useTeamsListMembersLegacy = <
  TData = TeamsListMembersLegacyResponse
>(
  variables: TeamsListMembersLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListMembersLegacyResponse,
      TeamsListMembersLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListMembersLegacyResponse,
    TeamsListMembersLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/members",
      operationId: "teamsListMembersLegacy",
      variables,
    }),
    () => fetchTeamsListMembersLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveMemberLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsRemoveMemberLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveMemberLegacyVariables = {
  pathParams: TeamsRemoveMemberLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The "Remove team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const fetchTeamsRemoveMemberLegacy = (
  variables: TeamsRemoveMemberLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsRemoveMemberLegacyError,
    undefined,
    {},
    {},
    TeamsRemoveMemberLegacyPathParams
  >({
    url: "/teams/{teamId}/members/{username}",
    method: "delete",
    ...variables,
  });

/**
 * The "Remove team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const useTeamsRemoveMemberLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveMemberLegacyError,
      TeamsRemoveMemberLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveMemberLegacyError,
    TeamsRemoveMemberLegacyVariables
  >(
    (variables: TeamsRemoveMemberLegacyVariables) =>
      fetchTeamsRemoveMemberLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsGetMemberLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsGetMemberLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsGetMemberLegacyVariables = {
  pathParams: TeamsGetMemberLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The "Get team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const fetchTeamsGetMemberLegacy = (
  variables: TeamsGetMemberLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsGetMemberLegacyError,
    undefined,
    {},
    {},
    TeamsGetMemberLegacyPathParams
  >({ url: "/teams/{teamId}/members/{username}", method: "get", ...variables });

/**
 * The "Get team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const useTeamsGetMemberLegacy = <TData = undefined>(
  variables: TeamsGetMemberLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, TeamsGetMemberLegacyError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, TeamsGetMemberLegacyError, TData>(
    queryKeyFn({
      path: "/teams/{team_id}/members/{username}",
      operationId: "teamsGetMemberLegacy",
      variables,
    }),
    () => fetchTeamsGetMemberLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddMemberLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsAddMemberLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: {
        /*
         * @example "https://docs.github.com/rest"
         */
        documentation_url?: string;
        errors?: {
          code?: string;
          field?: string;
          resource?: string;
        }[];
        message?: string;
      };
    }
>;

export type TeamsAddMemberLegacyVariables = {
  pathParams: TeamsAddMemberLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The "Add team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchTeamsAddMemberLegacy = (
  variables: TeamsAddMemberLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsAddMemberLegacyError,
    undefined,
    {},
    {},
    TeamsAddMemberLegacyPathParams
  >({ url: "/teams/{teamId}/members/{username}", method: "put", ...variables });

/**
 * The "Add team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useTeamsAddMemberLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsAddMemberLegacyError,
      TeamsAddMemberLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsAddMemberLegacyError,
    TeamsAddMemberLegacyVariables
  >(
    (variables: TeamsAddMemberLegacyVariables) =>
      fetchTeamsAddMemberLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsRemoveMembershipForUserLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsRemoveMembershipForUserLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveMembershipForUserLegacyVariables = {
  pathParams: TeamsRemoveMembershipForUserLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const fetchTeamsRemoveMembershipForUserLegacy = (
  variables: TeamsRemoveMembershipForUserLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsRemoveMembershipForUserLegacyError,
    undefined,
    {},
    {},
    TeamsRemoveMembershipForUserLegacyPathParams
  >({
    url: "/teams/{teamId}/memberships/{username}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const useTeamsRemoveMembershipForUserLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveMembershipForUserLegacyError,
      TeamsRemoveMembershipForUserLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveMembershipForUserLegacyError,
    TeamsRemoveMembershipForUserLegacyVariables
  >(
    (variables: TeamsRemoveMembershipForUserLegacyVariables) =>
      fetchTeamsRemoveMembershipForUserLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsGetMembershipForUserLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsGetMembershipForUserLegacyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type TeamsGetMembershipForUserLegacyVariables = {
  pathParams: TeamsGetMembershipForUserLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
 *
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const fetchTeamsGetMembershipForUserLegacy = (
  variables: TeamsGetMembershipForUserLegacyVariables
) =>
  githubFetch<
    Schemas.TeamMembership,
    TeamsGetMembershipForUserLegacyError,
    undefined,
    {},
    {},
    TeamsGetMembershipForUserLegacyPathParams
  >({
    url: "/teams/{teamId}/memberships/{username}",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
 *
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const useTeamsGetMembershipForUserLegacy = <
  TData = Schemas.TeamMembership
>(
  variables: TeamsGetMembershipForUserLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamMembership,
      TeamsGetMembershipForUserLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamMembership,
    TeamsGetMembershipForUserLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/memberships/{username}",
      operationId: "teamsGetMembershipForUserLegacy",
      variables,
    }),
    () =>
      fetchTeamsGetMembershipForUserLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateMembershipForUserLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsAddOrUpdateMembershipForUserLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: {
        /*
         * @example "https://help.github.com/articles/github-and-trade-controls"
         */
        documentation_url?: string;
        errors?: {
          code?: string;
          field?: string;
          resource?: string;
        }[];
        message?: string;
      };
    }
>;

export type TeamsAddOrUpdateMembershipForUserLegacyRequestBody = {
  /*
   * The role that this user should have in the team. Can be one of:
   * \* `member` - a normal member of the team.
   * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
   *
   * @default member
   */
  role?: "member" | "maintainer";
};

export type TeamsAddOrUpdateMembershipForUserLegacyVariables = {
  body?: TeamsAddOrUpdateMembershipForUserLegacyRequestBody;
  pathParams: TeamsAddOrUpdateMembershipForUserLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 */
export const fetchTeamsAddOrUpdateMembershipForUserLegacy = (
  variables: TeamsAddOrUpdateMembershipForUserLegacyVariables
) =>
  githubFetch<
    Schemas.TeamMembership,
    TeamsAddOrUpdateMembershipForUserLegacyError,
    TeamsAddOrUpdateMembershipForUserLegacyRequestBody,
    {},
    {},
    TeamsAddOrUpdateMembershipForUserLegacyPathParams
  >({
    url: "/teams/{teamId}/memberships/{username}",
    method: "put",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 */
export const useTeamsAddOrUpdateMembershipForUserLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamMembership,
      TeamsAddOrUpdateMembershipForUserLegacyError,
      TeamsAddOrUpdateMembershipForUserLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamMembership,
    TeamsAddOrUpdateMembershipForUserLegacyError,
    TeamsAddOrUpdateMembershipForUserLegacyVariables
  >(
    (variables: TeamsAddOrUpdateMembershipForUserLegacyVariables) =>
      fetchTeamsAddOrUpdateMembershipForUserLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListProjectsLegacyPathParams = {
  teamId: number;
};

export type TeamsListProjectsLegacyQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListProjectsLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type TeamsListProjectsLegacyResponse = Schemas.TeamProject[];

export type TeamsListProjectsLegacyVariables = {
  pathParams: TeamsListProjectsLegacyPathParams;
  queryParams?: TeamsListProjectsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
 *
 * Lists the organization projects for a team.
 */
export const fetchTeamsListProjectsLegacy = (
  variables: TeamsListProjectsLegacyVariables
) =>
  githubFetch<
    TeamsListProjectsLegacyResponse,
    TeamsListProjectsLegacyError,
    undefined,
    {},
    TeamsListProjectsLegacyQueryParams,
    TeamsListProjectsLegacyPathParams
  >({ url: "/teams/{teamId}/projects", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
 *
 * Lists the organization projects for a team.
 */
export const useTeamsListProjectsLegacy = <
  TData = TeamsListProjectsLegacyResponse
>(
  variables: TeamsListProjectsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListProjectsLegacyResponse,
      TeamsListProjectsLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListProjectsLegacyResponse,
    TeamsListProjectsLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/projects",
      operationId: "teamsListProjectsLegacy",
      variables,
    }),
    () => fetchTeamsListProjectsLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveProjectLegacyPathParams = {
  teamId: number;
  projectId: number;
};

export type TeamsRemoveProjectLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsRemoveProjectLegacyVariables = {
  pathParams: TeamsRemoveProjectLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
 *
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
 */
export const fetchTeamsRemoveProjectLegacy = (
  variables: TeamsRemoveProjectLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsRemoveProjectLegacyError,
    undefined,
    {},
    {},
    TeamsRemoveProjectLegacyPathParams
  >({
    url: "/teams/{teamId}/projects/{projectId}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
 *
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
 */
export const useTeamsRemoveProjectLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveProjectLegacyError,
      TeamsRemoveProjectLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveProjectLegacyError,
    TeamsRemoveProjectLegacyVariables
  >(
    (variables: TeamsRemoveProjectLegacyVariables) =>
      fetchTeamsRemoveProjectLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsCheckPermissionsForProjectLegacyPathParams = {
  teamId: number;
  projectId: number;
};

export type TeamsCheckPermissionsForProjectLegacyError = Fetcher.ErrorWrapper<{
  status: 415;
  payload: Responses.PreviewHeaderMissing;
}>;

export type TeamsCheckPermissionsForProjectLegacyVariables = {
  pathParams: TeamsCheckPermissionsForProjectLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
 *
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 */
export const fetchTeamsCheckPermissionsForProjectLegacy = (
  variables: TeamsCheckPermissionsForProjectLegacyVariables
) =>
  githubFetch<
    Schemas.TeamProject,
    TeamsCheckPermissionsForProjectLegacyError,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForProjectLegacyPathParams
  >({
    url: "/teams/{teamId}/projects/{projectId}",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
 *
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 */
export const useTeamsCheckPermissionsForProjectLegacy = <
  TData = Schemas.TeamProject
>(
  variables: TeamsCheckPermissionsForProjectLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamProject,
      TeamsCheckPermissionsForProjectLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamProject,
    TeamsCheckPermissionsForProjectLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/projects/{project_id}",
      operationId: "teamsCheckPermissionsForProjectLegacy",
      variables,
    }),
    () =>
      fetchTeamsCheckPermissionsForProjectLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateProjectPermissionsLegacyPathParams = {
  teamId: number;
  projectId: number;
};

export type TeamsAddOrUpdateProjectPermissionsLegacyError =
  Fetcher.ErrorWrapper<
    | {
        status: 403;
        payload: {
          documentation_url?: string;
          message?: string;
        };
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 415;
        payload: Responses.PreviewHeaderMissing;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type TeamsAddOrUpdateProjectPermissionsLegacyRequestBody = {
  /*
   * The permission to grant to the team for this project. Can be one of:
   * \* `read` - team members can read, but not write to or administer this project.
   * \* `write` - team members can read and write, but not administer this project.
   * \* `admin` - team members can read, write and administer this project.
   * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  permission?: "read" | "write" | "admin";
};

export type TeamsAddOrUpdateProjectPermissionsLegacyVariables = {
  body?: TeamsAddOrUpdateProjectPermissionsLegacyRequestBody;
  pathParams: TeamsAddOrUpdateProjectPermissionsLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
 *
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 */
export const fetchTeamsAddOrUpdateProjectPermissionsLegacy = (
  variables: TeamsAddOrUpdateProjectPermissionsLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsAddOrUpdateProjectPermissionsLegacyError,
    TeamsAddOrUpdateProjectPermissionsLegacyRequestBody,
    {},
    {},
    TeamsAddOrUpdateProjectPermissionsLegacyPathParams
  >({
    url: "/teams/{teamId}/projects/{projectId}",
    method: "put",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
 *
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 */
export const useTeamsAddOrUpdateProjectPermissionsLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsAddOrUpdateProjectPermissionsLegacyError,
      TeamsAddOrUpdateProjectPermissionsLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsAddOrUpdateProjectPermissionsLegacyError,
    TeamsAddOrUpdateProjectPermissionsLegacyVariables
  >(
    (variables: TeamsAddOrUpdateProjectPermissionsLegacyVariables) =>
      fetchTeamsAddOrUpdateProjectPermissionsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListReposLegacyPathParams = {
  teamId: number;
};

export type TeamsListReposLegacyQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListReposLegacyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type TeamsListReposLegacyResponse = Schemas.MinimalRepository[];

export type TeamsListReposLegacyVariables = {
  pathParams: TeamsListReposLegacyPathParams;
  queryParams?: TeamsListReposLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
 */
export const fetchTeamsListReposLegacy = (
  variables: TeamsListReposLegacyVariables
) =>
  githubFetch<
    TeamsListReposLegacyResponse,
    TeamsListReposLegacyError,
    undefined,
    {},
    TeamsListReposLegacyQueryParams,
    TeamsListReposLegacyPathParams
  >({ url: "/teams/{teamId}/repos", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
 */
export const useTeamsListReposLegacy = <TData = TeamsListReposLegacyResponse>(
  variables: TeamsListReposLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListReposLegacyResponse,
      TeamsListReposLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListReposLegacyResponse,
    TeamsListReposLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/repos",
      operationId: "teamsListReposLegacy",
      variables,
    }),
    () => fetchTeamsListReposLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveRepoLegacyPathParams = {
  teamId: number;
  owner: string;
  repo: string;
};

export type TeamsRemoveRepoLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveRepoLegacyVariables = {
  pathParams: TeamsRemoveRepoLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
 *
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
 */
export const fetchTeamsRemoveRepoLegacy = (
  variables: TeamsRemoveRepoLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsRemoveRepoLegacyError,
    undefined,
    {},
    {},
    TeamsRemoveRepoLegacyPathParams
  >({
    url: "/teams/{teamId}/repos/{owner}/{repo}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
 *
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
 */
export const useTeamsRemoveRepoLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveRepoLegacyError,
      TeamsRemoveRepoLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveRepoLegacyError,
    TeamsRemoveRepoLegacyVariables
  >(
    (variables: TeamsRemoveRepoLegacyVariables) =>
      fetchTeamsRemoveRepoLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsCheckPermissionsForRepoLegacyPathParams = {
  teamId: number;
  owner: string;
  repo: string;
};

export type TeamsCheckPermissionsForRepoLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCheckPermissionsForRepoLegacyVariables = {
  pathParams: TeamsCheckPermissionsForRepoLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const fetchTeamsCheckPermissionsForRepoLegacy = (
  variables: TeamsCheckPermissionsForRepoLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsCheckPermissionsForRepoLegacyError,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForRepoLegacyPathParams
  >({
    url: "/teams/{teamId}/repos/{owner}/{repo}",
    method: "get",
    ...variables,
  });

/**
 * **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const useTeamsCheckPermissionsForRepoLegacy = <TData = undefined>(
  variables: TeamsCheckPermissionsForRepoLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      TeamsCheckPermissionsForRepoLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    TeamsCheckPermissionsForRepoLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/repos/{owner}/{repo}",
      operationId: "teamsCheckPermissionsForRepoLegacy",
      variables,
    }),
    () =>
      fetchTeamsCheckPermissionsForRepoLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateRepoPermissionsLegacyPathParams = {
  teamId: number;
  owner: string;
  repo: string;
};

export type TeamsAddOrUpdateRepoPermissionsLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsAddOrUpdateRepoPermissionsLegacyRequestBody = {
  /*
   * The permission to grant the team on this repository. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer this repository.
   * \* `push` - team members can pull and push, but not administer this repository.
   * \* `admin` - team members can pull, push and administer this repository.
   *
   * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
   */
  permission?: "pull" | "push" | "admin";
};

export type TeamsAddOrUpdateRepoPermissionsLegacyVariables = {
  body?: TeamsAddOrUpdateRepoPermissionsLegacyRequestBody;
  pathParams: TeamsAddOrUpdateRepoPermissionsLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
 *
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchTeamsAddOrUpdateRepoPermissionsLegacy = (
  variables: TeamsAddOrUpdateRepoPermissionsLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsAddOrUpdateRepoPermissionsLegacyError,
    TeamsAddOrUpdateRepoPermissionsLegacyRequestBody,
    {},
    {},
    TeamsAddOrUpdateRepoPermissionsLegacyPathParams
  >({
    url: "/teams/{teamId}/repos/{owner}/{repo}",
    method: "put",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
 *
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useTeamsAddOrUpdateRepoPermissionsLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsAddOrUpdateRepoPermissionsLegacyError,
      TeamsAddOrUpdateRepoPermissionsLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsAddOrUpdateRepoPermissionsLegacyError,
    TeamsAddOrUpdateRepoPermissionsLegacyVariables
  >(
    (variables: TeamsAddOrUpdateRepoPermissionsLegacyVariables) =>
      fetchTeamsAddOrUpdateRepoPermissionsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListIdpGroupsForLegacyPathParams = {
  teamId: number;
};

export type TeamsListIdpGroupsForLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type TeamsListIdpGroupsForLegacyVariables = {
  pathParams: TeamsListIdpGroupsForLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 */
export const fetchTeamsListIdpGroupsForLegacy = (
  variables: TeamsListIdpGroupsForLegacyVariables
) =>
  githubFetch<
    Schemas.GroupMapping,
    TeamsListIdpGroupsForLegacyError,
    undefined,
    {},
    {},
    TeamsListIdpGroupsForLegacyPathParams
  >({
    url: "/teams/{teamId}/team-sync/group-mappings",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 */
export const useTeamsListIdpGroupsForLegacy = <TData = Schemas.GroupMapping>(
  variables: TeamsListIdpGroupsForLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GroupMapping,
      TeamsListIdpGroupsForLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GroupMapping,
    TeamsListIdpGroupsForLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/team-sync/group-mappings",
      operationId: "teamsListIdpGroupsForLegacy",
      variables,
    }),
    () => fetchTeamsListIdpGroupsForLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateOrUpdateIdpGroupConnectionsLegacyPathParams = {
  teamId: number;
};

export type TeamsCreateOrUpdateIdpGroupConnectionsLegacyError =
  Fetcher.ErrorWrapper<
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestBody = {
  /*
   * The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
   */
  groups: {
    /*
     * @example "moar cheese pleese"
     */
    description?: string;
    /*
     * Description of the IdP group.
     */
    group_description: string;
    /*
     * ID of the IdP group.
     */
    group_id: string;
    /*
     * Name of the IdP group.
     */
    group_name: string;
    /*
     * @example "caceab43fc9ffa20081c"
     */
    id?: string;
    /*
     * @example "external-team-6c13e7288ef7"
     */
    name?: string;
  }[];
  /*
   * @example "I am not a timestamp"
   */
  synced_at?: string;
};

export type TeamsCreateOrUpdateIdpGroupConnectionsLegacyVariables = {
  body: TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestBody;
  pathParams: TeamsCreateOrUpdateIdpGroupConnectionsLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
 */
export const fetchTeamsCreateOrUpdateIdpGroupConnectionsLegacy = (
  variables: TeamsCreateOrUpdateIdpGroupConnectionsLegacyVariables
) =>
  githubFetch<
    Schemas.GroupMapping,
    TeamsCreateOrUpdateIdpGroupConnectionsLegacyError,
    TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestBody,
    {},
    {},
    TeamsCreateOrUpdateIdpGroupConnectionsLegacyPathParams
  >({
    url: "/teams/{teamId}/team-sync/group-mappings",
    method: "patch",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
 */
export const useTeamsCreateOrUpdateIdpGroupConnectionsLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GroupMapping,
      TeamsCreateOrUpdateIdpGroupConnectionsLegacyError,
      TeamsCreateOrUpdateIdpGroupConnectionsLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GroupMapping,
    TeamsCreateOrUpdateIdpGroupConnectionsLegacyError,
    TeamsCreateOrUpdateIdpGroupConnectionsLegacyVariables
  >(
    (variables: TeamsCreateOrUpdateIdpGroupConnectionsLegacyVariables) =>
      fetchTeamsCreateOrUpdateIdpGroupConnectionsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListChildLegacyPathParams = {
  teamId: number;
};

export type TeamsListChildLegacyQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListChildLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsListChildLegacyResponse = Schemas.Team[];

export type TeamsListChildLegacyVariables = {
  pathParams: TeamsListChildLegacyPathParams;
  queryParams?: TeamsListChildLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
 */
export const fetchTeamsListChildLegacy = (
  variables: TeamsListChildLegacyVariables
) =>
  githubFetch<
    TeamsListChildLegacyResponse,
    TeamsListChildLegacyError,
    undefined,
    {},
    TeamsListChildLegacyQueryParams,
    TeamsListChildLegacyPathParams
  >({ url: "/teams/{teamId}/teams", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
 */
export const useTeamsListChildLegacy = <TData = TeamsListChildLegacyResponse>(
  variables: TeamsListChildLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListChildLegacyResponse,
      TeamsListChildLegacyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListChildLegacyResponse,
    TeamsListChildLegacyError,
    TData
  >(
    queryKeyFn({
      path: "/teams/{team_id}/teams",
      operationId: "teamsListChildLegacy",
      variables,
    }),
    () => fetchTeamsListChildLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersGetAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type UsersGetAuthenticatedVariables = GithubContext["fetcherOptions"];

/**
 * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
 *
 * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
 */
export const fetchUsersGetAuthenticated = (
  variables: UsersGetAuthenticatedVariables
) =>
  githubFetch<
    Schemas.PrivateUser | Schemas.PublicUser,
    UsersGetAuthenticatedError,
    undefined,
    {},
    {},
    {}
  >({ url: "/user", method: "get", ...variables });

/**
 * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
 *
 * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
 */
export const useUsersGetAuthenticated = <
  TData = Schemas.PrivateUser | Schemas.PublicUser
>(
  variables: UsersGetAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PrivateUser | Schemas.PublicUser,
      UsersGetAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PrivateUser | Schemas.PublicUser,
    UsersGetAuthenticatedError,
    TData
  >(
    queryKeyFn({
      path: "/user",
      operationId: "usersGetAuthenticated",
      variables,
    }),
    () => fetchUsersGetAuthenticated({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersUpdateAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersUpdateAuthenticatedRequestBody = {
  /*
   * The new short biography of the user.
   */
  bio?: string;
  /*
   * The new blog URL of the user.
   *
   * @example blog.example.com
   */
  blog?: string;
  /*
   * The new company of the user.
   *
   * @example Acme corporation
   */
  company?: string;
  /*
   * The publicly visible email address of the user.
   *
   * @example omar@example.com
   */
  email?: string;
  /*
   * The new hiring availability of the user.
   */
  hireable?: boolean;
  /*
   * The new location of the user.
   *
   * @example Berlin, Germany
   */
  location?: string;
  /*
   * The new name of the user.
   *
   * @example Omar Jahandar
   */
  name?: string;
  /*
   * The new Twitter username of the user.
   *
   * @example therealomarj
   */
  twitter_username?: string | null;
};

export type UsersUpdateAuthenticatedVariables = {
  body?: UsersUpdateAuthenticatedRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
 */
export const fetchUsersUpdateAuthenticated = (
  variables: UsersUpdateAuthenticatedVariables
) =>
  githubFetch<
    Schemas.PrivateUser,
    UsersUpdateAuthenticatedError,
    UsersUpdateAuthenticatedRequestBody,
    {},
    {},
    {}
  >({ url: "/user", method: "patch", ...variables });

/**
 * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
 */
export const useUsersUpdateAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PrivateUser,
      UsersUpdateAuthenticatedError,
      UsersUpdateAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PrivateUser,
    UsersUpdateAuthenticatedError,
    UsersUpdateAuthenticatedVariables
  >(
    (variables: UsersUpdateAuthenticatedVariables) =>
      fetchUsersUpdateAuthenticated({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersListBlockedByAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
>;

export type UsersListBlockedByAuthenticatedResponse = Schemas.SimpleUser[];

export type UsersListBlockedByAuthenticatedVariables =
  GithubContext["fetcherOptions"];

/**
 * List the users you've blocked on your personal account.
 */
export const fetchUsersListBlockedByAuthenticated = (
  variables: UsersListBlockedByAuthenticatedVariables
) =>
  githubFetch<
    UsersListBlockedByAuthenticatedResponse,
    UsersListBlockedByAuthenticatedError,
    undefined,
    {},
    {},
    {}
  >({ url: "/user/blocks", method: "get", ...variables });

/**
 * List the users you've blocked on your personal account.
 */
export const useUsersListBlockedByAuthenticated = <
  TData = UsersListBlockedByAuthenticatedResponse
>(
  variables: UsersListBlockedByAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListBlockedByAuthenticatedResponse,
      UsersListBlockedByAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListBlockedByAuthenticatedResponse,
    UsersListBlockedByAuthenticatedError,
    TData
  >(
    queryKeyFn({
      path: "/user/blocks",
      operationId: "usersListBlockedByAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListBlockedByAuthenticated({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersUnblockPathParams = {
  username: string;
};

export type UsersUnblockError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersUnblockVariables = {
  pathParams: UsersUnblockPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersUnblock = (variables: UsersUnblockVariables) =>
  githubFetch<
    undefined,
    UsersUnblockError,
    undefined,
    {},
    {},
    UsersUnblockPathParams
  >({ url: "/user/blocks/{username}", method: "delete", ...variables });

export const useUsersUnblock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersUnblockError,
      UsersUnblockVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersUnblockError,
    UsersUnblockVariables
  >(
    (variables: UsersUnblockVariables) =>
      fetchUsersUnblock({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersCheckBlockedPathParams = {
  username: string;
};

export type UsersCheckBlockedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Schemas.BasicError;
    }
>;

export type UsersCheckBlockedVariables = {
  pathParams: UsersCheckBlockedPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersCheckBlocked = (variables: UsersCheckBlockedVariables) =>
  githubFetch<
    undefined,
    UsersCheckBlockedError,
    undefined,
    {},
    {},
    UsersCheckBlockedPathParams
  >({ url: "/user/blocks/{username}", method: "get", ...variables });

export const useUsersCheckBlocked = <TData = undefined>(
  variables: UsersCheckBlockedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, UsersCheckBlockedError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, UsersCheckBlockedError, TData>(
    queryKeyFn({
      path: "/user/blocks/{username}",
      operationId: "usersCheckBlocked",
      variables,
    }),
    () => fetchUsersCheckBlocked({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersBlockPathParams = {
  username: string;
};

export type UsersBlockError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersBlockVariables = {
  pathParams: UsersBlockPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersBlock = (variables: UsersBlockVariables) =>
  githubFetch<
    undefined,
    UsersBlockError,
    undefined,
    {},
    {},
    UsersBlockPathParams
  >({ url: "/user/blocks/{username}", method: "put", ...variables });

export const useUsersBlock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersBlockError,
      UsersBlockVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersBlockError,
    UsersBlockVariables
  >(
    (variables: UsersBlockVariables) =>
      fetchUsersBlock({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersSetPrimaryEmailVisibilityForAuthenticatedError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type UsersSetPrimaryEmailVisibilityForAuthenticatedResponse =
  Schemas.Email[];

export type UsersSetPrimaryEmailVisibilityForAuthenticatedRequestBody = {
  /*
   * An email address associated with the GitHub user account to manage.
   *
   * @example org@example.com
   */
  email: string;
  /*
   * Denotes whether an email is publically visible.
   */
  visibility: "public" | "private";
};

export type UsersSetPrimaryEmailVisibilityForAuthenticatedVariables = {
  body: UsersSetPrimaryEmailVisibilityForAuthenticatedRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Sets the visibility for your primary email addresses.
 */
export const fetchUsersSetPrimaryEmailVisibilityForAuthenticated = (
  variables: UsersSetPrimaryEmailVisibilityForAuthenticatedVariables
) =>
  githubFetch<
    UsersSetPrimaryEmailVisibilityForAuthenticatedResponse,
    UsersSetPrimaryEmailVisibilityForAuthenticatedError,
    UsersSetPrimaryEmailVisibilityForAuthenticatedRequestBody,
    {},
    {},
    {}
  >({ url: "/user/email/visibility", method: "patch", ...variables });

/**
 * Sets the visibility for your primary email addresses.
 */
export const useUsersSetPrimaryEmailVisibilityForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UsersSetPrimaryEmailVisibilityForAuthenticatedResponse,
      UsersSetPrimaryEmailVisibilityForAuthenticatedError,
      UsersSetPrimaryEmailVisibilityForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    UsersSetPrimaryEmailVisibilityForAuthenticatedResponse,
    UsersSetPrimaryEmailVisibilityForAuthenticatedError,
    UsersSetPrimaryEmailVisibilityForAuthenticatedVariables
  >(
    (variables: UsersSetPrimaryEmailVisibilityForAuthenticatedVariables) =>
      fetchUsersSetPrimaryEmailVisibilityForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersDeleteEmailForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersDeleteEmailForAuthenticatedVariables = {
  body?:
    | {
        /*
         * Email addresses associated with the GitHub user account.
         */
        emails: string[];
      }
    | string[]
    | string;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint is accessible with the `user` scope.
 */
export const fetchUsersDeleteEmailForAuthenticated = (
  variables: UsersDeleteEmailForAuthenticatedVariables
) =>
  githubFetch<
    undefined,
    UsersDeleteEmailForAuthenticatedError,
    | {
        /*
         * Email addresses associated with the GitHub user account.
         */
        emails: string[];
      }
    | string[]
    | string,
    {},
    {},
    {}
  >({ url: "/user/emails", method: "delete", ...variables });

/**
 * This endpoint is accessible with the `user` scope.
 */
export const useUsersDeleteEmailForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersDeleteEmailForAuthenticatedError,
      UsersDeleteEmailForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersDeleteEmailForAuthenticatedError,
    UsersDeleteEmailForAuthenticatedVariables
  >(
    (variables: UsersDeleteEmailForAuthenticatedVariables) =>
      fetchUsersDeleteEmailForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersListEmailsForAuthenticatedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListEmailsForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersListEmailsForAuthenticatedResponse = Schemas.Email[];

export type UsersListEmailsForAuthenticatedVariables = {
  queryParams?: UsersListEmailsForAuthenticatedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
 */
export const fetchUsersListEmailsForAuthenticated = (
  variables: UsersListEmailsForAuthenticatedVariables
) =>
  githubFetch<
    UsersListEmailsForAuthenticatedResponse,
    UsersListEmailsForAuthenticatedError,
    undefined,
    {},
    UsersListEmailsForAuthenticatedQueryParams,
    {}
  >({ url: "/user/emails", method: "get", ...variables });

/**
 * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
 */
export const useUsersListEmailsForAuthenticated = <
  TData = UsersListEmailsForAuthenticatedResponse
>(
  variables: UsersListEmailsForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListEmailsForAuthenticatedResponse,
      UsersListEmailsForAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListEmailsForAuthenticatedResponse,
    UsersListEmailsForAuthenticatedError,
    TData
  >(
    queryKeyFn({
      path: "/user/emails",
      operationId: "usersListEmailsForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListEmailsForAuthenticated({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersAddEmailForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersAddEmailForAuthenticatedResponse = Schemas.Email[];

export type UsersAddEmailForAuthenticatedVariables = {
  body?:
    | {
        /*
         * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
         */
        emails: string[];
      }
    | string[]
    | string;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint is accessible with the `user` scope.
 */
export const fetchUsersAddEmailForAuthenticated = (
  variables: UsersAddEmailForAuthenticatedVariables
) =>
  githubFetch<
    UsersAddEmailForAuthenticatedResponse,
    UsersAddEmailForAuthenticatedError,
    | {
        /*
         * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
         */
        emails: string[];
      }
    | string[]
    | string,
    {},
    {},
    {}
  >({ url: "/user/emails", method: "post", ...variables });

/**
 * This endpoint is accessible with the `user` scope.
 */
export const useUsersAddEmailForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UsersAddEmailForAuthenticatedResponse,
      UsersAddEmailForAuthenticatedError,
      UsersAddEmailForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    UsersAddEmailForAuthenticatedResponse,
    UsersAddEmailForAuthenticatedError,
    UsersAddEmailForAuthenticatedVariables
  >(
    (variables: UsersAddEmailForAuthenticatedVariables) =>
      fetchUsersAddEmailForAuthenticated({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersListFollowersForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowersForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type UsersListFollowersForAuthenticatedUserResponse =
  Schemas.SimpleUser[];

export type UsersListFollowersForAuthenticatedUserVariables = {
  queryParams?: UsersListFollowersForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people following the authenticated user.
 */
export const fetchUsersListFollowersForAuthenticatedUser = (
  variables: UsersListFollowersForAuthenticatedUserVariables
) =>
  githubFetch<
    UsersListFollowersForAuthenticatedUserResponse,
    UsersListFollowersForAuthenticatedUserError,
    undefined,
    {},
    UsersListFollowersForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/followers", method: "get", ...variables });

/**
 * Lists the people following the authenticated user.
 */
export const useUsersListFollowersForAuthenticatedUser = <
  TData = UsersListFollowersForAuthenticatedUserResponse
>(
  variables: UsersListFollowersForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowersForAuthenticatedUserResponse,
      UsersListFollowersForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowersForAuthenticatedUserResponse,
    UsersListFollowersForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/followers",
      operationId: "usersListFollowersForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchUsersListFollowersForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListFollowedByAuthenticatedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowedByAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type UsersListFollowedByAuthenticatedResponse = Schemas.SimpleUser[];

export type UsersListFollowedByAuthenticatedVariables = {
  queryParams?: UsersListFollowedByAuthenticatedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people who the authenticated user follows.
 */
export const fetchUsersListFollowedByAuthenticated = (
  variables: UsersListFollowedByAuthenticatedVariables
) =>
  githubFetch<
    UsersListFollowedByAuthenticatedResponse,
    UsersListFollowedByAuthenticatedError,
    undefined,
    {},
    UsersListFollowedByAuthenticatedQueryParams,
    {}
  >({ url: "/user/following", method: "get", ...variables });

/**
 * Lists the people who the authenticated user follows.
 */
export const useUsersListFollowedByAuthenticated = <
  TData = UsersListFollowedByAuthenticatedResponse
>(
  variables: UsersListFollowedByAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowedByAuthenticatedResponse,
      UsersListFollowedByAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowedByAuthenticatedResponse,
    UsersListFollowedByAuthenticatedError,
    TData
  >(
    queryKeyFn({
      path: "/user/following",
      operationId: "usersListFollowedByAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListFollowedByAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersUnfollowPathParams = {
  username: string;
};

export type UsersUnfollowError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersUnfollowVariables = {
  pathParams: UsersUnfollowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const fetchUsersUnfollow = (variables: UsersUnfollowVariables) =>
  githubFetch<
    undefined,
    UsersUnfollowError,
    undefined,
    {},
    {},
    UsersUnfollowPathParams
  >({ url: "/user/following/{username}", method: "delete", ...variables });

/**
 * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const useUsersUnfollow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersUnfollowError,
      UsersUnfollowVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersUnfollowError,
    UsersUnfollowVariables
  >(
    (variables: UsersUnfollowVariables) =>
      fetchUsersUnfollow({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersCheckPersonIsFollowedByAuthenticatedPathParams = {
  username: string;
};

export type UsersCheckPersonIsFollowedByAuthenticatedError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Schemas.BasicError;
      }
  >;

export type UsersCheckPersonIsFollowedByAuthenticatedVariables = {
  pathParams: UsersCheckPersonIsFollowedByAuthenticatedPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersCheckPersonIsFollowedByAuthenticated = (
  variables: UsersCheckPersonIsFollowedByAuthenticatedVariables
) =>
  githubFetch<
    undefined,
    UsersCheckPersonIsFollowedByAuthenticatedError,
    undefined,
    {},
    {},
    UsersCheckPersonIsFollowedByAuthenticatedPathParams
  >({ url: "/user/following/{username}", method: "get", ...variables });

export const useUsersCheckPersonIsFollowedByAuthenticated = <TData = undefined>(
  variables: UsersCheckPersonIsFollowedByAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      UsersCheckPersonIsFollowedByAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    UsersCheckPersonIsFollowedByAuthenticatedError,
    TData
  >(
    queryKeyFn({
      path: "/user/following/{username}",
      operationId: "usersCheckPersonIsFollowedByAuthenticated",
      variables,
    }),
    () =>
      fetchUsersCheckPersonIsFollowedByAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersFollowPathParams = {
  username: string;
};

export type UsersFollowError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersFollowVariables = {
  pathParams: UsersFollowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const fetchUsersFollow = (variables: UsersFollowVariables) =>
  githubFetch<
    undefined,
    UsersFollowError,
    undefined,
    {},
    {},
    UsersFollowPathParams
  >({ url: "/user/following/{username}", method: "put", ...variables });

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const useUsersFollow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersFollowError,
      UsersFollowVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersFollowError,
    UsersFollowVariables
  >(
    (variables: UsersFollowVariables) =>
      fetchUsersFollow({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersListGpgKeysForAuthenticatedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListGpgKeysForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersListGpgKeysForAuthenticatedResponse = Schemas.GpgKey[];

export type UsersListGpgKeysForAuthenticatedVariables = {
  queryParams?: UsersListGpgKeysForAuthenticatedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersListGpgKeysForAuthenticated = (
  variables: UsersListGpgKeysForAuthenticatedVariables
) =>
  githubFetch<
    UsersListGpgKeysForAuthenticatedResponse,
    UsersListGpgKeysForAuthenticatedError,
    undefined,
    {},
    UsersListGpgKeysForAuthenticatedQueryParams,
    {}
  >({ url: "/user/gpg_keys", method: "get", ...variables });

/**
 * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersListGpgKeysForAuthenticated = <
  TData = UsersListGpgKeysForAuthenticatedResponse
>(
  variables: UsersListGpgKeysForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListGpgKeysForAuthenticatedResponse,
      UsersListGpgKeysForAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListGpgKeysForAuthenticatedResponse,
    UsersListGpgKeysForAuthenticatedError,
    TData
  >(
    queryKeyFn({
      path: "/user/gpg_keys",
      operationId: "usersListGpgKeysForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListGpgKeysForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersCreateGpgKeyForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersCreateGpgKeyForAuthenticatedRequestBody = {
  /*
   * A GPG key in ASCII-armored format.
   */
  armored_public_key: string;
};

export type UsersCreateGpgKeyForAuthenticatedVariables = {
  body: UsersCreateGpgKeyForAuthenticatedRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersCreateGpgKeyForAuthenticated = (
  variables: UsersCreateGpgKeyForAuthenticatedVariables
) =>
  githubFetch<
    Schemas.GpgKey,
    UsersCreateGpgKeyForAuthenticatedError,
    UsersCreateGpgKeyForAuthenticatedRequestBody,
    {},
    {},
    {}
  >({ url: "/user/gpg_keys", method: "post", ...variables });

/**
 * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersCreateGpgKeyForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GpgKey,
      UsersCreateGpgKeyForAuthenticatedError,
      UsersCreateGpgKeyForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GpgKey,
    UsersCreateGpgKeyForAuthenticatedError,
    UsersCreateGpgKeyForAuthenticatedVariables
  >(
    (variables: UsersCreateGpgKeyForAuthenticatedVariables) =>
      fetchUsersCreateGpgKeyForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersDeleteGpgKeyForAuthenticatedPathParams = {
  /*
   * gpg_key_id parameter
   */
  gpgKeyId: number;
};

export type UsersDeleteGpgKeyForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersDeleteGpgKeyForAuthenticatedVariables = {
  pathParams: UsersDeleteGpgKeyForAuthenticatedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersDeleteGpgKeyForAuthenticated = (
  variables: UsersDeleteGpgKeyForAuthenticatedVariables
) =>
  githubFetch<
    undefined,
    UsersDeleteGpgKeyForAuthenticatedError,
    undefined,
    {},
    {},
    UsersDeleteGpgKeyForAuthenticatedPathParams
  >({ url: "/user/gpg_keys/{gpgKeyId}", method: "delete", ...variables });

/**
 * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersDeleteGpgKeyForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersDeleteGpgKeyForAuthenticatedError,
      UsersDeleteGpgKeyForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersDeleteGpgKeyForAuthenticatedError,
    UsersDeleteGpgKeyForAuthenticatedVariables
  >(
    (variables: UsersDeleteGpgKeyForAuthenticatedVariables) =>
      fetchUsersDeleteGpgKeyForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersGetGpgKeyForAuthenticatedPathParams = {
  /*
   * gpg_key_id parameter
   */
  gpgKeyId: number;
};

export type UsersGetGpgKeyForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersGetGpgKeyForAuthenticatedVariables = {
  pathParams: UsersGetGpgKeyForAuthenticatedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersGetGpgKeyForAuthenticated = (
  variables: UsersGetGpgKeyForAuthenticatedVariables
) =>
  githubFetch<
    Schemas.GpgKey,
    UsersGetGpgKeyForAuthenticatedError,
    undefined,
    {},
    {},
    UsersGetGpgKeyForAuthenticatedPathParams
  >({ url: "/user/gpg_keys/{gpgKeyId}", method: "get", ...variables });

/**
 * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersGetGpgKeyForAuthenticated = <TData = Schemas.GpgKey>(
  variables: UsersGetGpgKeyForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GpgKey,
      UsersGetGpgKeyForAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GpgKey,
    UsersGetGpgKeyForAuthenticatedError,
    TData
  >(
    queryKeyFn({
      path: "/user/gpg_keys/{gpg_key_id}",
      operationId: "usersGetGpgKeyForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersGetGpgKeyForAuthenticated({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListInstallationsForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListInstallationsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 415;
        payload: Responses.PreviewHeaderMissing;
      }
  >;

export type AppsListInstallationsForAuthenticatedUserResponse = {
  installations: Schemas.Installation[];
  total_count: number;
};

export type AppsListInstallationsForAuthenticatedUserVariables = {
  queryParams?: AppsListInstallationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the permissions for the installation under the `permissions` key.
 */
export const fetchAppsListInstallationsForAuthenticatedUser = (
  variables: AppsListInstallationsForAuthenticatedUserVariables
) =>
  githubFetch<
    AppsListInstallationsForAuthenticatedUserResponse,
    AppsListInstallationsForAuthenticatedUserError,
    undefined,
    {},
    AppsListInstallationsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/installations", method: "get", ...variables });

/**
 * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the permissions for the installation under the `permissions` key.
 */
export const useAppsListInstallationsForAuthenticatedUser = <
  TData = AppsListInstallationsForAuthenticatedUserResponse
>(
  variables: AppsListInstallationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationsForAuthenticatedUserResponse,
      AppsListInstallationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListInstallationsForAuthenticatedUserResponse,
    AppsListInstallationsForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/installations",
      operationId: "appsListInstallationsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchAppsListInstallationsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListInstallationReposForAuthenticatedUserPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsListInstallationReposForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListInstallationReposForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type AppsListInstallationReposForAuthenticatedUserResponse = {
  repositories: Schemas.Repository[];
  repository_selection?: string;
  total_count: number;
};

export type AppsListInstallationReposForAuthenticatedUserVariables = {
  pathParams: AppsListInstallationReposForAuthenticatedUserPathParams;
  queryParams?: AppsListInstallationReposForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The access the user has to each repository is included in the hash under the `permissions` key.
 */
export const fetchAppsListInstallationReposForAuthenticatedUser = (
  variables: AppsListInstallationReposForAuthenticatedUserVariables
) =>
  githubFetch<
    AppsListInstallationReposForAuthenticatedUserResponse,
    AppsListInstallationReposForAuthenticatedUserError,
    undefined,
    {},
    AppsListInstallationReposForAuthenticatedUserQueryParams,
    AppsListInstallationReposForAuthenticatedUserPathParams
  >({
    url: "/user/installations/{installationId}/repositories",
    method: "get",
    ...variables,
  });

/**
 * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The access the user has to each repository is included in the hash under the `permissions` key.
 */
export const useAppsListInstallationReposForAuthenticatedUser = <
  TData = AppsListInstallationReposForAuthenticatedUserResponse
>(
  variables: AppsListInstallationReposForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationReposForAuthenticatedUserResponse,
      AppsListInstallationReposForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListInstallationReposForAuthenticatedUserResponse,
    AppsListInstallationReposForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/installations/{installation_id}/repositories",
      operationId: "appsListInstallationReposForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchAppsListInstallationReposForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsRemoveRepoFromInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
  repositoryId: number;
};

export type AppsRemoveRepoFromInstallationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type AppsRemoveRepoFromInstallationVariables = {
  pathParams: AppsRemoveRepoFromInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const fetchAppsRemoveRepoFromInstallation = (
  variables: AppsRemoveRepoFromInstallationVariables
) =>
  githubFetch<
    undefined,
    AppsRemoveRepoFromInstallationError,
    undefined,
    {},
    {},
    AppsRemoveRepoFromInstallationPathParams
  >({
    url: "/user/installations/{installationId}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
  });

/**
 * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const useAppsRemoveRepoFromInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsRemoveRepoFromInstallationError,
      AppsRemoveRepoFromInstallationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsRemoveRepoFromInstallationError,
    AppsRemoveRepoFromInstallationVariables
  >(
    (variables: AppsRemoveRepoFromInstallationVariables) =>
      fetchAppsRemoveRepoFromInstallation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsAddRepoToInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
  repositoryId: number;
};

export type AppsAddRepoToInstallationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type AppsAddRepoToInstallationVariables = {
  pathParams: AppsAddRepoToInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Add a single repository to an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const fetchAppsAddRepoToInstallation = (
  variables: AppsAddRepoToInstallationVariables
) =>
  githubFetch<
    undefined,
    AppsAddRepoToInstallationError,
    undefined,
    {},
    {},
    AppsAddRepoToInstallationPathParams
  >({
    url: "/user/installations/{installationId}/repositories/{repositoryId}",
    method: "put",
    ...variables,
  });

/**
 * Add a single repository to an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const useAppsAddRepoToInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsAddRepoToInstallationError,
      AppsAddRepoToInstallationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsAddRepoToInstallationError,
    AppsAddRepoToInstallationVariables
  >(
    (variables: AppsAddRepoToInstallationVariables) =>
      fetchAppsAddRepoToInstallation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type InteractionsRemoveRestrictionsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsRemoveRestrictionsForAuthenticatedUserVariables =
  GithubContext["fetcherOptions"];

/**
 * Removes any interaction restrictions from your public repositories.
 */
export const fetchInteractionsRemoveRestrictionsForAuthenticatedUser = (
  variables: InteractionsRemoveRestrictionsForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    InteractionsRemoveRestrictionsForAuthenticatedUserError,
    undefined,
    {},
    {},
    {}
  >({ url: "/user/interaction-limits", method: "delete", ...variables });

/**
 * Removes any interaction restrictions from your public repositories.
 */
export const useInteractionsRemoveRestrictionsForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InteractionsRemoveRestrictionsForAuthenticatedUserError,
      InteractionsRemoveRestrictionsForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    InteractionsRemoveRestrictionsForAuthenticatedUserError,
    InteractionsRemoveRestrictionsForAuthenticatedUserVariables
  >(
    (variables: InteractionsRemoveRestrictionsForAuthenticatedUserVariables) =>
      fetchInteractionsRemoveRestrictionsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InteractionsGetRestrictionsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsGetRestrictionsForAuthenticatedUserVariables =
  GithubContext["fetcherOptions"];

/**
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const fetchInteractionsGetRestrictionsForAuthenticatedUser = (
  variables: InteractionsGetRestrictionsForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    InteractionsGetRestrictionsForAuthenticatedUserError,
    undefined,
    {},
    {},
    {}
  >({ url: "/user/interaction-limits", method: "get", ...variables });

/**
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const useInteractionsGetRestrictionsForAuthenticatedUser = <
  TData = Schemas.InteractionLimitResponse
>(
  variables: InteractionsGetRestrictionsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse,
      InteractionsGetRestrictionsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.InteractionLimitResponse,
    InteractionsGetRestrictionsForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/interaction-limits",
      operationId: "interactionsGetRestrictionsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchInteractionsGetRestrictionsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InteractionsSetRestrictionsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Responses.ValidationFailed;
  }>;

export type InteractionsSetRestrictionsForAuthenticatedUserVariables = {
  body: Schemas.InteractionLimit;
} & GithubContext["fetcherOptions"];

/**
 * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
 */
export const fetchInteractionsSetRestrictionsForAuthenticatedUser = (
  variables: InteractionsSetRestrictionsForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForAuthenticatedUserError,
    Schemas.InteractionLimit,
    {},
    {},
    {}
  >({ url: "/user/interaction-limits", method: "put", ...variables });

/**
 * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
 */
export const useInteractionsSetRestrictionsForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InteractionLimitResponse,
      InteractionsSetRestrictionsForAuthenticatedUserError,
      InteractionsSetRestrictionsForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForAuthenticatedUserError,
    InteractionsSetRestrictionsForAuthenticatedUserVariables
  >(
    (variables: InteractionsSetRestrictionsForAuthenticatedUserVariables) =>
      fetchInteractionsSetRestrictionsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type IssuesListForAuthenticatedUserQueryParams = {
  /*
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all`: All issues the authenticated user can see, regardless of participation or creation
   *
   * @default assigned
   */
  filter?:
    | "assigned"
    | "created"
    | "mentioned"
    | "subscribed"
    | "repos"
    | "all";
  /*
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /*
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type IssuesListForAuthenticatedUserResponse = Schemas.Issue[];

export type IssuesListForAuthenticatedUserVariables = {
  queryParams?: IssuesListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues across owned and member repositories assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesListForAuthenticatedUser = (
  variables: IssuesListForAuthenticatedUserVariables
) =>
  githubFetch<
    IssuesListForAuthenticatedUserResponse,
    IssuesListForAuthenticatedUserError,
    undefined,
    {},
    IssuesListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/issues", method: "get", ...variables });

/**
 * List issues across owned and member repositories assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesListForAuthenticatedUser = <
  TData = IssuesListForAuthenticatedUserResponse
>(
  variables: IssuesListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForAuthenticatedUserResponse,
      IssuesListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListForAuthenticatedUserResponse,
    IssuesListForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/issues",
      operationId: "issuesListForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchIssuesListForAuthenticatedUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListPublicSshKeysForAuthenticatedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListPublicSshKeysForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersListPublicSshKeysForAuthenticatedResponse = Schemas.Key[];

export type UsersListPublicSshKeysForAuthenticatedVariables = {
  queryParams?: UsersListPublicSshKeysForAuthenticatedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersListPublicSshKeysForAuthenticated = (
  variables: UsersListPublicSshKeysForAuthenticatedVariables
) =>
  githubFetch<
    UsersListPublicSshKeysForAuthenticatedResponse,
    UsersListPublicSshKeysForAuthenticatedError,
    undefined,
    {},
    UsersListPublicSshKeysForAuthenticatedQueryParams,
    {}
  >({ url: "/user/keys", method: "get", ...variables });

/**
 * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersListPublicSshKeysForAuthenticated = <
  TData = UsersListPublicSshKeysForAuthenticatedResponse
>(
  variables: UsersListPublicSshKeysForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicSshKeysForAuthenticatedResponse,
      UsersListPublicSshKeysForAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListPublicSshKeysForAuthenticatedResponse,
    UsersListPublicSshKeysForAuthenticatedError,
    TData
  >(
    queryKeyFn({
      path: "/user/keys",
      operationId: "usersListPublicSshKeysForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListPublicSshKeysForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersCreatePublicSshKeyForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersCreatePublicSshKeyForAuthenticatedRequestBody = {
  /*
   * The public SSH key to add to your GitHub account.
   *
   * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521)
   */
  key: string;
  /*
   * A descriptive name for the new key.
   *
   * @example Personal MacBook Air
   */
  title?: string;
};

export type UsersCreatePublicSshKeyForAuthenticatedVariables = {
  body: UsersCreatePublicSshKeyForAuthenticatedRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersCreatePublicSshKeyForAuthenticated = (
  variables: UsersCreatePublicSshKeyForAuthenticatedVariables
) =>
  githubFetch<
    Schemas.Key,
    UsersCreatePublicSshKeyForAuthenticatedError,
    UsersCreatePublicSshKeyForAuthenticatedRequestBody,
    {},
    {},
    {}
  >({ url: "/user/keys", method: "post", ...variables });

/**
 * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersCreatePublicSshKeyForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Key,
      UsersCreatePublicSshKeyForAuthenticatedError,
      UsersCreatePublicSshKeyForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Key,
    UsersCreatePublicSshKeyForAuthenticatedError,
    UsersCreatePublicSshKeyForAuthenticatedVariables
  >(
    (variables: UsersCreatePublicSshKeyForAuthenticatedVariables) =>
      fetchUsersCreatePublicSshKeyForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersDeletePublicSshKeyForAuthenticatedPathParams = {
  /*
   * key_id parameter
   */
  keyId: number;
};

export type UsersDeletePublicSshKeyForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersDeletePublicSshKeyForAuthenticatedVariables = {
  pathParams: UsersDeletePublicSshKeyForAuthenticatedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersDeletePublicSshKeyForAuthenticated = (
  variables: UsersDeletePublicSshKeyForAuthenticatedVariables
) =>
  githubFetch<
    undefined,
    UsersDeletePublicSshKeyForAuthenticatedError,
    undefined,
    {},
    {},
    UsersDeletePublicSshKeyForAuthenticatedPathParams
  >({ url: "/user/keys/{keyId}", method: "delete", ...variables });

/**
 * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersDeletePublicSshKeyForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersDeletePublicSshKeyForAuthenticatedError,
      UsersDeletePublicSshKeyForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersDeletePublicSshKeyForAuthenticatedError,
    UsersDeletePublicSshKeyForAuthenticatedVariables
  >(
    (variables: UsersDeletePublicSshKeyForAuthenticatedVariables) =>
      fetchUsersDeletePublicSshKeyForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersGetPublicSshKeyForAuthenticatedPathParams = {
  /*
   * key_id parameter
   */
  keyId: number;
};

export type UsersGetPublicSshKeyForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersGetPublicSshKeyForAuthenticatedVariables = {
  pathParams: UsersGetPublicSshKeyForAuthenticatedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersGetPublicSshKeyForAuthenticated = (
  variables: UsersGetPublicSshKeyForAuthenticatedVariables
) =>
  githubFetch<
    Schemas.Key,
    UsersGetPublicSshKeyForAuthenticatedError,
    undefined,
    {},
    {},
    UsersGetPublicSshKeyForAuthenticatedPathParams
  >({ url: "/user/keys/{keyId}", method: "get", ...variables });

/**
 * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersGetPublicSshKeyForAuthenticated = <TData = Schemas.Key>(
  variables: UsersGetPublicSshKeyForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Key,
      UsersGetPublicSshKeyForAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Key,
    UsersGetPublicSshKeyForAuthenticatedError,
    TData
  >(
    queryKeyFn({
      path: "/user/keys/{key_id}",
      operationId: "usersGetPublicSshKeyForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersGetPublicSshKeyForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListSubscriptionsForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListSubscriptionsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type AppsListSubscriptionsForAuthenticatedUserResponse =
  Schemas.UserMarketplacePurchase[];

export type AppsListSubscriptionsForAuthenticatedUserVariables = {
  queryParams?: AppsListSubscriptionsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const fetchAppsListSubscriptionsForAuthenticatedUser = (
  variables: AppsListSubscriptionsForAuthenticatedUserVariables
) =>
  githubFetch<
    AppsListSubscriptionsForAuthenticatedUserResponse,
    AppsListSubscriptionsForAuthenticatedUserError,
    undefined,
    {},
    AppsListSubscriptionsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/marketplace_purchases", method: "get", ...variables });

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const useAppsListSubscriptionsForAuthenticatedUser = <
  TData = AppsListSubscriptionsForAuthenticatedUserResponse
>(
  variables: AppsListSubscriptionsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListSubscriptionsForAuthenticatedUserResponse,
      AppsListSubscriptionsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListSubscriptionsForAuthenticatedUserResponse,
    AppsListSubscriptionsForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/marketplace_purchases",
      operationId: "appsListSubscriptionsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchAppsListSubscriptionsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListSubscriptionsForAuthenticatedUserStubbedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListSubscriptionsForAuthenticatedUserStubbedError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
  >;

export type AppsListSubscriptionsForAuthenticatedUserStubbedResponse =
  Schemas.UserMarketplacePurchase[];

export type AppsListSubscriptionsForAuthenticatedUserStubbedVariables = {
  queryParams?: AppsListSubscriptionsForAuthenticatedUserStubbedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const fetchAppsListSubscriptionsForAuthenticatedUserStubbed = (
  variables: AppsListSubscriptionsForAuthenticatedUserStubbedVariables
) =>
  githubFetch<
    AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
    AppsListSubscriptionsForAuthenticatedUserStubbedError,
    undefined,
    {},
    AppsListSubscriptionsForAuthenticatedUserStubbedQueryParams,
    {}
  >({
    url: "/user/marketplace_purchases/stubbed",
    method: "get",
    ...variables,
  });

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const useAppsListSubscriptionsForAuthenticatedUserStubbed = <
  TData = AppsListSubscriptionsForAuthenticatedUserStubbedResponse
>(
  variables: AppsListSubscriptionsForAuthenticatedUserStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
      AppsListSubscriptionsForAuthenticatedUserStubbedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
    AppsListSubscriptionsForAuthenticatedUserStubbedError,
    TData
  >(
    queryKeyFn({
      path: "/user/marketplace_purchases/stubbed",
      operationId: "appsListSubscriptionsForAuthenticatedUserStubbed",
      variables,
    }),
    () =>
      fetchAppsListSubscriptionsForAuthenticatedUserStubbed({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListMembershipsForAuthenticatedUserQueryParams = {
  /*
   * Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.
   */
  state?: "active" | "pending";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListMembershipsForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsListMembershipsForAuthenticatedUserResponse =
  Schemas.OrgMembership[];

export type OrgsListMembershipsForAuthenticatedUserVariables = {
  queryParams?: OrgsListMembershipsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsListMembershipsForAuthenticatedUser = (
  variables: OrgsListMembershipsForAuthenticatedUserVariables
) =>
  githubFetch<
    OrgsListMembershipsForAuthenticatedUserResponse,
    OrgsListMembershipsForAuthenticatedUserError,
    undefined,
    {},
    OrgsListMembershipsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/memberships/orgs", method: "get", ...variables });

export const useOrgsListMembershipsForAuthenticatedUser = <
  TData = OrgsListMembershipsForAuthenticatedUserResponse
>(
  variables: OrgsListMembershipsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListMembershipsForAuthenticatedUserResponse,
      OrgsListMembershipsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListMembershipsForAuthenticatedUserResponse,
    OrgsListMembershipsForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/memberships/orgs",
      operationId: "orgsListMembershipsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchOrgsListMembershipsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsGetMembershipForAuthenticatedUserPathParams = {
  org: string;
};

export type OrgsGetMembershipForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type OrgsGetMembershipForAuthenticatedUserVariables = {
  pathParams: OrgsGetMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsGetMembershipForAuthenticatedUser = (
  variables: OrgsGetMembershipForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.OrgMembership,
    OrgsGetMembershipForAuthenticatedUserError,
    undefined,
    {},
    {},
    OrgsGetMembershipForAuthenticatedUserPathParams
  >({ url: "/user/memberships/orgs/{org}", method: "get", ...variables });

export const useOrgsGetMembershipForAuthenticatedUser = <
  TData = Schemas.OrgMembership
>(
  variables: OrgsGetMembershipForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrgMembership,
      OrgsGetMembershipForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrgMembership,
    OrgsGetMembershipForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/memberships/orgs/{org}",
      operationId: "orgsGetMembershipForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchOrgsGetMembershipForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsUpdateMembershipForAuthenticatedUserPathParams = {
  org: string;
};

export type OrgsUpdateMembershipForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type OrgsUpdateMembershipForAuthenticatedUserRequestBody = {
  /*
   * The state that the membership should be in. Only `"active"` will be accepted.
   */
  state: "active";
};

export type OrgsUpdateMembershipForAuthenticatedUserVariables = {
  body: OrgsUpdateMembershipForAuthenticatedUserRequestBody;
  pathParams: OrgsUpdateMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsUpdateMembershipForAuthenticatedUser = (
  variables: OrgsUpdateMembershipForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.OrgMembership,
    OrgsUpdateMembershipForAuthenticatedUserError,
    OrgsUpdateMembershipForAuthenticatedUserRequestBody,
    {},
    {},
    OrgsUpdateMembershipForAuthenticatedUserPathParams
  >({ url: "/user/memberships/orgs/{org}", method: "patch", ...variables });

export const useOrgsUpdateMembershipForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgMembership,
      OrgsUpdateMembershipForAuthenticatedUserError,
      OrgsUpdateMembershipForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgMembership,
    OrgsUpdateMembershipForAuthenticatedUserError,
    OrgsUpdateMembershipForAuthenticatedUserVariables
  >(
    (variables: OrgsUpdateMembershipForAuthenticatedUserVariables) =>
      fetchOrgsUpdateMembershipForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type MigrationsListForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type MigrationsListForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type MigrationsListForAuthenticatedUserResponse = Schemas.Migration[];

export type MigrationsListForAuthenticatedUserVariables = {
  queryParams?: MigrationsListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all migrations a user has started.
 */
export const fetchMigrationsListForAuthenticatedUser = (
  variables: MigrationsListForAuthenticatedUserVariables
) =>
  githubFetch<
    MigrationsListForAuthenticatedUserResponse,
    MigrationsListForAuthenticatedUserError,
    undefined,
    {},
    MigrationsListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/migrations", method: "get", ...variables });

/**
 * Lists all migrations a user has started.
 */
export const useMigrationsListForAuthenticatedUser = <
  TData = MigrationsListForAuthenticatedUserResponse
>(
  variables: MigrationsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListForAuthenticatedUserResponse,
      MigrationsListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListForAuthenticatedUserResponse,
    MigrationsListForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/migrations",
      operationId: "migrationsListForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchMigrationsListForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsStartForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type MigrationsStartForAuthenticatedUserRequestBody = {
  /*
   * Exclude attributes from the API response to improve performance
   *
   * @example repositories
   */
  exclude?: "repositories"[];
  /*
   * Do not include attachments in the migration
   *
   * @example true
   */
  exclude_attachments?: boolean;
  /*
   * Lock the repositories being migrated at the start of the migration
   *
   * @example true
   */
  lock_repositories?: boolean;
  repositories: string[];
};

export type MigrationsStartForAuthenticatedUserVariables = {
  body: MigrationsStartForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Initiates the generation of a user migration archive.
 */
export const fetchMigrationsStartForAuthenticatedUser = (
  variables: MigrationsStartForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.Migration,
    MigrationsStartForAuthenticatedUserError,
    MigrationsStartForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/migrations", method: "post", ...variables });

/**
 * Initiates the generation of a user migration archive.
 */
export const useMigrationsStartForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Migration,
      MigrationsStartForAuthenticatedUserError,
      MigrationsStartForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Migration,
    MigrationsStartForAuthenticatedUserError,
    MigrationsStartForAuthenticatedUserVariables
  >(
    (variables: MigrationsStartForAuthenticatedUserVariables) =>
      fetchMigrationsStartForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type MigrationsGetStatusForAuthenticatedUserPathParams = {
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsGetStatusForAuthenticatedUserQueryParams = {
  exclude?: string[];
};

export type MigrationsGetStatusForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type MigrationsGetStatusForAuthenticatedUserVariables = {
  pathParams: MigrationsGetStatusForAuthenticatedUserPathParams;
  queryParams?: MigrationsGetStatusForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
 *
 * *   `pending` - the migration hasn't started yet.
 * *   `exporting` - the migration is in progress.
 * *   `exported` - the migration finished successfully.
 * *   `failed` - the migration failed.
 *
 * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
 */
export const fetchMigrationsGetStatusForAuthenticatedUser = (
  variables: MigrationsGetStatusForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.Migration,
    MigrationsGetStatusForAuthenticatedUserError,
    undefined,
    {},
    MigrationsGetStatusForAuthenticatedUserQueryParams,
    MigrationsGetStatusForAuthenticatedUserPathParams
  >({ url: "/user/migrations/{migrationId}", method: "get", ...variables });

/**
 * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
 *
 * *   `pending` - the migration hasn't started yet.
 * *   `exporting` - the migration is in progress.
 * *   `exported` - the migration finished successfully.
 * *   `failed` - the migration failed.
 *
 * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
 */
export const useMigrationsGetStatusForAuthenticatedUser = <
  TData = Schemas.Migration
>(
  variables: MigrationsGetStatusForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Migration,
      MigrationsGetStatusForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Migration,
    MigrationsGetStatusForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/migrations/{migration_id}",
      operationId: "migrationsGetStatusForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchMigrationsGetStatusForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsDeleteArchiveForAuthenticatedUserPathParams = {
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsDeleteArchiveForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type MigrationsDeleteArchiveForAuthenticatedUserVariables = {
  pathParams: MigrationsDeleteArchiveForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
 */
export const fetchMigrationsDeleteArchiveForAuthenticatedUser = (
  variables: MigrationsDeleteArchiveForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    MigrationsDeleteArchiveForAuthenticatedUserError,
    undefined,
    {},
    {},
    MigrationsDeleteArchiveForAuthenticatedUserPathParams
  >({
    url: "/user/migrations/{migrationId}/archive",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
 */
export const useMigrationsDeleteArchiveForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MigrationsDeleteArchiveForAuthenticatedUserError,
      MigrationsDeleteArchiveForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MigrationsDeleteArchiveForAuthenticatedUserError,
    MigrationsDeleteArchiveForAuthenticatedUserVariables
  >(
    (variables: MigrationsDeleteArchiveForAuthenticatedUserVariables) =>
      fetchMigrationsDeleteArchiveForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type MigrationsGetArchiveForAuthenticatedUserPathParams = {
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsGetArchiveForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
  >;

export type MigrationsGetArchiveForAuthenticatedUserVariables = {
  pathParams: MigrationsGetArchiveForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\_comments
 * *   issue\_comments
 * *   issue\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\_branches
 * *   pull\_request\_reviews
 * *   pull\_requests
 * *   releases
 * *   repositories
 * *   review\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
 */
export const fetchMigrationsGetArchiveForAuthenticatedUser = (
  variables: MigrationsGetArchiveForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    MigrationsGetArchiveForAuthenticatedUserError,
    undefined,
    {},
    {},
    MigrationsGetArchiveForAuthenticatedUserPathParams
  >({
    url: "/user/migrations/{migrationId}/archive",
    method: "get",
    ...variables,
  });

/**
 * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\_comments
 * *   issue\_comments
 * *   issue\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\_branches
 * *   pull\_request\_reviews
 * *   pull\_requests
 * *   releases
 * *   repositories
 * *   review\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
 */
export const useMigrationsGetArchiveForAuthenticatedUser = <TData = undefined>(
  variables: MigrationsGetArchiveForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      MigrationsGetArchiveForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    MigrationsGetArchiveForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/migrations/{migration_id}/archive",
      operationId: "migrationsGetArchiveForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchMigrationsGetArchiveForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsUnlockRepoForAuthenticatedUserPathParams = {
  /*
   * migration_id parameter
   */
  migrationId: number;
  /*
   * repo_name parameter
   */
  repoName: string;
};

export type MigrationsUnlockRepoForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type MigrationsUnlockRepoForAuthenticatedUserVariables = {
  pathParams: MigrationsUnlockRepoForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
 */
export const fetchMigrationsUnlockRepoForAuthenticatedUser = (
  variables: MigrationsUnlockRepoForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    MigrationsUnlockRepoForAuthenticatedUserError,
    undefined,
    {},
    {},
    MigrationsUnlockRepoForAuthenticatedUserPathParams
  >({
    url: "/user/migrations/{migrationId}/repos/{repoName}/lock",
    method: "delete",
    ...variables,
  });

/**
 * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
 */
export const useMigrationsUnlockRepoForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MigrationsUnlockRepoForAuthenticatedUserError,
      MigrationsUnlockRepoForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MigrationsUnlockRepoForAuthenticatedUserError,
    MigrationsUnlockRepoForAuthenticatedUserVariables
  >(
    (variables: MigrationsUnlockRepoForAuthenticatedUserVariables) =>
      fetchMigrationsUnlockRepoForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type MigrationsListReposForUserPathParams = {
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsListReposForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type MigrationsListReposForUserError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsListReposForUserResponse = Schemas.MinimalRepository[];

export type MigrationsListReposForUserVariables = {
  pathParams: MigrationsListReposForUserPathParams;
  queryParams?: MigrationsListReposForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all the repositories for this user migration.
 */
export const fetchMigrationsListReposForUser = (
  variables: MigrationsListReposForUserVariables
) =>
  githubFetch<
    MigrationsListReposForUserResponse,
    MigrationsListReposForUserError,
    undefined,
    {},
    MigrationsListReposForUserQueryParams,
    MigrationsListReposForUserPathParams
  >({
    url: "/user/migrations/{migrationId}/repositories",
    method: "get",
    ...variables,
  });

/**
 * Lists all the repositories for this user migration.
 */
export const useMigrationsListReposForUser = <
  TData = MigrationsListReposForUserResponse
>(
  variables: MigrationsListReposForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListReposForUserResponse,
      MigrationsListReposForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListReposForUserResponse,
    MigrationsListReposForUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/migrations/{migration_id}/repositories",
      operationId: "migrationsListReposForUser",
      variables,
    }),
    () => fetchMigrationsListReposForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type OrgsListForAuthenticatedUserResponse = Schemas.OrganizationSimple[];

export type OrgsListForAuthenticatedUserVariables = {
  queryParams?: OrgsListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List organizations for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
 */
export const fetchOrgsListForAuthenticatedUser = (
  variables: OrgsListForAuthenticatedUserVariables
) =>
  githubFetch<
    OrgsListForAuthenticatedUserResponse,
    OrgsListForAuthenticatedUserError,
    undefined,
    {},
    OrgsListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/orgs", method: "get", ...variables });

/**
 * List organizations for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
 */
export const useOrgsListForAuthenticatedUser = <
  TData = OrgsListForAuthenticatedUserResponse
>(
  variables: OrgsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListForAuthenticatedUserResponse,
      OrgsListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListForAuthenticatedUserResponse,
    OrgsListForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/orgs",
      operationId: "orgsListForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchOrgsListForAuthenticatedUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesDeletePackageForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
};

export type PackagesDeletePackageForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesDeletePackageForAuthenticatedUserVariables = {
  pathParams: PackagesDeletePackageForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesDeletePackageForAuthenticatedUser = (
  variables: PackagesDeletePackageForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    PackagesDeletePackageForAuthenticatedUserError,
    undefined,
    {},
    {},
    PackagesDeletePackageForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesDeletePackageForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesDeletePackageForAuthenticatedUserError,
      PackagesDeletePackageForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesDeletePackageForAuthenticatedUserError,
    PackagesDeletePackageForAuthenticatedUserVariables
  >(
    (variables: PackagesDeletePackageForAuthenticatedUserVariables) =>
      fetchPackagesDeletePackageForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PackagesGetPackageForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
};

export type PackagesGetPackageForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageForAuthenticatedUserVariables = {
  pathParams: PackagesGetPackageForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageForAuthenticatedUser = (
  variables: PackagesGetPackageForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.Package,
    PackagesGetPackageForAuthenticatedUserError,
    undefined,
    {},
    {},
    PackagesGetPackageForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageForAuthenticatedUser = <
  TData = Schemas.Package
>(
  variables: PackagesGetPackageForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Package,
      PackagesGetPackageForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Package,
    PackagesGetPackageForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/packages/{package_type}/{package_name}",
      operationId: "packagesGetPackageForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchPackagesGetPackageForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesRestorePackageForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
};

export type PackagesRestorePackageForAuthenticatedUserQueryParams = {
  /*
   * package token
   */
  token?: string;
};

export type PackagesRestorePackageForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesRestorePackageForAuthenticatedUserVariables = {
  pathParams: PackagesRestorePackageForAuthenticatedUserPathParams;
  queryParams?: PackagesRestorePackageForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores a package owned by the authenticated user.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesRestorePackageForAuthenticatedUser = (
  variables: PackagesRestorePackageForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    PackagesRestorePackageForAuthenticatedUserError,
    undefined,
    {},
    PackagesRestorePackageForAuthenticatedUserQueryParams,
    PackagesRestorePackageForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/restore",
    method: "post",
    ...variables,
  });

/**
 * Restores a package owned by the authenticated user.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesRestorePackageForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesRestorePackageForAuthenticatedUserError,
      PackagesRestorePackageForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesRestorePackageForAuthenticatedUserError,
    PackagesRestorePackageForAuthenticatedUserVariables
  >(
    (variables: PackagesRestorePackageForAuthenticatedUserVariables) =>
      fetchPackagesRestorePackageForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPathParams =
  {
    /*
     * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
     */
    packageType:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container";
    /*
     * The name of the package.
     */
    packageName: string;
  };

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueryParams =
  {
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * The state of the package, either active or deleted.
     *
     * @default active
     */
    state?: "active" | "deleted";
  };

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse =
  Schemas.PackageVersion[];

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables =
  {
    pathParams: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPathParams;
    queryParams?: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Returns all package versions for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser =
  (
    variables: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables
  ) =>
    githubFetch<
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserError,
      undefined,
      {},
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueryParams,
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPathParams
    >({
      url: "/user/packages/{packageType}/{packageName}/versions",
      method: "get",
      ...variables,
    });

/**
 * Returns all package versions for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser =
  <
    TData = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse
  >(
    variables: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
        PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserError,
        TData
      >,
      "queryKey" | "queryFn"
    >
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useGithubContext(options);
    return reactQuery.useQuery<
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserError,
      TData
    >(
      queryKeyFn({
        path: "/user/packages/{package_type}/{package_name}/versions",
        operationId:
          "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser",
        variables,
      }),
      () =>
        fetchPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser({
          ...fetcherOptions,
          ...variables,
        }),
      {
        ...options,
        ...queryOptions,
      }
    );
  };

export type PackagesDeletePackageVersionForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesDeletePackageVersionForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesDeletePackageVersionForAuthenticatedUserVariables = {
  pathParams: PackagesDeletePackageVersionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesDeletePackageVersionForAuthenticatedUser = (
  variables: PackagesDeletePackageVersionForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    PackagesDeletePackageVersionForAuthenticatedUserError,
    undefined,
    {},
    {},
    PackagesDeletePackageVersionForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesDeletePackageVersionForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesDeletePackageVersionForAuthenticatedUserError,
      PackagesDeletePackageVersionForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesDeletePackageVersionForAuthenticatedUserError,
    PackagesDeletePackageVersionForAuthenticatedUserVariables
  >(
    (variables: PackagesDeletePackageVersionForAuthenticatedUserVariables) =>
      fetchPackagesDeletePackageVersionForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PackagesGetPackageVersionForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesGetPackageVersionForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageVersionForAuthenticatedUserVariables = {
  pathParams: PackagesGetPackageVersionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package version for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageVersionForAuthenticatedUser = (
  variables: PackagesGetPackageVersionForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForAuthenticatedUserError,
    undefined,
    {},
    {},
    PackagesGetPackageVersionForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package version for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageVersionForAuthenticatedUser = <
  TData = Schemas.PackageVersion
>(
  variables: PackagesGetPackageVersionForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      PackagesGetPackageVersionForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/packages/{package_type}/{package_name}/versions/{package_version_id}",
      operationId: "packagesGetPackageVersionForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchPackagesGetPackageVersionForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesRestorePackageVersionForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesRestorePackageVersionForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesRestorePackageVersionForAuthenticatedUserVariables = {
  pathParams: PackagesRestorePackageVersionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores a package version owned by the authenticated user.
 *
 * You can restore a deleted package version under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesRestorePackageVersionForAuthenticatedUser = (
  variables: PackagesRestorePackageVersionForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    PackagesRestorePackageVersionForAuthenticatedUserError,
    undefined,
    {},
    {},
    PackagesRestorePackageVersionForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/versions/{packageVersionId}/restore",
    method: "post",
    ...variables,
  });

/**
 * Restores a package version owned by the authenticated user.
 *
 * You can restore a deleted package version under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesRestorePackageVersionForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesRestorePackageVersionForAuthenticatedUserError,
      PackagesRestorePackageVersionForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesRestorePackageVersionForAuthenticatedUserError,
    PackagesRestorePackageVersionForAuthenticatedUserVariables
  >(
    (variables: PackagesRestorePackageVersionForAuthenticatedUserVariables) =>
      fetchPackagesRestorePackageVersionForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProjectsCreateForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsCreateForAuthenticatedUserRequestBody = {
  /*
   * Body of the project
   *
   * @example This project represents the sprint of the first week in January
   */
  body?: string | null;
  /*
   * Name of the project
   *
   * @example Week One Sprint
   */
  name: string;
};

export type ProjectsCreateForAuthenticatedUserVariables = {
  body: ProjectsCreateForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

export const fetchProjectsCreateForAuthenticatedUser = (
  variables: ProjectsCreateForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.Project,
    ProjectsCreateForAuthenticatedUserError,
    ProjectsCreateForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/projects", method: "post", ...variables });

export const useProjectsCreateForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectsCreateForAuthenticatedUserError,
      ProjectsCreateForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectsCreateForAuthenticatedUserError,
    ProjectsCreateForAuthenticatedUserVariables
  >(
    (variables: ProjectsCreateForAuthenticatedUserVariables) =>
      fetchProjectsCreateForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersListPublicEmailsForAuthenticatedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListPublicEmailsForAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersListPublicEmailsForAuthenticatedResponse = Schemas.Email[];

export type UsersListPublicEmailsForAuthenticatedVariables = {
  queryParams?: UsersListPublicEmailsForAuthenticatedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
 */
export const fetchUsersListPublicEmailsForAuthenticated = (
  variables: UsersListPublicEmailsForAuthenticatedVariables
) =>
  githubFetch<
    UsersListPublicEmailsForAuthenticatedResponse,
    UsersListPublicEmailsForAuthenticatedError,
    undefined,
    {},
    UsersListPublicEmailsForAuthenticatedQueryParams,
    {}
  >({ url: "/user/public_emails", method: "get", ...variables });

/**
 * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
 */
export const useUsersListPublicEmailsForAuthenticated = <
  TData = UsersListPublicEmailsForAuthenticatedResponse
>(
  variables: UsersListPublicEmailsForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicEmailsForAuthenticatedResponse,
      UsersListPublicEmailsForAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListPublicEmailsForAuthenticatedResponse,
    UsersListPublicEmailsForAuthenticatedError,
    TData
  >(
    queryKeyFn({
      path: "/user/public_emails",
      operationId: "usersListPublicEmailsForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListPublicEmailsForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListForAuthenticatedUserQueryParams = {
  /*
   * Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`.
   *
   * @default all
   */
  visibility?: "all" | "public" | "private";
  /*
   * Comma-separated list of values. Can include:
   * \* `owner`: Repositories that are owned by the authenticated user.
   * \* `collaborator`: Repositories that the user has been added to as a collaborator.
   * \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
   *
   * @default owner,collaborator,organization_member
   */
  affiliation?: string;
  /*
   * Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`
   *
   * Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
   *
   * @default all
   */
  type?: "all" | "owner" | "public" | "private" | "member";
  /*
   * Can be one of `created`, `updated`, `pushed`, `full_name`.
   *
   * @default full_name
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /*
   * Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  before?: string;
};

export type ReposListForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposListForAuthenticatedUserResponse = Schemas.Repository[];

export type ReposListForAuthenticatedUserVariables = {
  queryParams?: ReposListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 */
export const fetchReposListForAuthenticatedUser = (
  variables: ReposListForAuthenticatedUserVariables
) =>
  githubFetch<
    ReposListForAuthenticatedUserResponse,
    ReposListForAuthenticatedUserError,
    undefined,
    {},
    ReposListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/repos", method: "get", ...variables });

/**
 * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 */
export const useReposListForAuthenticatedUser = <
  TData = ReposListForAuthenticatedUserResponse
>(
  variables: ReposListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForAuthenticatedUserResponse,
      ReposListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForAuthenticatedUserResponse,
    ReposListForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/repos",
      operationId: "reposListForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchReposListForAuthenticatedUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateForAuthenticatedUserRequestBody = {
  /*
   * Whether to allow merge commits for pull requests.
   *
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /*
   * Whether to allow rebase merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /*
   * Whether to allow squash merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /*
   * Whether the repository is initialized with a minimal README.
   *
   * @default false
   */
  auto_init?: boolean;
  /*
   * Whether to delete head branches when pull requests are merged
   *
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /*
   * A short description of the repository.
   */
  description?: string;
  /*
   * The desired language or platform to apply to the .gitignore.
   *
   * @example Haskell
   */
  gitignore_template?: string;
  /*
   * Whether downloads are enabled.
   *
   * @default true
   * @example true
   */
  has_downloads?: boolean;
  /*
   * Whether issues are enabled.
   *
   * @default true
   * @example true
   */
  has_issues?: boolean;
  /*
   * Whether projects are enabled.
   *
   * @default true
   * @example true
   */
  has_projects?: boolean;
  /*
   * Whether the wiki is enabled.
   *
   * @default true
   * @example true
   */
  has_wiki?: boolean;
  /*
   * A URL with more information about the repository.
   */
  homepage?: string;
  /*
   * Whether this repository acts as a template that can be used to generate new repositories.
   *
   * @default false
   * @example true
   */
  is_template?: boolean;
  /*
   * The license keyword of the open source license for this repository.
   *
   * @example mit
   */
  license_template?: string;
  /*
   * The name of the repository.
   *
   * @example Team Environment
   */
  name: string;
  /*
   * Whether the repository is private.
   *
   * @default false
   */
  private?: boolean;
  /*
   * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
   */
  team_id?: number;
};

export type ReposCreateForAuthenticatedUserVariables = {
  body: ReposCreateForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new repository for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository.
 */
export const fetchReposCreateForAuthenticatedUser = (
  variables: ReposCreateForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.Repository,
    ReposCreateForAuthenticatedUserError,
    ReposCreateForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/repos", method: "post", ...variables });

/**
 * Creates a new repository for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository.
 */
export const useReposCreateForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      ReposCreateForAuthenticatedUserError,
      ReposCreateForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    ReposCreateForAuthenticatedUserError,
    ReposCreateForAuthenticatedUserVariables
  >(
    (variables: ReposCreateForAuthenticatedUserVariables) =>
      fetchReposCreateForAuthenticatedUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListInvitationsForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListInvitationsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type ReposListInvitationsForAuthenticatedUserResponse =
  Schemas.RepositoryInvitation[];

export type ReposListInvitationsForAuthenticatedUserVariables = {
  queryParams?: ReposListInvitationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 */
export const fetchReposListInvitationsForAuthenticatedUser = (
  variables: ReposListInvitationsForAuthenticatedUserVariables
) =>
  githubFetch<
    ReposListInvitationsForAuthenticatedUserResponse,
    ReposListInvitationsForAuthenticatedUserError,
    undefined,
    {},
    ReposListInvitationsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/repository_invitations", method: "get", ...variables });

/**
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 */
export const useReposListInvitationsForAuthenticatedUser = <
  TData = ReposListInvitationsForAuthenticatedUserResponse
>(
  variables: ReposListInvitationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListInvitationsForAuthenticatedUserResponse,
      ReposListInvitationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListInvitationsForAuthenticatedUserResponse,
    ReposListInvitationsForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/repository_invitations",
      operationId: "reposListInvitationsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchReposListInvitationsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeclineInvitationPathParams = {
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type ReposDeclineInvitationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
>;

export type ReposDeclineInvitationVariables = {
  pathParams: ReposDeclineInvitationPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeclineInvitation = (
  variables: ReposDeclineInvitationVariables
) =>
  githubFetch<
    undefined,
    ReposDeclineInvitationError,
    undefined,
    {},
    {},
    ReposDeclineInvitationPathParams
  >({
    url: "/user/repository_invitations/{invitationId}",
    method: "delete",
    ...variables,
  });

export const useReposDeclineInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeclineInvitationError,
      ReposDeclineInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeclineInvitationError,
    ReposDeclineInvitationVariables
  >(
    (variables: ReposDeclineInvitationVariables) =>
      fetchReposDeclineInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposAcceptInvitationPathParams = {
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type ReposAcceptInvitationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
>;

export type ReposAcceptInvitationVariables = {
  pathParams: ReposAcceptInvitationPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposAcceptInvitation = (
  variables: ReposAcceptInvitationVariables
) =>
  githubFetch<
    undefined,
    ReposAcceptInvitationError,
    undefined,
    {},
    {},
    ReposAcceptInvitationPathParams
  >({
    url: "/user/repository_invitations/{invitationId}",
    method: "patch",
    ...variables,
  });

export const useReposAcceptInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposAcceptInvitationError,
      ReposAcceptInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposAcceptInvitationError,
    ReposAcceptInvitationVariables
  >(
    (variables: ReposAcceptInvitationVariables) =>
      fetchReposAcceptInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityListReposStarredByAuthenticatedUserQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReposStarredByAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
  >;

export type ActivityListReposStarredByAuthenticatedUserResponse =
  Schemas.Repository[];

export type ActivityListReposStarredByAuthenticatedUserVariables = {
  queryParams?: ActivityListReposStarredByAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories the authenticated user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const fetchActivityListReposStarredByAuthenticatedUser = (
  variables: ActivityListReposStarredByAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListReposStarredByAuthenticatedUserResponse,
    ActivityListReposStarredByAuthenticatedUserError,
    undefined,
    {},
    ActivityListReposStarredByAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/starred", method: "get", ...variables });

/**
 * Lists repositories the authenticated user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const useActivityListReposStarredByAuthenticatedUser = <
  TData = ActivityListReposStarredByAuthenticatedUserResponse
>(
  variables: ActivityListReposStarredByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReposStarredByAuthenticatedUserResponse,
      ActivityListReposStarredByAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReposStarredByAuthenticatedUserResponse,
    ActivityListReposStarredByAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/starred",
      operationId: "activityListReposStarredByAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListReposStarredByAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityUnstarRepoForAuthenticatedUserPathParams = {
  owner: string;
  repo: string;
};

export type ActivityUnstarRepoForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ActivityUnstarRepoForAuthenticatedUserVariables = {
  pathParams: ActivityUnstarRepoForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityUnstarRepoForAuthenticatedUser = (
  variables: ActivityUnstarRepoForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    ActivityUnstarRepoForAuthenticatedUserError,
    undefined,
    {},
    {},
    ActivityUnstarRepoForAuthenticatedUserPathParams
  >({ url: "/user/starred/{owner}/{repo}", method: "delete", ...variables });

export const useActivityUnstarRepoForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivityUnstarRepoForAuthenticatedUserError,
      ActivityUnstarRepoForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActivityUnstarRepoForAuthenticatedUserError,
    ActivityUnstarRepoForAuthenticatedUserVariables
  >(
    (variables: ActivityUnstarRepoForAuthenticatedUserVariables) =>
      fetchActivityUnstarRepoForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActivityCheckRepoIsStarredByAuthenticatedUserPathParams = {
  owner: string;
  repo: string;
};

export type ActivityCheckRepoIsStarredByAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Schemas.BasicError;
      }
  >;

export type ActivityCheckRepoIsStarredByAuthenticatedUserVariables = {
  pathParams: ActivityCheckRepoIsStarredByAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityCheckRepoIsStarredByAuthenticatedUser = (
  variables: ActivityCheckRepoIsStarredByAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    ActivityCheckRepoIsStarredByAuthenticatedUserError,
    undefined,
    {},
    {},
    ActivityCheckRepoIsStarredByAuthenticatedUserPathParams
  >({ url: "/user/starred/{owner}/{repo}", method: "get", ...variables });

export const useActivityCheckRepoIsStarredByAuthenticatedUser = <
  TData = undefined
>(
  variables: ActivityCheckRepoIsStarredByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ActivityCheckRepoIsStarredByAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ActivityCheckRepoIsStarredByAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/starred/{owner}/{repo}",
      operationId: "activityCheckRepoIsStarredByAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityCheckRepoIsStarredByAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityStarRepoForAuthenticatedUserPathParams = {
  owner: string;
  repo: string;
};

export type ActivityStarRepoForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ActivityStarRepoForAuthenticatedUserVariables = {
  pathParams: ActivityStarRepoForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchActivityStarRepoForAuthenticatedUser = (
  variables: ActivityStarRepoForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    ActivityStarRepoForAuthenticatedUserError,
    undefined,
    {},
    {},
    ActivityStarRepoForAuthenticatedUserPathParams
  >({ url: "/user/starred/{owner}/{repo}", method: "put", ...variables });

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useActivityStarRepoForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivityStarRepoForAuthenticatedUserError,
      ActivityStarRepoForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActivityStarRepoForAuthenticatedUserError,
    ActivityStarRepoForAuthenticatedUserVariables
  >(
    (variables: ActivityStarRepoForAuthenticatedUserVariables) =>
      fetchActivityStarRepoForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActivityListWatchedReposForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListWatchedReposForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
  >;

export type ActivityListWatchedReposForAuthenticatedUserResponse =
  Schemas.MinimalRepository[];

export type ActivityListWatchedReposForAuthenticatedUserVariables = {
  queryParams?: ActivityListWatchedReposForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories the authenticated user is watching.
 */
export const fetchActivityListWatchedReposForAuthenticatedUser = (
  variables: ActivityListWatchedReposForAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListWatchedReposForAuthenticatedUserResponse,
    ActivityListWatchedReposForAuthenticatedUserError,
    undefined,
    {},
    ActivityListWatchedReposForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/subscriptions", method: "get", ...variables });

/**
 * Lists repositories the authenticated user is watching.
 */
export const useActivityListWatchedReposForAuthenticatedUser = <
  TData = ActivityListWatchedReposForAuthenticatedUserResponse
>(
  variables: ActivityListWatchedReposForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListWatchedReposForAuthenticatedUserResponse,
      ActivityListWatchedReposForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListWatchedReposForAuthenticatedUserResponse,
    ActivityListWatchedReposForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/subscriptions",
      operationId: "activityListWatchedReposForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListWatchedReposForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsListForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type TeamsListForAuthenticatedUserResponse = Schemas.TeamFull[];

export type TeamsListForAuthenticatedUserVariables = {
  queryParams?: TeamsListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
 */
export const fetchTeamsListForAuthenticatedUser = (
  variables: TeamsListForAuthenticatedUserVariables
) =>
  githubFetch<
    TeamsListForAuthenticatedUserResponse,
    TeamsListForAuthenticatedUserError,
    undefined,
    {},
    TeamsListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/teams", method: "get", ...variables });

/**
 * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
 */
export const useTeamsListForAuthenticatedUser = <
  TData = TeamsListForAuthenticatedUserResponse
>(
  variables: TeamsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListForAuthenticatedUserResponse,
      TeamsListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListForAuthenticatedUserResponse,
    TeamsListForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/teams",
      operationId: "teamsListForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchTeamsListForAuthenticatedUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListQueryParams = {
  /*
   * A user ID. Only return users with an ID greater than this ID.
   */
  since?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type UsersListError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type UsersListResponse = Schemas.SimpleUser[];

export type UsersListVariables = {
  queryParams?: UsersListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
 *
 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
 */
export const fetchUsersList = (variables: UsersListVariables) =>
  githubFetch<
    UsersListResponse,
    UsersListError,
    undefined,
    {},
    UsersListQueryParams,
    {}
  >({ url: "/users", method: "get", ...variables });

/**
 * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
 *
 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
 */
export const useUsersList = <TData = UsersListResponse>(
  variables: UsersListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<UsersListResponse, UsersListError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<UsersListResponse, UsersListError, TData>(
    queryKeyFn({ path: "/users", operationId: "usersList", variables }),
    () => fetchUsersList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersGetByUsernamePathParams = {
  username: string;
};

export type UsersGetByUsernameError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type UsersGetByUsernameVariables = {
  pathParams: UsersGetByUsernamePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Provides publicly available information about someone with a GitHub account.
 *
 * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
 *
 * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
 */
export const fetchUsersGetByUsername = (
  variables: UsersGetByUsernameVariables
) =>
  githubFetch<
    Schemas.PrivateUser | Schemas.PublicUser,
    UsersGetByUsernameError,
    undefined,
    {},
    {},
    UsersGetByUsernamePathParams
  >({ url: "/users/{username}", method: "get", ...variables });

/**
 * Provides publicly available information about someone with a GitHub account.
 *
 * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
 *
 * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
 */
export const useUsersGetByUsername = <
  TData = Schemas.PrivateUser | Schemas.PublicUser
>(
  variables: UsersGetByUsernameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PrivateUser | Schemas.PublicUser,
      UsersGetByUsernameError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PrivateUser | Schemas.PublicUser,
    UsersGetByUsernameError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}",
      operationId: "usersGetByUsername",
      variables,
    }),
    () => fetchUsersGetByUsername({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListEventsForAuthenticatedUserPathParams = {
  username: string;
};

export type ActivityListEventsForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListEventsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListEventsForAuthenticatedUserResponse = Schemas.Event[];

export type ActivityListEventsForAuthenticatedUserVariables = {
  pathParams: ActivityListEventsForAuthenticatedUserPathParams;
  queryParams?: ActivityListEventsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 */
export const fetchActivityListEventsForAuthenticatedUser = (
  variables: ActivityListEventsForAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListEventsForAuthenticatedUserResponse,
    ActivityListEventsForAuthenticatedUserError,
    undefined,
    {},
    ActivityListEventsForAuthenticatedUserQueryParams,
    ActivityListEventsForAuthenticatedUserPathParams
  >({ url: "/users/{username}/events", method: "get", ...variables });

/**
 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 */
export const useActivityListEventsForAuthenticatedUser = <
  TData = ActivityListEventsForAuthenticatedUserResponse
>(
  variables: ActivityListEventsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListEventsForAuthenticatedUserResponse,
      ActivityListEventsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListEventsForAuthenticatedUserResponse,
    ActivityListEventsForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/events",
      operationId: "activityListEventsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListEventsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListOrgEventsForAuthenticatedUserPathParams = {
  username: string;
  org: string;
};

export type ActivityListOrgEventsForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListOrgEventsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListOrgEventsForAuthenticatedUserResponse = Schemas.Event[];

export type ActivityListOrgEventsForAuthenticatedUserVariables = {
  pathParams: ActivityListOrgEventsForAuthenticatedUserPathParams;
  queryParams?: ActivityListOrgEventsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * This is the user's organization dashboard. You must be authenticated as the user to view this.
 */
export const fetchActivityListOrgEventsForAuthenticatedUser = (
  variables: ActivityListOrgEventsForAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListOrgEventsForAuthenticatedUserResponse,
    ActivityListOrgEventsForAuthenticatedUserError,
    undefined,
    {},
    ActivityListOrgEventsForAuthenticatedUserQueryParams,
    ActivityListOrgEventsForAuthenticatedUserPathParams
  >({
    url: "/users/{username}/events/orgs/{org}",
    method: "get",
    ...variables,
  });

/**
 * This is the user's organization dashboard. You must be authenticated as the user to view this.
 */
export const useActivityListOrgEventsForAuthenticatedUser = <
  TData = ActivityListOrgEventsForAuthenticatedUserResponse
>(
  variables: ActivityListOrgEventsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListOrgEventsForAuthenticatedUserResponse,
      ActivityListOrgEventsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListOrgEventsForAuthenticatedUserResponse,
    ActivityListOrgEventsForAuthenticatedUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/events/orgs/{org}",
      operationId: "activityListOrgEventsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListOrgEventsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListPublicEventsForUserPathParams = {
  username: string;
};

export type ActivityListPublicEventsForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicEventsForUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListPublicEventsForUserResponse = Schemas.Event[];

export type ActivityListPublicEventsForUserVariables = {
  pathParams: ActivityListPublicEventsForUserPathParams;
  queryParams?: ActivityListPublicEventsForUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListPublicEventsForUser = (
  variables: ActivityListPublicEventsForUserVariables
) =>
  githubFetch<
    ActivityListPublicEventsForUserResponse,
    ActivityListPublicEventsForUserError,
    undefined,
    {},
    ActivityListPublicEventsForUserQueryParams,
    ActivityListPublicEventsForUserPathParams
  >({ url: "/users/{username}/events/public", method: "get", ...variables });

export const useActivityListPublicEventsForUser = <
  TData = ActivityListPublicEventsForUserResponse
>(
  variables: ActivityListPublicEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsForUserResponse,
      ActivityListPublicEventsForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicEventsForUserResponse,
    ActivityListPublicEventsForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/events/public",
      operationId: "activityListPublicEventsForUser",
      variables,
    }),
    () =>
      fetchActivityListPublicEventsForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListFollowersForUserPathParams = {
  username: string;
};

export type UsersListFollowersForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowersForUserError = Fetcher.ErrorWrapper<undefined>;

export type UsersListFollowersForUserResponse = Schemas.SimpleUser[];

export type UsersListFollowersForUserVariables = {
  pathParams: UsersListFollowersForUserPathParams;
  queryParams?: UsersListFollowersForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people following the specified user.
 */
export const fetchUsersListFollowersForUser = (
  variables: UsersListFollowersForUserVariables
) =>
  githubFetch<
    UsersListFollowersForUserResponse,
    UsersListFollowersForUserError,
    undefined,
    {},
    UsersListFollowersForUserQueryParams,
    UsersListFollowersForUserPathParams
  >({ url: "/users/{username}/followers", method: "get", ...variables });

/**
 * Lists the people following the specified user.
 */
export const useUsersListFollowersForUser = <
  TData = UsersListFollowersForUserResponse
>(
  variables: UsersListFollowersForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowersForUserResponse,
      UsersListFollowersForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowersForUserResponse,
    UsersListFollowersForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/followers",
      operationId: "usersListFollowersForUser",
      variables,
    }),
    () => fetchUsersListFollowersForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListFollowingForUserPathParams = {
  username: string;
};

export type UsersListFollowingForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowingForUserError = Fetcher.ErrorWrapper<undefined>;

export type UsersListFollowingForUserResponse = Schemas.SimpleUser[];

export type UsersListFollowingForUserVariables = {
  pathParams: UsersListFollowingForUserPathParams;
  queryParams?: UsersListFollowingForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people who the specified user follows.
 */
export const fetchUsersListFollowingForUser = (
  variables: UsersListFollowingForUserVariables
) =>
  githubFetch<
    UsersListFollowingForUserResponse,
    UsersListFollowingForUserError,
    undefined,
    {},
    UsersListFollowingForUserQueryParams,
    UsersListFollowingForUserPathParams
  >({ url: "/users/{username}/following", method: "get", ...variables });

/**
 * Lists the people who the specified user follows.
 */
export const useUsersListFollowingForUser = <
  TData = UsersListFollowingForUserResponse
>(
  variables: UsersListFollowingForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowingForUserResponse,
      UsersListFollowingForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowingForUserResponse,
    UsersListFollowingForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/following",
      operationId: "usersListFollowingForUser",
      variables,
    }),
    () => fetchUsersListFollowingForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersCheckFollowingForUserPathParams = {
  username: string;
  targetUser: string;
};

export type UsersCheckFollowingForUserError = Fetcher.ErrorWrapper<undefined>;

export type UsersCheckFollowingForUserVariables = {
  pathParams: UsersCheckFollowingForUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersCheckFollowingForUser = (
  variables: UsersCheckFollowingForUserVariables
) =>
  githubFetch<
    undefined,
    UsersCheckFollowingForUserError,
    undefined,
    {},
    {},
    UsersCheckFollowingForUserPathParams
  >({
    url: "/users/{username}/following/{targetUser}",
    method: "get",
    ...variables,
  });

export const useUsersCheckFollowingForUser = <TData = undefined>(
  variables: UsersCheckFollowingForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      UsersCheckFollowingForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, UsersCheckFollowingForUserError, TData>(
    queryKeyFn({
      path: "/users/{username}/following/{target_user}",
      operationId: "usersCheckFollowingForUser",
      variables,
    }),
    () => fetchUsersCheckFollowingForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsListForUserPathParams = {
  username: string;
};

export type GistsListForUserQueryParams = {
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListForUserError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type GistsListForUserResponse = Schemas.BaseGist[];

export type GistsListForUserVariables = {
  pathParams: GistsListForUserPathParams;
  queryParams?: GistsListForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists public gists for the specified user:
 */
export const fetchGistsListForUser = (variables: GistsListForUserVariables) =>
  githubFetch<
    GistsListForUserResponse,
    GistsListForUserError,
    undefined,
    {},
    GistsListForUserQueryParams,
    GistsListForUserPathParams
  >({ url: "/users/{username}/gists", method: "get", ...variables });

/**
 * Lists public gists for the specified user:
 */
export const useGistsListForUser = <TData = GistsListForUserResponse>(
  variables: GistsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListForUserResponse,
      GistsListForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListForUserResponse,
    GistsListForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/gists",
      operationId: "gistsListForUser",
      variables,
    }),
    () => fetchGistsListForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListGpgKeysForUserPathParams = {
  username: string;
};

export type UsersListGpgKeysForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListGpgKeysForUserError = Fetcher.ErrorWrapper<undefined>;

export type UsersListGpgKeysForUserResponse = Schemas.GpgKey[];

export type UsersListGpgKeysForUserVariables = {
  pathParams: UsersListGpgKeysForUserPathParams;
  queryParams?: UsersListGpgKeysForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the GPG keys for a user. This information is accessible by anyone.
 */
export const fetchUsersListGpgKeysForUser = (
  variables: UsersListGpgKeysForUserVariables
) =>
  githubFetch<
    UsersListGpgKeysForUserResponse,
    UsersListGpgKeysForUserError,
    undefined,
    {},
    UsersListGpgKeysForUserQueryParams,
    UsersListGpgKeysForUserPathParams
  >({ url: "/users/{username}/gpg_keys", method: "get", ...variables });

/**
 * Lists the GPG keys for a user. This information is accessible by anyone.
 */
export const useUsersListGpgKeysForUser = <
  TData = UsersListGpgKeysForUserResponse
>(
  variables: UsersListGpgKeysForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListGpgKeysForUserResponse,
      UsersListGpgKeysForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListGpgKeysForUserResponse,
    UsersListGpgKeysForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/gpg_keys",
      operationId: "usersListGpgKeysForUser",
      variables,
    }),
    () => fetchUsersListGpgKeysForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersGetContextForUserPathParams = {
  username: string;
};

export type UsersGetContextForUserQueryParams = {
  /*
   * Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
   */
  subject_type?: "organization" | "repository" | "issue" | "pull_request";
  /*
   * Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
   */
  subject_id?: string;
};

export type UsersGetContextForUserError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersGetContextForUserVariables = {
  pathParams: UsersGetContextForUserPathParams;
  queryParams?: UsersGetContextForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
 *
 * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
 *
 * ```shell
 *  curl -u username:token
 *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
 * ```
 */
export const fetchUsersGetContextForUser = (
  variables: UsersGetContextForUserVariables
) =>
  githubFetch<
    Schemas.Hovercard,
    UsersGetContextForUserError,
    undefined,
    {},
    UsersGetContextForUserQueryParams,
    UsersGetContextForUserPathParams
  >({ url: "/users/{username}/hovercard", method: "get", ...variables });

/**
 * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
 *
 * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
 *
 * ```shell
 *  curl -u username:token
 *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
 * ```
 */
export const useUsersGetContextForUser = <TData = Schemas.Hovercard>(
  variables: UsersGetContextForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Hovercard,
      UsersGetContextForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Hovercard,
    UsersGetContextForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/hovercard",
      operationId: "usersGetContextForUser",
      variables,
    }),
    () => fetchUsersGetContextForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsGetUserInstallationPathParams = {
  username: string;
};

export type AppsGetUserInstallationError = Fetcher.ErrorWrapper<undefined>;

export type AppsGetUserInstallationVariables = {
  pathParams: AppsGetUserInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetUserInstallation = (
  variables: AppsGetUserInstallationVariables
) =>
  githubFetch<
    Schemas.Installation,
    AppsGetUserInstallationError,
    undefined,
    {},
    {},
    AppsGetUserInstallationPathParams
  >({ url: "/users/{username}/installation", method: "get", ...variables });

/**
 * Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetUserInstallation = <TData = Schemas.Installation>(
  variables: AppsGetUserInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetUserInstallationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    AppsGetUserInstallationError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/installation",
      operationId: "appsGetUserInstallation",
      variables,
    }),
    () => fetchAppsGetUserInstallation({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListPublicKeysForUserPathParams = {
  username: string;
};

export type UsersListPublicKeysForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListPublicKeysForUserError = Fetcher.ErrorWrapper<undefined>;

export type UsersListPublicKeysForUserResponse = Schemas.KeySimple[];

export type UsersListPublicKeysForUserVariables = {
  pathParams: UsersListPublicKeysForUserPathParams;
  queryParams?: UsersListPublicKeysForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 */
export const fetchUsersListPublicKeysForUser = (
  variables: UsersListPublicKeysForUserVariables
) =>
  githubFetch<
    UsersListPublicKeysForUserResponse,
    UsersListPublicKeysForUserError,
    undefined,
    {},
    UsersListPublicKeysForUserQueryParams,
    UsersListPublicKeysForUserPathParams
  >({ url: "/users/{username}/keys", method: "get", ...variables });

/**
 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 */
export const useUsersListPublicKeysForUser = <
  TData = UsersListPublicKeysForUserResponse
>(
  variables: UsersListPublicKeysForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicKeysForUserResponse,
      UsersListPublicKeysForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListPublicKeysForUserResponse,
    UsersListPublicKeysForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/keys",
      operationId: "usersListPublicKeysForUser",
      variables,
    }),
    () => fetchUsersListPublicKeysForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListForUserPathParams = {
  username: string;
};

export type OrgsListForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListForUserError = Fetcher.ErrorWrapper<undefined>;

export type OrgsListForUserResponse = Schemas.OrganizationSimple[];

export type OrgsListForUserVariables = {
  pathParams: OrgsListForUserPathParams;
  queryParams?: OrgsListForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
 */
export const fetchOrgsListForUser = (variables: OrgsListForUserVariables) =>
  githubFetch<
    OrgsListForUserResponse,
    OrgsListForUserError,
    undefined,
    {},
    OrgsListForUserQueryParams,
    OrgsListForUserPathParams
  >({ url: "/users/{username}/orgs", method: "get", ...variables });

/**
 * List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
 */
export const useOrgsListForUser = <TData = OrgsListForUserResponse>(
  variables: OrgsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListForUserResponse,
      OrgsListForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListForUserResponse,
    OrgsListForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/orgs",
      operationId: "orgsListForUser",
      variables,
    }),
    () => fetchOrgsListForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesGetPackageForUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  username: string;
};

export type PackagesGetPackageForUserError = Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageForUserVariables = {
  pathParams: PackagesGetPackageForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package metadata for a public package owned by a user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageForUser = (
  variables: PackagesGetPackageForUserVariables
) =>
  githubFetch<
    Schemas.Package,
    PackagesGetPackageForUserError,
    undefined,
    {},
    {},
    PackagesGetPackageForUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package metadata for a public package owned by a user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageForUser = <TData = Schemas.Package>(
  variables: PackagesGetPackageForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Package,
      PackagesGetPackageForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Package,
    PackagesGetPackageForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/packages/{package_type}/{package_name}",
      operationId: "packagesGetPackageForUser",
      variables,
    }),
    () => fetchPackagesGetPackageForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesGetAllPackageVersionsForPackageOwnedByUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  username: string;
};

export type PackagesGetAllPackageVersionsForPackageOwnedByUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesGetAllPackageVersionsForPackageOwnedByUserResponse =
  Schemas.PackageVersion[];

export type PackagesGetAllPackageVersionsForPackageOwnedByUserVariables = {
  pathParams: PackagesGetAllPackageVersionsForPackageOwnedByUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns all package versions for a public package owned by a specified user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetAllPackageVersionsForPackageOwnedByUser = (
  variables: PackagesGetAllPackageVersionsForPackageOwnedByUserVariables
) =>
  githubFetch<
    PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
    PackagesGetAllPackageVersionsForPackageOwnedByUserError,
    undefined,
    {},
    {},
    PackagesGetAllPackageVersionsForPackageOwnedByUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}/versions",
    method: "get",
    ...variables,
  });

/**
 * Returns all package versions for a public package owned by a specified user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetAllPackageVersionsForPackageOwnedByUser = <
  TData = PackagesGetAllPackageVersionsForPackageOwnedByUserResponse
>(
  variables: PackagesGetAllPackageVersionsForPackageOwnedByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
      PackagesGetAllPackageVersionsForPackageOwnedByUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
    PackagesGetAllPackageVersionsForPackageOwnedByUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/packages/{package_type}/{package_name}/versions",
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByUser",
      variables,
    }),
    () =>
      fetchPackagesGetAllPackageVersionsForPackageOwnedByUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesGetPackageVersionForUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
  username: string;
};

export type PackagesGetPackageVersionForUserError =
  Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageVersionForUserVariables = {
  pathParams: PackagesGetPackageVersionForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package version for a public package owned by a specified user.
 *
 * At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageVersionForUser = (
  variables: PackagesGetPackageVersionForUserVariables
) =>
  githubFetch<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForUserError,
    undefined,
    {},
    {},
    PackagesGetPackageVersionForUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package version for a public package owned by a specified user.
 *
 * At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageVersionForUser = <
  TData = Schemas.PackageVersion
>(
  variables: PackagesGetPackageVersionForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      PackagesGetPackageVersionForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
      operationId: "packagesGetPackageVersionForUser",
      variables,
    }),
    () =>
      fetchPackagesGetPackageVersionForUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsListForUserPathParams = {
  username: string;
};

export type ProjectsListForUserQueryParams = {
  /*
   * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListForUserError = Fetcher.ErrorWrapper<
  | {
      status: 415;
      payload: Responses.PreviewHeaderMissing;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ProjectsListForUserResponse = Schemas.Project[];

export type ProjectsListForUserVariables = {
  pathParams: ProjectsListForUserPathParams;
  queryParams?: ProjectsListForUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsListForUser = (
  variables: ProjectsListForUserVariables
) =>
  githubFetch<
    ProjectsListForUserResponse,
    ProjectsListForUserError,
    undefined,
    {},
    ProjectsListForUserQueryParams,
    ProjectsListForUserPathParams
  >({ url: "/users/{username}/projects", method: "get", ...variables });

export const useProjectsListForUser = <TData = ProjectsListForUserResponse>(
  variables: ProjectsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForUserResponse,
      ProjectsListForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListForUserResponse,
    ProjectsListForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/projects",
      operationId: "projectsListForUser",
      variables,
    }),
    () => fetchProjectsListForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListReceivedEventsForUserPathParams = {
  username: string;
};

export type ActivityListReceivedEventsForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReceivedEventsForUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListReceivedEventsForUserResponse = Schemas.Event[];

export type ActivityListReceivedEventsForUserVariables = {
  pathParams: ActivityListReceivedEventsForUserPathParams;
  queryParams?: ActivityListReceivedEventsForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 */
export const fetchActivityListReceivedEventsForUser = (
  variables: ActivityListReceivedEventsForUserVariables
) =>
  githubFetch<
    ActivityListReceivedEventsForUserResponse,
    ActivityListReceivedEventsForUserError,
    undefined,
    {},
    ActivityListReceivedEventsForUserQueryParams,
    ActivityListReceivedEventsForUserPathParams
  >({ url: "/users/{username}/received_events", method: "get", ...variables });

/**
 * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 */
export const useActivityListReceivedEventsForUser = <
  TData = ActivityListReceivedEventsForUserResponse
>(
  variables: ActivityListReceivedEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReceivedEventsForUserResponse,
      ActivityListReceivedEventsForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReceivedEventsForUserResponse,
    ActivityListReceivedEventsForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/received_events",
      operationId: "activityListReceivedEventsForUser",
      variables,
    }),
    () =>
      fetchActivityListReceivedEventsForUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListReceivedPublicEventsForUserPathParams = {
  username: string;
};

export type ActivityListReceivedPublicEventsForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReceivedPublicEventsForUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListReceivedPublicEventsForUserResponse = Schemas.Event[];

export type ActivityListReceivedPublicEventsForUserVariables = {
  pathParams: ActivityListReceivedPublicEventsForUserPathParams;
  queryParams?: ActivityListReceivedPublicEventsForUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListReceivedPublicEventsForUser = (
  variables: ActivityListReceivedPublicEventsForUserVariables
) =>
  githubFetch<
    ActivityListReceivedPublicEventsForUserResponse,
    ActivityListReceivedPublicEventsForUserError,
    undefined,
    {},
    ActivityListReceivedPublicEventsForUserQueryParams,
    ActivityListReceivedPublicEventsForUserPathParams
  >({
    url: "/users/{username}/received_events/public",
    method: "get",
    ...variables,
  });

export const useActivityListReceivedPublicEventsForUser = <
  TData = ActivityListReceivedPublicEventsForUserResponse
>(
  variables: ActivityListReceivedPublicEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReceivedPublicEventsForUserResponse,
      ActivityListReceivedPublicEventsForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReceivedPublicEventsForUserResponse,
    ActivityListReceivedPublicEventsForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/received_events/public",
      operationId: "activityListReceivedPublicEventsForUser",
      variables,
    }),
    () =>
      fetchActivityListReceivedPublicEventsForUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListForUserPathParams = {
  username: string;
};

export type ReposListForUserQueryParams = {
  /*
   * Can be one of `all`, `owner`, `member`.
   *
   * @default owner
   */
  type?: "all" | "owner" | "member";
  /*
   * Can be one of `created`, `updated`, `pushed`, `full_name`.
   *
   * @default full_name
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /*
   * Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListForUserError = Fetcher.ErrorWrapper<undefined>;

export type ReposListForUserResponse = Schemas.MinimalRepository[];

export type ReposListForUserVariables = {
  pathParams: ReposListForUserPathParams;
  queryParams?: ReposListForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
 */
export const fetchReposListForUser = (variables: ReposListForUserVariables) =>
  githubFetch<
    ReposListForUserResponse,
    ReposListForUserError,
    undefined,
    {},
    ReposListForUserQueryParams,
    ReposListForUserPathParams
  >({ url: "/users/{username}/repos", method: "get", ...variables });

/**
 * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
 */
export const useReposListForUser = <TData = ReposListForUserResponse>(
  variables: ReposListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForUserResponse,
      ReposListForUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForUserResponse,
    ReposListForUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/repos",
      operationId: "reposListForUser",
      variables,
    }),
    () => fetchReposListForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetGithubActionsBillingUserPathParams = {
  username: string;
};

export type BillingGetGithubActionsBillingUserError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetGithubActionsBillingUserVariables = {
  pathParams: BillingGetGithubActionsBillingUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `user` scope.
 */
export const fetchBillingGetGithubActionsBillingUser = (
  variables: BillingGetGithubActionsBillingUserVariables
) =>
  githubFetch<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingUserError,
    undefined,
    {},
    {},
    BillingGetGithubActionsBillingUserPathParams
  >({
    url: "/users/{username}/settings/billing/actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `user` scope.
 */
export const useBillingGetGithubActionsBillingUser = <
  TData = Schemas.ActionsBillingUsage
>(
  variables: BillingGetGithubActionsBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsBillingUsage,
      BillingGetGithubActionsBillingUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/settings/billing/actions",
      operationId: "billingGetGithubActionsBillingUser",
      variables,
    }),
    () =>
      fetchBillingGetGithubActionsBillingUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetGithubPackagesBillingUserPathParams = {
  username: string;
};

export type BillingGetGithubPackagesBillingUserError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetGithubPackagesBillingUserVariables = {
  pathParams: BillingGetGithubPackagesBillingUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const fetchBillingGetGithubPackagesBillingUser = (
  variables: BillingGetGithubPackagesBillingUserVariables
) =>
  githubFetch<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingUserError,
    undefined,
    {},
    {},
    BillingGetGithubPackagesBillingUserPathParams
  >({
    url: "/users/{username}/settings/billing/packages",
    method: "get",
    ...variables,
  });

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const useBillingGetGithubPackagesBillingUser = <
  TData = Schemas.PackagesBillingUsage
>(
  variables: BillingGetGithubPackagesBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackagesBillingUsage,
      BillingGetGithubPackagesBillingUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/settings/billing/packages",
      operationId: "billingGetGithubPackagesBillingUser",
      variables,
    }),
    () =>
      fetchBillingGetGithubPackagesBillingUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetSharedStorageBillingUserPathParams = {
  username: string;
};

export type BillingGetSharedStorageBillingUserError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetSharedStorageBillingUserVariables = {
  pathParams: BillingGetSharedStorageBillingUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const fetchBillingGetSharedStorageBillingUser = (
  variables: BillingGetSharedStorageBillingUserVariables
) =>
  githubFetch<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingUserError,
    undefined,
    {},
    {},
    BillingGetSharedStorageBillingUserPathParams
  >({
    url: "/users/{username}/settings/billing/shared-storage",
    method: "get",
    ...variables,
  });

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const useBillingGetSharedStorageBillingUser = <
  TData = Schemas.CombinedBillingUsage
>(
  variables: BillingGetSharedStorageBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedBillingUsage,
      BillingGetSharedStorageBillingUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/settings/billing/shared-storage",
      operationId: "billingGetSharedStorageBillingUser",
      variables,
    }),
    () =>
      fetchBillingGetSharedStorageBillingUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListReposStarredByUserPathParams = {
  username: string;
};

export type ActivityListReposStarredByUserQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReposStarredByUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListReposStarredByUserResponse = Schemas.Repository[];

export type ActivityListReposStarredByUserVariables = {
  pathParams: ActivityListReposStarredByUserPathParams;
  queryParams?: ActivityListReposStarredByUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories a user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const fetchActivityListReposStarredByUser = (
  variables: ActivityListReposStarredByUserVariables
) =>
  githubFetch<
    ActivityListReposStarredByUserResponse,
    ActivityListReposStarredByUserError,
    undefined,
    {},
    ActivityListReposStarredByUserQueryParams,
    ActivityListReposStarredByUserPathParams
  >({ url: "/users/{username}/starred", method: "get", ...variables });

/**
 * Lists repositories a user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const useActivityListReposStarredByUser = <
  TData = ActivityListReposStarredByUserResponse
>(
  variables: ActivityListReposStarredByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReposStarredByUserResponse,
      ActivityListReposStarredByUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReposStarredByUserResponse,
    ActivityListReposStarredByUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/starred",
      operationId: "activityListReposStarredByUser",
      variables,
    }),
    () =>
      fetchActivityListReposStarredByUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListReposWatchedByUserPathParams = {
  username: string;
};

export type ActivityListReposWatchedByUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReposWatchedByUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListReposWatchedByUserResponse =
  Schemas.MinimalRepository[];

export type ActivityListReposWatchedByUserVariables = {
  pathParams: ActivityListReposWatchedByUserPathParams;
  queryParams?: ActivityListReposWatchedByUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories a user is watching.
 */
export const fetchActivityListReposWatchedByUser = (
  variables: ActivityListReposWatchedByUserVariables
) =>
  githubFetch<
    ActivityListReposWatchedByUserResponse,
    ActivityListReposWatchedByUserError,
    undefined,
    {},
    ActivityListReposWatchedByUserQueryParams,
    ActivityListReposWatchedByUserPathParams
  >({ url: "/users/{username}/subscriptions", method: "get", ...variables });

/**
 * Lists repositories a user is watching.
 */
export const useActivityListReposWatchedByUser = <
  TData = ActivityListReposWatchedByUserResponse
>(
  variables: ActivityListReposWatchedByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReposWatchedByUserResponse,
      ActivityListReposWatchedByUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReposWatchedByUserResponse,
    ActivityListReposWatchedByUserError,
    TData
  >(
    queryKeyFn({
      path: "/users/{username}/subscriptions",
      operationId: "activityListReposWatchedByUser",
      variables,
    }),
    () =>
      fetchActivityListReposWatchedByUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MetaGetZenError = Fetcher.ErrorWrapper<undefined>;

export type MetaGetZenVariables = GithubContext["fetcherOptions"];

/**
 * Get a random sentence from the Zen of GitHub
 */
export const fetchMetaGetZen = (variables: MetaGetZenVariables) =>
  githubFetch<undefined, MetaGetZenError, undefined, {}, {}, {}>({
    url: "/zen",
    method: "get",
    ...variables,
  });

/**
 * Get a random sentence from the Zen of GitHub
 */
export const useMetaGetZen = <TData = undefined>(
  variables: MetaGetZenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, MetaGetZenError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, MetaGetZenError, TData>(
    queryKeyFn({ path: "/zen", operationId: "metaGetZen", variables }),
    () => fetchMetaGetZen({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/";
      operationId: "metaRoot";
      variables: MetaRootVariables;
    }
  | {
      path: "/app";
      operationId: "appsGetAuthenticated";
      variables: AppsGetAuthenticatedVariables;
    }
  | {
      path: "/app/hook/config";
      operationId: "appsGetWebhookConfigForApp";
      variables: AppsGetWebhookConfigForAppVariables;
    }
  | {
      path: "/app/installations";
      operationId: "appsListInstallations";
      variables: AppsListInstallationsVariables;
    }
  | {
      path: "/app/installations/{installation_id}";
      operationId: "appsGetInstallation";
      variables: AppsGetInstallationVariables;
    }
  | {
      path: "/applications/grants";
      operationId: "oauthAuthorizationsListGrants";
      variables: OauthAuthorizationsListGrantsVariables;
    }
  | {
      path: "/applications/grants/{grant_id}";
      operationId: "oauthAuthorizationsGetGrant";
      variables: OauthAuthorizationsGetGrantVariables;
    }
  | {
      path: "/applications/{client_id}/tokens/{access_token}";
      operationId: "appsCheckAuthorization";
      variables: AppsCheckAuthorizationVariables;
    }
  | {
      path: "/apps/{app_slug}";
      operationId: "appsGetBySlug";
      variables: AppsGetBySlugVariables;
    }
  | {
      path: "/authorizations";
      operationId: "oauthAuthorizationsListAuthorizations";
      variables: OauthAuthorizationsListAuthorizationsVariables;
    }
  | {
      path: "/authorizations/{authorization_id}";
      operationId: "oauthAuthorizationsGetAuthorization";
      variables: OauthAuthorizationsGetAuthorizationVariables;
    }
  | {
      path: "/codes_of_conduct";
      operationId: "codesOfConductGetAllCodesOfConduct";
      variables: CodesOfConductGetAllCodesOfConductVariables;
    }
  | {
      path: "/codes_of_conduct/{key}";
      operationId: "codesOfConductGetConductCode";
      variables: CodesOfConductGetConductCodeVariables;
    }
  | {
      path: "/emojis";
      operationId: "emojisGet";
      variables: EmojisGetVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/permissions";
      operationId: "enterpriseAdminGetGithubActionsPermissionsEnterprise";
      variables: EnterpriseAdminGetGithubActionsPermissionsEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/permissions/organizations";
      operationId: "enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise";
      variables: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/permissions/selected-actions";
      operationId: "enterpriseAdminGetAllowedActionsEnterprise";
      variables: EnterpriseAdminGetAllowedActionsEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runner-groups";
      operationId: "enterpriseAdminListSelfHostedRunnerGroupsForEnterprise";
      variables: EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}";
      operationId: "enterpriseAdminGetSelfHostedRunnerGroupForEnterprise";
      variables: EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations";
      operationId: "enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise";
      variables: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners";
      operationId: "enterpriseAdminListSelfHostedRunnersInGroupForEnterprise";
      variables: EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runners";
      operationId: "enterpriseAdminListSelfHostedRunnersForEnterprise";
      variables: EnterpriseAdminListSelfHostedRunnersForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runners/downloads";
      operationId: "enterpriseAdminListRunnerApplicationsForEnterprise";
      variables: EnterpriseAdminListRunnerApplicationsForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runners/{runner_id}";
      operationId: "enterpriseAdminGetSelfHostedRunnerForEnterprise";
      variables: EnterpriseAdminGetSelfHostedRunnerForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/audit-log";
      operationId: "auditLogGetAuditLog";
      variables: AuditLogGetAuditLogVariables;
    }
  | {
      path: "/enterprises/{enterprise}/settings/billing/actions";
      operationId: "billingGetGithubActionsBillingGhe";
      variables: BillingGetGithubActionsBillingGheVariables;
    }
  | {
      path: "/enterprises/{enterprise}/settings/billing/packages";
      operationId: "billingGetGithubPackagesBillingGhe";
      variables: BillingGetGithubPackagesBillingGheVariables;
    }
  | {
      path: "/enterprises/{enterprise}/settings/billing/shared-storage";
      operationId: "billingGetSharedStorageBillingGhe";
      variables: BillingGetSharedStorageBillingGheVariables;
    }
  | {
      path: "/events";
      operationId: "activityListPublicEvents";
      variables: ActivityListPublicEventsVariables;
    }
  | {
      path: "/feeds";
      operationId: "activityGetFeeds";
      variables: ActivityGetFeedsVariables;
    }
  | {
      path: "/gists";
      operationId: "gistsList";
      variables: GistsListVariables;
    }
  | {
      path: "/gists/public";
      operationId: "gistsListPublic";
      variables: GistsListPublicVariables;
    }
  | {
      path: "/gists/starred";
      operationId: "gistsListStarred";
      variables: GistsListStarredVariables;
    }
  | {
      path: "/gists/{gist_id}";
      operationId: "gistsGet";
      variables: GistsGetVariables;
    }
  | {
      path: "/gists/{gist_id}/comments";
      operationId: "gistsListComments";
      variables: GistsListCommentsVariables;
    }
  | {
      path: "/gists/{gist_id}/comments/{comment_id}";
      operationId: "gistsGetComment";
      variables: GistsGetCommentVariables;
    }
  | {
      path: "/gists/{gist_id}/commits";
      operationId: "gistsListCommits";
      variables: GistsListCommitsVariables;
    }
  | {
      path: "/gists/{gist_id}/forks";
      operationId: "gistsListForks";
      variables: GistsListForksVariables;
    }
  | {
      path: "/gists/{gist_id}/star";
      operationId: "gistsCheckIsStarred";
      variables: GistsCheckIsStarredVariables;
    }
  | {
      path: "/gists/{gist_id}/{sha}";
      operationId: "gistsGetRevision";
      variables: GistsGetRevisionVariables;
    }
  | {
      path: "/gitignore/templates";
      operationId: "gitignoreGetAllTemplates";
      variables: GitignoreGetAllTemplatesVariables;
    }
  | {
      path: "/gitignore/templates/{name}";
      operationId: "gitignoreGetTemplate";
      variables: GitignoreGetTemplateVariables;
    }
  | {
      path: "/installation/repositories";
      operationId: "appsListReposAccessibleToInstallation";
      variables: AppsListReposAccessibleToInstallationVariables;
    }
  | {
      path: "/issues";
      operationId: "issuesList";
      variables: IssuesListVariables;
    }
  | {
      path: "/licenses";
      operationId: "licensesGetAllCommonlyUsed";
      variables: LicensesGetAllCommonlyUsedVariables;
    }
  | {
      path: "/licenses/{license}";
      operationId: "licensesGet";
      variables: LicensesGetVariables;
    }
  | {
      path: "/marketplace_listing/accounts/{account_id}";
      operationId: "appsGetSubscriptionPlanForAccount";
      variables: AppsGetSubscriptionPlanForAccountVariables;
    }
  | {
      path: "/marketplace_listing/plans";
      operationId: "appsListPlans";
      variables: AppsListPlansVariables;
    }
  | {
      path: "/marketplace_listing/plans/{plan_id}/accounts";
      operationId: "appsListAccountsForPlan";
      variables: AppsListAccountsForPlanVariables;
    }
  | {
      path: "/marketplace_listing/stubbed/accounts/{account_id}";
      operationId: "appsGetSubscriptionPlanForAccountStubbed";
      variables: AppsGetSubscriptionPlanForAccountStubbedVariables;
    }
  | {
      path: "/marketplace_listing/stubbed/plans";
      operationId: "appsListPlansStubbed";
      variables: AppsListPlansStubbedVariables;
    }
  | {
      path: "/marketplace_listing/stubbed/plans/{plan_id}/accounts";
      operationId: "appsListAccountsForPlanStubbed";
      variables: AppsListAccountsForPlanStubbedVariables;
    }
  | {
      path: "/meta";
      operationId: "metaGet";
      variables: MetaGetVariables;
    }
  | {
      path: "/networks/{owner}/{repo}/events";
      operationId: "activityListPublicEventsForRepoNetwork";
      variables: ActivityListPublicEventsForRepoNetworkVariables;
    }
  | {
      path: "/notifications";
      operationId: "activityListNotificationsForAuthenticatedUser";
      variables: ActivityListNotificationsForAuthenticatedUserVariables;
    }
  | {
      path: "/notifications/threads/{thread_id}";
      operationId: "activityGetThread";
      variables: ActivityGetThreadVariables;
    }
  | {
      path: "/notifications/threads/{thread_id}/subscription";
      operationId: "activityGetThreadSubscriptionForAuthenticatedUser";
      variables: ActivityGetThreadSubscriptionForAuthenticatedUserVariables;
    }
  | {
      path: "/octocat";
      operationId: "metaGetOctocat";
      variables: MetaGetOctocatVariables;
    }
  | {
      path: "/organizations";
      operationId: "orgsList";
      variables: OrgsListVariables;
    }
  | {
      path: "/orgs/{org}";
      operationId: "orgsGet";
      variables: OrgsGetVariables;
    }
  | {
      path: "/orgs/{org}/actions/permissions";
      operationId: "actionsGetGithubActionsPermissionsOrganization";
      variables: ActionsGetGithubActionsPermissionsOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/actions/permissions/repositories";
      operationId: "actionsListSelectedRepositoriesEnabledGithubActionsOrganization";
      variables: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/actions/permissions/selected-actions";
      operationId: "actionsGetAllowedActionsOrganization";
      variables: ActionsGetAllowedActionsOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/actions/runner-groups";
      operationId: "actionsListSelfHostedRunnerGroupsForOrg";
      variables: ActionsListSelfHostedRunnerGroupsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}";
      operationId: "actionsGetSelfHostedRunnerGroupForOrg";
      variables: ActionsGetSelfHostedRunnerGroupForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories";
      operationId: "actionsListRepoAccessToSelfHostedRunnerGroupInOrg";
      variables: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners";
      operationId: "actionsListSelfHostedRunnersInGroupForOrg";
      variables: ActionsListSelfHostedRunnersInGroupForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runners";
      operationId: "actionsListSelfHostedRunnersForOrg";
      variables: ActionsListSelfHostedRunnersForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runners/downloads";
      operationId: "actionsListRunnerApplicationsForOrg";
      variables: ActionsListRunnerApplicationsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runners/{runner_id}";
      operationId: "actionsGetSelfHostedRunnerForOrg";
      variables: ActionsGetSelfHostedRunnerForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets";
      operationId: "actionsListOrgSecrets";
      variables: ActionsListOrgSecretsVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets/public-key";
      operationId: "actionsGetOrgPublicKey";
      variables: ActionsGetOrgPublicKeyVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets/{secret_name}";
      operationId: "actionsGetOrgSecret";
      variables: ActionsGetOrgSecretVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets/{secret_name}/repositories";
      operationId: "actionsListSelectedReposForOrgSecret";
      variables: ActionsListSelectedReposForOrgSecretVariables;
    }
  | {
      path: "/orgs/{org}/audit-log";
      operationId: "orgsGetAuditLog";
      variables: OrgsGetAuditLogVariables;
    }
  | {
      path: "/orgs/{org}/blocks";
      operationId: "orgsListBlockedUsers";
      variables: OrgsListBlockedUsersVariables;
    }
  | {
      path: "/orgs/{org}/blocks/{username}";
      operationId: "orgsCheckBlockedUser";
      variables: OrgsCheckBlockedUserVariables;
    }
  | {
      path: "/orgs/{org}/credential-authorizations";
      operationId: "orgsListSamlSsoAuthorizations";
      variables: OrgsListSamlSsoAuthorizationsVariables;
    }
  | {
      path: "/orgs/{org}/events";
      operationId: "activityListPublicOrgEvents";
      variables: ActivityListPublicOrgEventsVariables;
    }
  | {
      path: "/orgs/{org}/failed_invitations";
      operationId: "orgsListFailedInvitations";
      variables: OrgsListFailedInvitationsVariables;
    }
  | {
      path: "/orgs/{org}/hooks";
      operationId: "orgsListWebhooks";
      variables: OrgsListWebhooksVariables;
    }
  | {
      path: "/orgs/{org}/hooks/{hook_id}";
      operationId: "orgsGetWebhook";
      variables: OrgsGetWebhookVariables;
    }
  | {
      path: "/orgs/{org}/hooks/{hook_id}/config";
      operationId: "orgsGetWebhookConfigForOrg";
      variables: OrgsGetWebhookConfigForOrgVariables;
    }
  | {
      path: "/orgs/{org}/installation";
      operationId: "appsGetOrgInstallation";
      variables: AppsGetOrgInstallationVariables;
    }
  | {
      path: "/orgs/{org}/installations";
      operationId: "orgsListAppInstallations";
      variables: OrgsListAppInstallationsVariables;
    }
  | {
      path: "/orgs/{org}/interaction-limits";
      operationId: "interactionsGetRestrictionsForOrg";
      variables: InteractionsGetRestrictionsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/invitations";
      operationId: "orgsListPendingInvitations";
      variables: OrgsListPendingInvitationsVariables;
    }
  | {
      path: "/orgs/{org}/invitations/{invitation_id}/teams";
      operationId: "orgsListInvitationTeams";
      variables: OrgsListInvitationTeamsVariables;
    }
  | {
      path: "/orgs/{org}/issues";
      operationId: "issuesListForOrg";
      variables: IssuesListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/members";
      operationId: "orgsListMembers";
      variables: OrgsListMembersVariables;
    }
  | {
      path: "/orgs/{org}/members/{username}";
      operationId: "orgsCheckMembershipForUser";
      variables: OrgsCheckMembershipForUserVariables;
    }
  | {
      path: "/orgs/{org}/memberships/{username}";
      operationId: "orgsGetMembershipForUser";
      variables: OrgsGetMembershipForUserVariables;
    }
  | {
      path: "/orgs/{org}/migrations";
      operationId: "migrationsListForOrg";
      variables: MigrationsListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/migrations/{migration_id}";
      operationId: "migrationsGetStatusForOrg";
      variables: MigrationsGetStatusForOrgVariables;
    }
  | {
      path: "/orgs/{org}/migrations/{migration_id}/archive";
      operationId: "migrationsDownloadArchiveForOrg";
      variables: MigrationsDownloadArchiveForOrgVariables;
    }
  | {
      path: "/orgs/{org}/migrations/{migration_id}/repositories";
      operationId: "migrationsListReposForOrg";
      variables: MigrationsListReposForOrgVariables;
    }
  | {
      path: "/orgs/{org}/outside_collaborators";
      operationId: "orgsListOutsideCollaborators";
      variables: OrgsListOutsideCollaboratorsVariables;
    }
  | {
      path: "/orgs/{org}/packages/{package_type}/{package_name}";
      operationId: "packagesGetPackageForOrganization";
      variables: PackagesGetPackageForOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/packages/{package_type}/{package_name}/versions";
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByOrg";
      variables: PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables;
    }
  | {
      path: "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}";
      operationId: "packagesGetPackageVersionForOrganization";
      variables: PackagesGetPackageVersionForOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/projects";
      operationId: "projectsListForOrg";
      variables: ProjectsListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/public_members";
      operationId: "orgsListPublicMembers";
      variables: OrgsListPublicMembersVariables;
    }
  | {
      path: "/orgs/{org}/public_members/{username}";
      operationId: "orgsCheckPublicMembershipForUser";
      variables: OrgsCheckPublicMembershipForUserVariables;
    }
  | {
      path: "/orgs/{org}/repos";
      operationId: "reposListForOrg";
      variables: ReposListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/settings/billing/actions";
      operationId: "billingGetGithubActionsBillingOrg";
      variables: BillingGetGithubActionsBillingOrgVariables;
    }
  | {
      path: "/orgs/{org}/settings/billing/packages";
      operationId: "billingGetGithubPackagesBillingOrg";
      variables: BillingGetGithubPackagesBillingOrgVariables;
    }
  | {
      path: "/orgs/{org}/settings/billing/shared-storage";
      operationId: "billingGetSharedStorageBillingOrg";
      variables: BillingGetSharedStorageBillingOrgVariables;
    }
  | {
      path: "/orgs/{org}/team-sync/groups";
      operationId: "teamsListIdpGroupsForOrg";
      variables: TeamsListIdpGroupsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams";
      operationId: "teamsList";
      variables: TeamsListVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}";
      operationId: "teamsGetByName";
      variables: TeamsGetByNameVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions";
      operationId: "teamsListDiscussionsInOrg";
      variables: TeamsListDiscussionsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}";
      operationId: "teamsGetDiscussionInOrg";
      variables: TeamsGetDiscussionInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments";
      operationId: "teamsListDiscussionCommentsInOrg";
      variables: TeamsListDiscussionCommentsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}";
      operationId: "teamsGetDiscussionCommentInOrg";
      variables: TeamsGetDiscussionCommentInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions";
      operationId: "reactionsListForTeamDiscussionCommentInOrg";
      variables: ReactionsListForTeamDiscussionCommentInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions";
      operationId: "reactionsListForTeamDiscussionInOrg";
      variables: ReactionsListForTeamDiscussionInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/invitations";
      operationId: "teamsListPendingInvitationsInOrg";
      variables: TeamsListPendingInvitationsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/members";
      operationId: "teamsListMembersInOrg";
      variables: TeamsListMembersInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/memberships/{username}";
      operationId: "teamsGetMembershipForUserInOrg";
      variables: TeamsGetMembershipForUserInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/projects";
      operationId: "teamsListProjectsInOrg";
      variables: TeamsListProjectsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/projects/{project_id}";
      operationId: "teamsCheckPermissionsForProjectInOrg";
      variables: TeamsCheckPermissionsForProjectInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/repos";
      operationId: "teamsListReposInOrg";
      variables: TeamsListReposInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}";
      operationId: "teamsCheckPermissionsForRepoInOrg";
      variables: TeamsCheckPermissionsForRepoInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings";
      operationId: "teamsListIdpGroupsInOrg";
      variables: TeamsListIdpGroupsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/teams";
      operationId: "teamsListChildInOrg";
      variables: TeamsListChildInOrgVariables;
    }
  | {
      path: "/projects/columns/cards/{card_id}";
      operationId: "projectsGetCard";
      variables: ProjectsGetCardVariables;
    }
  | {
      path: "/projects/columns/{column_id}";
      operationId: "projectsGetColumn";
      variables: ProjectsGetColumnVariables;
    }
  | {
      path: "/projects/columns/{column_id}/cards";
      operationId: "projectsListCards";
      variables: ProjectsListCardsVariables;
    }
  | {
      path: "/projects/{project_id}";
      operationId: "projectsGet";
      variables: ProjectsGetVariables;
    }
  | {
      path: "/projects/{project_id}/collaborators";
      operationId: "projectsListCollaborators";
      variables: ProjectsListCollaboratorsVariables;
    }
  | {
      path: "/projects/{project_id}/collaborators/{username}/permission";
      operationId: "projectsGetPermissionForUser";
      variables: ProjectsGetPermissionForUserVariables;
    }
  | {
      path: "/projects/{project_id}/columns";
      operationId: "projectsListColumns";
      variables: ProjectsListColumnsVariables;
    }
  | {
      path: "/rate_limit";
      operationId: "rateLimitGet";
      variables: RateLimitGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}";
      operationId: "reposGet";
      variables: ReposGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/artifacts";
      operationId: "actionsListArtifactsForRepo";
      variables: ActionsListArtifactsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}";
      operationId: "actionsGetArtifact";
      variables: ActionsGetArtifactVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}";
      operationId: "actionsDownloadArtifact";
      variables: ActionsDownloadArtifactVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/jobs/{job_id}";
      operationId: "actionsGetJobForWorkflowRun";
      variables: ActionsGetJobForWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs";
      operationId: "actionsDownloadJobLogsForWorkflowRun";
      variables: ActionsDownloadJobLogsForWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/permissions";
      operationId: "actionsGetGithubActionsPermissionsRepository";
      variables: ActionsGetGithubActionsPermissionsRepositoryVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/permissions/selected-actions";
      operationId: "actionsGetAllowedActionsRepository";
      variables: ActionsGetAllowedActionsRepositoryVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runners";
      operationId: "actionsListSelfHostedRunnersForRepo";
      variables: ActionsListSelfHostedRunnersForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runners/downloads";
      operationId: "actionsListRunnerApplicationsForRepo";
      variables: ActionsListRunnerApplicationsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runners/{runner_id}";
      operationId: "actionsGetSelfHostedRunnerForRepo";
      variables: ActionsGetSelfHostedRunnerForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs";
      operationId: "actionsListWorkflowRunsForRepo";
      variables: ActionsListWorkflowRunsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}";
      operationId: "actionsGetWorkflowRun";
      variables: ActionsGetWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals";
      operationId: "actionsGetReviewsForRun";
      variables: ActionsGetReviewsForRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts";
      operationId: "actionsListWorkflowRunArtifacts";
      variables: ActionsListWorkflowRunArtifactsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs";
      operationId: "actionsListJobsForWorkflowRun";
      variables: ActionsListJobsForWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/logs";
      operationId: "actionsDownloadWorkflowRunLogs";
      variables: ActionsDownloadWorkflowRunLogsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments";
      operationId: "actionsGetPendingDeploymentsForRun";
      variables: ActionsGetPendingDeploymentsForRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/timing";
      operationId: "actionsGetWorkflowRunUsage";
      variables: ActionsGetWorkflowRunUsageVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/secrets";
      operationId: "actionsListRepoSecrets";
      variables: ActionsListRepoSecretsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/secrets/public-key";
      operationId: "actionsGetRepoPublicKey";
      variables: ActionsGetRepoPublicKeyVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/secrets/{secret_name}";
      operationId: "actionsGetRepoSecret";
      variables: ActionsGetRepoSecretVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows";
      operationId: "actionsListRepoWorkflows";
      variables: ActionsListRepoWorkflowsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}";
      operationId: "actionsGetWorkflow";
      variables: ActionsGetWorkflowVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs";
      operationId: "actionsListWorkflowRuns";
      variables: ActionsListWorkflowRunsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing";
      operationId: "actionsGetWorkflowUsage";
      variables: ActionsGetWorkflowUsageVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/assignees";
      operationId: "issuesListAssignees";
      variables: IssuesListAssigneesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/assignees/{assignee}";
      operationId: "issuesCheckUserCanBeAssigned";
      variables: IssuesCheckUserCanBeAssignedVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches";
      operationId: "reposListBranches";
      variables: ReposListBranchesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}";
      operationId: "reposGetBranch";
      variables: ReposGetBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection";
      operationId: "reposGetBranchProtection";
      variables: ReposGetBranchProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins";
      operationId: "reposGetAdminBranchProtection";
      variables: ReposGetAdminBranchProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews";
      operationId: "reposGetPullRequestReviewProtection";
      variables: ReposGetPullRequestReviewProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures";
      operationId: "reposGetCommitSignatureProtection";
      variables: ReposGetCommitSignatureProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks";
      operationId: "reposGetStatusChecksProtection";
      variables: ReposGetStatusChecksProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts";
      operationId: "reposGetAllStatusCheckContexts";
      variables: ReposGetAllStatusCheckContextsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions";
      operationId: "reposGetAccessRestrictions";
      variables: ReposGetAccessRestrictionsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps";
      operationId: "reposGetAppsWithAccessToProtectedBranch";
      variables: ReposGetAppsWithAccessToProtectedBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams";
      operationId: "reposGetTeamsWithAccessToProtectedBranch";
      variables: ReposGetTeamsWithAccessToProtectedBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users";
      operationId: "reposGetUsersWithAccessToProtectedBranch";
      variables: ReposGetUsersWithAccessToProtectedBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-runs/{check_run_id}";
      operationId: "checksGet";
      variables: ChecksGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations";
      operationId: "checksListAnnotations";
      variables: ChecksListAnnotationsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-suites/{check_suite_id}";
      operationId: "checksGetSuite";
      variables: ChecksGetSuiteVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs";
      operationId: "checksListForSuite";
      variables: ChecksListForSuiteVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/alerts";
      operationId: "codeScanningListAlertsForRepo";
      variables: CodeScanningListAlertsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}";
      operationId: "codeScanningGetAlert";
      variables: CodeScanningGetAlertVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances";
      operationId: "codeScanningListAlertsInstances";
      variables: CodeScanningListAlertsInstancesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/analyses";
      operationId: "codeScanningListRecentAnalyses";
      variables: CodeScanningListRecentAnalysesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}";
      operationId: "codeScanningGetAnalysis";
      variables: CodeScanningGetAnalysisVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}";
      operationId: "codeScanningGetSarif";
      variables: CodeScanningGetSarifVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/collaborators";
      operationId: "reposListCollaborators";
      variables: ReposListCollaboratorsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/collaborators/{username}";
      operationId: "reposCheckCollaborator";
      variables: ReposCheckCollaboratorVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/collaborators/{username}/permission";
      operationId: "reposGetCollaboratorPermissionLevel";
      variables: ReposGetCollaboratorPermissionLevelVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/comments";
      operationId: "reposListCommitCommentsForRepo";
      variables: ReposListCommitCommentsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/comments/{comment_id}";
      operationId: "reposGetCommitComment";
      variables: ReposGetCommitCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/comments/{comment_id}/reactions";
      operationId: "reactionsListForCommitComment";
      variables: ReactionsListForCommitCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits";
      operationId: "reposListCommits";
      variables: ReposListCommitsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head";
      operationId: "reposListBranchesForHeadCommit";
      variables: ReposListBranchesForHeadCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/comments";
      operationId: "reposListCommentsForCommit";
      variables: ReposListCommentsForCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/pulls";
      operationId: "reposListPullRequestsAssociatedWithCommit";
      variables: ReposListPullRequestsAssociatedWithCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}";
      operationId: "reposGetCommit";
      variables: ReposGetCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/check-runs";
      operationId: "checksListForRef";
      variables: ChecksListForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/check-suites";
      operationId: "checksListSuitesForRef";
      variables: ChecksListSuitesForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/status";
      operationId: "reposGetCombinedStatusForRef";
      variables: ReposGetCombinedStatusForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/statuses";
      operationId: "reposListCommitStatusesForRef";
      variables: ReposListCommitStatusesForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/community/code_of_conduct";
      operationId: "codesOfConductGetForRepo";
      variables: CodesOfConductGetForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/community/profile";
      operationId: "reposGetCommunityProfileMetrics";
      variables: ReposGetCommunityProfileMetricsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/compare/{base}...{head}";
      operationId: "reposCompareCommits";
      variables: ReposCompareCommitsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/contents/{path}";
      operationId: "reposGetContent";
      variables: ReposGetContentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/contributors";
      operationId: "reposListContributors";
      variables: ReposListContributorsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments";
      operationId: "reposListDeployments";
      variables: ReposListDeploymentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}";
      operationId: "reposGetDeployment";
      variables: ReposGetDeploymentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses";
      operationId: "reposListDeploymentStatuses";
      variables: ReposListDeploymentStatusesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}";
      operationId: "reposGetDeploymentStatus";
      variables: ReposGetDeploymentStatusVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/environments";
      operationId: "reposGetAllEnvironments";
      variables: ReposGetAllEnvironmentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/environments/{environment_name}";
      operationId: "reposGetEnvironment";
      variables: ReposGetEnvironmentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/events";
      operationId: "activityListRepoEvents";
      variables: ActivityListRepoEventsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/forks";
      operationId: "reposListForks";
      variables: ReposListForksVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/blobs/{file_sha}";
      operationId: "gitGetBlob";
      variables: GitGetBlobVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/commits/{commit_sha}";
      operationId: "gitGetCommit";
      variables: GitGetCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/matching-refs/{ref}";
      operationId: "gitListMatchingRefs";
      variables: GitListMatchingRefsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/ref/{ref}";
      operationId: "gitGetRef";
      variables: GitGetRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/tags/{tag_sha}";
      operationId: "gitGetTag";
      variables: GitGetTagVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/trees/{tree_sha}";
      operationId: "gitGetTree";
      variables: GitGetTreeVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/hooks";
      operationId: "reposListWebhooks";
      variables: ReposListWebhooksVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/hooks/{hook_id}";
      operationId: "reposGetWebhook";
      variables: ReposGetWebhookVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/hooks/{hook_id}/config";
      operationId: "reposGetWebhookConfigForRepo";
      variables: ReposGetWebhookConfigForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/import";
      operationId: "migrationsGetImportStatus";
      variables: MigrationsGetImportStatusVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/import/authors";
      operationId: "migrationsGetCommitAuthors";
      variables: MigrationsGetCommitAuthorsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/import/large_files";
      operationId: "migrationsGetLargeFiles";
      variables: MigrationsGetLargeFilesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/installation";
      operationId: "appsGetRepoInstallation";
      variables: AppsGetRepoInstallationVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/interaction-limits";
      operationId: "interactionsGetRestrictionsForRepo";
      variables: InteractionsGetRestrictionsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/invitations";
      operationId: "reposListInvitations";
      variables: ReposListInvitationsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues";
      operationId: "issuesListForRepo";
      variables: IssuesListForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/comments";
      operationId: "issuesListCommentsForRepo";
      variables: IssuesListCommentsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/comments/{comment_id}";
      operationId: "issuesGetComment";
      variables: IssuesGetCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions";
      operationId: "reactionsListForIssueComment";
      variables: ReactionsListForIssueCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/events";
      operationId: "issuesListEventsForRepo";
      variables: IssuesListEventsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/events/{event_id}";
      operationId: "issuesGetEvent";
      variables: IssuesGetEventVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}";
      operationId: "issuesGet";
      variables: IssuesGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}/comments";
      operationId: "issuesListComments";
      variables: IssuesListCommentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}/events";
      operationId: "issuesListEvents";
      variables: IssuesListEventsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}/labels";
      operationId: "issuesListLabelsOnIssue";
      variables: IssuesListLabelsOnIssueVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}/reactions";
      operationId: "reactionsListForIssue";
      variables: ReactionsListForIssueVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}/timeline";
      operationId: "issuesListEventsForTimeline";
      variables: IssuesListEventsForTimelineVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/keys";
      operationId: "reposListDeployKeys";
      variables: ReposListDeployKeysVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/keys/{key_id}";
      operationId: "reposGetDeployKey";
      variables: ReposGetDeployKeyVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/labels";
      operationId: "issuesListLabelsForRepo";
      variables: IssuesListLabelsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/labels/{name}";
      operationId: "issuesGetLabel";
      variables: IssuesGetLabelVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/languages";
      operationId: "reposListLanguages";
      variables: ReposListLanguagesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/license";
      operationId: "licensesGetForRepo";
      variables: LicensesGetForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/milestones";
      operationId: "issuesListMilestones";
      variables: IssuesListMilestonesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/milestones/{milestone_number}";
      operationId: "issuesGetMilestone";
      variables: IssuesGetMilestoneVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/milestones/{milestone_number}/labels";
      operationId: "issuesListLabelsForMilestone";
      variables: IssuesListLabelsForMilestoneVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/notifications";
      operationId: "activityListRepoNotificationsForAuthenticatedUser";
      variables: ActivityListRepoNotificationsForAuthenticatedUserVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages";
      operationId: "reposGetPages";
      variables: ReposGetPagesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages/builds";
      operationId: "reposListPagesBuilds";
      variables: ReposListPagesBuildsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages/builds/latest";
      operationId: "reposGetLatestPagesBuild";
      variables: ReposGetLatestPagesBuildVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages/builds/{build_id}";
      operationId: "reposGetPagesBuild";
      variables: ReposGetPagesBuildVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/projects";
      operationId: "projectsListForRepo";
      variables: ProjectsListForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls";
      operationId: "pullsList";
      variables: PullsListVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/comments";
      operationId: "pullsListReviewCommentsForRepo";
      variables: PullsListReviewCommentsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}";
      operationId: "pullsGetReviewComment";
      variables: PullsGetReviewCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions";
      operationId: "reactionsListForPullRequestReviewComment";
      variables: ReactionsListForPullRequestReviewCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}";
      operationId: "pullsGet";
      variables: PullsGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/comments";
      operationId: "pullsListReviewComments";
      variables: PullsListReviewCommentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/commits";
      operationId: "pullsListCommits";
      variables: PullsListCommitsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/files";
      operationId: "pullsListFiles";
      variables: PullsListFilesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/merge";
      operationId: "pullsCheckIfMerged";
      variables: PullsCheckIfMergedVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers";
      operationId: "pullsListRequestedReviewers";
      variables: PullsListRequestedReviewersVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews";
      operationId: "pullsListReviews";
      variables: PullsListReviewsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}";
      operationId: "pullsGetReview";
      variables: PullsGetReviewVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments";
      operationId: "pullsListCommentsForReview";
      variables: PullsListCommentsForReviewVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/readme";
      operationId: "reposGetReadme";
      variables: ReposGetReadmeVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/readme/{dir}";
      operationId: "reposGetReadmeFromAltPath";
      variables: ReposGetReadmeFromAltPathVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases";
      operationId: "reposListReleases";
      variables: ReposListReleasesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/assets/{asset_id}";
      operationId: "reposGetReleaseAsset";
      variables: ReposGetReleaseAssetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/latest";
      operationId: "reposGetLatestRelease";
      variables: ReposGetLatestReleaseVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/tags/{tag}";
      operationId: "reposGetReleaseByTag";
      variables: ReposGetReleaseByTagVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/{release_id}";
      operationId: "reposGetRelease";
      variables: ReposGetReleaseVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/{release_id}/assets";
      operationId: "reposListReleaseAssets";
      variables: ReposListReleaseAssetsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/secret-scanning/alerts";
      operationId: "secretScanningListAlertsForRepo";
      variables: SecretScanningListAlertsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}";
      operationId: "secretScanningGetAlert";
      variables: SecretScanningGetAlertVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stargazers";
      operationId: "activityListStargazersForRepo";
      variables: ActivityListStargazersForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/code_frequency";
      operationId: "reposGetCodeFrequencyStats";
      variables: ReposGetCodeFrequencyStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/commit_activity";
      operationId: "reposGetCommitActivityStats";
      variables: ReposGetCommitActivityStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/contributors";
      operationId: "reposGetContributorsStats";
      variables: ReposGetContributorsStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/participation";
      operationId: "reposGetParticipationStats";
      variables: ReposGetParticipationStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/punch_card";
      operationId: "reposGetPunchCardStats";
      variables: ReposGetPunchCardStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/subscribers";
      operationId: "activityListWatchersForRepo";
      variables: ActivityListWatchersForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/subscription";
      operationId: "activityGetRepoSubscription";
      variables: ActivityGetRepoSubscriptionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/tags";
      operationId: "reposListTags";
      variables: ReposListTagsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/tarball/{ref}";
      operationId: "reposDownloadTarballArchive";
      variables: ReposDownloadTarballArchiveVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/teams";
      operationId: "reposListTeams";
      variables: ReposListTeamsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/topics";
      operationId: "reposGetAllTopics";
      variables: ReposGetAllTopicsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/clones";
      operationId: "reposGetClones";
      variables: ReposGetClonesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/popular/paths";
      operationId: "reposGetTopPaths";
      variables: ReposGetTopPathsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/popular/referrers";
      operationId: "reposGetTopReferrers";
      variables: ReposGetTopReferrersVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/views";
      operationId: "reposGetViews";
      variables: ReposGetViewsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/vulnerability-alerts";
      operationId: "reposCheckVulnerabilityAlerts";
      variables: ReposCheckVulnerabilityAlertsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/zipball/{ref}";
      operationId: "reposDownloadZipballArchive";
      variables: ReposDownloadZipballArchiveVariables;
    }
  | {
      path: "/repositories";
      operationId: "reposListPublic";
      variables: ReposListPublicVariables;
    }
  | {
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets";
      operationId: "actionsListEnvironmentSecrets";
      variables: ActionsListEnvironmentSecretsVariables;
    }
  | {
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key";
      operationId: "actionsGetEnvironmentPublicKey";
      variables: ActionsGetEnvironmentPublicKeyVariables;
    }
  | {
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}";
      operationId: "actionsGetEnvironmentSecret";
      variables: ActionsGetEnvironmentSecretVariables;
    }
  | {
      path: "/scim/v2/enterprises/{enterprise}/Groups";
      operationId: "enterpriseAdminListProvisionedGroupsEnterprise";
      variables: EnterpriseAdminListProvisionedGroupsEnterpriseVariables;
    }
  | {
      path: "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}";
      operationId: "enterpriseAdminGetProvisioningInformationForEnterpriseGroup";
      variables: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupVariables;
    }
  | {
      path: "/scim/v2/enterprises/{enterprise}/Users";
      operationId: "enterpriseAdminListProvisionedIdentitiesEnterprise";
      variables: EnterpriseAdminListProvisionedIdentitiesEnterpriseVariables;
    }
  | {
      path: "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}";
      operationId: "enterpriseAdminGetProvisioningInformationForEnterpriseUser";
      variables: EnterpriseAdminGetProvisioningInformationForEnterpriseUserVariables;
    }
  | {
      path: "/scim/v2/organizations/{org}/Users";
      operationId: "scimListProvisionedIdentities";
      variables: ScimListProvisionedIdentitiesVariables;
    }
  | {
      path: "/scim/v2/organizations/{org}/Users/{scim_user_id}";
      operationId: "scimGetProvisioningInformationForUser";
      variables: ScimGetProvisioningInformationForUserVariables;
    }
  | {
      path: "/search/code";
      operationId: "searchCode";
      variables: SearchCodeVariables;
    }
  | {
      path: "/search/commits";
      operationId: "searchCommits";
      variables: SearchCommitsVariables;
    }
  | {
      path: "/search/issues";
      operationId: "searchIssuesAndPullRequests";
      variables: SearchIssuesAndPullRequestsVariables;
    }
  | {
      path: "/search/labels";
      operationId: "searchLabels";
      variables: SearchLabelsVariables;
    }
  | {
      path: "/search/repositories";
      operationId: "searchRepos";
      variables: SearchReposVariables;
    }
  | {
      path: "/search/topics";
      operationId: "searchTopics";
      variables: SearchTopicsVariables;
    }
  | {
      path: "/search/users";
      operationId: "searchUsers";
      variables: SearchUsersVariables;
    }
  | {
      path: "/teams/{team_id}";
      operationId: "teamsGetLegacy";
      variables: TeamsGetLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions";
      operationId: "teamsListDiscussionsLegacy";
      variables: TeamsListDiscussionsLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions/{discussion_number}";
      operationId: "teamsGetDiscussionLegacy";
      variables: TeamsGetDiscussionLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions/{discussion_number}/comments";
      operationId: "teamsListDiscussionCommentsLegacy";
      variables: TeamsListDiscussionCommentsLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}";
      operationId: "teamsGetDiscussionCommentLegacy";
      variables: TeamsGetDiscussionCommentLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions";
      operationId: "reactionsListForTeamDiscussionCommentLegacy";
      variables: ReactionsListForTeamDiscussionCommentLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions/{discussion_number}/reactions";
      operationId: "reactionsListForTeamDiscussionLegacy";
      variables: ReactionsListForTeamDiscussionLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/invitations";
      operationId: "teamsListPendingInvitationsLegacy";
      variables: TeamsListPendingInvitationsLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/members";
      operationId: "teamsListMembersLegacy";
      variables: TeamsListMembersLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/members/{username}";
      operationId: "teamsGetMemberLegacy";
      variables: TeamsGetMemberLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/memberships/{username}";
      operationId: "teamsGetMembershipForUserLegacy";
      variables: TeamsGetMembershipForUserLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/projects";
      operationId: "teamsListProjectsLegacy";
      variables: TeamsListProjectsLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/projects/{project_id}";
      operationId: "teamsCheckPermissionsForProjectLegacy";
      variables: TeamsCheckPermissionsForProjectLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/repos";
      operationId: "teamsListReposLegacy";
      variables: TeamsListReposLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/repos/{owner}/{repo}";
      operationId: "teamsCheckPermissionsForRepoLegacy";
      variables: TeamsCheckPermissionsForRepoLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/team-sync/group-mappings";
      operationId: "teamsListIdpGroupsForLegacy";
      variables: TeamsListIdpGroupsForLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/teams";
      operationId: "teamsListChildLegacy";
      variables: TeamsListChildLegacyVariables;
    }
  | {
      path: "/user";
      operationId: "usersGetAuthenticated";
      variables: UsersGetAuthenticatedVariables;
    }
  | {
      path: "/user/blocks";
      operationId: "usersListBlockedByAuthenticated";
      variables: UsersListBlockedByAuthenticatedVariables;
    }
  | {
      path: "/user/blocks/{username}";
      operationId: "usersCheckBlocked";
      variables: UsersCheckBlockedVariables;
    }
  | {
      path: "/user/emails";
      operationId: "usersListEmailsForAuthenticated";
      variables: UsersListEmailsForAuthenticatedVariables;
    }
  | {
      path: "/user/followers";
      operationId: "usersListFollowersForAuthenticatedUser";
      variables: UsersListFollowersForAuthenticatedUserVariables;
    }
  | {
      path: "/user/following";
      operationId: "usersListFollowedByAuthenticated";
      variables: UsersListFollowedByAuthenticatedVariables;
    }
  | {
      path: "/user/following/{username}";
      operationId: "usersCheckPersonIsFollowedByAuthenticated";
      variables: UsersCheckPersonIsFollowedByAuthenticatedVariables;
    }
  | {
      path: "/user/gpg_keys";
      operationId: "usersListGpgKeysForAuthenticated";
      variables: UsersListGpgKeysForAuthenticatedVariables;
    }
  | {
      path: "/user/gpg_keys/{gpg_key_id}";
      operationId: "usersGetGpgKeyForAuthenticated";
      variables: UsersGetGpgKeyForAuthenticatedVariables;
    }
  | {
      path: "/user/installations";
      operationId: "appsListInstallationsForAuthenticatedUser";
      variables: AppsListInstallationsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/installations/{installation_id}/repositories";
      operationId: "appsListInstallationReposForAuthenticatedUser";
      variables: AppsListInstallationReposForAuthenticatedUserVariables;
    }
  | {
      path: "/user/interaction-limits";
      operationId: "interactionsGetRestrictionsForAuthenticatedUser";
      variables: InteractionsGetRestrictionsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/issues";
      operationId: "issuesListForAuthenticatedUser";
      variables: IssuesListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/keys";
      operationId: "usersListPublicSshKeysForAuthenticated";
      variables: UsersListPublicSshKeysForAuthenticatedVariables;
    }
  | {
      path: "/user/keys/{key_id}";
      operationId: "usersGetPublicSshKeyForAuthenticated";
      variables: UsersGetPublicSshKeyForAuthenticatedVariables;
    }
  | {
      path: "/user/marketplace_purchases";
      operationId: "appsListSubscriptionsForAuthenticatedUser";
      variables: AppsListSubscriptionsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/marketplace_purchases/stubbed";
      operationId: "appsListSubscriptionsForAuthenticatedUserStubbed";
      variables: AppsListSubscriptionsForAuthenticatedUserStubbedVariables;
    }
  | {
      path: "/user/memberships/orgs";
      operationId: "orgsListMembershipsForAuthenticatedUser";
      variables: OrgsListMembershipsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/memberships/orgs/{org}";
      operationId: "orgsGetMembershipForAuthenticatedUser";
      variables: OrgsGetMembershipForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations";
      operationId: "migrationsListForAuthenticatedUser";
      variables: MigrationsListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations/{migration_id}";
      operationId: "migrationsGetStatusForAuthenticatedUser";
      variables: MigrationsGetStatusForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations/{migration_id}/archive";
      operationId: "migrationsGetArchiveForAuthenticatedUser";
      variables: MigrationsGetArchiveForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations/{migration_id}/repositories";
      operationId: "migrationsListReposForUser";
      variables: MigrationsListReposForUserVariables;
    }
  | {
      path: "/user/orgs";
      operationId: "orgsListForAuthenticatedUser";
      variables: OrgsListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/packages/{package_type}/{package_name}";
      operationId: "packagesGetPackageForAuthenticatedUser";
      variables: PackagesGetPackageForAuthenticatedUserVariables;
    }
  | {
      path: "/user/packages/{package_type}/{package_name}/versions";
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser";
      variables: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables;
    }
  | {
      path: "/user/packages/{package_type}/{package_name}/versions/{package_version_id}";
      operationId: "packagesGetPackageVersionForAuthenticatedUser";
      variables: PackagesGetPackageVersionForAuthenticatedUserVariables;
    }
  | {
      path: "/user/public_emails";
      operationId: "usersListPublicEmailsForAuthenticated";
      variables: UsersListPublicEmailsForAuthenticatedVariables;
    }
  | {
      path: "/user/repos";
      operationId: "reposListForAuthenticatedUser";
      variables: ReposListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/repository_invitations";
      operationId: "reposListInvitationsForAuthenticatedUser";
      variables: ReposListInvitationsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/starred";
      operationId: "activityListReposStarredByAuthenticatedUser";
      variables: ActivityListReposStarredByAuthenticatedUserVariables;
    }
  | {
      path: "/user/starred/{owner}/{repo}";
      operationId: "activityCheckRepoIsStarredByAuthenticatedUser";
      variables: ActivityCheckRepoIsStarredByAuthenticatedUserVariables;
    }
  | {
      path: "/user/subscriptions";
      operationId: "activityListWatchedReposForAuthenticatedUser";
      variables: ActivityListWatchedReposForAuthenticatedUserVariables;
    }
  | {
      path: "/user/teams";
      operationId: "teamsListForAuthenticatedUser";
      variables: TeamsListForAuthenticatedUserVariables;
    }
  | {
      path: "/users";
      operationId: "usersList";
      variables: UsersListVariables;
    }
  | {
      path: "/users/{username}";
      operationId: "usersGetByUsername";
      variables: UsersGetByUsernameVariables;
    }
  | {
      path: "/users/{username}/events";
      operationId: "activityListEventsForAuthenticatedUser";
      variables: ActivityListEventsForAuthenticatedUserVariables;
    }
  | {
      path: "/users/{username}/events/orgs/{org}";
      operationId: "activityListOrgEventsForAuthenticatedUser";
      variables: ActivityListOrgEventsForAuthenticatedUserVariables;
    }
  | {
      path: "/users/{username}/events/public";
      operationId: "activityListPublicEventsForUser";
      variables: ActivityListPublicEventsForUserVariables;
    }
  | {
      path: "/users/{username}/followers";
      operationId: "usersListFollowersForUser";
      variables: UsersListFollowersForUserVariables;
    }
  | {
      path: "/users/{username}/following";
      operationId: "usersListFollowingForUser";
      variables: UsersListFollowingForUserVariables;
    }
  | {
      path: "/users/{username}/following/{target_user}";
      operationId: "usersCheckFollowingForUser";
      variables: UsersCheckFollowingForUserVariables;
    }
  | {
      path: "/users/{username}/gists";
      operationId: "gistsListForUser";
      variables: GistsListForUserVariables;
    }
  | {
      path: "/users/{username}/gpg_keys";
      operationId: "usersListGpgKeysForUser";
      variables: UsersListGpgKeysForUserVariables;
    }
  | {
      path: "/users/{username}/hovercard";
      operationId: "usersGetContextForUser";
      variables: UsersGetContextForUserVariables;
    }
  | {
      path: "/users/{username}/installation";
      operationId: "appsGetUserInstallation";
      variables: AppsGetUserInstallationVariables;
    }
  | {
      path: "/users/{username}/keys";
      operationId: "usersListPublicKeysForUser";
      variables: UsersListPublicKeysForUserVariables;
    }
  | {
      path: "/users/{username}/orgs";
      operationId: "orgsListForUser";
      variables: OrgsListForUserVariables;
    }
  | {
      path: "/users/{username}/packages/{package_type}/{package_name}";
      operationId: "packagesGetPackageForUser";
      variables: PackagesGetPackageForUserVariables;
    }
  | {
      path: "/users/{username}/packages/{package_type}/{package_name}/versions";
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByUser";
      variables: PackagesGetAllPackageVersionsForPackageOwnedByUserVariables;
    }
  | {
      path: "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}";
      operationId: "packagesGetPackageVersionForUser";
      variables: PackagesGetPackageVersionForUserVariables;
    }
  | {
      path: "/users/{username}/projects";
      operationId: "projectsListForUser";
      variables: ProjectsListForUserVariables;
    }
  | {
      path: "/users/{username}/received_events";
      operationId: "activityListReceivedEventsForUser";
      variables: ActivityListReceivedEventsForUserVariables;
    }
  | {
      path: "/users/{username}/received_events/public";
      operationId: "activityListReceivedPublicEventsForUser";
      variables: ActivityListReceivedPublicEventsForUserVariables;
    }
  | {
      path: "/users/{username}/repos";
      operationId: "reposListForUser";
      variables: ReposListForUserVariables;
    }
  | {
      path: "/users/{username}/settings/billing/actions";
      operationId: "billingGetGithubActionsBillingUser";
      variables: BillingGetGithubActionsBillingUserVariables;
    }
  | {
      path: "/users/{username}/settings/billing/packages";
      operationId: "billingGetGithubPackagesBillingUser";
      variables: BillingGetGithubPackagesBillingUserVariables;
    }
  | {
      path: "/users/{username}/settings/billing/shared-storage";
      operationId: "billingGetSharedStorageBillingUser";
      variables: BillingGetSharedStorageBillingUserVariables;
    }
  | {
      path: "/users/{username}/starred";
      operationId: "activityListReposStarredByUser";
      variables: ActivityListReposStarredByUserVariables;
    }
  | {
      path: "/users/{username}/subscriptions";
      operationId: "activityListReposWatchedByUser";
      variables: ActivityListReposWatchedByUserVariables;
    }
  | {
      path: "/zen";
      operationId: "metaGetZen";
      variables: MetaGetZenVariables;
    };

--- End of openapi-codegen/examples/frontend/src/github/githubComponents.ts ---

--- Start of openapi-codegen/examples/frontend/src/github/githubParameters.ts ---
/**
 * Generated by @openapi-codegen
 *
 * @version 1.1.4
 */
import type * as Schemas from "./githubSchemas";

export type AccessToken = string;

export type AccountId = number;

export type Actor = string;

export type AlertNumber = Schemas.AlertNumber;

/**
 * @default false
 */
export type All = boolean;

export type AppSlug = string;

export type ArtifactId = number;

export type AssetId = number;

export type AuditLogAfter = string;

export type AuditLogBefore = string;

export type AuditLogInclude = "web" | "git" | "all";

export type AuditLogOrder = "desc" | "asc";

export type AuditLogPhrase = string;

export type AuthorizationId = number;

export type Before = string;

export type Branch = string;

export type CardId = number;

export type CheckName = string;

export type CheckRunId = number;

export type CheckSuiteId = number;

export type ClientId = string;

export type ColumnId = number;

export type CommentNumber = number;

export type CommentId = number;

export type CommitSha = string;

export type Count = number;

export type DeploymentId = number;

/**
 * @default desc
 */
export type Direction = "asc" | "desc";

export type DiscussionNumber = number;

export type Enterprise = string;

export type EnvironmentName = string;

export type Event = string;

export type GistId = string;

export type GitRef = Schemas.CodeScanningRef;

export type GpgKeyId = number;

export type GrantId = number;

export type HookId = number;

export type InstallationId = number;

export type InvitationId = number;

export type IssueNumber = number;

export type JobId = number;

export type KeyId = number;

export type Labels = string;

export type MigrationId = number;

export type MilestoneNumber = number;

/**
 * @default desc
 */
export type Order = "desc" | "asc";

export type Org = string;

export type OrgId = number;

export type Owner = string;

export type PackageName = string;

export type PackageType =
  | "npm"
  | "maven"
  | "rubygems"
  | "docker"
  | "nuget"
  | "container";

export type PackageVersionId = number;

/**
 * @default 1
 */
export type Page = number;

/**
 * @default false
 */
export type Participating = boolean;

/**
 * @default day
 */
export type Per = "" | "day" | "week";

/**
 * @default 30
 */
export type PerPage = number;

export type PlanId = number;

export type ProjectId = number;

export type PullNumber = number;

export type ReactionId = number;

export type ReleaseId = number;

export type Repo = string;

export type RepoName = string;

export type RepositoryId = number;

export type ReviewId = number;

export type RunId = number;

export type RunnerGroupId = number;

export type RunnerId = number;

export type ScimGroupId = string;

export type ScimUserId = string;

export type SecretName = string;

export type Since = string;

export type SinceOrg = number;

export type SinceRepo = number;

export type SinceUser = number;

/**
 * @default created
 */
export type Sort = "created" | "updated";

export type StartIndex = number;

export type Status = "queued" | "in_progress" | "completed";

export type TeamId = number;

export type TeamSlug = string;

export type ThreadId = number;

export type ToolGuid = Schemas.CodeScanningAnalysisToolGuid;

export type ToolName = Schemas.CodeScanningAnalysisToolName;

export type Username = string;

export type WorkflowId = number | string;

export type WorkflowRunBranch = string;

export type WorkflowRunStatus =
  | "completed"
  | "action_required"
  | "cancelled"
  | "failure"
  | "neutral"
  | "skipped"
  | "stale"
  | "success"
  | "timed_out"
  | "in_progress"
  | "queued"
  | "requested"
  | "waiting";

--- End of openapi-codegen/examples/frontend/src/github/githubParameters.ts ---

--- Start of openapi-codegen/examples/frontend/src/github/githubFetcher.ts ---
import { GithubContext } from "./githubContext";

const baseUrl = "https://api.github.com";

export type ErrorWrapper<TError> =
  | TError
  | { status: "unknown"; payload: string };

export type GithubFetcherOptions<TBody, THeaders, TQueryParams, TPathParams> = {
  url: string;
  method: string;
  body?: TBody;
  headers?: THeaders;
  queryParams?: TQueryParams;
  pathParams?: TPathParams;
} & GithubContext["fetcherOptions"];

export async function githubFetch<
  TData,
  TError,
  TBody extends {} | undefined | null,
  THeaders extends {},
  TQueryParams extends {},
  TPathParams extends {}
>({
  url,
  method,
  body,
  headers,
  pathParams,
  queryParams,
}: GithubFetcherOptions<
  TBody,
  THeaders,
  TQueryParams,
  TPathParams
>): Promise<TData> {
  try {
    const response = await window.fetch(
      `${baseUrl}${resolveUrl(url, queryParams, pathParams)}`,
      {
        method: method.toUpperCase(),
        body: body ? JSON.stringify(body) : undefined,
        headers: {
          "Content-Type": "application/json",
          ...headers,
        },
      }
    );
    if (!response.ok) {
      let error: ErrorWrapper<TError>;
      try {
        error = await response.json();
      } catch (e) {
        error = {
          status: "unknown" as const,
          payload:
            e instanceof Error
              ? `Unexpected error (${e.message})`
              : "Unexpected error",
        };
      }

      throw error;
    }

    if (response.headers.get("content-type")?.includes("json")) {
      return await response.json();
    } else {
      // if it is not a json response, assume it is a blob and cast it to TData
      return (await response.blob()) as unknown as TData;
    }
  } catch (e) {
    throw {
      status: "unknown" as const,
      payload:
        e instanceof Error ? `Network error (${e.message})` : "Network error",
    };
  }
}

const resolveUrl = (
  url: string,
  queryParams: Record<string, string> = {},
  pathParams: Record<string, string> = {}
) => {
  let query = new URLSearchParams(queryParams).toString();
  if (query) query = `?${query}`;
  return url.replace(/\{\w*\}/g, (key) => pathParams[key.slice(1, -1)]) + query;
};

--- End of openapi-codegen/examples/frontend/src/github/githubFetcher.ts ---

--- Start of openapi-codegen/examples/frontend/src/github/githubResponses.ts ---
/**
 * Generated by @openapi-codegen
 *
 * @version 1.1.4
 */
import type * as Schemas from "./githubSchemas";

export type BadRequest = Schemas.BasicError;

export type CodeScanningForbiddenRead = Schemas.BasicError;

export type CodeScanningForbiddenWrite = Schemas.BasicError;

export type Conflict = Schemas.BasicError;

export type Forbidden = Schemas.BasicError;

export type ForbiddenGist = {
  block?: {
    created_at?: string;
    html_url?: string | null;
    reason?: string;
  };
  documentation_url?: string;
  message?: string;
};

export type Found = void;

export type Gone = Schemas.BasicError;

export type InternalError = Schemas.BasicError;

export type MovedPermanently = void;

export type NotFound = Schemas.BasicError;

export type NotModified = void;

export type PreviewHeaderMissing = {
  documentation_url: string;
  message: string;
};

export type RequiresAuthentication = Schemas.BasicError;

export type ScimBadRequest = Schemas.ScimError;

export type ScimConflict = Schemas.ScimError;

export type ScimForbidden = Schemas.ScimError;

export type ScimInternalError = Schemas.ScimError;

export type ScimNotFound = Schemas.ScimError;

export type ServiceUnavailable = {
  code?: string;
  documentation_url?: string;
  message?: string;
};

export type ValidationFailed = Schemas.ValidationError;

export type ValidationFailedSimple = Schemas.ValidationErrorSimple;

--- End of openapi-codegen/examples/frontend/src/github/githubResponses.ts ---

--- Start of openapi-codegen/.github/workflows/tests.yaml ---
# Content omitted for convenience

--- End of openapi-codegen/.github/workflows/tests.yaml ---

--- Start of openapi-codegen/.github/workflows/release-please.yaml ---
# Content omitted for convenience

--- End of openapi-codegen/.github/workflows/release-please.yaml ---

